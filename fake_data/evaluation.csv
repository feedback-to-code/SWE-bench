id,command,problem_statement,issue_link,pr_link,patch,prediction,oracle_files,base_commit
45,python3 create_patchfiles.py 45,"Diagnosis key submission unit tests
Implement unit tests for the diagnosis key submission service according to best practices.
",https://github.com/corona-warn-app/cwa-server/issues/34,https://github.com/corona-warn-app/cwa-server/pull/45,"diff --git a/common/persistence/src/main/java/app/coronawarn/server/services/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/services/common/persistence/service/DiagnosisKeyService.java
--- a/common/persistence/src/main/java/app/coronawarn/server/services/common/persistence/service/DiagnosisKeyService.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/services/common/persistence/service/DiagnosisKeyService.java
@@ -13,16 +13,12 @@ public class DiagnosisKeyService {
   private DiagnosisKeyRepository keyRepository;
 
   /**
-   * Persists the specified collection of {@link DiagnosisKey} instances. Use the returned
-   * collection for further operations as the saveDiagnosisKeys operation might have changed the
-   * {@link DiagnosisKey} instances completely.
+   * Persists the specified collection of {@link DiagnosisKey} instances.
    *
    * @param diagnosisKeys must not contain {@literal null}.
-   * @return a collection of the saved keys; will never contain {@literal null}.
    * @throws IllegalArgumentException in case the given collection contains {@literal null}.
    */
-  public Collection<DiagnosisKey> saveDiagnosisKeys(
-      Collection<DiagnosisKey> diagnosisKeys) {
-    return keyRepository.saveAll(diagnosisKeys);
+  public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {
+    keyRepository.saveAll(diagnosisKeys);
   }
 }
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
@@ -1,23 +1,22 @@
 package app.coronawarn.server.services.submission.controller;
 
-import java.util.Collection;
-import java.util.Collections;
-import java.util.stream.Collectors;
 import app.coronawarn.server.common.protocols.generated.ExposureKeys.TemporaryExposureKey;
 import app.coronawarn.server.services.common.persistence.domain.DiagnosisKey;
 import app.coronawarn.server.services.common.persistence.service.DiagnosisKeyService;
 import app.coronawarn.server.services.submission.verification.TanVerifier;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.stream.Collectors;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-// TODO Implement Unit Tests
 @RestController
 @RequestMapping(""/version/v1"")
 public class SubmissionController {
@@ -34,9 +33,8 @@ public ResponseEntity<String> hello() {
   }
 
   // TODO update protoSpec and endpoint to Collection<TemporaryExposureKey>
-  @PostMapping(value = ""/diagnosis-keys/country/{country}"")
-  public ResponseEntity<String> submitDiagnosisKey(
-      @PathVariable String country,
+  @PostMapping(value = ""/diagnosis-keys"")
+  public ResponseEntity<Void> submitDiagnosisKey(
       @RequestBody TemporaryExposureKey exposureKeys,
       @RequestHeader(value = ""cwa-fake"") Integer fake,
       @RequestHeader(value = ""cwa-authorization"") String tan) {
@@ -56,15 +54,14 @@ public ResponseEntity<String> submitDiagnosisKey(
   /**
    * @return A response that indicates that an invalid TAN was specified in the request.
    */
-  private ResponseEntity<String> buildTanInvalidResponseEntity() {
-    // TODO implement
-    return null;
+  private ResponseEntity<Void> buildTanInvalidResponseEntity() {
+    return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
   }
 
   /**
    * @return A response that indicates successful request processing.
    */
-  private ResponseEntity<String> buildSuccessResponseEntity() {
+  private ResponseEntity<Void> buildSuccessResponseEntity() {
     return ResponseEntity.ok().build();
   }
 
diff --git a/services/submission/src/main/resources/application.properties b/services/submission/src/main/resources/application.properties
--- a/services/submission/src/main/resources/application.properties
+++ b/services/submission/src/main/resources/application.properties
@@ -1,3 +1,3 @@
 logging.level.org.springframework.web=DEBUG
-spring.jpa.hibernate.ddl-auto = create
+spring.jpa.hibernate.ddl-auto=create
 spring.flyway.enabled=false
","
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
@@ -21,6 +21,7 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
@@ -30,6 +31,7 @@
 import app.coronawarn.server.services.common.persistence.domain.DiagnosisKey;
 import app.coronawarn.server.services.common.persistence.service.DiagnosisKeyService;
 import app.coronawarn.server.services.submission.verification.TanVerifier;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.stream.Collectors;
 import app.coronawarn.server.common.protocols.generated.ExposureKeys.TemporaryExposureKey;
@@ -56,6 +58,7 @@
    * @return A response that indicates successful request processing.
    */
   private ResponseEntity<String> buildSuccessResponseEntity() {
+    // TODO implement
     return ResponseEntity.ok().build();
   }
 
@@ -73,6 +76,7 @@
    * @throws IllegalArgumentException in case the given collection contains {@literal null}.
    */
   private void persistDiagnosisKeysPayload(
+      @RequestBody Collection<TemporaryExposureKey> protoBufDiagnosisKeys) {
     Collection<DiagnosisKey> diagnosisKeys = protoBufDiagnosisKeys.stream()
         .map(aProtoBufKey -> DiagnosisKey.builder().fromProtoBuf(aProtoBufKey).build())
         .collect(Collectors.toList());
","['README.md', 'common/persistence/src/main/java/app/coronawarn/server/services/common/persistence/service/DiagnosisKeyService.java', 'services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java', 'services/submission/src/main/resources/application.properties']",e8ca246da1ab3620b6340383d4a59fe2041af562
135,python3 create_patchfiles.py 135,"Submission Service: Enable waiting for Fake Requests
When fake requests are send to the submission service, ensure that the duration of the fake requests take as long as normal requests, so attackers sniffing the traffic are unable to distinguish between fake/normal requests.
",https://github.com/corona-warn-app/cwa-server/issues/109,https://github.com/corona-warn-app/cwa-server/pull/135,"diff --git a/services/submission/pom.xml b/services/submission/pom.xml
--- a/services/submission/pom.xml
+++ b/services/submission/pom.xml
@@ -22,6 +22,12 @@
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-starter-security</artifactId>
     </dependency>
+    <dependency>
+      <groupId>org.apache.commons</groupId>
+      <artifactId>commons-math3</artifactId>
+      <version>3.2</version>
+      <scope>compile</scope>
+    </dependency>
   </dependencies>
 
 </project>
\ No newline at end of file
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
@@ -5,15 +5,23 @@
 import app.coronawarn.server.common.protocols.internal.SubmissionPayload;
 import app.coronawarn.server.services.submission.verification.TanVerifier;
 import java.util.Collection;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ForkJoinPool;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
+import org.apache.commons.math3.distribution.PoissonDistribution;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.util.StopWatch;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.context.request.async.DeferredResult;
 
 @RestController
 @RequestMapping(""/version/v1"")
@@ -24,27 +32,57 @@ public class SubmissionController {
    */
   public static final String SUBMISSION_ROUTE = ""/diagnosis-keys"";
 
+  @Value(""${services.submission.fake_delay_moving_average_samples}"")
+  private Double fakeDelayMovingAverageSamples;
+
+  // Exponential moving average of the last N real request durations (in ms), where
+  // N = fakeDelayMovingAverageSamples.
+  @Value(""${services.submission.initial_fake_delay_milliseconds}"")
+  private Double fakeDelay;
+
   @Autowired
   private DiagnosisKeyService diagnosisKeyService;
 
   @Autowired
   private TanVerifier tanVerifier;
 
+  private ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();
+  private ForkJoinPool forkJoinPool = ForkJoinPool.commonPool();
+
   @PostMapping(SUBMISSION_ROUTE)
-  public ResponseEntity<Void> submitDiagnosisKey(
+  public DeferredResult<ResponseEntity<Void>> submitDiagnosisKey(
       @RequestBody SubmissionPayload exposureKeys,
       @RequestHeader(value = ""cwa-fake"") Integer fake,
       @RequestHeader(value = ""cwa-authorization"") String tan) {
+    final DeferredResult<ResponseEntity<Void>> deferredResult = new DeferredResult<>();
     if (fake != 0) {
-      return buildSuccessResponseEntity();
-    }
-    if (!this.tanVerifier.verifyTan(tan)) {
-      return buildTanInvalidResponseEntity();
+      setFakeDeferredResult(deferredResult);
+    } else {
+      setRealDeferredResult(deferredResult, exposureKeys, tan);
     }
+    return deferredResult;
+  }
 
-    persistDiagnosisKeysPayload(exposureKeys);
+  private void setFakeDeferredResult(DeferredResult<ResponseEntity<Void>> deferredResult) {
+    long delay = new PoissonDistribution(fakeDelay).sample();
+    scheduledExecutor.schedule(() -> deferredResult.setResult(buildSuccessResponseEntity()),
+        delay, TimeUnit.MILLISECONDS);
+  }
 
-    return buildSuccessResponseEntity();
+  private void setRealDeferredResult(DeferredResult<ResponseEntity<Void>> deferredResult,
+      SubmissionPayload exposureKeys, String tan) {
+    forkJoinPool.submit(() -> {
+      StopWatch stopWatch = new StopWatch();
+      stopWatch.start();
+      if (!this.tanVerifier.verifyTan(tan)) {
+        deferredResult.setResult(buildTanInvalidResponseEntity());
+      } else {
+        persistDiagnosisKeysPayload(exposureKeys);
+        deferredResult.setResult(buildSuccessResponseEntity());
+      }
+      stopWatch.stop();
+      updateFakeDelay(stopWatch.getTotalTimeMillis());
+    });
   }
 
   /**
@@ -74,4 +112,8 @@ private void persistDiagnosisKeysPayload(SubmissionPayload protoBufDiagnosisKeys
 
     this.diagnosisKeyService.saveDiagnosisKeys(diagnosisKeys);
   }
+
+  private synchronized void updateFakeDelay(long realRequestDuration) {
+    fakeDelay = fakeDelay + (1 / fakeDelayMovingAverageSamples) * (realRequestDuration - fakeDelay);
+  }
 }
diff --git a/services/submission/src/main/resources/application.properties b/services/submission/src/main/resources/application.properties
--- a/services/submission/src/main/resources/application.properties
+++ b/services/submission/src/main/resources/application.properties
@@ -1,5 +1,10 @@
 logging.level.org.springframework.web=INFO
 
+# The initial value of the moving average for fake request delays.
+services.submission.initial_fake_delay_milliseconds=10
+# The number of samples for the calculation of the moving average for fake request delays.
+services.submission.fake_delay_moving_average_samples=10
+
 spring.flyway.locations=classpath:db/migration/h2
 spring.flyway.enabled=true
 spring.jpa.hibernate.ddl-auto=validate
","
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
@@ -34,7 +34,7 @@
   public ResponseEntity<Void> submitDiagnosisKey(
       @RequestBody SubmissionPayload exposureKeys,
       @RequestHeader(value = ""cwa-fake"") Integer fake,
-      @RequestHeader(value = ""cwa-authorization"") String tan) {
+      @RequestHeader(value = ""cwa-authorization"", required = false) String tan) {
     if (fake != 0) {
       return buildSuccessResponseEntity();
     }
","['README.md', 'services/submission/pom.xml', 'services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java', 'services/submission/src/main/resources/application.properties']",8655863c4c989c437ad9b5ef84c7e2afb699be8d
652,python3 create_patchfiles.py 652,"Validate that no attributes are missing in .yaml
validate that no attributes are missing in .yaml when accordingly re-enable the ``ScoreNegative`` test case in:
https://github.com/corona-warn-app/cwa-server/blob/master/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java

Note: the validation probably should be done on the loading the values from yaml into a proto object, since validating directly on the resulting proto object is too late as the default value for an unloaded attribute in proto is 0 which we consider as a valid value (or risk score in the allowed range of 0-8)

See PR which disabled the test: https://github.com/corona-warn-app/cwa-server/pull/299
",https://github.com/corona-warn-app/cwa-server/issues/320,https://github.com/corona-warn-app/cwa-server/pull/652,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java
@@ -79,7 +79,6 @@ public enum ErrorType {
     VALUE_OUT_OF_BOUNDS,
     INVALID_URL,
     INVALID_PARTITIONING,
-    TOO_MANY_DECIMAL_PLACES,
-    MISSING_ENTRY
+    TOO_MANY_DECIMAL_PLACES
   }
 }
","
--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java
+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java
@@ -1,6 +1,7 @@
 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
 
 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationError.ErrorType.MISSING_ENTRY;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;
 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters.RiskScoreClassification;
@@ -25,6 +26,7 @@ import java.util.Set;
 import org.junit.jupiter.api.Test;
 
 class ExposureConfigurationValidatorTest {
+
   private static final int MIN_RISK_SCORE = 0;
   private static final int MAX_RISK_SCORE = 8;
 
@@ -36,6 +38,7 @@ class ExposureConfigurationValidatorTest {
 
   @Test
   void testScoreNegative() {
+    assertThat(validator.validateScoreNegative(createExposureConfiguration())).isEmpty();
   }
 
   @Test
","['README.md', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java']",ac86a35d9c4a40d55315ce50052ea0e4a64f036e
106,python3 create_patchfiles.py 106,"Set Retention Days to 14
Any key data that is associated to a point in time older than 14 days shall be removed from the database and will also be removed from the CDN and therefore the index file.
",https://github.com/corona-warn-app/cwa-server/issues/5,https://github.com/corona-warn-app/cwa-server/pull/106,"diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java
@@ -1,9 +1,18 @@
 package app.coronawarn.server.common.persistence.repository;
 
 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
+import javax.transaction.Transactional;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
 @Repository
 public interface DiagnosisKeyRepository extends JpaRepository<DiagnosisKey, Long> {
+
+  /**
+   * Deletes all entries that have a submission timestamp lesser or equal to the specified one.
+   *
+   * @param submissionTimestamp the submission timestamp up to which entries will be deleted.
+   */
+  @Transactional
+  public void deleteBySubmissionTimestampIsLessThanEqual(long submissionTimestamp);
 }
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
@@ -1,7 +1,11 @@
 package app.coronawarn.server.common.persistence.service;
 
+import static java.time.ZoneOffset.UTC;
+
 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
 import app.coronawarn.server.common.persistence.repository.DiagnosisKeyRepository;
+import java.time.Instant;
+import java.time.LocalDateTime;
 import java.util.Collection;
 import java.util.List;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -30,4 +34,18 @@ public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {
   public List<DiagnosisKey> getDiagnosisKeys() {
     return keyRepository.findAll(Sort.by(Sort.Direction.ASC, ""submissionTimestamp""));
   }
+
+  /**
+   * Deletes all diagnosis key entries which have a submission timestamp that is older than the
+   * specified number of days.
+   *
+   * @param daysToRetain the number of days until which diagnosis keys will be retained.
+   */
+  public void applyRetentionPolicy(int daysToRetain) {
+    long threshold = LocalDateTime
+        .ofInstant(Instant.now(), UTC)
+        .minusDays(daysToRetain)
+        .toEpochSecond(UTC) / 3600L;
+    keyRepository.deleteBySubmissionTimestampIsLessThanEqual(threshold);
+  }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java
@@ -24,7 +24,7 @@
 import org.springframework.stereotype.Component;
 
 @Component
-@Order(2)
+@Order(3)
 /**
  * This runner retrieves stored diagnosis keys, the generates and persists the respective diagnosis
  * key bundles.
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/ExposureConfigurationDistributionRunner.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/ExposureConfigurationDistributionRunner.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/ExposureConfigurationDistributionRunner.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/ExposureConfigurationDistributionRunner.java
@@ -23,7 +23,7 @@
 import org.springframework.stereotype.Component;
 
 @Component
-@Order(1)
+@Order(2)
 /**
  * Reads the exposure configuration parameters from the respective file in the class path, then
  * generates and persists the respective exposure configuration bundle.
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicyRunner.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicyRunner.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicyRunner.java
@@ -0,0 +1,37 @@
+package app.coronawarn.server.services.distribution.runner;
+
+import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.ApplicationArguments;
+import org.springframework.boot.ApplicationRunner;
+import org.springframework.core.annotation.Order;
+import org.springframework.stereotype.Component;
+
+/**
+ * This runner removes any diagnosis keys from the database that were submitted before a configured
+ * threshold of days.
+ */
+@Component
+@Order(1)
+public class RetentionPolicyRunner implements ApplicationRunner {
+
+  private static final Logger logger = LoggerFactory
+      .getLogger(RetentionPolicyRunner.class);
+
+  @Autowired
+  private DiagnosisKeyService diagnosisKeyService;
+
+  @Value(""${app.coronawarn.server.services.distribution.retention_days}"")
+  private Integer rententionDays;
+
+  @Override
+  public void run(ApplicationArguments args) {
+    diagnosisKeyService.applyRetentionPolicy(rententionDays);
+
+    logger.debug(""Retention policy applied successfully. Deleted all entries older that {} days."",
+        rententionDays);
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3DistributionRunner.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3DistributionRunner.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3DistributionRunner.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3DistributionRunner.java
@@ -16,7 +16,7 @@
  * This runner will sync the base working directory to the S3.
  */
 @Component
-@Order(3)
+@Order(4)
 public class S3DistributionRunner implements ApplicationRunner {
 
   private Logger logger = LoggerFactory.getLogger(this.getClass());
diff --git a/services/distribution/src/main/resources/application.properties b/services/distribution/src/main/resources/application.properties
--- a/services/distribution/src/main/resources/application.properties
+++ b/services/distribution/src/main/resources/application.properties
@@ -2,6 +2,7 @@ logging.level.org.springframework.web=INFO
 logging.level.app.coronawarn=INFO
 spring.main.web-application-type=NONE
 
+app.coronawarn.server.services.distribution.retention_days=14
 app.coronawarn.server.services.distribution.version=v1
 app.coronawarn.server.services.distribution.paths.output=out
 app.coronawarn.server.services.distribution.paths.privatekey=classpath:certificates/client/private.pem
","
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java
@@ -32,6 +32,7 @@
 import app.coronawarn.server.services.distribution.structure.directory.IndexDirectoryImpl;
 import app.coronawarn.server.services.distribution.structure.directory.decorator.IndexingDecorator;
 import app.coronawarn.server.services.distribution.structure.util.ImmutableStack;
+import java.time.LocalDate;
 import java.io.File;
 import java.io.IOException;
 import java.util.Collection;
@@ -54,7 +55,7 @@
   public void run(ApplicationArguments args) throws IOException {
     Collection<DiagnosisKey> diagnosisKeys = diagnosisKeyService.getDiagnosisKeys();
 
-    DiagnosisKeysDirectoryImpl diagnosisKeysDirectory =
+    DiagnosisKeysDirectoryImpl diagnosisKeysDirectory = new DiagnosisKeysDirectoryImpl(
         diagnosisKeys, cryptoProvider);
 
     IndexDirectory<?> versionDirectory =
@@ -62,6 +63,7 @@
         new IndexDirectoryImpl<>(VERSION_DIRECTORY, __ -> Set.of(version), Object::toString);
 
     versionDirectory.addDirectoryToAll(__ -> diagnosisKeysDirectory);
+    versionDirectory.addDirectoryToAll(__ -> new IndexDirectoryImpl<>(LocalDate.now().toString(), __ -> Set.of(LocalDate.now().toString()), Object::toString));
 
     java.io.File outputDirectory = new File(outputPath);
     clearDirectory(outputDirectory);
","['README.md', '/dev/null', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/ExposureConfigurationDistributionRunner.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3DistributionRunner.java', 'services/distribution/src/main/resources/application.properties']",23b492fe7b9f0821f2a8c34516cb858efcfaa55b
350,python3 create_patchfiles.py 350,"Blank URL in RiskScoreClassificationValidator
In `app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidator#validateUrl` [(link to source code)](https://github.com/corona-warn-app/cwa-server/blob/63dda0c2a5e1ff09fe998dd05637d76dea2e3833/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java#L89) an empty URL does not lead to an error. This is not in line with e.g. validation of a label. In case the label is blank, an error is added. Maybe you can check that this is implemented as intended.
",https://github.com/corona-warn-app/cwa-server/issues/341,https://github.com/corona-warn-app/cwa-server/pull/350,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java
@@ -87,12 +87,10 @@ private void validateRiskScoreValueBounds(int value) {
   }
 
   private void validateUrl(String url) {
-    if (!url.isBlank()) {
-      try {
-        new URL(url);
-      } catch (MalformedURLException e) {
-        errors.add(new RiskScoreClassificationValidationError(""url"", url, INVALID_URL));
-      }
+    try {
+      new URL(url.trim());
+    } catch (MalformedURLException e) {
+      errors.add(new RiskScoreClassificationValidationError(""url"", url, INVALID_URL));
     }
   }
 
","
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java
@@ -78,7 +78,7 @@
    * @param label The label to validate.
    */
   private void validateLabel(String label) {
-    if (label.isBlank()) {
+    if (label == null || label.isBlank()) {
       errors.add(new RiskScoreClassificationValidationError(""label"", label, BLANK_LABEL));
     }
   }
","['README.md', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java']",8d8a0a5e16bc252364812017a85418b054d739f7
642,python3 create_patchfiles.py 642,"[MINOR] Incorrect value range in attenuation risk parameter
## Describe the bug
The `AttenuationRiskParameters` proto message (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto)) is defined as follows:
```proto3
message AttenuationRiskParameters {
  RiskLevel gt_73_dbm = 1;            // A > 73 dBm, lowest risk
  RiskLevel gt_63_le_73_dbm = 2;      // 63 < A <= 73 dBm
  RiskLevel gt_51_le_63_dbm = 3;      // 51 < A <= 63 dBm
  RiskLevel gt_33_le_51_dbm = 4;      // 33 < A <= 51 dBm
  RiskLevel gt_27_le_33_dbm = 5;      // 27 < A <= 33 dBm
  RiskLevel gt_15_le_27_dbm = 6;      // 15 < A <= 27 dBm
  RiskLevel gt_10_le_15_dbm = 7;      // 10 < A <= 15 dBm
  RiskLevel lt_10_dbm = 8;            // A <= 10 dBm, highest risk
}
```

There is no value range that includes an attenuation of **exactly** 10dBm.

## Expected behaviour
According to the [Google/Apple spec](https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration), the last value range should be ""less than or equal to 10dBm"" (`le_10_dbm`):

![image](https://user-images.githubusercontent.com/8984460/86034663-57f91580-ba3b-11ea-9444-e5020e6dcc46.png)

## Possible Fix
- Correct the last attenuation value range according to spec
- Update dependent code/configuration respectively ([here](https://github.com/corona-warn-app/cwa-server/blob/b8afdce9a3bc8fd927fe4ec9be2e910ee8f1635d/services/distribution/src/test/resources/objectstore/publisher/examplefile), [here](https://github.com/corona-warn-app/cwa-server/tree/b8afdce9a3bc8fd927fe4ec9be2e910ee8f1635d/services/distribution/src/test/resources/parameters), [here](https://github.com/corona-warn-app/cwa-server/tree/d6c0ad58f6473bd55af9a0cbe2c0cc8db3914af6/services/distribution/src/main/resources/master-config) and possibly more).

## Additional context
- This ""bug"" doesn't have any technical implications and should only be fixed for consistency
- Downwards-compatibility of the proto messages should not be infringed by the proposed change
",https://github.com/corona-warn-app/cwa-server/issues/638,https://github.com/corona-warn-app/cwa-server/pull/642,"diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto
--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto
+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto
@@ -59,6 +59,6 @@ message RiskScoreParameters {
     RiskLevel gt_27_le_33_dbm = 5;      // 27 < A <= 33 dBm
     RiskLevel gt_15_le_27_dbm = 6;      // 15 < A <= 27 dBm
     RiskLevel gt_10_le_15_dbm = 7;      // 10 < A <= 15 dBm
-    RiskLevel lt_10_dbm = 8;            // A <= 10 dBm, highest risk
+    RiskLevel le_10_dbm = 8;            // A <= 10 dBm, highest risk
   }
-}
\ No newline at end of file
+}
diff --git a/services/distribution/src/main/resources/master-config/exposure-config.yaml b/services/distribution/src/main/resources/master-config/exposure-config.yaml
--- a/services/distribution/src/main/resources/master-config/exposure-config.yaml
+++ b/services/distribution/src/main/resources/master-config/exposure-config.yaml
@@ -55,4 +55,4 @@ attenuation:
   gt_27_le_33_dbm: 1
   gt_15_le_27_dbm: 1
   gt_10_le_15_dbm: 1
-  lt_10_dbm: 1
+  le_10_dbm: 1
","
--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto
+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto
@@ -61,7 +61,7 @@
     RiskLevel gt_15_le_27_dbm = 6;      // 15 < A <= 27 dBm
     RiskLevel gt_10_le_15_dbm = 7;      // 10 < A <= 15 dBm
     RiskLevel lt_10_dbm = 8;            // A <= 10 dBm, highest risk
-}
+  RiskLevel le_10_dbm = 9;            // A <= 10 dBm, highest risk
+}
","['README.md', 'common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto', 'services/distribution/src/main/resources/master-config/exposure-config.yaml']",fa9adc6631233172684910191efdf00429799365
299,python3 create_patchfiles.py 299,"RKI: Adjust Risk Score Parameters in master config
RKI decided for the following risk score parameter values:

```
1       2       3       4       5       6       7       8 // Bucket No.
----------------------------------------------------------
0       1       2       4       5       7       8       8 // Duration
0       0       1       2       5       7       8       8 // Attenuation
1       1       1       1       2       6       8       6 // Days
1       2       3       4       5       6       7       8 // Transmission Risk 
```

",https://github.com/corona-warn-app/cwa-server/issues/298,https://github.com/corona-warn-app/cwa-server/pull/299,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java
@@ -82,7 +82,7 @@ private void validateScore(
     try {
       RiskLevel level = (RiskLevel) propertyDescriptor.getReadMethod().invoke(object);
 
-      if (level == RiskLevel.UNRECOGNIZED || level == RiskLevel.RISK_LEVEL_UNSPECIFIED) {
+      if (level == RiskLevel.UNRECOGNIZED) {
         this.errors.add(new RiskLevelValidationError(parameter, propertyDescriptor.getName()));
       }
     } catch (IllegalAccessException | InvocationTargetException e) {
diff --git a/services/distribution/src/main/resources/master-config/exposure-config.yaml b/services/distribution/src/main/resources/master-config/exposure-config.yaml
--- a/services/distribution/src/main/resources/master-config/exposure-config.yaml
+++ b/services/distribution/src/main/resources/master-config/exposure-config.yaml
@@ -2,7 +2,7 @@
 # Change this file with caution.
 #
 # Weights must be in range of 0.001 to 100
-# Parameter Scores must be in range of 1 to 8.
+# Parameter Scores must be in range of 0 to 8.
 #
 # Further documentation:
 # https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration
@@ -28,31 +28,31 @@ transmission:
   app_defined_8: 8
 
 duration:
-  eq_0_min: 1
-  gt_0_le_5_min: 2
-  gt_5_le_10_min: 3
+  eq_0_min: 0
+  gt_0_le_5_min: 1
+  gt_5_le_10_min: 2
   gt_10_le_15_min: 4
   gt_15_le_20_min: 5
-  gt_20_le_25_min: 6
-  gt_25_le_30_min: 7
+  gt_20_le_25_min: 7
+  gt_25_le_30_min: 8
   gt_30_min: 8
 
 days_since_last_exposure:
   ge_14_days: 1
-  ge_12_lt_14_days: 2
-  ge_10_lt_12_days: 3
-  ge_8_lt_10_days: 4
-  ge_6_lt_8_days: 5
+  ge_12_lt_14_days: 1
+  ge_10_lt_12_days: 1
+  ge_8_lt_10_days: 1
+  ge_6_lt_8_days: 2
   ge_4_lt_6_days: 6
-  ge_2_lt_4_days: 7
-  ge_0_lt_2_days: 8
+  ge_2_lt_4_days: 8
+  ge_0_lt_2_days: 6
 
 attenuation:
-  gt_73_dbm: 1
-  gt_63_le_73_dbm: 2
-  gt_51_le_63_dbm: 3
-  gt_33_le_51_dbm: 4
+  gt_73_dbm: 0
+  gt_63_le_73_dbm: 0
+  gt_51_le_63_dbm: 1
+  gt_33_le_51_dbm: 2
   gt_27_le_33_dbm: 5
-  gt_15_le_27_dbm: 6
-  gt_10_le_15_dbm: 7
-  lt_10_dbm: 8
\ No newline at end of file
+  gt_15_le_27_dbm: 7
+  gt_10_le_15_dbm: 8
+  lt_10_dbm: 8
","
--- a/services/distribution/src/main/resources/master-config/exposure-config.yaml
+++ b/services/distribution/src/main/resources/master-config/exposure-config.yaml
@@ -13,9 +13,9 @@
 duration_weight: 50
 attenuation_weight: 50
 days_weight: 20
 
 # Parameters Section
-transmission:
-  app_defined_1: 1
-  app_defined_2: 2
-  app_defined_3: 3
-  app_defined_4: 4
-  app_defined_5: 5
-  app_defined_6: 6
-  app_defined_7: 7
-  app_defined_8: 8
+transmission:
+  app_defined_1: 0
+  app_defined_2: 1
+  app_defined_3: 2
+  app_defined_4: 4
+  app_defined_5: 5
+  app_defined_6: 7
+  app_defined_7: 8
+  app_defined_8: 8
 duration:
   eq_0_min: 0
   gt_0_le_5_min: 1
   gt_5_le_10_min: 2
   gt_10_le_15_min: 4
   gt_15_le_20_min: 5
   gt_20_le_25_min: 7
   gt_25_le_30_min: 8
   gt_30_min: 8
 days_since_last_exposure:
   ge_14_days: 1
   ge_12_lt_14_days: 2
   ge_10_lt_12_days: 3
   ge_8_lt_10_days: 4
   ge_6_lt_8_days: 5
   ge_4_lt_6_days: 7
   ge_2_lt_4_days: 8
   ge_0_lt_2_days: 8
 attenuation:
   gt_73_dbm: 1
   gt_63_le_73_dbm: 2
   gt_51_le_63_dbm: 3
   gt_33_le_51_dbm: 4
   gt_27_le_33_dbm: 5
   gt_15_le_27_dbm: 6
   gt_10_le_15_dbm: 7
   lt_10_dbm: 8
","['README.md', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java', 'services/distribution/src/main/resources/master-config/exposure-config.yaml']",c5991b2fcb894aa4a8eec41c51a2f2cc366a13b5
349,python3 create_patchfiles.py 349,"S3Publisher should set Cache Control Headers
The S3Publisher is currently not setting Cache Control Headers. We should cache-control: public, maxage=N

N depends on the type of file:
- for hours index files, it should be rather low (5 minutes)
- for days index files, it should be higher (2 hours)
- for all generated aggregate files, it should be 24 hours

E-Tag should already been set, but should also be verified.
",https://github.com/corona-warn-app/cwa-server/issues/149,https://github.com/corona-warn-app/cwa-server/pull/349,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java
@@ -20,19 +20,17 @@
 package app.coronawarn.server.services.distribution.objectstore;
 
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
-import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;
 import app.coronawarn.server.services.distribution.objectstore.publish.LocalFile;
 import io.minio.MinioClient;
 import io.minio.PutObjectOptions;
 import io.minio.Result;
-import io.minio.errors.InvalidEndpointException;
-import io.minio.errors.InvalidPortException;
 import io.minio.errors.MinioException;
 import io.minio.messages.DeleteError;
 import io.minio.messages.Item;
 import java.io.IOException;
 import java.security.GeneralSecurityException;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
@@ -58,7 +56,11 @@ public class ObjectStoreAccess {
 
   private static final Logger logger = LoggerFactory.getLogger(ObjectStoreAccess.class);
 
-  private static final String DEFAULT_REGION = ""eu-west-1"";
+  /**
+   * Specifies the default maximum amount of time in seconds that a published resource can be considered ""fresh"" when
+   * held in a cache.
+   */
+  public static final int DEFAULT_MAX_CACHE_AGE = 300;
 
   private final boolean isSetPublicReadAclOnPutObject;
 
@@ -71,14 +73,14 @@ public class ObjectStoreAccess {
    * bucket.
    *
    * @param distributionServiceConfig The config properties
+   * @param minioClient               The client used for interaction with the object store
    * @throws IOException              When there were problems creating the S3 client
    * @throws GeneralSecurityException When there were problems creating the S3 client
    * @throws MinioException           When there were problems creating the S3 client
    */
-  ObjectStoreAccess(DistributionServiceConfig distributionServiceConfig)
+  ObjectStoreAccess(DistributionServiceConfig distributionServiceConfig, MinioClient minioClient)
       throws IOException, GeneralSecurityException, MinioException {
-    this.client = createClient(distributionServiceConfig.getObjectStore());
-
+    this.client = minioClient;
     this.bucket = distributionServiceConfig.getObjectStore().getBucket();
     this.isSetPublicReadAclOnPutObject = distributionServiceConfig.getObjectStore().isSetPublicReadAclOnPutObject();
 
@@ -87,38 +89,25 @@ public class ObjectStoreAccess {
     }
   }
 
-  private MinioClient createClient(ObjectStore objectStore)
-      throws InvalidPortException, InvalidEndpointException {
-    if (isSsl(objectStore)) {
-      return new MinioClient(
-          objectStore.getEndpoint(),
-          objectStore.getPort(),
-          objectStore.getAccessKey(), objectStore.getSecretKey(),
-          DEFAULT_REGION,
-          true
-      );
-    } else {
-      return new MinioClient(
-          objectStore.getEndpoint(),
-          objectStore.getPort(),
-          objectStore.getAccessKey(), objectStore.getSecretKey()
-      );
-    }
-  }
-
-  private boolean isSsl(ObjectStore objectStore) {
-    return objectStore.getEndpoint().startsWith(""https://"");
+  /**
+   * Stores the target file on the S3 and sets cache control headers according to the default maximum age value.
+   *
+   * @param localFile The file to be published.
+   */
+  public void putObject(LocalFile localFile) throws IOException, GeneralSecurityException, MinioException {
+    putObject(localFile, DEFAULT_MAX_CACHE_AGE);
   }
 
   /**
-   * Stores the target file on the S3.
+   * Stores the target file on the S3 and sets cache control headers according to the specified maximum age value.
    *
-   * @param localFile the file to be published
+   * @param localFile The file to be published.
+   * @param maxAge    A cache control parameter that specifies the maximum amount of time in seconds that a resource can
+   *                  be considered ""fresh"" when held in a cache.
    */
-  public void putObject(LocalFile localFile)
-      throws IOException, GeneralSecurityException, MinioException {
+  public void putObject(LocalFile localFile, int maxAge) throws IOException, GeneralSecurityException, MinioException {
     String s3Key = localFile.getS3Key();
-    PutObjectOptions options = createOptionsFor(localFile);
+    PutObjectOptions options = createOptionsFor(localFile, maxAge);
 
     logger.info(""... uploading {}"", s3Key);
     this.client.putObject(bucket, s3Key, localFile.getFile().toString(), options);
@@ -167,12 +156,14 @@ public List<S3Object> getObjectsWithPrefix(String prefix)
     return list;
   }
 
-  private PutObjectOptions createOptionsFor(LocalFile file) {
+  private PutObjectOptions createOptionsFor(LocalFile file, int maxAge) {
     var options = new PutObjectOptions(file.getFile().toFile().length(), -1);
 
+    Map<String, String> headers = new HashMap<>(Map.of(""cache-control"", ""public,max-age="" + maxAge));
     if (this.isSetPublicReadAclOnPutObject) {
-      options.setHeaders(Map.of(""x-amz-acl"", ""public-read""));
+      headers.put(""x-amz-acl"", ""public-read"");
     }
+    options.setHeaders(headers);
 
     return options;
   }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreClientConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreClientConfig.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreClientConfig.java
@@ -0,0 +1,66 @@
+/*
+ * Corona-Warn-App
+ *
+ * SAP SE and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the ""License""); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.server.services.distribution.objectstore;
+
+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;
+import io.minio.MinioClient;
+import io.minio.errors.InvalidEndpointException;
+import io.minio.errors.InvalidPortException;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+/**
+ * Manages the instantiation of the {@link MinioClient} bean.
+ */
+@Configuration
+public class ObjectStoreClientConfig {
+
+  private static final String DEFAULT_REGION = ""eu-west-1"";
+
+  @Bean
+  public MinioClient createMinioClient(DistributionServiceConfig distributionServiceConfig)
+      throws InvalidPortException, InvalidEndpointException {
+    return createClient(distributionServiceConfig.getObjectStore());
+  }
+
+  private MinioClient createClient(ObjectStore objectStore)
+      throws InvalidPortException, InvalidEndpointException {
+    if (isSsl(objectStore)) {
+      return new MinioClient(
+          objectStore.getEndpoint(),
+          objectStore.getPort(),
+          objectStore.getAccessKey(), objectStore.getSecretKey(),
+          DEFAULT_REGION,
+          true
+      );
+    } else {
+      return new MinioClient(
+          objectStore.getEndpoint(),
+          objectStore.getPort(),
+          objectStore.getAccessKey(), objectStore.getSecretKey()
+      );
+    }
+  }
+
+  private boolean isSsl(ObjectStore objectStore) {
+    return objectStore.getEndpoint().startsWith(""https://"");
+  }
+}
","
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java
@@ -59,6 +59,7 @@ public class ObjectStoreAccess {
   private final boolean isSetPublicReadAclOnPutObject;
 
   private final String bucket;
+  private final int cacheControlMaxAge;
 
   private final MinioClient client;
 
@@ -78,6 +79,7 @@ public class ObjectStoreAccess {
     this.bucket = distributionServiceConfig.getObjectStore().getBucket();
     this.isSetPublicReadAclOnPutObject = distributionServiceConfig.getObjectStore().isSetPublicReadAclOnPutObject();
 
+    this.cacheControlMaxAge = distributionServiceConfig.getObjectStore().getCacheControlMaxAge();
     if (!this.client.bucketExists(this.bucket)) {
       throw new IllegalArgumentException(""Supplied bucket does not exist "" + bucket);
     }
@@ -118,6 +120,7 @@ public class ObjectStoreAccess {
     PutObjectOptions options = createOptionsFor(localFile);
 
     logger.info(""... uploading {}"", s3Key);
+    options.setCacheControl(""public, max-age="" + cacheControlMaxAge);
     this.client.putObject(bucket, s3Key, localFile.getFile().toString(), options);
   }
 
","['README.md', '/dev/null', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java']",ef4edb4c92fb9bf65544e22e2b4f2e8f8a55fa97
424,python3 create_patchfiles.py 424,"Application Configuration: Add version update support
We would like to keep the mobile application informed about new releases/current release of the app. This information can then be presented to the user, in order to ask for applying updates. 

We would like to add new fields to the application config (example values):
 
```yaml
app-version:
    ios:
        latest: 1.5.2
        min: 1.2.2
    android: 
        latest: 1.3.2
        min: 1.1.2
```

After downloading the config, the app checks whether the signature can be verified. If that is the case, it will get the current & min values from the config based on the target platform. 

This information can now be used to prompt users for updating the app. The values for the versions must follow semantic versioning.
",https://github.com/corona-warn-app/cwa-server/issues/416,https://github.com/corona-warn-app/cwa-server/pull/424,"diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto
--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto
+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto
@@ -4,6 +4,7 @@ option java_package = ""app.coronawarn.server.common.protocols.internal"";
 option java_multiple_files = true;
 import ""app/coronawarn/server/common/protocols/internal/risk_score_classification.proto"";
 import ""app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto"";
+import ""app/coronawarn/server/common/protocols/internal/app_version_config.proto"";
 
 message ApplicationConfiguration {
 
@@ -14,6 +15,8 @@ message ApplicationConfiguration {
   app.coronawarn.server.common.protocols.internal.RiskScoreParameters exposureConfig = 3;
 
   AttenuationDurationThresholds attenuationDurationThresholds = 4;
+
+  app.coronawarn.server.common.protocols.internal.ApplicationVersionConfiguration appVersion = 5;
 }
 
 message AttenuationDurationThresholds {
diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_version_config.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_version_config.proto
new file mode 100644
--- /dev/null
+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_version_config.proto
@@ -0,0 +1,20 @@
+syntax = ""proto3"";
+package app.coronawarn.server.common.protocols.internal;
+option java_package = ""app.coronawarn.server.common.protocols.internal"";
+option java_multiple_files = true;
+
+message ApplicationVersionConfiguration {
+  ApplicationVersionInfo ios = 1;
+  ApplicationVersionInfo android = 2;
+}
+
+message ApplicationVersionInfo {
+  SemanticVersion latest = 1;
+  SemanticVersion min = 2;
+}
+
+message SemanticVersion {
+  uint32 major = 1;
+  uint32 minor = 2;
+  uint32 patch = 3;
+}
\ No newline at end of file
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProvider.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProvider.java
@@ -0,0 +1,56 @@
+/*
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.services.distribution.assembly.appconfig;
+
+import app.coronawarn.server.common.protocols.internal.ApplicationVersionConfiguration;
+
+/**
+ * Provides the mobile app version configuration based on a file in the file system.<br> The existing file must be a
+ * valid YAML file, and must match the specification of the proto file app_version_config.proto.
+ */
+public class ApplicationVersionConfigurationProvider {
+
+  /**
+   * The location of the app version config master file.
+   */
+  public static final String MASTER_FILE = ""master-config/app-version-config.yaml"";
+
+  /**
+   * Fetches the master configuration as an ApplicationVersionConfig instance.
+   *
+   * @return the mobile app version configuration as ApplicationVersionConfig
+   * @throws UnableToLoadFileException when the file/transformation did not succeed
+   */
+  public static ApplicationVersionConfiguration readMasterFile() throws UnableToLoadFileException {
+    return readFile(MASTER_FILE);
+  }
+
+  /**
+   * Fetches an app version configuration file based on the given path. The path must be available in the classloader.
+   *
+   * @param path the path, e.g. folder/my-app-version-config.yaml
+   * @return the ApplicationVersionConfig
+   * @throws UnableToLoadFileException when the file/transformation did not succeed
+   */
+  public static ApplicationVersionConfiguration readFile(String path) throws UnableToLoadFileException {
+    return YamlLoader.loadYamlIntoProtobufBuilder(path, ApplicationVersionConfiguration.Builder.class).build();
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java
@@ -50,8 +50,8 @@ public static <T extends Message.Builder> T loadYamlIntoProtobufBuilder(String p
     // no setters for generated message classes available
     yaml.setBeanAccess(BeanAccess.FIELD);
 
-    Resource riskScoreParametersResource = new ClassPathResource(path);
-    try (InputStream inputStream = riskScoreParametersResource.getInputStream()) {
+    Resource configurationResource = new ClassPathResource(path);
+    try (InputStream inputStream = configurationResource.getInputStream()) {
       T loaded = yaml.loadAs(inputStream, builderType);
       if (loaded == null) {
         throw new UnableToLoadFileException(path);
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationVersionConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationVersionConfigurationValidator.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationVersionConfigurationValidator.java
@@ -0,0 +1,81 @@
+/*
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
+
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;
+
+import app.coronawarn.server.common.protocols.internal.ApplicationVersionConfiguration;
+import app.coronawarn.server.common.protocols.internal.ApplicationVersionInfo;
+import app.coronawarn.server.common.protocols.internal.SemanticVersion;
+
+public class ApplicationVersionConfigurationValidator extends ConfigurationValidator {
+
+  private final ApplicationVersionConfiguration config;
+
+  public ApplicationVersionConfigurationValidator(ApplicationVersionConfiguration config) {
+    this.config = config;
+  }
+
+  @Override
+  public ValidationResult validate() {
+    this.errors = new ValidationResult();
+    validateApplicationVersionInfo(""ios"", config.getIos());
+    validateApplicationVersionInfo(""android"", config.getAndroid());
+    return this.errors;
+  }
+
+  private void validateApplicationVersionInfo(String name, ApplicationVersionInfo appVersionInfo) {
+    SemanticVersion minVersion = appVersionInfo.getMin();
+    ComparisonResult comparisonResult = compare(appVersionInfo.getLatest(), minVersion);
+    if (ComparisonResult.LOWER.equals(comparisonResult)) {
+      this.errors.add(new GeneralValidationError(name + "": latest/min"",
+          minVersion.getMajor() + ""."" + minVersion.getMinor() + ""."" + minVersion.getPatch(), MIN_GREATER_THAN_MAX));
+    }
+  }
+
+  private ComparisonResult compare(SemanticVersion left, SemanticVersion right) {
+    if (left.getMajor() < right.getMajor()) {
+      return ComparisonResult.LOWER;
+    }
+    if (left.getMajor() > right.getMajor()) {
+      return ComparisonResult.HIGHER;
+    }
+    if (left.getMinor() < right.getMinor()) {
+      return ComparisonResult.LOWER;
+    }
+    if (left.getMinor() > right.getMinor()) {
+      return ComparisonResult.HIGHER;
+    }
+    if (left.getPatch() < right.getPatch()) {
+      return ComparisonResult.LOWER;
+    }
+    if (left.getPatch() > right.getPatch()) {
+      return ComparisonResult.HIGHER;
+    }
+    return ComparisonResult.EQUAL;
+  }
+
+  private enum ComparisonResult {
+    LOWER,
+    EQUAL,
+    HIGHER
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java
@@ -44,7 +44,7 @@ public GeneralValidationError(String errorSource, Object value, ErrorType reason
 
   @Override
   public String toString() {
-    return ""GeneralValidationError{""
+    return ""RiskScoreClassificationValidationError{""
         + ""errorType="" + reason
         + "", parameter='"" + errorSource + '\''
         + "", givenValue="" + value
diff --git a/services/distribution/src/main/resources/master-config/app-config.yaml b/services/distribution/src/main/resources/master-config/app-config.yaml
--- a/services/distribution/src/main/resources/master-config/app-config.yaml
+++ b/services/distribution/src/main/resources/master-config/app-config.yaml
@@ -13,4 +13,5 @@ attenuationDurationThresholds:
   lower: 50
   upper: 70
 risk-score-classes: !include risk-score-classification.yaml
-exposure-config: !include exposure-config.yaml
\ No newline at end of file
+exposure-config: !include exposure-config.yaml
+app-version: !include app-version-config.yaml
\ No newline at end of file
diff --git a/services/distribution/src/main/resources/master-config/app-version-config.yaml b/services/distribution/src/main/resources/master-config/app-version-config.yaml
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/resources/master-config/app-version-config.yaml
@@ -0,0 +1,25 @@
+# This is the Application Version Configuration master file which contains information for clients
+# about the latest and minimum supported mobile app versions on Android and iOS.
+#
+# The latest version must not be lower than the min version.
+#
+# Change this file with caution!
+
+ios:
+  latest:
+    major: 1
+    minor: 5
+    patch: 2
+  min:
+    major: 1
+    minor: 2
+    patch: 2
+android:
+  latest:
+    major: 1
+    minor: 3
+    patch: 2
+  min:
+    major: 1
+    minor: 1
+    patch: 2
\ No newline at end of file
","
--- a/services/distribution/src/main/resources/master-config/app-config.yaml
+++ b/services/distribution/src/main/resources/master-config/app-config.yaml
@@ -11,6 +11,14 @@
 # Change this file with caution!
 
 min-risk-score: 90
+app-version:
+    ios:
+        latest: 1.5.2
+        min: 1.2.2
+    android: 
+        latest: 1.3.2
+        min: 1.1.2
 attenuationDurationThresholds:
   lower: 50
   upper: 70
","['README.md', '/dev/null', 'common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java', 'services/distribution/src/main/resources/master-config/app-config.yaml']",2be284e0518658dcb7ef8d1df5515fd5f962e242
431,python3 create_patchfiles.py 431,"Application Configuration: Attenuation Duration
The RKI requested weighting parameters for the three buckets defined by the attenuation duration threshold. Add this to the attenuation duration configuration.

@michael-burwig 

```yaml
attenuation-duration:
  thresholds:
    lower: 50
    upper: 70
  weights:
    low: 1 # attenuation < 50 dB 
    mid: 0.5 # attenuation >50 dB && < 70 dB 
    high: 0 # attenuation > 70dB is ignored
```
",https://github.com/corona-warn-app/cwa-server/issues/428,https://github.com/corona-warn-app/cwa-server/pull/431,"diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto
--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto
+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto
@@ -5,6 +5,7 @@ option java_multiple_files = true;
 import ""app/coronawarn/server/common/protocols/internal/risk_score_classification.proto"";
 import ""app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto"";
 import ""app/coronawarn/server/common/protocols/internal/app_version_config.proto"";
+import ""app/coronawarn/server/common/protocols/internal/attenuation_duration.proto"";
 
 message ApplicationConfiguration {
 
@@ -14,12 +15,7 @@ message ApplicationConfiguration {
 
   app.coronawarn.server.common.protocols.internal.RiskScoreParameters exposureConfig = 3;
 
-  AttenuationDurationThresholds attenuationDurationThresholds = 4;
+  app.coronawarn.server.common.protocols.internal.AttenuationDuration attenuationDuration = 4;
 
   app.coronawarn.server.common.protocols.internal.ApplicationVersionConfiguration appVersion = 5;
 }
-
-message AttenuationDurationThresholds {
-  int32 lower = 1;
-  int32 upper = 2;
-}
\ No newline at end of file
diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto
new file mode 100644
--- /dev/null
+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto
@@ -0,0 +1,20 @@
+syntax = ""proto3"";
+package app.coronawarn.server.common.protocols.internal;
+option java_package = ""app.coronawarn.server.common.protocols.internal"";
+option java_multiple_files = true;
+
+message AttenuationDuration {
+  Thresholds thresholds = 1;
+  Weights weights = 2;
+}
+
+message Thresholds {
+  int32 lower = 1;
+  int32 upper = 2;
+}
+
+message Weights {
+  double low = 1;
+  double mid = 2;
+  double high = 3;
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java
@@ -20,11 +20,6 @@
 
 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
 
-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;
-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;
-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MAX;
-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;
-
 import app.coronawarn.server.common.protocols.internal.ApplicationConfiguration;
 import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;
 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;
@@ -51,12 +46,13 @@ public ValidationResult validate() {
     this.errors = new ValidationResult();
 
     validateMinRisk();
-    validateAttenuationDurationThresholds();
 
-    ValidationResult exposureResult = new ExposureConfigurationValidator(config.getExposureConfig()).validate();
-    ValidationResult riskScoreResult = new RiskScoreClassificationValidator(config.getRiskScoreClasses()).validate();
+    errors.with(new ExposureConfigurationValidator(config.getExposureConfig()).validate());
+    errors.with(new RiskScoreClassificationValidator(config.getRiskScoreClasses()).validate());
+    errors.with(new ApplicationVersionConfigurationValidator(config.getAppVersion()).validate());
+    errors.with(new AttenuationDurationValidator(config.getAttenuationDuration()).validate());
 
-    return errors.with(exposureResult).with(riskScoreResult);
+    return errors;
   }
 
   private void validateMinRisk() {
@@ -66,25 +62,4 @@ private void validateMinRisk() {
       this.errors.add(new MinimumRiskLevelValidationError(minLevel));
     }
   }
-
-  private void validateAttenuationDurationThresholds() {
-    int lower = config.getAttenuationDurationThresholds().getLower();
-    int upper = config.getAttenuationDurationThresholds().getUpper();
-
-    checkThresholdBound(""lower"", lower);
-    checkThresholdBound(""upper"", upper);
-
-    if (lower > upper) {
-      String parameters = ""attenuationDurationThreshold.lower, attenuationDurationThreshold.upper"";
-      String values = lower + "", "" + upper;
-      this.errors.add(new GeneralValidationError(parameters, values, MIN_GREATER_THAN_MAX));
-    }
-  }
-
-  private void checkThresholdBound(String boundLabel, int boundValue) {
-    if (boundValue < ATTENUATION_DURATION_THRESHOLD_MIN || boundValue > ATTENUATION_DURATION_THRESHOLD_MAX) {
-      this.errors.add(
-          new GeneralValidationError(""attenuationDurationThreshold."" + boundLabel, boundValue, VALUE_OUT_OF_BOUNDS));
-    }
-  }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java
@@ -0,0 +1,94 @@
+/*-
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
+
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MAX;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MAX;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MIN;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.OUT_OF_RANGE;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.TOO_MANY_DECIMAL_PLACES;
+
+import app.coronawarn.server.common.protocols.internal.AttenuationDuration;
+import java.math.BigDecimal;
+
+/**
+ * The AttenuationDurationValidator validates the values of an associated {@link AttenuationDuration} instance.
+ */
+public class AttenuationDurationValidator extends ConfigurationValidator {
+
+  private final AttenuationDuration attenuationDuration;
+
+  public AttenuationDurationValidator(AttenuationDuration attenuationDuration) {
+    this.attenuationDuration = attenuationDuration;
+  }
+
+  @Override
+  public ValidationResult validate() {
+    errors = new ValidationResult();
+
+    validateThresholds();
+    validateWeights();
+
+    return errors;
+  }
+
+  private void validateThresholds() {
+    int lower = attenuationDuration.getThresholds().getLower();
+    int upper = attenuationDuration.getThresholds().getUpper();
+
+    checkThresholdBound(""lower"", lower);
+    checkThresholdBound(""upper"", upper);
+
+    if (lower > upper) {
+      String parameters = ""attenuation-duration.thresholds.lower, attenuation-duration.thresholds.upper"";
+      String values = lower + "", "" + upper;
+      this.errors.add(new GeneralValidationError(parameters, values, MIN_GREATER_THAN_MAX));
+    }
+  }
+
+  private void checkThresholdBound(String thresholdLabel, int thresholdValue) {
+    if (thresholdValue < ATTENUATION_DURATION_THRESHOLD_MIN || thresholdValue > ATTENUATION_DURATION_THRESHOLD_MAX) {
+      this.errors.add(new GeneralValidationError(
+          ""attenuation-duration.thresholds."" + thresholdLabel, thresholdValue, VALUE_OUT_OF_BOUNDS));
+    }
+  }
+
+  private void validateWeights() {
+    checkWeight(""low"", attenuationDuration.getWeights().getLow());
+    checkWeight(""mid"", attenuationDuration.getWeights().getMid());
+    checkWeight(""high"", attenuationDuration.getWeights().getHigh());
+  }
+
+  private void checkWeight(String weightLabel, double weightValue) {
+    if (weightValue < ATTENUATION_DURATION_WEIGHT_MIN || weightValue > ATTENUATION_DURATION_WEIGHT_MAX) {
+      this.errors.add(new WeightValidationError(
+          ""attenuation-duration.weights."" + weightLabel, weightValue, OUT_OF_RANGE));
+    }
+
+    if (BigDecimal.valueOf(weightValue).scale() > ParameterSpec.ATTENUATION_DURATION_WEIGHT_MAX_DECIMALS) {
+      this.errors.add(new WeightValidationError(
+          ""attenuation-duration.weights."" + weightLabel, weightValue, TOO_MANY_DECIMAL_PLACES));
+    }
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
@@ -63,4 +63,19 @@ private ParameterSpec() {
    * The allowed maximum value for an attenuation threshold.
    */
   public static final int ATTENUATION_DURATION_THRESHOLD_MAX = 100;
+
+  /**
+   * The allowed minimum value for an attenuation weight.
+   */
+  public static final double ATTENUATION_DURATION_WEIGHT_MIN = .0;
+
+  /**
+   * The allowed maximum value for an attenuation weight.
+   */
+  public static final double ATTENUATION_DURATION_WEIGHT_MAX = 1.;
+
+  /**
+   * Maximum number of allowed decimals for an attenuation weight.
+   */
+  public static final int ATTENUATION_DURATION_WEIGHT_MAX_DECIMALS = 3;
 }
diff --git a/services/distribution/src/main/resources/master-config/app-config.yaml b/services/distribution/src/main/resources/master-config/app-config.yaml
--- a/services/distribution/src/main/resources/master-config/app-config.yaml
+++ b/services/distribution/src/main/resources/master-config/app-config.yaml
@@ -9,9 +9,7 @@
 # Change this file with caution!
 
 min-risk-score: 90
-attenuationDurationThresholds:
-  lower: 50
-  upper: 70
+attenuation-duration: !include attenuation-duration.yaml
 risk-score-classes: !include risk-score-classification.yaml
 exposure-config: !include exposure-config.yaml
-app-version: !include app-version-config.yaml
\ No newline at end of file
+app-version: !include app-version-config.yaml
diff --git a/services/distribution/src/main/resources/master-config/attenuation-duration.yaml b/services/distribution/src/main/resources/master-config/attenuation-duration.yaml
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/resources/master-config/attenuation-duration.yaml
@@ -0,0 +1,15 @@
+# This is the attenuation and duration parameter thresholds. The lower and
+# upper threshold partitions the value range into 3 subsets: low, mid, high
+#
+# Each of the aforementioned partitions has a weight in the range of [0, 1]
+# assigned to it. The number of decimal places is restricted to 3.
+#
+# Change this file with caution!
+
+thresholds:
+  lower: 50
+  upper: 70
+weights:
+  low: 1.0
+  mid: 0.5
+  high: 0.0
","
--- a/services/distribution/src/main/resources/master-config/app-config.yaml
+++ b/services/distribution/src/main/resources/master-config/app-config.yaml
@@ -12,6 +12,9 @@
   lower: 50
   upper: 70
 risk-score-classes: !include risk-score-classification.yaml
+weights:
+  low: 1 # attenuation < 50 dB 
+  mid: 0.5 # attenuation >50 dB && < 70 dB 
+  high: 0 # attenuation > 70dB is ignored
 exposure-config: !include exposure-config.yaml
 app-version: !include app-version-config.yaml
","['README.md', '/dev/null', 'common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java', 'services/distribution/src/main/resources/master-config/app-config.yaml']",20492aaed28176142700486f99877b602b9f1cde
441,python3 create_patchfiles.py 441,"Application Configuration: Attenuation Duration Enhancements
We need two additional configuration variables for the attenuation duration, namely defaultBucketOffset and riskScoreNormalizationDivisor.

The target config should look like this:

```yaml
default-bucket-offset: 0 # discussed as W4
risk-score-normalization-divisor: 25 # discussed as W5 
thresholds:
  lower: 50
  upper: 70
weights:
  low: 1.0
  mid: 0.5
  high: 0.0
```

Value range for bucket offset: 0 or 1 (int)
risk score normalization divisor: 1...1000 (int)
",https://github.com/corona-warn-app/cwa-server/issues/437,https://github.com/corona-warn-app/cwa-server/pull/441,"diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto
--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto
+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto
@@ -6,6 +6,8 @@ option java_multiple_files = true;
 message AttenuationDuration {
   Thresholds thresholds = 1;
   Weights weights = 2;
+  int32 defaultBucketOffset = 3;
+  int32 riskScoreNormalizationDivisor = 4;
 }
 
 message Thresholds {
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java
@@ -26,6 +26,10 @@
 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;
 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MAX;
 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MIN;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.DEFAULT_BUCKET_OFFSET_MAX;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.DEFAULT_BUCKET_OFFSET_MIN;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.RISK_SCORE_NORMALIZATION_DIVISOR_MAX;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.RISK_SCORE_NORMALIZATION_DIVISOR_MIN;
 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.OUT_OF_RANGE;
 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.TOO_MANY_DECIMAL_PLACES;
 
@@ -49,6 +53,8 @@ public ValidationResult validate() {
 
     validateThresholds();
     validateWeights();
+    validateDefaultBucketOffset();
+    validateRiskScoreNormalizationDivisor();
 
     return errors;
   }
@@ -57,8 +63,8 @@ private void validateThresholds() {
     int lower = attenuationDuration.getThresholds().getLower();
     int upper = attenuationDuration.getThresholds().getUpper();
 
-    checkThresholdBound(""lower"", lower);
-    checkThresholdBound(""upper"", upper);
+    checkValueRange(""thresholds.lower"", lower, ATTENUATION_DURATION_THRESHOLD_MIN, ATTENUATION_DURATION_THRESHOLD_MAX);
+    checkValueRange(""thresholds.upper"", upper, ATTENUATION_DURATION_THRESHOLD_MIN, ATTENUATION_DURATION_THRESHOLD_MAX);
 
     if (lower > upper) {
       String parameters = ""attenuation-duration.thresholds.lower, attenuation-duration.thresholds.upper"";
@@ -67,10 +73,10 @@ private void validateThresholds() {
     }
   }
 
-  private void checkThresholdBound(String thresholdLabel, int thresholdValue) {
-    if (thresholdValue < ATTENUATION_DURATION_THRESHOLD_MIN || thresholdValue > ATTENUATION_DURATION_THRESHOLD_MAX) {
+  private void checkValueRange(String parameterLabel, int value, int min, int max) {
+    if (value < min || value > max) {
       this.errors.add(new GeneralValidationError(
-          ""attenuation-duration.thresholds."" + thresholdLabel, thresholdValue, VALUE_OUT_OF_BOUNDS));
+          ""attenuation-duration."" + parameterLabel, value, VALUE_OUT_OF_BOUNDS));
     }
   }
 
@@ -91,4 +97,15 @@ private void checkWeight(String weightLabel, double weightValue) {
           ""attenuation-duration.weights."" + weightLabel, weightValue, TOO_MANY_DECIMAL_PLACES));
     }
   }
+
+  private void validateDefaultBucketOffset() {
+    int bucketOffset = attenuationDuration.getDefaultBucketOffset();
+    checkValueRange(""default-bucket-offset"", bucketOffset, DEFAULT_BUCKET_OFFSET_MIN, DEFAULT_BUCKET_OFFSET_MAX);
+  }
+
+  private void validateRiskScoreNormalizationDivisor() {
+    int riskScoreNormalizationDivisor = attenuationDuration.getRiskScoreNormalizationDivisor();
+    checkValueRange(""risk-score-normalization-divisor"", riskScoreNormalizationDivisor,
+        RISK_SCORE_NORMALIZATION_DIVISOR_MIN, RISK_SCORE_NORMALIZATION_DIVISOR_MAX);
+  }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
@@ -78,4 +78,25 @@ private ParameterSpec() {
    * Maximum number of allowed decimals for an attenuation weight.
    */
   public static final int ATTENUATION_DURATION_WEIGHT_MAX_DECIMALS = 3;
+
+
+  /**
+   * The allowed minimum value for a default bucket offset.
+   */
+  public static final int DEFAULT_BUCKET_OFFSET_MIN = 0;
+
+  /**
+   * The allowed maximum value for a default bucket offset.
+   */
+  public static final int DEFAULT_BUCKET_OFFSET_MAX = 1;
+
+  /**
+   * The allowed minimum value for a risk score normalization divisor.
+   */
+  public static final int RISK_SCORE_NORMALIZATION_DIVISOR_MIN = 0;
+
+  /**
+   * The allowed maximum value for a risk score normalization divisor.
+   */
+  public static final int RISK_SCORE_NORMALIZATION_DIVISOR_MAX = 1000;
 }
diff --git a/services/distribution/src/main/resources/master-config/attenuation-duration.yaml b/services/distribution/src/main/resources/master-config/attenuation-duration.yaml
--- a/services/distribution/src/main/resources/master-config/attenuation-duration.yaml
+++ b/services/distribution/src/main/resources/master-config/attenuation-duration.yaml
@@ -4,6 +4,9 @@
 # Each of the aforementioned partitions has a weight in the range of [0, 1]
 # assigned to it. The number of decimal places is restricted to 3.
 #
+# default-bucket-offset value range: {0, 1}
+# risk-score-normalization-divisor value range: [1, 1000]
+#
 # Change this file with caution!
 
 thresholds:
@@ -13,3 +16,5 @@ weights:
   low: 1.0
   mid: 0.5
   high: 0.0
+default-bucket-offset: 0
+risk-score-normalization-divisor: 25
","
--- a/services/distribution/src/main/resources/master-config/attenuation-duration.yaml
+++ b/services/distribution/src/main/resources/master-config/attenuation-duration.yaml
@@ -9,6 +9,8 @@
 thresholds:
   lower: 50
   upper: 70
+default-bucket-offset: 0
+risk-score-normalization-divisor: 25
 weights:
   low: 1.0
   mid: 0.5
","['README.md', 'common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java', 'services/distribution/src/main/resources/master-config/attenuation-duration.yaml']",2165f162938409e6401c926d8643835a114ab887
346,python3 create_patchfiles.py 346,"Retention: Enforce period on Object Store
Currently, the retention period is only enforced for keys on the database, but it should be enforced on the S3 as well.

Therefore, we need to delete the items on the S3, when the retention policy is reached.

When the retention mechanism is kicked off, and then delete the following keys with the prefix:
`version/v1/diagnosis-keys/country/DE/date/<RETENTIONDATE>`
Where RETENTIONDATE is `current date - retention period`.

Ideally, we should also try to delete older items as well, in case the retention run did not succeed or did not run at all.
",https://github.com/corona-warn-app/cwa-server/issues/329,https://github.com/corona-warn-app/cwa-server/pull/346,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java
@@ -129,7 +129,7 @@ public void putObject(LocalFile localFile)
    *
    * @param prefix the prefix, e.g. my/folder/
    */
-  public List<DeleteError> deleteObjectsWithPrefix(String prefix)
+  public void deleteObjectsWithPrefix(String prefix)
       throws MinioException, GeneralSecurityException, IOException {
     List<String> toDelete = getObjectsWithPrefix(prefix)
         .stream()
@@ -144,9 +144,9 @@ public List<DeleteError> deleteObjectsWithPrefix(String prefix)
       errors.add(deleteErrorResult.get());
     }
 
-    logger.info(""Deletion result: {}"", errors.size());
-
-    return errors;
+    if (!errors.isEmpty()) {
+      throw new MinioException(""Can't delete files, number of errors: "" + errors.size());
+    }
   }
 
   /**
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java
@@ -0,0 +1,90 @@
+/*
+ * Corona-Warn-App
+ *
+ * SAP SE and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the ""License""); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.server.services.distribution.objectstore;
+
+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.Api;
+import io.minio.errors.MinioException;
+import java.io.IOException;
+import java.io.UncheckedIOException;
+import java.security.GeneralSecurityException;
+import java.time.LocalDate;
+import java.time.ZoneOffset;
+import java.time.format.DateTimeFormatter;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+
+/**
+ * Creates an S3RetentionPolicy object, which applies the retention policy to the S3 compatible storage.
+ */
+@Component
+public class S3RetentionPolicy {
+
+  private final ObjectStoreAccess objectStoreAccess;
+  private final Api api;
+
+  @Autowired
+  public S3RetentionPolicy(ObjectStoreAccess objectStoreAccess, DistributionServiceConfig distributionServiceConfig) {
+    this.objectStoreAccess = objectStoreAccess;
+    this.api = distributionServiceConfig.getApi();
+  }
+
+  /**
+   * Deletes all diagnosis-key files from S3 that are older than retentionDays.
+   *
+   * @param retentionDays the number of days, that files should be retained on S3.
+   */
+  public void applyRetentionPolicy(int retentionDays) throws MinioException, GeneralSecurityException, IOException {
+    List<S3Object> diagnosisKeysObjects = objectStoreAccess.getObjectsWithPrefix(""version/v1/""
+        + api.getDiagnosisKeysPath() + ""/""
+        + api.getCountryPath() + ""/""
+        + api.getCountryGermany() + ""/""
+        + api.getDatePath() + ""/"");
+    final String regex = "".*([0-9]{4}-[0-9]{2}-[0-9]{2}).*"";
+    final Pattern pattern = Pattern.compile(regex);
+
+    final LocalDate cutOffDate = LocalDate.now(ZoneOffset.UTC).minusDays(retentionDays);
+
+    diagnosisKeysObjects.stream()
+        .filter(diagnosisKeysObject -> {
+          Matcher matcher = pattern.matcher(diagnosisKeysObject.getObjectName());
+          return matcher.matches() && LocalDate.parse(matcher.group(1), DateTimeFormatter.ISO_LOCAL_DATE)
+              .isBefore(cutOffDate);
+        })
+        .forEach(this::deleteDiagnosisKey);
+  }
+
+  /**
+   * Java stream do not support checked exceptions within streams. This helper method rethrows them as unchecked
+   * expressions, so they can be passed up to the Retention Policy.
+   *
+   * @param diagnosisKey the  diagnosis key, that should be deleted.
+   */
+  public void deleteDiagnosisKey(S3Object diagnosisKey) {
+    try {
+      objectStoreAccess.deleteObjectsWithPrefix(diagnosisKey.getObjectName());
+    } catch (Exception e) {
+      throw new UncheckedIOException(new IOException(e));
+    }
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java
@@ -22,6 +22,7 @@
 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;
 import app.coronawarn.server.services.distribution.Application;
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
+import app.coronawarn.server.services.distribution.objectstore.S3RetentionPolicy;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.ApplicationArguments;
@@ -46,27 +47,32 @@ public class RetentionPolicy implements ApplicationRunner {
 
   private final Integer retentionDays;
 
+  private final S3RetentionPolicy s3RetentionPolicy;
+
   /**
    * Creates a new RetentionPolicy.
    */
   RetentionPolicy(DiagnosisKeyService diagnosisKeyService,
       ApplicationContext applicationContext,
-      DistributionServiceConfig distributionServiceConfig) {
+      DistributionServiceConfig distributionServiceConfig,
+      S3RetentionPolicy s3RetentionPolicy) {
     this.diagnosisKeyService = diagnosisKeyService;
     this.applicationContext = applicationContext;
     this.retentionDays = distributionServiceConfig.getRetentionDays();
+    this.s3RetentionPolicy = s3RetentionPolicy;
   }
 
   @Override
   public void run(ApplicationArguments args) {
     try {
       diagnosisKeyService.applyRetentionPolicy(retentionDays);
+      s3RetentionPolicy.applyRetentionPolicy(retentionDays);
     } catch (Exception e) {
       logger.error(""Application of retention policy failed."", e);
       Application.killApplication(applicationContext);
     }
 
-    logger.debug(""Retention policy applied successfully. Deleted all entries older that {} days."",
+    logger.debug(""Retention policy applied successfully. Deleted all entries older than {} days."",
         retentionDays);
   }
 }
","--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java
@@ -62,7 +62,7 @@ public void run(ApplicationArguments args) {
     try {
       diagnosisKeyService.applyRetentionPolicy(retentionDays);
     } catch (Exception e) {
-      logger.error(""Application of retention policy failed."", e);
+      logger.error(""Application of retention policy failed. {}"", e.getMessage());
       Application.killApplication(applicationContext);
     }
 
@@ -69,4 +69,4 @@ public void run(ApplicationArguments args) {
     logger.debug(""Retention policy applied successfully. Deleted all entries older that {} days."",
         retentionDays);
   }
-}
\ No newline at end of file
+}
\ No newline at end of file","['README.md', '/dev/null', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java']",92f3c9bd98420cd26c4216cace3e481874be6140
352,python3 create_patchfiles.py 352,"Sonar - Mitigate/Audit synchronized class ""Stack""
See https://sonarcloud.io/project/issues?id=corona-warn-app_cwa-server&issues=AXI3CJu7vPFV4POpyUFA&open=AXI3CJu7vPFV4POpyUFA

Strongly consider using existing [data structure implementations.](https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/stack/ImmutableStack.html)
",https://github.com/corona-warn-app/cwa-server/issues/271,https://github.com/corona-warn-app/cwa-server/pull/352,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java
@@ -24,7 +24,6 @@
 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.Formatter;
 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.WritableFunction;
 import java.util.Set;
-import java.util.Stack;
 
 /**
  * A ""meta {@link Directory directory}"" that maps its on-disk subdirectories to some list of elements. This list of
@@ -38,7 +37,7 @@ public interface IndexDirectory<T, W extends Writable<W>> extends Directory<W> {
   /**
    * Adds a writable under the name {@code name}, whose content is calculated by the {@code writableFunction} to each
    * one of the directories created from the index. The {@code fileFunction} calculates the file content from a {@link
-   * java.util.Stack} of parent {@link IndexDirectoryOnDisk} indices. File content calculation happens on {@link
+   * ImmutableStack} of parent {@link IndexDirectoryOnDisk} indices. File content calculation happens on {@link
    * DirectoryOnDisk#write}.
    *
    * @param writableFunction A function that can output a new writable.
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java
@@ -27,7 +27,6 @@
 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.WritableFunction;
 import java.util.HashSet;
 import java.util.Set;
-import java.util.Stack;
 
 /**
  * An {@link IndexDirectory} that can be written to disk.
@@ -47,7 +46,7 @@ public class IndexDirectoryOnDisk<T> extends DirectoryOnDisk implements IndexDir
    *
    * @param name           The name that this directory should have on disk.
    * @param indexFunction  An {@link IndexFunction} that calculates the index of this {@link IndexDirectoryOnDisk} from
-   *                       a {@link java.util.Stack} of parent {@link IndexDirectoryOnDisk} indices. The top element of
+   *                       a {@link ImmutableStack} of parent {@link IndexDirectoryOnDisk} indices. The top element of
    *                       the stack is from the closest {@link IndexDirectoryOnDisk} in the parent chain.
    * @param indexFormatter A {@link Formatter} used to format the directory name for each index element returned by the
    *                       {@link IndexDirectoryOnDisk#indexFunction}.
@@ -78,9 +77,9 @@ public void addWritableToAll(WritableFunction<WritableOnDisk> writableFunction)
    * {@link IndexDirectory#addWritableToAll writables} to those. The respective element of the index will be pushed
    * onto the Stack for subsequent {@link Writable#prepare} calls.
    *
-   * @param indices A {@link Stack} of parameters from all {@link IndexDirectory IndexDirectories} further up in the
-   *                hierarchy. The Stack may contain different types, depending on the types {@code T} of
-   *                {@link IndexDirectory IndexDirectories} further up in the hierarchy.
+   * @param indices A {@link ImmutableStack} of parameters from all {@link IndexDirectory IndexDirectories} further up
+   *                in the hierarchy. The Stack may contain different types, depending on the types {@code T} of {@link
+   *                IndexDirectory IndexDirectories} further up in the hierarchy.
    */
   @Override
   public void prepare(ImmutableStack<Object> indices) {
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStack.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStack.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStack.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStack.java
@@ -19,21 +19,22 @@
 
 package app.coronawarn.server.services.distribution.assembly.structure.util;
 
-import java.util.Stack;
+import java.util.ArrayDeque;
+import java.util.Deque;
 
 public class ImmutableStack<T> {
 
-  private final Stack<T> stack;
+  private final Deque<T> stack;
 
   public ImmutableStack() {
-    this.stack = new Stack<>();
+    this.stack = new ArrayDeque<>();
   }
 
   /**
    * Creates a clone of the specified {@link ImmutableStack}.
    */
   public ImmutableStack(ImmutableStack<T> other) {
-    this.stack = (Stack<T>) other.stack.clone();
+    this.stack = new ArrayDeque<>(other.stack);
   }
 
   /**
","
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java
@@ -36,7 +36,7 @@ public interface IndexDirectory<T, W extends Writable<W>> extends Directory<W> {
    * @param writableFunction A function that can output a new writable.
    */
   void addWritableToAll(WritableFunction<W> writableFunction);
-  
+
   /**
    * Calls the {@link app.coronawarn.server.services.distribution.assembly.structure.util.functional.IndexFunction} with
    * the {@code indices} to calculate and return the elements of the index of this {@link IndexDirectory}.
","['README.md', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStack.java']",207bdd8d4d701ab8df608db7caa9f2613fa86b84
272,python3 create_patchfiles.py 272,"Update signature algorithm to SHA-256 + ECDSA P-256
## Feature description
The current CWA server implementation signs diagnosis key packages with the ``Ed25519`` algorithm. However, the current [Google/Apple spec](https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server) demands ``SHA-256`` hash with ``ECDSA P-256`` signature ([OID 1.2.840.10045.4.3.2](http://oid-info.com/get/1.2.840.10045.4.3.2))
",https://github.com/corona-warn-app/cwa-server/issues/205,https://github.com/corona-warn-app/cwa-server/pull/272,"diff --git a/docker-compose-test-secrets/certificate.crt b/docker-compose-test-secrets/certificate.crt
--- a/docker-compose-test-secrets/certificate.crt
+++ b/docker-compose-test-secrets/certificate.crt
@@ -1,16 +1,18 @@
 -----BEGIN CERTIFICATE-----
-MIHxMIGkAgFkMAUGAytlcDAkMSIwIAYDVQQDDBlFTkEgVGVzdCBSb290IENlcnRp
-ZmljYXRlMB4XDTIwMDQzMDE0MDQ1NVoXDTIxMDQzMDE0MDQ1NVowJjEkMCIGA1UE
-AwwbRU5BIFRlc3QgQ2xpZW50IENlcnRpZmljYXRlMCowBQYDK2VwAyEAKb/6ocYD
-5sIoiGUjHSCiHP3oAZxwtBicRxQVhqZhZIUwBQYDK2VwA0EAw6EUybzXxad6U39C
-d1AwMBQ8b2k0pgd2VeJHn46hr5uByJ/MB+fHkgj0SkFhVbfhffcjq23FQKu7lZ/Z
-HxakDA==
+MIIBMjCB2AIBZDAKBggqhkjOPQQDAjAkMSIwIAYDVQQDDBlDV0EgVGVzdCBSb290
+IENlcnRpZmljYXRlMB4XDTIwMDUyMzExMzAzOFoXDTIxMDUyMzExMzAzOFowJjEk
+MCIGA1UEAwwbQ1dBIFRlc3QgQ2xpZW50IENlcnRpZmljYXRlMFkwEwYHKoZIzj0C
+AQYIKoZIzj0DAQcDQgAEYQJ+sReY1L8z851VFRpLu4PCusj/7Ruvi879KjrQJ12k
+KKsfeRWytmrE65Jok1lsYqpFhRWcxG6VV5FX0yG+EjAKBggqhkjOPQQDAgNJADBG
+AiEAwP/VKVIhOuiIczrPFg0o4ns39Wu1vBpIXu+/psI/3LECIQD0FAXo5chuUkQy
+LeUtwsQaC8v2KA96ew3PfCoTilvU1Q==
 -----END CERTIFICATE-----
 -----BEGIN CERTIFICATE-----
-MIIBAjCBtQIULaMo9wOjHWZrpxuH+sN3ZPeT9EUwBQYDK2VwMCQxIjAgBgNVBAMM
-GUVOQSBUZXN0IFJvb3QgQ2VydGlmaWNhdGUwHhcNMjAwNDMwMTQwNDU1WhcNMjEw
-NDMwMTQwNDU1WjAkMSIwIAYDVQQDDBlFTkEgVGVzdCBSb290IENlcnRpZmljYXRl
-MCowBQYDK2VwAyEADapVfRHr20spX2u6Wx8ImeoUZiJJU5cyG3zhqOl1pJAwBQYD
-K2VwA0EA9MRmDLKz60SiPAWtD6HDEZB7wCEC/vUm6rMZ9+VcEXQlBlGbiIabkX8C
-9pJ00fNzlbftmI8SiO/kjWSnwyCRBA==
+MIIBQzCB6QIUN7Z6IofaE0qtz2X1xz/IUDCUXd0wCgYIKoZIzj0EAwIwJDEiMCAG
+A1UEAwwZQ1dBIFRlc3QgUm9vdCBDZXJ0aWZpY2F0ZTAeFw0yMDA1MjMxMTMwMzha
+Fw0yMTA1MjMxMTMwMzhaMCQxIjAgBgNVBAMMGUNXQSBUZXN0IFJvb3QgQ2VydGlm
+aWNhdGUwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATBH0/vPsD62wE9jk5JZZd+
+Yf4WXZ3sKZUGbdqJssc4lxjyZJvpPLCirRQT6XWwhmBhoL8mRL5tpZ/93o+jzULe
+MAoGCCqGSM49BAMCA0kAMEYCIQCNPEtoC1QtgnncZzV/rgIoO6tktCiAkybBhHMB
+1SISZQIhAPguoBWCscYwNHtEgTDx2sQ8UZ79KvWvpHFlwDEyiHAv
 -----END CERTIFICATE-----
diff --git a/docker-compose-test-secrets/private.pem b/docker-compose-test-secrets/private.pem
--- a/docker-compose-test-secrets/private.pem
+++ b/docker-compose-test-secrets/private.pem
@@ -1,3 +1,5 @@
------BEGIN PRIVATE KEY-----
-MC4CAQAwBQYDK2VwBCIEICW8533MLMm66KvHObhk7Q/gUYAJ4h/+GoO/oe5e/CbU
------END PRIVATE KEY-----
+-----BEGIN EC PRIVATE KEY-----
+MHcCAQEEILQRQFlGcfeTAclubtjQ1rBjtmIOB/d7PITZyDe1r81/oAoGCCqGSM49
+AwEHoUQDQgAEYQJ+sReY1L8z851VFRpLu4PCusj/7Ruvi879KjrQJ12kKKsfeRWy
+tmrE65Jok1lsYqpFhRWcxG6VV5FX0yG+Eg==
+-----END EC PRIVATE KEY-----
diff --git a/scripts/generate_certificates.sh b/scripts/generate_certificates.sh
--- a/scripts/generate_certificates.sh
+++ b/scripts/generate_certificates.sh
@@ -14,8 +14,10 @@ pushd certificates > /dev/null || exit
 # $1 = OUT Private key file
 generate_private_key()
 {
-  openssl genpkey                             \
-    -algorithm ED25519                        \
+  openssl ecparam                             \
+    -name prime256v1                          \
+    -genkey                                   \
+    -noout                                    \
     -out ""$1""
 }
 
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java
@@ -23,13 +23,14 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.security.KeyPair;
 import java.security.PrivateKey;
 import java.security.Security;
 import java.security.cert.Certificate;
 import java.security.cert.CertificateException;
 import java.security.cert.CertificateFactory;
-import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
 import org.bouncycastle.jce.provider.BouncyCastleProvider;
+import org.bouncycastle.openssl.PEMKeyPair;
 import org.bouncycastle.openssl.PEMParser;
 import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
 import org.slf4j.Logger;
@@ -69,11 +70,11 @@ public CryptoProvider(ResourceLoader resourceLoader) {
     Security.addProvider(new BouncyCastleProvider());
   }
 
-  private static PrivateKey getPrivateKeyFromStream(final InputStream privateKeyStream)
-      throws IOException {
-    PEMParser pemParser = new PEMParser(new InputStreamReader(privateKeyStream));
-    PrivateKeyInfo privateKeyInfo = (PrivateKeyInfo) pemParser.readObject();
-    return new JcaPEMKeyConverter().getPrivateKey(privateKeyInfo);
+  private static PrivateKey getPrivateKeyFromStream(final InputStream privateKeyStream) throws IOException {
+    InputStreamReader privateKeyStreamReader = new InputStreamReader(privateKeyStream);
+    Object parsed = new PEMParser(privateKeyStreamReader).readObject();
+    KeyPair pair = new JcaPEMKeyConverter().getKeyPair((PEMKeyPair) parsed);
+    return pair.getPrivate();
   }
 
   private static Certificate getCertificateFromStream(final InputStream certificateStream)
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/AbstractSigningDecorator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/AbstractSigningDecorator.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/AbstractSigningDecorator.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/AbstractSigningDecorator.java
@@ -37,7 +37,7 @@ public abstract class AbstractSigningDecorator<W extends Writable<W>> extends Ar
     SigningDecorator<W> {
 
   private static final String SIGNATURE_FILE_NAME = ""export.sig"";
-  private static final String SIGNATURE_ALGORITHM = ""Ed25519"";
+  private static final String SIGNATURE_ALGORITHM = ""SHA256withECDSA"";
   private static final String SECURITY_PROVIDER = ""BC"";
 
   private static final Logger logger = LoggerFactory.getLogger(AbstractSigningDecorator.class);
","
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java
@@ -43,7 +43,7 @@
  */
 @Component
 public class CryptoProvider {
 
-  private static final Logger logger = LoggerFactory.getLogger(CryptoProvider.class);
+  private static final Logger logger = LoggerFactory.getLogger(CryptoProvider.class.getName());
 
   @Value(""${services.distribution.paths.privatekey}"")
   private String privateKeyPath;
@@ -70,7 +70,7 @@
    */
   public PrivateKey getPrivateKey() {
     if (privateKey == null) {
-      Resource privateKeyResource = resourceLoader.getResource(privateKeyPath);
+      Resource privateKeyResource = resourceLoader.getResource(privateKeyPath.replace(""private.pem"", ""private.key""));
       try (InputStream privateKeyStream = privateKeyResource.getInputStream()) {
         privateKey = getPrivateKeyFromStream(privateKeyStream);
       } catch (IOException e) {
@@ -112,7 +112,7 @@
    */
   public Certificate getCertificate() {
     if (this.certificate == null) {
-      Resource certResource = resourceLoader.getResource(certificatePath);
+      Resource certResource = resourceLoader.getResource(certificatePath.replace(""certificate.crt"", ""certificate.pem""));
       try (InputStream certStream = certResource.getInputStream()) {
         this.certificate = getCertificateFromStream(certStream);
       } catch (IOException | CertificateException e) {
","['README.md', 'docker-compose-test-secrets/certificate.crt', 'docker-compose-test-secrets/private.pem', 'scripts/generate_certificates.sh', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/AbstractSigningDecorator.java']",73b566ec755cc61fc4c08da274c133535adb6ae7
551,python3 create_patchfiles.py 551,"BatchCounter uses Double for counting
## Describe the bug

BatchCounter uses `double` for integer arithmetics, which is commonly discouraged.

## Expected behaviour

BatchCounter uses `int` for counting up to `batchSize`, since `batchSize` is also of type `int`.
It's faster.
In theory it's more accurate. (In practice there is no difference in this case since the maximum value that is representable in a double is larger than `Integer.MAX_VALUE`. But for `long` instead of `int`, there would be a difference.)

## Possible Fix

~~~java
private int batch;
~~~

While here, `batch` should be renamed to `batchCount` to better express its actual meaning.
BatchCounter is not thread-safe
## Describe the bug

When multiple threads call `BatchCounter.increment` at the same time, the resulting count is unspecified.

## Expected behaviour

`synchronized void increment`

## Steps to reproduce the issue

Call `BatchCounter` from several threads at the same time.

## Possible Fix

Add `synchronized`.
",https://github.com/corona-warn-app/cwa-server/issues/548,https://github.com/corona-warn-app/cwa-server/pull/551,"diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java
@@ -116,13 +116,13 @@ public void setPath(String path) {
   }
 
   private static class Monitoring {
-    private Integer batchSize;
+    private Long batchSize;
 
-    public Integer getBatchSize() {
+    public Long getBatchSize() {
       return batchSize;
     }
 
-    public void setBatchSize(Integer batchSize) {
+    public void setBatchSize(Long batchSize) {
       this.batchSize = batchSize;
     }
   }
@@ -135,11 +135,11 @@ public void setMonitoring(Monitoring monitoring) {
     this.monitoring = monitoring;
   }
 
-  public Integer getMonitoringBatchSize() {
+  public Long getMonitoringBatchSize() {
     return this.monitoring.getBatchSize();
   }
 
-  public void setMonitoringBatchSize(Integer batchSize) {
+  public void setMonitoringBatchSize(Long batchSize) {
     this.monitoring.setBatchSize(batchSize);
   }
 }
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/BatchCounter.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/BatchCounter.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/BatchCounter.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/BatchCounter.java
@@ -22,6 +22,7 @@
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.MeterRegistry;
+import java.util.concurrent.atomic.AtomicLong;
 
 /**
  * Batch counter for counting requests for monitoring. Counts up in batches, given batch size. This way, single requests
@@ -33,11 +34,11 @@ public class BatchCounter {
   private static final String SUBMISSION_CONTROLLER_REQUESTS_COUNTER_DESCRIPTION
       = ""Counts requests to the Submission Controller."";
 
-  private final int batchSize;
+  private final long batchSize;
   private final Counter counter;
-  private Double batch = 0.;
+  private final AtomicLong count = new AtomicLong(0L);
 
-  BatchCounter(MeterRegistry meterRegistry, int batchSize, String type) {
+  BatchCounter(MeterRegistry meterRegistry, long batchSize, String type) {
     this.batchSize = batchSize;
     counter = Counter.builder(SUBMISSION_CONTROLLER_REQUESTS_COUNTER_NAME)
         .tag(""type"", type)
@@ -50,11 +51,8 @@ public class BatchCounter {
    * counter is incremented.
    */
   public void increment() {
-    if (batch < batchSize) {
-      batch++;
-    } else {
-      counter.increment(batch);
-      batch = 1.;
+    if (0 == count.incrementAndGet() % batchSize) {
+      counter.increment(batchSize);
     }
   }
 }
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/SubmissionControllerMonitor.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/SubmissionControllerMonitor.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/SubmissionControllerMonitor.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/SubmissionControllerMonitor.java
@@ -38,7 +38,7 @@ public class SubmissionControllerMonitor {
 
   private final MeterRegistry meterRegistry;
 
-  private final Integer batchSize;
+  private final long batchSize;
   private BatchCounter requests;
   private BatchCounter realRequests;
   private BatchCounter fakeRequests;
","--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java
@@ -27,7 +27,7 @@ public class SubmissionServiceConfig {
   private Double initialFakeDelayMilliseconds;
   private Double fakeDelayMovingAverageSamples;
   private Integer retentionDays;
-  private Payload payload;
+  private int maxNumberOfKeys;
   private Verification verification;
   private Monitoring monitoring;
 
@@ -67,7 +67,7 @@ public class SubmissionServiceConfig {
   }
 
   public Integer getMaxNumberOfKeys() {
-    return payload.getMaxNumberOfKeys();
+    return maxNumberOfKeys;
   }
 
   public void setPayload(Payload payload) {
@@ -71,7 +71,7 @@ public class SubmissionServiceConfig {
   }
 
   private static class Payload {
-    private Integer maxNumberOfKeys;
+    private int maxNumberOfKeys;
 
     public Integer getMaxNumberOfKeys() {
       return maxNumberOfKeys;
@@ -79,7 +79,7 @@ public class SubmissionServiceConfig {
 
     public void setMaxNumberOfKeys(Integer maxNumberOfKeys) {
       this.maxNumberOfKeys = maxNumberOfKeys;
-    }
+    } 
   }
 
   public String getVerificationBaseUrl() {
@@ -138,7 +138,7 @@ public class SubmissionServiceConfig {
   }
 
   public Integer getMonitoringBatchSize() {
-    return this.monitoring.getBatchSize();
+    return this.monitoring.getBatchSize();
   }
 
   public void setMonitoringBatchSize(Integer batchSize) {
","['README.md', 'services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java', 'services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/BatchCounter.java', 'services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/SubmissionControllerMonitor.java']",39cf982dab39722accf5cbb2cc6f2c6ef15c8456
972,python3 create_patchfiles.py 972,"[BSI][20201107] Denial-of-Service in Download Service
Rating: Informational

Description:
The download service component of the cwa-server backend can be forced into an endless loop by a malicious or faulty federation gateway server. When downloading new batches from the federation gateway server, the download service checks the nextBatchTag header of the federation gateway server’s response. If this header is set, the download service will continue requesting a batch with this tag. It will not stop as long as the server includes this header. This can trap the download service in an endless loop.
This highly depends on the behavior and implementation of the federation gateway server. However, even a non-malicious, faulty implementation might trigger this issue. Additionally, the issue was sometimes hard to reproduce as the server first has to be forced to request new batches (which in some cases required setting the EFGS_ENABLE_DATE_BASED_DOWNLOAD configuration to true).

Affected System:
cwa-server (commit 4f3f460f580ea5d548dff0e3ceb739908c83d1a7)

Proof of Concept:
The following screenshots show the offending lines in the FederationBatchProcessor.java:

<img width=""846"" alt=""Download Service DoS Offending Code"" src=""https://user-images.githubusercontent.com/65443025/98435998-dcd5f900-20d7-11eb-9f5e-3fb7f449ca58.png"">

The following snippets show a minimalistic federation gateway server mock that returns invalid data but sets the nextBatchTag header on each response. The first request needs to fail (in this case implemented by sending an invalid HTTP request body) so that the batch tag is added to the list of unprocessed batches.
<img width=""775"" alt=""snippet-1"" src=""https://user-images.githubusercontent.com/65443025/98436046-5c63c800-20d8-11eb-843e-47e98b9c2ed7.png"">
<img width=""779"" alt=""snippet-2"" src=""https://user-images.githubusercontent.com/65443025/98436048-61c11280-20d8-11eb-9d77-43ebd770a556.png"">


The following screenshot shows the failing first request on the first run of the download service:
<img width=""824"" alt=""Download Service DoS First Invalid Request"" src=""https://user-images.githubusercontent.com/65443025/98436059-87e6b280-20d8-11eb-9ad0-7ceaaa557add.png"">


The next screenshot shows the log output of the download service when it is run again. It can be seen that the server will endlessly try to request a next batch.
<img width=""845"" alt=""Download Service DoS Endless Loop Log"" src=""https://user-images.githubusercontent.com/65443025/98436074-ab116200-20d8-11eb-8c3c-ac545d9c1b07.png"">



Recommended Controls: 
The while loop should be adapted so that it is not possible for it to continue forever. The received nextBatchTag header should be checked. If it is already contained in the list of unprocessed batches, it should not be added again. This does not protect against a malicious server that sends different batch tags on each request. Therefore, alternatively, a timeout value or a maximum number of retries could be introduced.

",https://github.com/corona-warn-app/cwa-server/issues/970,https://github.com/corona-warn-app/cwa-server/pull/972,"diff --git a/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java b/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java
--- a/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java
+++ b/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java
@@ -22,9 +22,11 @@
 import java.time.Period;
 import java.time.ZoneOffset;
 import java.util.Deque;
+import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Optional;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -42,6 +44,12 @@ public class FederationBatchProcessor {
   private final FederationGatewayDownloadService federationGatewayDownloadService;
   private final DownloadServiceConfig config;
   private final ValidFederationKeyFilter validFederationKeyFilter;
+  
+  // This is a potential memory-leak if there are very many batches
+  // This is an intentional decision: 
+  // We'd rather run into a memory-leak if there are too many batches 
+  // than run into an endless loop if a batch-tag repeats
+  private final Set<String> seenBatches;
 
   /**
    * Constructor.
@@ -63,6 +71,7 @@ public FederationBatchProcessor(FederationBatchInfoService batchInfoService,
     this.federationGatewayDownloadService = federationGatewayDownloadService;
     this.config = config;
     this.validFederationKeyFilter = federationKeyValidator;
+    this.seenBatches = new HashSet<>();
   }
 
   /**
@@ -129,16 +138,21 @@ public void processUnprocessedFederationBatches() throws FatalFederationGatewayE
     logger.info(""{} unprocessed federation batches found."", unprocessedBatches.size());
 
     while (!unprocessedBatches.isEmpty()) {
-      FederationBatchInfo currentBatch = unprocessedBatches.remove();
-      processBatchAndReturnNextBatchId(currentBatch, ERROR)
+      FederationBatchInfo currentBatchInfo = unprocessedBatches.remove();
+      seenBatches.add(currentBatchInfo.getBatchTag());
+      processBatchAndReturnNextBatchId(currentBatchInfo, ERROR)
           .ifPresent(nextBatchTag -> {
-            if (config.getEfgsEnforceDateBasedDownload()) {
-              unprocessedBatches.add(new FederationBatchInfo(nextBatchTag, currentBatch.getDate()));
+            if (isEfgsEnforceDateBasedDownloadAndNotSeen(nextBatchTag)) {
+              unprocessedBatches.add(new FederationBatchInfo(nextBatchTag, currentBatchInfo.getDate()));
             }
           });
     }
   }
 
+  private boolean isEfgsEnforceDateBasedDownloadAndNotSeen(String batchTag) {
+    return config.getEfgsEnforceDateBasedDownload() && !seenBatches.contains(batchTag);
+  }
+
   private Optional<String> processBatchAndReturnNextBatchId(
       FederationBatchInfo batchInfo, FederationBatchStatus errorStatus) throws FatalFederationGatewayException {
     LocalDate date = batchInfo.getDate();
","
--- a/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java
+++ b/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java
@@ -148,7 +148,7 @@ public class FederationBatchProcessor {
       AtomicBoolean batchContainsInvalidKeys = new AtomicBoolean(false);
       response.getDiagnosisKeyBatch().ifPresentOrElse(batch -> {
         logger.info(""Downloaded {} keys for date {} and batchTag {}."", batch.getKeysCount(), date, batchTag);
-        List<DiagnosisKey> validDiagnosisKeys = extractValidDiagnosisKeysFromBatch(batch);
+        List<DiagnosisKey> validDiagnosisKeys = extractValidDiagnosisKeysFromBatch(batch, date);
         int numOfInvalidKeys = batch.getKeysCount() - validDiagnosisKeys.size();
         if (numOfInvalidKeys > 0) {
           batchContainsInvalidKeys.set(true);
@@ -178,7 +178,7 @@ public class FederationBatchProcessor {
   }
 
   private List<DiagnosisKey> extractValidDiagnosisKeysFromBatch(DiagnosisKeyBatch diagnosisKeyBatch) {
-    return diagnosisKeyBatch.getKeysList()
+    return diagnosisKeyBatch.getKeysList().stream().filter(key -> key.getRollingPeriod() > 0)
         .stream()
         .filter(validFederationKeyFilter::isValid)
         .map(this::convertFederationDiagnosisKeyToDiagnosisKey)
@@ -188,7 +188,7 @@ public class FederationBatchProcessor {
   private Optional<DiagnosisKey> convertFederationDiagnosisKeyToDiagnosisKey(
       app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKey diagnosisKey) {
     try {
-      return Optional.of(DiagnosisKey.builder().fromFederationDiagnosisKey(diagnosisKey)
+      return Optional.of(DiagnosisKey.builder().fromFederationDiagnosisKey(diagnosisKey).withRollingPeriod(144)
           .withReportType(ReportType.CONFIRMED_TEST)
           .withFieldNormalization(new FederationKeyNormalizer(config))
           .build());
","['README.md', 'services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java']",e3f867a8005bd7f79c9eabe269d168fc01330484
422,python3 create_patchfiles.py 422,"Application Config: Add new Parameter attenuationDurationThresholds
Add a new parameter to the application configuration, called ""attenuationDurationTresholds"". With the help of this parameter, we will be able to calculate the overall risk factor much better.

Default values are: X=50, Y=70. There will be call with the RKI today night in which the values might be adjusted.

```yaml
attenuation-duration-thresholds:
  lower: 50
  upper: 70
```
",https://github.com/corona-warn-app/cwa-server/issues/414,https://github.com/corona-warn-app/cwa-server/pull/422,"diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto
--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto
+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto
@@ -12,4 +12,11 @@ message ApplicationConfiguration {
   app.coronawarn.server.common.protocols.internal.RiskScoreClassification riskScoreClasses = 2;
 
   app.coronawarn.server.common.protocols.internal.RiskScoreParameters exposureConfig = 3;
+
+  AttenuationDurationThresholds attenuationDurationThresholds = 4;
+}
+
+message AttenuationDurationThresholds {
+  int32 lower = 1;
+  int32 upper = 2;
 }
\ No newline at end of file
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java
@@ -20,6 +20,11 @@
 
 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
 
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MAX;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;
+
 import app.coronawarn.server.common.protocols.internal.ApplicationConfiguration;
 import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;
 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;
@@ -46,6 +51,7 @@ public ValidationResult validate() {
     this.errors = new ValidationResult();
 
     validateMinRisk();
+    validateAttenuationDurationThresholds();
 
     ValidationResult exposureResult = new ExposureConfigurationValidator(config.getExposureConfig()).validate();
     ValidationResult riskScoreResult = new RiskScoreClassificationValidator(config.getRiskScoreClasses()).validate();
@@ -60,4 +66,25 @@ private void validateMinRisk() {
       this.errors.add(new MinimumRiskLevelValidationError(minLevel));
     }
   }
+
+  private void validateAttenuationDurationThresholds() {
+    int lower = config.getAttenuationDurationThresholds().getLower();
+    int upper = config.getAttenuationDurationThresholds().getUpper();
+
+    checkThresholdBound(""lower"", lower);
+    checkThresholdBound(""upper"", upper);
+
+    if (lower > upper) {
+      String parameters = ""attenuationDurationThreshold.lower, attenuationDurationThreshold.upper"";
+      String values = lower + "", "" + upper;
+      this.errors.add(new GeneralValidationError(parameters, values, MIN_GREATER_THAN_MAX));
+    }
+  }
+
+  private void checkThresholdBound(String boundLabel, int boundValue) {
+    if (boundValue < ATTENUATION_DURATION_THRESHOLD_MIN || boundValue > ATTENUATION_DURATION_THRESHOLD_MAX) {
+      this.errors.add(
+          new GeneralValidationError(""attenuationDurationThreshold."" + boundLabel, boundValue, VALUE_OUT_OF_BOUNDS));
+    }
+  }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java
similarity index 82%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java
@@ -22,23 +22,21 @@
 
 import java.util.Objects;
 
-public class RiskScoreClassificationValidationError implements ValidationError {
+public class GeneralValidationError implements ValidationError {
 
   private final String errorSource;
-
   private final Object value;
-
   private final ErrorType reason;
 
   /**
-   * Creates a {@link RiskScoreClassificationValidationError} that stores the specified validation error source,
+   * Creates a {@link GeneralValidationError} that stores the specified validation error source,
    * erroneous value and a reason for the error to occur.
    *
    * @param errorSource A label that describes the property associated with this validation error.
    * @param value       The value that caused the validation error.
    * @param reason      A validation error specifier.
    */
-  public RiskScoreClassificationValidationError(String errorSource, Object value, ErrorType reason) {
+  public GeneralValidationError(String errorSource, Object value, ErrorType reason) {
     this.errorSource = errorSource;
     this.value = value;
     this.reason = reason;
@@ -46,7 +44,7 @@ public RiskScoreClassificationValidationError(String errorSource, Object value,
 
   @Override
   public String toString() {
-    return ""RiskScoreClassificationValidationError{""
+    return ""GeneralValidationError{""
         + ""errorType="" + reason
         + "", parameter='"" + errorSource + '\''
         + "", givenValue="" + value
@@ -61,7 +59,7 @@ public boolean equals(Object o) {
     if (o == null || getClass() != o.getClass()) {
       return false;
     }
-    RiskScoreClassificationValidationError that = (RiskScoreClassificationValidationError) o;
+    GeneralValidationError that = (GeneralValidationError) o;
     return Objects.equals(errorSource, that.errorSource)
         && Objects.equals(value, that.value)
         && Objects.equals(reason, that.reason);
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
@@ -53,4 +53,14 @@ private ParameterSpec() {
    * The allowed maximum value for a risk score.
    */
   public static final int RISK_SCORE_MAX = 4096;
+
+  /**
+   * The allowed minimum value for an attenuation threshold.
+   */
+  public static final int ATTENUATION_DURATION_THRESHOLD_MIN = 0;
+
+  /**
+   * The allowed maximum value for an attenuation threshold.
+   */
+  public static final int ATTENUATION_DURATION_THRESHOLD_MAX = 100;
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java
@@ -20,11 +20,11 @@
 
 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
 
-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.BLANK_LABEL;
-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_PARTITIONING;
-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_URL;
-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.MIN_GREATER_THAN_MAX;
-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.BLANK_LABEL;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.INVALID_PARTITIONING;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.INVALID_URL;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;
 
 import app.coronawarn.server.common.protocols.internal.RiskScoreClass;
 import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;
@@ -69,7 +69,7 @@ private void validateValues() {
       validateUrl(riskScoreClass.getUrl());
 
       if (minRiskLevel > maxRiskLevel) {
-        errors.add(new RiskScoreClassificationValidationError(
+        errors.add(new GeneralValidationError(
             ""minRiskLevel, maxRiskLevel"", minRiskLevel + "", "" + maxRiskLevel, MIN_GREATER_THAN_MAX));
       }
     }
@@ -77,13 +77,13 @@ private void validateValues() {
 
   private void validateLabel(String label) {
     if (label.isBlank()) {
-      errors.add(new RiskScoreClassificationValidationError(""label"", label, BLANK_LABEL));
+      errors.add(new GeneralValidationError(""label"", label, BLANK_LABEL));
     }
   }
 
   private void validateRiskScoreValueBounds(int value) {
     if (!RiskScoreValidator.isInBounds(value)) {
-      errors.add(new RiskScoreClassificationValidationError(""minRiskLevel/maxRiskLevel"", value, VALUE_OUT_OF_BOUNDS));
+      errors.add(new GeneralValidationError(""minRiskLevel/maxRiskLevel"", value, VALUE_OUT_OF_BOUNDS));
     }
   }
 
@@ -91,7 +91,7 @@ private void validateUrl(String url) {
     try {
       new URL(url.trim());
     } catch (MalformedURLException e) {
-      errors.add(new RiskScoreClassificationValidationError(""url"", url, INVALID_URL));
+      errors.add(new GeneralValidationError(""url"", url, INVALID_URL));
     }
   }
 
@@ -101,7 +101,7 @@ private void validateValueRangeCoverage() {
         .sum();
 
     if (partitionSum != ParameterSpec.RISK_SCORE_MAX + 1) {
-      errors.add(new RiskScoreClassificationValidationError(""covered value range"", partitionSum, INVALID_PARTITIONING));
+      errors.add(new GeneralValidationError(""covered value range"", partitionSum, INVALID_PARTITIONING));
     }
   }
 }
diff --git a/services/distribution/src/main/resources/master-config/app-config.yaml b/services/distribution/src/main/resources/master-config/app-config.yaml
--- a/services/distribution/src/main/resources/master-config/app-config.yaml
+++ b/services/distribution/src/main/resources/master-config/app-config.yaml
@@ -9,5 +9,8 @@
 # Change this file with caution!
 
 min-risk-score: 90
+attenuationDurationThresholds:
+  lower: 50
+  upper: 70
 risk-score-classes: !include risk-score-classification.yaml
 exposure-config: !include exposure-config.yaml
\ No newline at end of file
","
--- a/services/distribution/src/main/resources/master-config/app-config.yaml
+++ b/services/distribution/src/main/resources/master-config/app-config.yaml
@@ -11,6 +11,7 @@
 min-risk-score: 90
 risk-score-classes: !include risk-score-classification.yaml
 exposure-config: !include exposure-config.yaml
+attenuation-duration-thresholds: !include attenuation-duration-thresholds.yaml
","['README.md', 'common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java', 'services/distribution/src/main/resources/master-config/app-config.yaml']",1032f0e5950d2d6fa064da7026825e3c25260c79
572,python3 create_patchfiles.py 572,"S3ClientWrapper getObjects: Not all objects could be received
<!--
Thanks for reporting a bug 🙌 ❤️

Before opening a new issue, please make sure that we do not have any duplicates already open. You can ensure this by searching the issue list for this repository. If there is a duplicate, please close your issue and add a comment to the existing issue instead.

Also, be sure to check our documentation first: <URL>
-->

## Describe the bug

https://github.com/corona-warn-app/cwa-server/blob/a953c054f8b4dc97d6a40525c5c3d5aa4d867394/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java#L83

It is possible that not all objects are received, because the **listObjectsV2(ListObjectsV2Request listObjectsV2Request)** method  limits them up to 1000.

Javadoc [listObjectsV2](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/S3Client.html#listObjectsV2-software.amazon.awssdk.services.s3.model.ListObjectsV2Request-)
> Returns some or all (up to 1,000) of the objects in a bucket.

## Possible Fix

1. Checking the response for more data with the **isTruncated** method.
JavaDoc [isTruncated](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/model/ListObjectsV2Response.html#isTruncated--)
> Set to false if all of the results were returned. Set to true if more keys are available to return. If the number of results exceeds that specified by MaxKeys, all of the results might not be returned.
2. When the response is truncated, calling the **nextContinuationToken** method for the next token.
JavaDoc [nextContinuationToken](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/model/ListObjectsV2Response.html#nextContinuationToken--)

> NextContinuationToken is sent when isTruncated is true, which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken.

3. Build a new ListObjectsV2Request with the **continuationToken** and call **listObjectsV2** again
JavaDoc [continuationToken](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/model/ListObjectsV2Request.Builder.html#continuationToken-java.lang.String-)

> ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key.

4. Repeat everything until isTruncate is false.

Here is a pretty good example from AWS. They use a different S3Client, but it is very similar to the one you use. ([source](https://docs.aws.amazon.com/AmazonS3/latest/dev/ListingObjectKeysUsingJava.html))

```java
import com.amazonaws.AmazonServiceException;
import com.amazonaws.SdkClientException;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.ListObjectsV2Request;
import com.amazonaws.services.s3.model.ListObjectsV2Result;
import com.amazonaws.services.s3.model.S3ObjectSummary;

import java.io.IOException;

public class ListKeys {

    public static void main(String[] args) throws IOException {
        Regions clientRegion = Regions.DEFAULT_REGION;
        String bucketName = ""*** Bucket name ***"";

        try {
            AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                    .withCredentials(new ProfileCredentialsProvider())
                    .withRegion(clientRegion)
                    .build();

            System.out.println(""Listing objects"");

            // maxKeys is set to 2 to demonstrate the use of
            // ListObjectsV2Result.getNextContinuationToken()
            ListObjectsV2Request req = new ListObjectsV2Request().withBucketName(bucketName).withMaxKeys(2);
            ListObjectsV2Result result;

            do {
                result = s3Client.listObjectsV2(req);

                for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {
                    System.out.printf("" - %s (size: %d)\n"", objectSummary.getKey(), objectSummary.getSize());
                }
                // If there are more than maxKeys keys in the bucket, get a continuation token
                // and list the next objects.
                String token = result.getNextContinuationToken();
                System.out.println(""Next Continuation Token: "" + token);
                req.setContinuationToken(token);
            } while (result.isTruncated());
        } catch (AmazonServiceException e) {
            // The call was transmitted successfully, but Amazon S3 couldn't process 
            // it, so it returned an error response.
            e.printStackTrace();
        } catch (SdkClientException e) {
            // Amazon S3 couldn't be contacted for a response, or the client
            // couldn't parse the response from Amazon S3.
            e.printStackTrace();
        }
    }
}
``
",https://github.com/corona-warn-app/cwa-server/issues/562,https://github.com/corona-warn-app/cwa-server/pull/572,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java
@@ -20,9 +20,11 @@
 
 package app.coronawarn.server.services.distribution.objectstore.client;
 
+import static java.lang.Boolean.TRUE;
 import static java.util.stream.Collectors.toList;
 
 import java.nio.file.Path;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
@@ -78,13 +80,20 @@ public boolean bucketExists(String bucketName) {
       backoff = @Backoff(delayExpression = ""${services.distribution.objectstore.retry-backoff}""))
   public List<S3Object> getObjects(String bucket, String prefix) {
     logRetryStatus(""object download"");
-
-    ListObjectsV2Response response =
-        s3Client.listObjectsV2(ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).build());
-
-    return response.contents().stream()
-        .map(s3Object -> buildS3Object(s3Object, bucket))
-        .collect(toList());
+    List<S3Object> allS3Objects = new ArrayList<>();
+    String continuationToken = null;
+
+    do {
+      ListObjectsV2Request request =
+          ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).continuationToken(continuationToken).build();
+      ListObjectsV2Response response = s3Client.listObjectsV2(request);
+      response.contents().stream()
+          .map(s3Object -> buildS3Object(s3Object, bucket))
+          .forEach(allS3Objects::add);
+      continuationToken = TRUE.equals(response.isTruncated()) ? response.continuationToken() : null;
+    } while (continuationToken != null);
+
+    return allS3Objects;
   }
 
   @Recover
","--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java
@@ -82,7 +82,7 @@ public class S3ClientWrapper implements ObjectStoreClient {
     @Retryable(
         value = SdkException.class,
         maxAttemptsExpression = ""${services.distribution.objectstore.retry-attempts}"",
-        backoff = @Backoff(delayExpression = ""${services.distribution.objectstore.retry-backoff}""))
+        backoff = @Backoff(delayExpression = ""${services.distribution.objectstore.retry-backoff}""), recover = ""skipReadOperation"")
     public List<S3Object> getObjects(String bucket, String prefix) {
         logRetryStatus(""object download"");
 
@@ -120,7 +120,7 @@ public class S3ClientWrapper implements ObjectStoreClient {
     @Retryable(
         value = SdkException.class,
         maxAttemptsExpression = ""${services.distribution.objectstore.retry-attempts}"",
-        backoff = @Backoff(delayExpression = ""${services.distribution.objectstore.retry-backoff}""))
+        backoff = @Backoff(delayExpression = ""${services.distribution.objectstore.retry-backoff}""), recover = ""skipModifyingOperation"")
     public void removeObjects(String bucket, List<String> objectNames) {
         if (objectNames.isEmpty()) {
             return;
","['README.md', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java']",97f16ca7b711a30eec695c1ae7a6f032df16533b
378,python3 create_patchfiles.py 378,"Remove MinIO SDK and use AWS SDK instead
Since MinIO SDK still hasn't released a fix version for fixing the XML vulnerability in the SimpleXML library, we need to consider alternative S3 SDK's. Therefore, prepare an alternative approach with AWS SDK, which is then used by the ObjectStoreAccess class.

",https://github.com/corona-warn-app/cwa-server/issues/363,https://github.com/corona-warn-app/cwa-server/pull/378,"diff --git a/services/distribution/pom.xml b/services/distribution/pom.xml
--- a/services/distribution/pom.xml
+++ b/services/distribution/pom.xml
@@ -54,9 +54,9 @@
   <artifactId>distribution</artifactId>
   <dependencies>
     <dependency>
-      <groupId>io.minio</groupId>
-      <artifactId>minio</artifactId>
-      <version>7.0.2</version>
+      <groupId>software.amazon.awssdk</groupId>
+      <artifactId>s3</artifactId>
+      <version>2.13.25</version>
     </dependency>
     <dependency>
       <artifactId>bcpkix-jdk15on</artifactId>
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java
deleted file mode 100644
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*-
- * ---license-start
- * Corona-Warn-App
- * ---
- * Copyright (C) 2020 SAP SE and all other contributors
- * ---
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * ---license-end
- */
-
-package app.coronawarn.server.services.distribution.objectstore.client;
-
-import io.minio.MinioClient;
-import io.minio.PutObjectOptions;
-import io.minio.Result;
-import io.minio.errors.ErrorResponseException;
-import io.minio.errors.InsufficientDataException;
-import io.minio.errors.InternalException;
-import io.minio.errors.InvalidBucketNameException;
-import io.minio.errors.InvalidResponseException;
-import io.minio.errors.XmlParserException;
-import io.minio.messages.Item;
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.security.InvalidKeyException;
-import java.security.NoSuchAlgorithmException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.stream.Collectors;
-
-/**
- * Implementation of {@link ObjectStoreClient} that encapsulates a {@link MinioClient}.
- */
-public class MinioClientWrapper implements ObjectStoreClient {
-
-  private final MinioClient minioClient;
-
-  public MinioClientWrapper(MinioClient minioClient) {
-    this.minioClient = minioClient;
-  }
-
-  @Override
-  public List<S3Object> getObjects(String bucket, String prefix) {
-    Iterable<Result<Item>> objects = this.minioClient.listObjects(bucket, prefix, true);
-
-    var list = new ArrayList<S3Object>();
-    for (Result<Item> item : objects) {
-      try {
-        list.add(S3Object.of(item.get()));
-      } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException
-          | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException
-          | IllegalArgumentException e) {
-        throw new ObjectStoreOperationFailedException(""Failed to download objects from object store."", e);
-      }
-    }
-    return list;
-  }
-
-  @Override
-  public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {
-    try {
-      var options = new PutObjectOptions(Files.size(filePath), -1);
-      Map<String, String> minioHeaders = headers.entrySet().stream()
-          .map(entry -> Map.entry(entry.getKey().keyValue, entry.getValue()))
-          .collect(Collectors.toMap(Entry::getKey, Entry::getValue));
-
-      options.setHeaders(minioHeaders);
-      minioClient.putObject(bucket, objectName, filePath.toString(), options);
-    } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException
-        | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException
-        | IllegalArgumentException e) {
-      throw new ObjectStoreOperationFailedException(""Failed to upload object to object store."", e);
-    }
-  }
-
-  @Override
-  public void removeObjects(String bucket, List<String> objectNames) {
-    if (!objectNames.isEmpty() && minioClient.removeObjects(bucket, objectNames).iterator().hasNext()) {
-      throw new ObjectStoreOperationFailedException(""Failed to remove objects from object store"");
-    }
-  }
-
-  @Override
-  public boolean bucketExists(String bucket) {
-    try {
-      return minioClient.bucketExists(bucket);
-    } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException
-        | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException
-        | IllegalArgumentException e) {
-      throw new ObjectStoreOperationFailedException(""Failed to check if object store bucket exists."", e);
-    }
-  }
-}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java
@@ -22,14 +22,16 @@
 
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;
-import io.minio.MinioClient;
-import io.minio.errors.InvalidEndpointException;
-import io.minio.errors.InvalidPortException;
+import java.net.URI;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import software.amazon.awssdk.auth.credentials.AwsCredentials;
+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
+import software.amazon.awssdk.regions.Region;
+import software.amazon.awssdk.services.s3.S3Client;
 
 /**
- * Manages the instantiation of the {@link MinioClient} bean.
+ * Manages the instantiation of the {@link ObjectStoreClient} bean.
  */
 @Configuration
 public class ObjectStoreClientConfig {
@@ -37,29 +39,44 @@ public class ObjectStoreClientConfig {
   private static final String DEFAULT_REGION = ""eu-west-1"";
 
   @Bean
-  public ObjectStoreClient createObjectStoreClient(DistributionServiceConfig distributionServiceConfig)
-      throws InvalidPortException, InvalidEndpointException {
+  public ObjectStoreClient createObjectStoreClient(DistributionServiceConfig distributionServiceConfig) {
     return createClient(distributionServiceConfig.getObjectStore());
   }
 
-  private MinioClientWrapper createClient(ObjectStore objectStore)
-      throws InvalidPortException, InvalidEndpointException {
-    if (isSsl(objectStore)) {
-      return new MinioClientWrapper(new MinioClient(
-          objectStore.getEndpoint(),
-          objectStore.getPort(),
-          objectStore.getAccessKey(), objectStore.getSecretKey(),
-          DEFAULT_REGION,
-          true));
-    } else {
-      return new MinioClientWrapper(new MinioClient(
-          objectStore.getEndpoint(),
-          objectStore.getPort(),
-          objectStore.getAccessKey(), objectStore.getSecretKey()));
-    }
+  private ObjectStoreClient createClient(ObjectStore objectStore) {
+    return new S3ClientWrapper(S3Client.builder()
+        .region(Region.of(DEFAULT_REGION))
+        .endpointOverride(URI.create(objectStore.getEndpoint() + "":"" + objectStore.getPort()))
+        .credentialsProvider(new CredentialsProvider(objectStore.getAccessKey(), objectStore.getSecretKey()))
+        .build());
   }
 
-  private boolean isSsl(ObjectStore objectStore) {
-    return objectStore.getEndpoint().startsWith(""https://"");
+  /**
+   * Statically serves credentials based on construction arguments.
+   */
+  static class CredentialsProvider implements AwsCredentialsProvider {
+
+    final String accessKeyId;
+    final String secretAccessKey;
+
+    public CredentialsProvider(String accessKeyId, String secretAccessKey) {
+      this.accessKeyId = accessKeyId;
+      this.secretAccessKey = secretAccessKey;
+    }
+
+    @Override
+    public AwsCredentials resolveCredentials() {
+      return new AwsCredentials() {
+        @Override
+        public String accessKeyId() {
+          return accessKeyId;
+        }
+
+        @Override
+        public String secretAccessKey() {
+          return secretAccessKey;
+        }
+      };
+    }
   }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java
@@ -0,0 +1,123 @@
+/*-
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.services.distribution.objectstore.client;
+
+import static java.util.stream.Collectors.toList;
+
+import java.nio.file.Path;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import software.amazon.awssdk.core.exception.SdkException;
+import software.amazon.awssdk.core.sync.RequestBody;
+import software.amazon.awssdk.services.s3.S3Client;
+import software.amazon.awssdk.services.s3.model.Delete;
+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;
+import software.amazon.awssdk.services.s3.model.DeleteObjectsResponse;
+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;
+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;
+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;
+import software.amazon.awssdk.services.s3.model.PutObjectRequest;
+
+/**
+ * Implementation of {@link ObjectStoreClient} that encapsulates an {@link S3Client}.
+ */
+public class S3ClientWrapper implements ObjectStoreClient {
+
+  private static final Logger logger = LoggerFactory.getLogger(S3ClientWrapper.class);
+
+  private final S3Client s3Client;
+
+  public S3ClientWrapper(S3Client s3Client) {
+    this.s3Client = s3Client;
+  }
+
+  @Override
+  public boolean bucketExists(String bucketName) {
+    try {
+      return !s3Client.listBuckets().buckets().stream().findFirst().isEmpty();
+    } catch (SdkException e) {
+      throw new ObjectStoreOperationFailedException(""Failed to determine if bucket exists."", e);
+    }
+  }
+
+  @Override
+  public List<S3Object> getObjects(String bucket, String prefix) {
+    try {
+      ListObjectsV2Response response =
+          s3Client.listObjectsV2(ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).build());
+      return response.contents().stream().map(S3ClientWrapper::buildS3Object).collect(toList());
+    } catch (SdkException e) {
+      throw new ObjectStoreOperationFailedException(""Failed to upload object to object store"", e);
+    }
+  }
+
+  @Override
+  public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {
+    RequestBody bodyFile = RequestBody.fromFile(filePath);
+
+    var requestBuilder = PutObjectRequest.builder().bucket(bucket).key(objectName);
+    if (headers.containsKey(HeaderKey.AMZ_ACL)) {
+      requestBuilder.acl(headers.get(HeaderKey.AMZ_ACL));
+    }
+    if (headers.containsKey(HeaderKey.CACHE_CONTROL)) {
+      requestBuilder.cacheControl(headers.get(HeaderKey.CACHE_CONTROL));
+    }
+
+    try {
+      s3Client.putObject(requestBuilder.build(), bodyFile);
+    } catch (SdkException e) {
+      throw new ObjectStoreOperationFailedException(""Failed to upload object to object store"", e);
+    }
+  }
+
+  @Override
+  public void removeObjects(String bucket, List<String> objectNames) {
+    if (objectNames.isEmpty()) {
+      return;
+    }
+
+    Collection<ObjectIdentifier> identifiers = objectNames.stream()
+        .map(key -> ObjectIdentifier.builder().key(key).build()).collect(toList());
+
+    try {
+      DeleteObjectsResponse response = s3Client.deleteObjects(
+          DeleteObjectsRequest.builder()
+              .bucket(bucket)
+              .delete(Delete.builder().objects(identifiers).build()).build());
+
+      if (response.hasErrors()) {
+        String errMessage = ""Failed to remove objects from object store."";
+        logger.error(""{} {}"", errMessage, response.errors());
+        throw new ObjectStoreOperationFailedException(errMessage);
+      }
+    } catch (SdkException e) {
+      throw new ObjectStoreOperationFailedException(""Failed to remove objects from object store."", e);
+    }
+  }
+
+  private static S3Object buildS3Object(software.amazon.awssdk.services.s3.model.S3Object s3Object) {
+    String etag = s3Object.eTag().replaceAll(""\"""", """");
+    return new S3Object(s3Object.key(), etag);
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3Object.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3Object.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3Object.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3Object.java
@@ -20,7 +20,6 @@
 
 package app.coronawarn.server.services.distribution.objectstore.client;
 
-import io.minio.messages.Item;
 import java.util.Objects;
 
 /**
@@ -64,17 +63,6 @@ public String getEtag() {
     return etag;
   }
 
-  /**
-   * Returns a new instance of an S3Object based on the given item.
-   *
-   * @param item the item (as provided by MinIO)
-   * @return the S3Object representation
-   */
-  public static S3Object of(Item item) {
-    String etag = item.etag().replaceAll(""\"""", """");
-    return new S3Object(item.objectName(), etag);
-  }
-
   @Override
   public boolean equals(Object o) {
     if (this == o) {
diff --git a/services/distribution/src/main/java/io/minio/messages/Item.java b/services/distribution/src/main/java/io/minio/messages/Item.java
deleted file mode 100644
--- a/services/distribution/src/main/java/io/minio/messages/Item.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/*
- * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2015 MinIO, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.minio.messages;
-
-import java.time.ZonedDateTime;
-import java.util.Map;
-import org.simpleframework.xml.Element;
-import org.simpleframework.xml.Root;
-
-/* ----------------------------------------------------------------
- * Copied from MinIO due to patch not yet available.
- * https://github.com/minio/minio-java/pull/921
- * Waiting for new release version: 7.0.3
- * ----------------------------------------------------------------
- */
-
-/**
- * Helper class to denote Object information in {@link ListBucketResult} and {@link ListBucketResultV1}.
- */
-@Root(name = ""Contents"", strict = false)
-public class Item {
-
-  @Element(name = ""Key"")
-  private String objectName;
-
-  @Element(name = ""LastModified"")
-  private ResponseDate lastModified;
-
-  @Element(name = ""ETag"")
-  private String etag;
-
-  @Element(name = ""Size"")
-  private long size;
-
-  @Element(name = ""StorageClass"")
-  private String storageClass;
-
-  @Element(name = ""Owner"", required = false) /* Monkeypatch: Owner should be optional */
-  private Owner owner;
-
-  @Element(name = ""UserMetadata"", required = false)
-  private Metadata userMetadata;
-
-  private boolean isDir = false;
-
-  public Item() {
-
-  }
-
-  /**
-   * Constructs a new Item for prefix i.e. directory.
-   */
-  public Item(String prefix) {
-    this.objectName = prefix;
-    this.isDir = true;
-  }
-
-  /**
-   * Returns object name.
-   */
-  public String objectName() {
-    return objectName;
-  }
-
-  /**
-   * Returns last modified time of the object.
-   */
-  public ZonedDateTime lastModified() {
-    return lastModified.zonedDateTime();
-  }
-
-  /**
-   * Returns ETag of the object.
-   */
-  public String etag() {
-    return etag;
-  }
-
-  /**
-   * Returns object size.
-   */
-  public long size() {
-    return size;
-  }
-
-  /**
-   * Returns storage class of the object.
-   */
-  public String storageClass() {
-    return storageClass;
-  }
-
-  /**
-   * Returns owner object of given the object.
-   */
-  public Owner owner() {
-    return owner;
-  }
-
-  /**
-   * Returns user metadata. This is MinIO specific extension to ListObjectsV2.
-   */
-  public Map<String, String> userMetadata() {
-    if (userMetadata == null) {
-      return null;
-    }
-
-    return userMetadata.get();
-  }
-
-  /**
-   * Returns whether the object is a directory or not.
-   */
-  public boolean isDir() {
-    return isDir;
-  }
-}
","
--- a/services/distribution/pom.xml
+++ b/services/distribution/pom.xml
@@ -56,7 +56,7 @@
     <dependency>
       <groupId>io.minio</groupId>
       <artifactId>minio</artifactId>
-      <version>7.0.2</version>
+      <version>7.0.3</version>
     </dependency>
     <dependency>
       <artifactId>bcpkix-jdk15on</artifactId>
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java
@@ -56,7 +56,7 @@
     public List<S3Object> getObjects(String bucket, String prefix) {
       Iterable<Result<Item>> objects = this.minioClient.listObjects(bucket, prefix, true);
 
-      var list = new ArrayList<S3Object>();
+      List<S3Object> list = new ArrayList<>();
       for (Result<Item> item : objects) {
         try {
           list.add(S3Object.of(item.get()));
@@ -73,7 +73,7 @@
     public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {
       try {
         var options = new PutObjectOptions(Files.size(filePath), -1);
-        Map<String, String> minioHeaders = headers.entrySet().stream()
+        Map<String, String> minioHeaders = headers.entrySet().stream()
             .map(entry -> Map.entry(entry.getKey().keyValue, entry.getValue()))
             .collect(Collectors.toMap(Entry::getKey, Entry::getValue));
 
@@ -97,7 +97,7 @@
     public boolean bucketExists(String bucket) {
       try {
         return minioClient.bucketExists(bucket);
-      } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException
+      } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException
           | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException
           | IllegalArgumentException e) {
         throw new ObjectStoreOperationFailedException(""Failed to check if object store bucket exists."", e);
","['README.md', '/dev/null', 'services/distribution/pom.xml', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3Object.java', 'services/distribution/src/main/java/io/minio/messages/Item.java']",79eef3fa06e3e6bd1bfa9a97c0959d62551295b8
659,python3 create_patchfiles.py 659,"Plausible Deniability: Add ""Padding"" property to submission payload
Currently, mobile apps are collecting keys based on their install date. When a user uploads his keys (after being tested positive), the payload will contain 1-13 keys. Although the traffic between mobile & server is secured, an attacker may still sniff the packages in the network and predict, based on the request size, how many keys are probably part of the submission request. This may then lead to additional information for the attacker in an attempt to deanonymize a user.

In order to mitigate this attack, add a new field to the submission payload, called `padding` of type string. The field shall be optional and must not break compatibility to the current/older mobile implementations (which should be given due to the use of protobuf). The server shall not process this field.
",https://github.com/corona-warn-app/cwa-server/issues/658,https://github.com/corona-warn-app/cwa-server/pull/659,"diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto
--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto
+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto
@@ -6,4 +6,5 @@ import ""app/coronawarn/server/common/protocols/external/exposurenotification/tem
 
 message SubmissionPayload {
   repeated app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey keys = 1;
-}
\ No newline at end of file
+  bytes padding = 2;
+}
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java
@@ -20,6 +20,7 @@
 
 package app.coronawarn.server.services.submission;
 
+import app.coronawarn.server.services.submission.config.SubmissionServiceConfigValidator;
 import io.micrometer.core.aop.TimedAspect;
 import io.micrometer.core.instrument.MeterRegistry;
 import java.util.Arrays;
@@ -40,6 +41,7 @@
 import org.springframework.core.env.Environment;
 import org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;
 import org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter;
+import org.springframework.validation.Validator;
 
 @SpringBootApplication(exclude = {UserDetailsServiceAutoConfiguration.class})
 @EnableJdbcRepositories(basePackages = ""app.coronawarn.server.common.persistence"")
@@ -74,6 +76,11 @@ ProtobufHttpMessageConverter protobufHttpMessageConverter() {
     return new ProtobufHttpMessageConverter();
   }
 
+  @Bean
+  public static Validator configurationPropertiesValidator() {
+    return new SubmissionServiceConfigValidator();
+  }
+
   @Override
   public void setEnvironment(Environment environment) {
     List<String> profiles = Arrays.asList(environment.getActiveProfiles());
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionPayloadSizeFilter.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionPayloadSizeFilter.java
new file mode 100644
--- /dev/null
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionPayloadSizeFilter.java
@@ -0,0 +1,58 @@
+/*-
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.services.submission.config;
+
+import java.io.IOException;
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Component;
+import org.springframework.web.filter.OncePerRequestFilter;
+
+/**
+ * {@link SubmissionPayloadSizeFilter} instances filter requests exceeding a certain size limit.
+ */
+@Component
+public class SubmissionPayloadSizeFilter extends OncePerRequestFilter {
+
+  private final long maximumRequestSize;
+
+  public SubmissionPayloadSizeFilter(SubmissionServiceConfig config) {
+    this.maximumRequestSize = config.getMaximumRequestSize().toBytes();
+  }
+
+  /**
+   * Filters each request that exceeds the maximum size.
+   */
+  @Override
+  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
+      throws ServletException, IOException {
+    if (request.getContentLengthLong() > maximumRequestSize) {
+      response.setStatus(HttpStatus.BAD_REQUEST.value());
+      response.getWriter().write(""Request size exceeded limit of "" + maximumRequestSize + "" bytes"");
+    } else {
+      filterChain.doFilter(request, response);
+    }
+  }
+
+}
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java
@@ -26,6 +26,7 @@
 import javax.validation.constraints.Pattern;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.stereotype.Component;
+import org.springframework.util.unit.DataSize;
 import org.springframework.validation.annotation.Validated;
 
 @Component
@@ -53,6 +54,7 @@ public class SubmissionServiceConfig {
   @Min(1)
   @Max(10000)
   private Integer connectionPoolSize;
+  private DataSize maximumRequestSize;
   private Payload payload;
   private Verification verification;
   private Monitoring monitoring;
@@ -98,6 +100,14 @@ public void setConnectionPoolSize(Integer connectionPoolSize) {
     this.connectionPoolSize = connectionPoolSize;
   }
 
+  public DataSize getMaximumRequestSize() {
+    return maximumRequestSize;
+  }
+
+  public void setMaximumRequestSize(DataSize maximumRequestSize) {
+    this.maximumRequestSize = maximumRequestSize;
+  }
+
   public Integer getMaxNumberOfKeys() {
     return payload.getMaxNumberOfKeys();
   }
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigValidator.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigValidator.java
new file mode 100644
--- /dev/null
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigValidator.java
@@ -0,0 +1,54 @@
+/*-
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.services.submission.config;
+
+import org.springframework.util.unit.DataSize;
+import org.springframework.validation.Errors;
+import org.springframework.validation.Validator;
+
+/**
+ * {@link SubmissionPayloadSizeFilter} instances validate the values of the SubmissionServiceConfig.
+ */
+public class SubmissionServiceConfigValidator implements Validator {
+
+  public static final DataSize MIN_MAXIMUM_REQUEST_SIZE = DataSize.ofBytes(280);
+  public static final DataSize MAX_MAXIMUM_REQUEST_SIZE = DataSize.ofKilobytes(200);
+
+  @Override
+  public boolean supports(Class<?> type) {
+    return type == SubmissionServiceConfig.class;
+  }
+
+  /**
+   * Validate if the MaximumRequestSize of the {@link SubmissionServiceConfig} is in the defined range.
+   */
+  @Override
+  public void validate(Object o, Errors errors) {
+    SubmissionServiceConfig properties = (SubmissionServiceConfig) o;
+
+    if (properties.getMaximumRequestSize().compareTo(MIN_MAXIMUM_REQUEST_SIZE) < 0
+        || properties.getMaximumRequestSize().compareTo(MAX_MAXIMUM_REQUEST_SIZE) > 0) {
+      errors.rejectValue(""maximumRequestSize"",
+          ""Must be at least "" + MIN_MAXIMUM_REQUEST_SIZE + "" and not more than "" + MAX_MAXIMUM_REQUEST_SIZE + ""."");
+    }
+  }
+
+}
diff --git a/services/submission/src/main/resources/application.yaml b/services/submission/src/main/resources/application.yaml
--- a/services/submission/src/main/resources/application.yaml
+++ b/services/submission/src/main/resources/application.yaml
@@ -23,6 +23,8 @@ services:
     random-key-padding-multiplier: ${RANDOM_KEY_PADDING_MULTIPLIER:1}
     # The ApacheHttpClient's connection pool size.
     connection-pool-size: 200
+    # The maximum request size accepted by the SubmissionController (e.g. 200B or 100KB).
+    maximum-request-size: ${MAXIMUM_REQUEST_SIZE:100KB}
     payload:
       # The maximum number of keys accepted for any submission.
       max-number-of-keys: 14
","
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java
@@ -54,6 +54,7 @@ public class SubmissionServiceConfig {
   private Integer randomKeyPaddingMultiplier;
   @Min(1)
   @Max(10000)
+  private Integer connectionPoolSize;
   private Payload payload;
   private Verification verification;
   private Monitoring monitoring;
@@ -86,6 +87,11 @@ public class SubmissionServiceConfig {
     this.randomKeyPaddingMultiplier = randomKeyPaddingMultiplier;
   }
 
+  public Integer getConnectionPoolSize() {
+    return connectionPoolSize;
+  }
+
+  public void setConnectionPoolSize(Integer connectionPoolSize) {
+    this.connectionPoolSize = connectionPoolSize;
+  }
 
   public Integer getMaxNumberOfKeys() {
     return payload.getMaxNumberOfKeys();
","['README.md', '/dev/null', 'common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto', 'services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java', 'services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java', 'services/submission/src/main/resources/application.yaml']",ee78bf15ece7f282836149b5f39422892f055096
277,python3 create_patchfiles.py 277,"Switch application*.properties files to Yaml
Let's switch over to YAML for better readability.

Affected files:
 common/persistence/src/test/resources/application.properties
 services/submission/src/main/resources/application.properties
 services/submission/src/test/resources/application.properties
 services/distribution/src/main/resources/application.properties
 services/distribution/src/test/resources/application.properties
 services/submission/src/main/resources/application-dev.properties
 services/distribution/src/main/resources/application-dev.properties
 services/submission/src/main/resources/application-cloud.properties
 services/distribution/src/main/resources/application-cloud.properties
 services/distribution/src/main/resources/application-testdata.properties
",https://github.com/corona-warn-app/cwa-server/issues/245,https://github.com/corona-warn-app/cwa-server/pull/277,"diff --git a/README.md b/README.md
--- a/README.md
+++ b/README.md
@@ -6,7 +6,7 @@
     <a href=""https://github.com/corona-warn-app/cwa-server/commits/"" title=""Last Commit""><img src=""https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat""></a>
     <a href=""https://github.com/corona-warn-app/cwa-server/issues"" title=""Open Issues""><img src=""https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat""></a>
     <a href=""https://circleci.com/gh/corona-warn-app/cwa-server"" title=""Build Status""><img src=""https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a""></a>
-        <a href=""https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server"" title=""Quality Gate""><img src=""https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status""></a>    
+        <a href=""https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server"" title=""Quality Gate""><img src=""https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status""></a>
         <a href=""https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list"" title=""Coverage""><img src=""https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage""></a>
     <a href=""https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE"" title=""License""><img src=""https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat""></a>
 </p>
@@ -57,7 +57,7 @@ The docker-compose contains the following services:
 
 Service       | Description | Endpoint and Default Credentials
 --------------|-------------|-----------
-submission    | The Corona-Warn-App submission service                                                      | http://localhost:8000 
+submission    | The Corona-Warn-App submission service                                                      | http://localhost:8000
 distribution  | The Corona-Warn-App distribution service                                                    | NO ENDPOINT
 postgres      | A [postgres] database installation                                                          | postgres:8001 <br> Username: postgres <br> Password: postgres
 pgadmin       | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | http://localhost:8002 <br> Username: user@domain.com <br> Password: password
@@ -99,8 +99,8 @@ To prepare your machine to run the CWA project locally, we recommend that you fi
 
 After you made sure that the specified dependencies are running, configure them in the respective configuration files.
 
-* Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.properties) and in the [distribution config](./services/distribution/src/main/resources/application.properties)
-* Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.properties)
+* Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)
+* Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)
 * Configure the certificate and private key for the distribution service, the paths need to be prefixed with `file:`
     * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`
     * `VAULT_FILESIGNING_CERT` should be the path to the certificate, example available in `<repo-root>/docker-compose-test-secrets/certificate.cert`
@@ -181,7 +181,7 @@ The following public repositories are currently available for the Corona-Warn-Ap
 
 Copyright (c) 2020 SAP SE or an SAP affiliate company.
 
-Licensed under the **Apache License, Version 2.0** (the ""License""); you may not use this file except in compliance with the License. 
+Licensed under the **Apache License, Version 2.0** (the ""License""); you may not use this file except in compliance with the License.
 
 You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.
 
diff --git a/services/distribution/src/main/resources/application-cloud.properties b/services/distribution/src/main/resources/application-cloud.properties
deleted file mode 100644
--- a/services/distribution/src/main/resources/application-cloud.properties
+++ /dev/null
@@ -1,9 +0,0 @@
-spring.flyway.enabled=true
-spring.flyway.locations=classpath:db/migration/postgres
-
-spring.datasource.driver-class-name=org.postgresql.Driver
-spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}
-spring.datasource.username=${POSTGRESQL_USER}
-spring.datasource.password=${POSTGRESQL_PASSWORD}
-
-services.distribution.paths.output=/tmp/distribution
\ No newline at end of file
diff --git a/services/distribution/src/main/resources/application-cloud.yaml b/services/distribution/src/main/resources/application-cloud.yaml
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/resources/application-cloud.yaml
@@ -0,0 +1,22 @@
+---
+spring:
+  flyway:
+    enabled: true
+    locations: classpath:db/migration/postgres
+  datasource:
+    driver-class-name: org.postgresql.Driver
+    url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}
+    username: ${POSTGRESQL_USER}
+    password: ${POSTGRESQL_PASSWORD}
+
+services:
+  distribution:
+    paths:
+      output: /tmp/distribution
+    objectstore:
+      access-key: ${CWA_OBJECTSTORE_ACCESSKEY}
+      secret-key: ${CWA_OBJECTSTORE_SECRETKEY}
+      endpoint: ${CWA_OBJECTSTORE_ENDPOINT}
+      bucket: ${CWA_OBJECTSTORE_BUCKET}
+      port: ${CWA_OBJECTSTORE_PORT}
+      set-public-read-acl-on-put-object: false
diff --git a/services/distribution/src/main/resources/application-dev.properties b/services/distribution/src/main/resources/application-dev.properties
deleted file mode 100644
--- a/services/distribution/src/main/resources/application-dev.properties
+++ /dev/null
@@ -1,2 +0,0 @@
-logging.level.org.springframework.web=DEBUG
-logging.level.app.coronawarn=DEBUG
\ No newline at end of file
diff --git a/services/distribution/src/main/resources/application-dev.yaml b/services/distribution/src/main/resources/application-dev.yaml
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/resources/application-dev.yaml
@@ -0,0 +1,8 @@
+---
+logging:
+  level:
+    org:
+      springframework:
+        web: DEBUG
+    app:
+      coronawarn: DEBUG
diff --git a/services/distribution/src/main/resources/application-testdata.properties b/services/distribution/src/main/resources/application-testdata.properties
deleted file mode 100644
--- a/services/distribution/src/main/resources/application-testdata.properties
+++ /dev/null
@@ -1,2 +0,0 @@
-services.distribution.testdata.seed=123456
-services.distribution.testdata.exposures-per-hour=1000
\ No newline at end of file
diff --git a/services/distribution/src/main/resources/application-testdata.yaml b/services/distribution/src/main/resources/application-testdata.yaml
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/resources/application-testdata.yaml
@@ -0,0 +1,6 @@
+---
+services:
+  distribution:
+    testdata:
+      seed: 123456
+      exposures-per-hour: 1000
diff --git a/services/distribution/src/main/resources/application.properties b/services/distribution/src/main/resources/application.properties
deleted file mode 100644
--- a/services/distribution/src/main/resources/application.properties
+++ /dev/null
@@ -1,52 +0,0 @@
-logging.level.org.springframework.web=INFO
-logging.level.app.coronawarn=INFO
-spring.main.web-application-type=NONE
-
-services.distribution.retention-days=14
-services.distribution.output-file-name=index
-services.distribution.tek-export.file-name=export.bin
-services.distribution.tek-export.file-header=EK Export v1
-services.distribution.tek-export.file-header-width=16
-
-services.distribution.paths.output=out
-services.distribution.paths.privatekey=${VAULT_FILESIGNING_SECRET}
-services.distribution.paths.certificate=${VAULT_FILESIGNING_CERT}
-
-services.distribution.api.version-path=version
-services.distribution.api.version-v1=v1
-services.distribution.api.country-path=country
-services.distribution.api.country-germany=DE
-services.distribution.api.date-path=date
-services.distribution.api.hour-path=hour
-services.distribution.api.diagnosis-keys-path=diagnosis-keys
-services.distribution.api.parameters-path=configuration
-services.distribution.api.parameters-exposure-configuration-file-name=exposure_configuration
-services.distribution.api.parameters-risk-score-classification-file-name=risk_score_classification
-
-services.distribution.signature.app-bundle-id=de.rki.coronawarnapp
-services.distribution.signature.android-package=de.rki.coronawarnapp
-services.distribution.signature.verification-key-id=
-services.distribution.signature.verification-key-version=
-services.distribution.signature.algorithm-oid=1.2.840.10045.4.3.2
-services.distribution.signature.algorithm-name=SHA256withECDSA
-services.distribution.signature.file-name=export.sig
-services.distribution.signature.security-provider=BC
-
-# Configuration for the S3 compatible object storage hosted by Telekom in Germany
-services.distribution.objectstore.access-key=${CWA_OBJECTSTORE_ACCESSKEY:accessKey1}
-services.distribution.objectstore.secret-key=${CWA_OBJECTSTORE_SECRETKEY:verySecretKey1}
-services.distribution.objectstore.endpoint=${CWA_OBJECTSTORE_ENDPOINT:http\://localhost\:8003}
-services.distribution.objectstore.bucket=${CWA_OBJECTSTORE_BUCKET:cwa}
-services.distribution.objectstore.port=${CWA_OBJECTSTORE_PORT:8003}
-services.distribution.objectstore.set-public-read-acl-on-put-object=true
-
-# Postgres configuration
-spring.jpa.hibernate.ddl-auto=validate
-
-spring.flyway.enabled=true
-spring.flyway.locations=classpath:db/migration/postgres
-
-spring.datasource.driver-class-name=org.postgresql.Driver
-spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}
-spring.datasource.username=${POSTGRESQL_USER:postgres}
-spring.datasource.password=${POSTGRESQL_PASSWORD:postgres}
diff --git a/services/distribution/src/main/resources/application.yaml b/services/distribution/src/main/resources/application.yaml
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/resources/application.yaml
@@ -0,0 +1,66 @@
+---
+logging:
+  level:
+    org:
+      springframework:
+        web: INFO
+    app:
+      coronawarn: INFO
+
+services:
+  distribution:
+    output-file-name: index
+    retention-days: 14
+    paths:
+      output: out
+      privatekey: ${VAULT_FILESIGNING_SECRET}
+      certificate: ${VAULT_FILESIGNING_CERT}
+    tek-export:
+      file-name: export.bin
+      file-header: EK Export v1
+      file-header-width: 16
+    api:
+      version-path: version
+      version-v1: v1
+      country-path: country
+      country-germany: DE
+      date-path: date
+      hour-path: hour
+      diagnosis-keys-path: diagnosis-keys
+      parameters-path: configuration
+      parameters-exposure-configuration-file-name: exposure_configuration
+      parameters-risk-score-classification-file-name: risk_score_classification
+    signature:
+      app-bundle-id: de.rki.coronawarnapp
+      android-package: de.rki.coronawarnapp
+      verification-key-id:
+      verification-key-version:
+      algorithm-oid: 1.2.840.10045.4.3.2
+      algorithm-name: SHA256withECDSA
+      file-name: export.sig
+      security-provider: BC
+    # Configuration for the S3 compatible object storage hosted by Telekom in Germany
+    objectstore:
+      access-key: ${CWA_OBJECTSTORE_ACCESSKEY:accessKey1}
+      secret-key: ${CWA_OBJECTSTORE_SECRETKEY:verySecretKey1}
+      endpoint: ${CWA_OBJECTSTORE_ENDPOINT:http\://localhost\:8003}
+      bucket: ${CWA_OBJECTSTORE_BUCKET:cwa}
+      port: ${CWA_OBJECTSTORE_PORT:8003}
+      set-public-read-acl-on-put-object: true
+
+spring:
+  main:
+    web-application-type: NONE
+# Postgres configuration
+  jpa:
+    hibernate:
+      ddl-auto: validate
+  flyway:
+    enabled: true
+    locations: classpath:db/migration/postgres
+
+  datasource:
+    driver-class-name: org.postgresql.Driver
+    url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}
+    username: ${POSTGRESQL_USER:postgres}
+    password: ${POSTGRESQL_PASSWORD:postgres}
diff --git a/services/submission/src/main/resources/application-cloud.properties b/services/submission/src/main/resources/application-cloud.properties
deleted file mode 100644
--- a/services/submission/src/main/resources/application-cloud.properties
+++ /dev/null
@@ -1,6 +0,0 @@
-spring.flyway.locations=classpath:db/migration/postgres
-
-spring.datasource.driver-class-name=org.postgresql.Driver
-spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}
-spring.datasource.username=${POSTGRESQL_USER}
-spring.datasource.password=${POSTGRESQL_PASSWORD}
\ No newline at end of file
diff --git a/services/submission/src/main/resources/application-cloud.yaml b/services/submission/src/main/resources/application-cloud.yaml
new file mode 100644
--- /dev/null
+++ b/services/submission/src/main/resources/application-cloud.yaml
@@ -0,0 +1,9 @@
+---
+spring:
+  flyway:
+    locations: classpath:db/migration/postgres
+  datasource:
+    driver-class-name: org.postgresql.Driver
+    url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}
+    username: ${POSTGRESQL_USER}
+    password: ${POSTGRESQL_PASSWORD}
diff --git a/services/submission/src/main/resources/application-config-test.properties b/services/submission/src/main/resources/application-config-test.properties
deleted file mode 100644
--- a/services/submission/src/main/resources/application-config-test.properties
+++ /dev/null
@@ -1,4 +0,0 @@
-services.submission.initial_fake_delay_milliseconds=100.0
-services.submission.fake_delay_moving_average_samples=1.0
-services.submission.retention-days=10
-services.submission.payload.max-number-of-keys=1000
\ No newline at end of file
diff --git a/services/submission/src/main/resources/application-dev.properties b/services/submission/src/main/resources/application-dev.properties
deleted file mode 100644
--- a/services/submission/src/main/resources/application-dev.properties
+++ /dev/null
@@ -1 +0,0 @@
-logging.level.org.springframework.web=DEBUG
diff --git a/services/submission/src/main/resources/application-dev.yaml b/services/submission/src/main/resources/application-dev.yaml
new file mode 100644
--- /dev/null
+++ b/services/submission/src/main/resources/application-dev.yaml
@@ -0,0 +1,6 @@
+---
+logging:
+  level:
+    org:
+      springframework:
+        web: DEBUG
diff --git a/services/submission/src/main/resources/application.properties b/services/submission/src/main/resources/application.properties
deleted file mode 100644
--- a/services/submission/src/main/resources/application.properties
+++ /dev/null
@@ -1,20 +0,0 @@
-logging.level.org.springframework.web=INFO
-
-# The initial value of the moving average for fake request delays.
-services.submission.initial_fake_delay_milliseconds=10
-# The number of samples for the calculation of the moving average for fake request delays.
-services.submission.fake_delay_moving_average_samples=10
-
-services.submission.retention-days=14
-services.submission.payload.max-number-of-keys=14
-
-spring.jpa.hibernate.ddl-auto=validate
-spring.flyway.enabled=true
-
-spring.flyway.locations=classpath:db/migration/postgres
-
-# Postgres configuration
-spring.datasource.driver-class-name=org.postgresql.Driver
-spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}
-spring.datasource.username=${POSTGRESQL_USER:postgres}
-spring.datasource.password=${POSTGRESQL_PASSWORD:postgres}
diff --git a/services/submission/src/main/resources/application.yaml b/services/submission/src/main/resources/application.yaml
new file mode 100644
--- /dev/null
+++ b/services/submission/src/main/resources/application.yaml
@@ -0,0 +1,30 @@
+---
+logging:
+  level:
+    org:
+      springframework:
+        web: INFO
+
+# The initial value of the moving average for fake request delays.
+services:
+  submission:
+    initial-fake-delay-milliseconds: 10
+    # The number of samples for the calculation of the moving average for fake request delays.
+    fake-delay-moving-average-samples: 10
+    retention-days: 14
+    payload:
+      max-number-of-keys: 14
+
+spring:
+  jpa:
+    hibernate:
+      ddl-auto: validate
+  flyway:
+    enabled: true
+    locations: classpath:db/migration/postgres
+# Postgres configuration
+  datasource:
+    driver-class-name: org.postgresql.Driver
+    url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}
+    username: ${POSTGRESQL_USER:postgres}
+    password: ${POSTGRESQL_PASSWORD:postgres}
","
--- a/services/distribution/src/main/resources/application.properties
+++ b/services/distribution/src/main/resources/application.yaml
@@ -1,27 +1,35 @@
-logging.level.org.springframework.web=INFO
+logging:
+  level:
+    org.springframework.web: INFO
 
-# The initial value of the moving average for fake request delays.
-services.submission.initial_fake_delay_milliseconds=10
-# The number of samples for the calculation of the moving average for fake request delays.
-services.submission.fake_delay_moving_average_samples=10
+services:
+  submission:
+    initial_fake_delay_milliseconds: 10
+    fake_delay_moving_average_samples: 10
 
-services.submission.retention-days=14
-services.submission.payload.max-number-of-keys=14
+services:
+  submission:
+    retention-days: 14
+    payload:
+      max-number-of-keys: 14
 
-spring.jpa.hibernate.ddl-auto=validate
-spring.flyway.enabled=true
+spring:
+  jpa:
+    hibernate:
+      ddl-auto: validate
+  flyway:
+    enabled: true
 
-spring.flyway.locations=classpath:db/migration/postgres
+  flyway:
+    locations: classpath:db/migration/postgres
 
-# Postgres configuration
-spring.datasource.driver-class-name=org.postgresql.Driver
-spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}
-spring.datasource.username=${POSTGRESQL_USER:postgres}
-spring.datasource.password=${POSTGRESQL_PASSWORD:postgres}
+spring:
+  datasource:
+    driver-class-name: org.postgresql.Driver
+    url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}
+    username: ${POSTGRESQL_USER:postgres}
+    password: ${POSTGRESQL_PASSWORD:postgres}
","['README.md', '/dev/null', 'services/distribution/src/main/resources/application-cloud.properties', 'services/distribution/src/main/resources/application-dev.properties', 'services/distribution/src/main/resources/application-testdata.properties', 'services/distribution/src/main/resources/application.properties', 'services/submission/src/main/resources/application-cloud.properties', 'services/submission/src/main/resources/application-config-test.properties', 'services/submission/src/main/resources/application-dev.properties', 'services/submission/src/main/resources/application.properties']",576fd8b20079374458ffb650fe63ca6002e84a39
386,python3 create_patchfiles.py 386,"TEK Exports should not contain any keys which recently expired
Currently the system also packages keys, which expired recently. Instead, only keys which have been expired since at least 2 hours should be part of the export.

Can also be a nice prework for https://github.com/corona-warn-app/cwa-server/issues/108.

Probably should change this already when the diagnosis keys are queried for distribution:
https://github.com/corona-warn-app/cwa-server/blob/master/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java#L64
",https://github.com/corona-warn-app/cwa-server/issues/367,https://github.com/corona-warn-app/cwa-server/pull/386,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java
@@ -88,9 +88,7 @@ public void prepare(ImmutableStack<Object> indices) {
 
   private Set<DiagnosisKey> getDiagnosisKeysForHour(LocalDateTime hour) {
     return this.diagnosisKeys.stream()
-        .filter(diagnosisKey -> DateTime
-            .getLocalDateTimeFromHoursSinceEpoch(diagnosisKey.getSubmissionTimestamp())
-            .equals(hour))
+        .filter(diagnosisKey -> DistributionDateTimeCalculator.getDistributionDateTime(diagnosisKey).equals(hour))
         .collect(Collectors.toSet());
   }
 
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DistributionDateTimeCalculator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DistributionDateTimeCalculator.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DistributionDateTimeCalculator.java
@@ -0,0 +1,62 @@
+/*-
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;
+
+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.ONE_HOUR_INTERVAL_SECONDS;
+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.TEN_MINUTES_INTERVAL_SECONDS;
+import static java.time.ZoneOffset.UTC;
+
+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
+import java.time.Duration;
+import java.time.LocalDateTime;
+import java.time.temporal.ChronoUnit;
+
+public class DistributionDateTimeCalculator {
+
+  /**
+   * Minimum time in minutes after key expiration after which it can be distributed.
+   */
+  public static final long DISTRIBUTION_PADDING = 120L;
+
+  private DistributionDateTimeCalculator() {
+  }
+
+  /**
+   * Calculates the earliest point in time at which the specified {@link DiagnosisKey} can be distributed. Before keys
+   * are allowed to be distributed, they must be expired for a configured amount of time.
+   *
+   * @return {@link LocalDateTime} at which the specified {@link DiagnosisKey} can be distributed.
+   */
+  public static LocalDateTime getDistributionDateTime(DiagnosisKey diagnosisKey) {
+    LocalDateTime submissionDateTime = LocalDateTime
+        .ofEpochSecond(diagnosisKey.getSubmissionTimestamp() * ONE_HOUR_INTERVAL_SECONDS, 0, UTC);
+    LocalDateTime keyExpiryDateTime = LocalDateTime
+        .ofEpochSecond(diagnosisKey.getRollingStartIntervalNumber() * TEN_MINUTES_INTERVAL_SECONDS, 0, UTC)
+        .plusMinutes(diagnosisKey.getRollingPeriod() * 10L);
+
+    if (Duration.between(keyExpiryDateTime, submissionDateTime).toMinutes() <= DISTRIBUTION_PADDING) {
+      // truncatedTo floors the value, so we need to add an hour to the DISTRIBUTION_PADDING to compensate that.
+      return keyExpiryDateTime.plusMinutes(DISTRIBUTION_PADDING + 60).truncatedTo(ChronoUnit.HOURS);
+    }
+
+    return submissionDateTime;
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java
@@ -34,6 +34,16 @@
  */
 public class DateTime {
 
+  /**
+   * The submission timestamp is counted in 1 hour intervals since epoch.
+   */
+  public static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);
+
+  /**
+   * The rolling start interval number is counted in 10 minute intervals since epoch.
+   */
+  public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);
+
   private DateTime() {
   }
 
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java
@@ -20,6 +20,9 @@
 
 package app.coronawarn.server.services.distribution.runner;
 
+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.ONE_HOUR_INTERVAL_SECONDS;
+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.TEN_MINUTES_INTERVAL_SECONDS;
+
 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;
 import app.coronawarn.server.common.protocols.internal.RiskLevel;
@@ -69,12 +72,6 @@ public class TestDataGeneration implements ApplicationRunner {
   private static final int POISSON_MAX_ITERATIONS = 10_000_000;
   private static final double POISSON_EPSILON = 1e-12;
 
-  // The submission timestamp is counted in 1 hour intervals since epoch
-  private static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);
-
-  // The rolling start interval number is counted in 10 minute intervals since epoch
-  private static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);
-
   /**
    * Creates a new TestDataGeneration runner.
    */
","--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java
@@ -75,7 +75,7 @@
    */
   public void prepare(ImmutableStack<Object> indices) {
     this.addWritableToAll(currentIndices -> {
-      LocalDateTime currentHour = (LocalDateTime) currentIndices.peek();
+      LocalDateTime currentHour = ((LocalDateTime) currentIndices.peek()).minusHours(2);
       // The LocalDateTime currentHour already contains both the date and the hour information, so
       // we can throw away the LocalDate that's the second item on the stack from the ""/date""
       // IndexDirectory.
","['README.md', '/dev/null', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java']",943a9cea975f6395f99217bb380e526e937f093e
573,python3 create_patchfiles.py 573,"Add JPA range validator for submissionTimestamp of DiagnosisKey
DiagnosisKey uses a submissionTimestamp field of type long

https://github.com/corona-warn-app/cwa-server/blob/7059232b48d2507d142fe683fbebdda371a98652/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java#L73 

the value is actually the *hours* since epoch but there are no sanity checks on the value.

Just from reading the code you could e.g. easily think it's seconds since epoch and use it the wrong way without noticing at runtime.

Proposal:

* Add a JPA ConstraintValidator similar to ValidRollingStartIntervalNumberValidator which checks the value range to be greater or equal zero and not in the future (current hour since epoch rounded up)
* Add field javadoc to submissionTimestamp: ""hours since epoch""

Expected Benefits:

* discard invalid data
* less potential for programming errors


",https://github.com/corona-warn-app/cwa-server/issues/557,https://github.com/corona-warn-app/cwa-server/pull/573,"diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
@@ -24,6 +24,7 @@
 
 import app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;
 import app.coronawarn.server.common.persistence.domain.validation.ValidRollingStartIntervalNumber;
+import app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestamp;
 import java.time.Instant;
 import java.time.LocalDateTime;
 import java.util.Arrays;
@@ -70,6 +71,7 @@ public class DiagnosisKey {
   @Range(min = 0, max = 8, message = ""Risk level must be between 0 and 8."")
   private int transmissionRiskLevel;
 
+  @ValidSubmissionTimestamp
   private long submissionTimestamp;
 
   protected DiagnosisKey() {
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java
@@ -24,6 +24,7 @@
 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.FinalBuilder;
 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.RollingStartIntervalNumberBuilder;
 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.TransmissionRiskLevelBuilder;
+import static app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestampValidator.SECONDS_PER_HOUR;
 
 import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;
 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;
@@ -47,7 +48,7 @@ public class DiagnosisKeyBuilder implements
   private int rollingStartIntervalNumber;
   private int rollingPeriod = DiagnosisKey.EXPECTED_ROLLING_PERIOD;
   private int transmissionRiskLevel;
-  private long submissionTimestamp = -1L;
+  private Long submissionTimestamp = null;
 
   DiagnosisKeyBuilder() {
   }
@@ -93,9 +94,9 @@ public FinalBuilder withRollingPeriod(int rollingPeriod) {
 
   @Override
   public DiagnosisKey build() {
-    if (submissionTimestamp < 0) {
+    if (submissionTimestamp == null) {
       // hours since epoch
-      submissionTimestamp = Instant.now().getEpochSecond() / 3600L;
+      submissionTimestamp = Instant.now().getEpochSecond() / SECONDS_PER_HOUR;
     }
 
     var diagnosisKey = new DiagnosisKey(
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestamp.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestamp.java
new file mode 100644
--- /dev/null
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestamp.java
@@ -0,0 +1,58 @@
+/*-
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.common.persistence.domain.validation;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import javax.validation.Constraint;
+import javax.validation.Payload;
+
+@Constraint(validatedBy = ValidSubmissionTimestampValidator.class)
+@Target({ElementType.FIELD})
+@Retention(RetentionPolicy.RUNTIME)
+@Documented
+public @interface ValidSubmissionTimestamp {
+
+  /**
+   * Error message.
+   *
+   * @return the error message
+   */
+  String message() default ""Submission timestamp (hours since epoch)""
+      + "" must be greater or equal 0 and cannot be in the future."";
+
+  /**
+   * Groups.
+   *
+   * @return
+   */
+  Class<?>[] groups() default {};
+
+  /**
+   * Payload.
+   *
+   * @return
+   */
+  Class<? extends Payload>[] payload() default {};
+}
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestampValidator.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestampValidator.java
new file mode 100644
--- /dev/null
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestampValidator.java
@@ -0,0 +1,38 @@
+/*-
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.common.persistence.domain.validation;
+
+import java.time.Instant;
+import java.util.concurrent.TimeUnit;
+import javax.validation.ConstraintValidator;
+import javax.validation.ConstraintValidatorContext;
+
+public class ValidSubmissionTimestampValidator
+    implements ConstraintValidator<ValidSubmissionTimestamp, Long> {
+
+  public static final long SECONDS_PER_HOUR = TimeUnit.HOURS.toSeconds(1);
+
+  @Override
+  public boolean isValid(Long submissionTimestamp, ConstraintValidatorContext constraintValidatorContext) {
+    long currentHoursSinceEpoch = Instant.now().getEpochSecond() / SECONDS_PER_HOUR;
+    return submissionTimestamp >= 0L && submissionTimestamp <= currentHoursSinceEpoch;
+  }
+}
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
@@ -20,6 +20,7 @@
 
 package app.coronawarn.server.common.persistence.service;
 
+import static app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestampValidator.SECONDS_PER_HOUR;
 import static java.time.ZoneOffset.UTC;
 
 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
@@ -109,7 +110,7 @@ public void applyRetentionPolicy(int daysToRetain) {
     long threshold = LocalDateTime
         .ofInstant(Instant.now(), UTC)
         .minusDays(daysToRetain)
-        .toEpochSecond(UTC) / 3600L;
+        .toEpochSecond(UTC) / SECONDS_PER_HOUR;
     int numberOfDeletions = keyRepository.deleteBySubmissionTimestampIsLessThanEqual(threshold);
     logger.info(""Deleted {} diagnosis key(s) with a submission timestamp older than {} day(s) ago."",
         numberOfDeletions, daysToRetain);
","--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
@@ -47,6 +47,7 @@ public class DiagnosisKey {
   @Id
   @Size(min = 16, max = 16, message = ""Key data must be a byte array of length 16."")
   @Column(unique = true)
+  @Range(min = 0, message = ""Submission timestamp must be greater or equal to zero."")
   private byte[] keyData;
 
   @ValidRollingStartIntervalNumber
","['README.md', '/dev/null', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java']",670560bd755a94fe8cf7dfea5bba13c9b64858ed
388,python3 create_patchfiles.py 388,"Ensure uniqueness of diagnosis keys
## Current Implementation
The uniqueness of diagnosis keys is neither guaranteed by the database, nor by validation logic.

## Suggested Enhancement
Ensure that diagnosis keys in the database are unique (there are no duplicates).

What needs to be decided:
- [x] Is it sufficient to guarantee the uniqueness of the diagnosis key or should the uniqueness of diagnosis key + submission timestamp (+maybe even more fields) be guaranteed?
- [x] Should the duplicate check happen on the database (`UNIQUE` constraint) or in the server logic (e.g. during the validation of submitted keys)?
- [x] If the check happens on the database: Should the `id` column be removed and replaced with the diagnosis key (+submission timestamp) as (composite) primary key?
- [x] How should the server react when a duplicate diagnosis key is submitted (update, error, etc.)?

**Edit:** Decisions are below.
",https://github.com/corona-warn-app/cwa-server/issues/289,https://github.com/corona-warn-app/cwa-server/pull/388,"diff --git a/common/persistence/pom.xml b/common/persistence/pom.xml
--- a/common/persistence/pom.xml
+++ b/common/persistence/pom.xml
@@ -78,7 +78,7 @@
     <dependency>
       <groupId>com.h2database</groupId>
       <artifactId>h2</artifactId>
-      <version>1.4.199</version>
+      <version>1.4.200</version>
       <scope>runtime</scope>
     </dependency>
     <dependency>
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
@@ -29,9 +29,8 @@
 import java.util.Arrays;
 import java.util.Objects;
 import java.util.Set;
+import javax.persistence.Column;
 import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.Table;
 import javax.validation.ConstraintViolation;
@@ -57,10 +56,8 @@ public class DiagnosisKey {
   private static final Validator VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();
 
   @Id
-  @GeneratedValue(strategy = GenerationType.IDENTITY)
-  private Long id;
-
   @Size(min = 16, max = 16, message = ""Key data must be a byte array of length 16."")
+  @Column(unique = true)
   private byte[] keyData;
 
   @ValidRollingStartIntervalNumber
@@ -100,10 +97,6 @@ public static Builder builder() {
     return new DiagnosisKeyBuilder();
   }
 
-  public Long getId() {
-    return id;
-  }
-
   /**
    * Returns the diagnosis key.
    */
@@ -189,14 +182,13 @@ public boolean equals(Object o) {
         && rollingPeriod == that.rollingPeriod
         && transmissionRiskLevel == that.transmissionRiskLevel
         && submissionTimestamp == that.submissionTimestamp
-        && Objects.equals(id, that.id)
         && Arrays.equals(keyData, that.keyData);
   }
 
   @Override
   public int hashCode() {
     int result = Objects
-        .hash(id, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);
+        .hash(rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);
     result = 31 * result + Arrays.hashCode(keyData);
     return result;
   }
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java
@@ -22,6 +22,8 @@
 
 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Modifying;
+import org.springframework.data.jpa.repository.Query;
 import org.springframework.stereotype.Repository;
 
 @Repository
@@ -33,4 +35,22 @@ public interface DiagnosisKeyRepository extends JpaRepository<DiagnosisKey, Long
    * @param submissionTimestamp the submission timestamp up to which entries will be deleted.
    */
   void deleteBySubmissionTimestampIsLessThanEqual(long submissionTimestamp);
+
+  /**
+   * Attempts to write the specified diagnosis key information into the database. If a row with the specified key data
+   * already exists, no data is inserted.
+   *
+   * @param keyData                    The key data of the diagnosis key.
+   * @param rollingStartIntervalNumber The rolling start interval number of the diagnosis key.
+   * @param rollingPeriod              The rolling period of the diagnosis key.
+   * @param submissionTimestamp        The submission timestamp of the diagnosis key.
+   * @param transmissionRisk           The transmission risk level of the diagnosis key.
+   */
+  @Modifying
+  @Query(nativeQuery = true, value =
+      ""INSERT INTO diagnosis_key""
+          + ""(key_data, rolling_start_interval_number, rolling_period, submission_timestamp, transmission_risk_level)""
+          + "" VALUES(?, ?, ?, ?, ?) ON CONFLICT DO NOTHING;"")
+  void saveDoNothingOnConflict(byte[] keyData, int rollingStartIntervalNumber, int rollingPeriod,
+      long submissionTimestamp, int transmissionRisk);
 }
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
@@ -50,13 +50,19 @@ public DiagnosisKeyService(DiagnosisKeyRepository keyRepository) {
   }
 
   /**
-   * Persists the specified collection of {@link DiagnosisKey} instances.
+   * Persists the specified collection of {@link DiagnosisKey} instances. If the key data of a particular diagnosis key
+   * already exists in the database, this diagnosis key is not persisted.
    *
    * @param diagnosisKeys must not contain {@literal null}.
    * @throws IllegalArgumentException in case the given collection contains {@literal null}.
    */
+  @Transactional
   public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {
-    keyRepository.saveAll(diagnosisKeys);
+    for (DiagnosisKey diagnosisKey : diagnosisKeys) {
+      keyRepository.saveDoNothingOnConflict(
+          diagnosisKey.getKeyData(), diagnosisKey.getRollingStartIntervalNumber(), diagnosisKey.getRollingPeriod(),
+          diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel());
+    }
   }
 
   /**
diff --git a/common/persistence/src/main/resources/db/migration/h2/V3__makeKeyDataPrimaryKey.sql b/common/persistence/src/main/resources/db/migration/h2/V3__makeKeyDataPrimaryKey.sql
new file mode 100644
--- /dev/null
+++ b/common/persistence/src/main/resources/db/migration/h2/V3__makeKeyDataPrimaryKey.sql
@@ -0,0 +1,3 @@
+ALTER TABLE diagnosis_key DROP COLUMN id;
+ALTER TABLE diagnosis_key ALTER COLUMN key_data SET NOT NULL;
+ALTER TABLE diagnosis_key ADD PRIMARY KEY (key_data);
\ No newline at end of file
diff --git a/common/persistence/src/main/resources/db/migration/postgres/V3__makeKeyDataPrimaryKey.sql b/common/persistence/src/main/resources/db/migration/postgres/V3__makeKeyDataPrimaryKey.sql
new file mode 100644
--- /dev/null
+++ b/common/persistence/src/main/resources/db/migration/postgres/V3__makeKeyDataPrimaryKey.sql
@@ -0,0 +1,3 @@
+ALTER TABLE diagnosis_key DROP COLUMN id;
+ALTER TABLE diagnosis_key ALTER COLUMN key_data SET NOT NULL;
+ALTER TABLE diagnosis_key ADD PRIMARY KEY (key_data);
\ No newline at end of file
","--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
@@ -61,7 +61,7 @@ public class DiagnosisKey {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long id;
-  
+
   @Size(min = 16, max = 16, message = ""Key data must be a byte array of length 16."")
   private byte[] keyData;
 
@@ -168,7 +168,7 @@ public class DiagnosisKey {
    * @return A set of constraint violations of this key.
    */
   public Set<ConstraintViolation<DiagnosisKey>> validate() {
-    return VALIDATOR.validate(this);
+    return VALIDATOR.validate(this, Default.class);
   }
 
   @Override
","['README.md', '/dev/null', 'common/persistence/pom.xml', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java']",00a342298942773ee49eeea9387a2acd164c3d49
1965,python3 create_patchfiles.py 1965,"min-android 1.5.1 differs from production 1.0.4 value
## Describe the bug

The `min-android` value served on 
https://svc90.main.px.t-online.de/version/v1/configuration/country/DE/app_config is 

`1.0.4` 

which differs from the value

`1.5.1`

stored in https://github.com/corona-warn-app/cwa-server/blob/main/services/distribution/src/main/resources/application.yaml#L144

If CWA Android 1.4.0 is started, there is no prompt shown to the user that the app should be updated.

## Expected behaviour

The `min-android` value served on 
https://svc90.main.px.t-online.de/version/v1/configuration/country/DE/app_config should be the same as the value stored in https://github.com/corona-warn-app/cwa-server/blob/main/services/distribution/src/main/resources/application.yaml#L144 which is currently `1.5.1`.

If `min-android` with the value of `1.5.1` were in production then starting CWA Android 1.4.0 should produce a prompt to update the app.

## Steps to reproduce the issue

1. In Android Studio check out CWA Android app release/1.4.x
2. Run CWA on Pixel 3a API 33 Android device emulator in Debug mode
3. Open Logcat in Android Studio and enter search term ""UpdateChecker""

The log shows the following:

```
UpdateChecker           de.rki.coronawarnapp.dev             E  minVersionStringFromServer:1.0.4
UpdateChecker           de.rki.coronawarnapp.dev             E  Current app version:1.4.0
UpdateChecker           de.rki.coronawarnapp.dev             E  needs update:false
```

Alternatively install old released versions from https://www.apkmirror.com/apk/robert-koch-institut/corona-warn-app/. As soon as a version < 1.0.4 is started, e.g. 1.0.0 or 1.0.2, a message ""Update available"" is output. 

![Update available](https://user-images.githubusercontent.com/66998419/202911146-6b74b2e4-7a8d-462d-8f19-6e10762719e2.jpg)

If version 1.0.4 is installed and started, no update message is output. This is consistent with min-Android being set to `1.0.4` in production.


## Technical details

- Android Studio Dolphin | 2021.3.1 Patch 1
- Pixel 3a API 33 Android device emulator
- CWA Android 1.4.0 (note that this version was not released. Version 1.5 followed version 1.3)

## Possible Fix

Clarify what the minimum enforced version of CWA Android in production is supposed to be and ensure alignment of https://github.com/corona-warn-app/cwa-server/blob/main/services/distribution/src/main/resources/application.yaml with the values used in production.

",https://github.com/corona-warn-app/cwa-server/issues/1962,https://github.com/corona-warn-app/cwa-server/pull/1965,"diff --git a/services/distribution/src/main/resources/application.yaml b/services/distribution/src/main/resources/application.yaml
--- a/services/distribution/src/main/resources/application.yaml
+++ b/services/distribution/src/main/resources/application.yaml
@@ -140,11 +140,11 @@ services:
     app-versions:
       latest-ios: ${IOS_LATEST_VERSION:1.5.3}
       min-ios: ${IOS_MIN_VERSION:1.5.3}
-      latest-android: ${ANDROID_LATEST_VERSION:1.5.1}
-      min-android: ${ANDROID_MIN_VERSION:1.5.1}
+      latest-android: ${ANDROID_LATEST_VERSION:1.0.4}
+      min-android: ${ANDROID_MIN_VERSION:1.0.4}
       # With ENF v2 Android apps are versioned by Version Code and not by Semantic Versioning
-      min-android-version-code: ${ANDROID_MIN_VERSION_CODE:48}
-      latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:48}
+      min-android-version-code: ${ANDROID_MIN_VERSION_CODE:31}
+      latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:31}
     app-config-parameters:
       dgcParameters:
         testCertificateParameters:
","--- a/services/distribution/src/main/resources/application.yaml
+++ b/services/distribution/src/main/resources/application.yaml
@@ -141,7 +141,7 @@
     latest-ios: ${IOS_LATEST_VERSION:1.5.3}
     min-ios: ${IOS_MIN_VERSION:1.5.3}
     latest-android: ${ANDROID_LATEST_VERSION:1.5.1}
-    min-android: ${ANDROID_MIN_VERSION:1.5.1}
+    min-android: ${ANDROID_MIN_VERSION:1.0.4}
     # With ENF v2 Android apps are versioned by Version Code and not by Semantic Versioning
     min-android-version-code: ${ANDROID_MIN_VERSION_CODE:48}
     latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:48}
","['README.md', 'services/distribution/src/main/resources/application.yaml']",f20af0764008b8ef07ba67c3b26693115035c43f
429,python3 create_patchfiles.py 429,"Use Implicit Constructor Injection over Explicit
The `@Autowired` annotation for Spring components can be omitted for constructors in case there is only one constructor present on the class. Therefore, remove all the unnecessary annotation for those cases.
",https://github.com/corona-warn-app/cwa-server/issues/404,https://github.com/corona-warn-app/cwa-server/pull/429,"diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
@@ -32,7 +32,6 @@
 import javax.validation.ConstraintViolation;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.domain.Sort.Direction;
 import org.springframework.stereotype.Component;
@@ -44,7 +43,6 @@ public class DiagnosisKeyService {
   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyService.class);
   private final DiagnosisKeyRepository keyRepository;
 
-  @Autowired
   public DiagnosisKeyService(DiagnosisKeyRepository keyRepository) {
     this.keyRepository = keyRepository;
   }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java
@@ -30,7 +30,6 @@
 import java.util.Collection;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
 /**
@@ -42,8 +41,7 @@ public class DiagnosisKeysStructureProvider {
   private static final Logger logger = LoggerFactory
       .getLogger(DiagnosisKeysStructureProvider.class);
 
-  @Autowired
-  private DiagnosisKeyBundler diagnosisKeyBundler;
+  private final DiagnosisKeyBundler diagnosisKeyBundler;
   private final DiagnosisKeyService diagnosisKeyService;
   private final CryptoProvider cryptoProvider;
   private final DistributionServiceConfig distributionServiceConfig;
@@ -52,10 +50,11 @@ public class DiagnosisKeysStructureProvider {
    * Creates a new DiagnosisKeysStructureProvider.
    */
   DiagnosisKeysStructureProvider(DiagnosisKeyService diagnosisKeyService, CryptoProvider cryptoProvider,
-      DistributionServiceConfig distributionServiceConfig) {
+      DistributionServiceConfig distributionServiceConfig, DiagnosisKeyBundler diagnosisKeyBundler) {
     this.diagnosisKeyService = diagnosisKeyService;
     this.cryptoProvider = cryptoProvider;
     this.distributionServiceConfig = distributionServiceConfig;
+    this.diagnosisKeyBundler = diagnosisKeyBundler;
   }
 
   /**
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java
@@ -29,7 +29,6 @@
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
 /**
@@ -41,7 +40,6 @@ public class S3RetentionPolicy {
   private final ObjectStoreAccess objectStoreAccess;
   private final Api api;
 
-  @Autowired
   public S3RetentionPolicy(ObjectStoreAccess objectStoreAccess, DistributionServiceConfig distributionServiceConfig) {
     this.objectStoreAccess = objectStoreAccess;
     this.api = distributionServiceConfig.getApi();
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
@@ -36,7 +36,6 @@
 import org.apache.commons.math3.distribution.PoissonDistribution;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.util.StopWatch;
@@ -67,7 +66,6 @@ public class SubmissionController {
   private final Integer retentionDays;
   private Double fakeDelay;
 
-  @Autowired
   SubmissionController(DiagnosisKeyService diagnosisKeyService, TanVerifier tanVerifier,
       SubmissionServiceConfig submissionServiceConfig) {
     this.diagnosisKeyService = diagnosisKeyService;
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java
@@ -23,7 +23,6 @@
 import feign.FeignException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import org.springframework.web.client.RestClientException;
 
@@ -41,7 +40,6 @@ public class TanVerifier {
    *
    * @param verificationServerClient The REST client to communicate with the verification server
    */
-  @Autowired
   public TanVerifier(VerificationServerClient verificationServerClient) {
     this.verificationServerClient = verificationServerClient;
   }
","
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
@@ -48,7 +48,6 @@ public class DiagnosisKeyService {
   @Autowired
   public DiagnosisKeyService(DiagnosisKeyRepository keyRepository) {
     this.keyRepository = keyRepository;
-    this.keyRepository = keyRepository;
   }
 
   /**
","['README.md', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java', 'services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java', 'services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java']",528b73595c202a8216bd321dafd431206a6fd2c0
783,python3 create_patchfiles.py 783,"Improve logging of the submission validation process
<!--
Thanks for proposing an enhancement 🙌 ❤️

Before opening a new issue, please make sure that we do not have any duplicates already open. You can ensure this by searching the issue list for this repository. If there is a duplicate, please close your issue and add a comment to the existing issue instead.
-->
The enhancement suggested by @Tho-Mat, and based on the discussion in https://github.com/corona-warn-app/cwa-server/issues/723

## Current Implementation
Issue https://github.com/corona-warn-app/cwa-server/issues/723, demonstrated that currently implemented logging is not sufficient for effective troubleshooting of the submission validation process.

## Suggested Enhancement
If the kay can not be saved in a DB (e.g. because it is  already in database / Date to high / Date to low / unknown), we log this fact, date of the issue and the reason in the application logs.

## Expected Benefits
This would have the great advantage of better analyzing certain constellations that can lead to errors.
",https://github.com/corona-warn-app/cwa-server/issues/764,https://github.com/corona-warn-app/cwa-server/pull/783,"diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
@@ -77,7 +77,7 @@ public class DiagnosisKey {
 
   private final boolean consentToFederation;
 
-  @Size(max = 2)
+  @Size(max = 2, message = ""Origin country code must have length of 2."")
   private final String originCountry;
 
   @ValidCountries
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java
@@ -62,6 +62,7 @@ public interface DiagnosisKeyRepository extends PagingAndSortingRepository<Diagn
    * @param originCountry              The origin country from the app.
    * @param visitedCountries           The list of countries this transmissions is relevant for.
    * @param reportType                 The report type of the diagnosis key.
+   * @return {@literal true} if the diagnosis key was inserted successfully, {@literal false} otherwise.
    */
   @Modifying
   @Query(""INSERT INTO diagnosis_key ""
@@ -70,7 +71,7 @@ public interface DiagnosisKeyRepository extends PagingAndSortingRepository<Diagn
       + ""VALUES (:keyData, :rollingStartIntervalNumber, :rollingPeriod, :submissionTimestamp, :transmissionRisk, ""
       + "":origin_country, :visited_countries, :report_type, :days_since_onset_of_symptoms, :consent_to_federation) ""
       + ""ON CONFLICT DO NOTHING"")
-  void saveDoNothingOnConflict(
+  boolean saveDoNothingOnConflict(
       @Param(""keyData"") byte[] keyData,
       @Param(""rollingStartIntervalNumber"") int rollingStartIntervalNumber,
       @Param(""rollingPeriod"") int rollingPeriod,
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java
@@ -53,23 +53,39 @@ public DiagnosisKeyService(DiagnosisKeyRepository keyRepository, ValidDiagnosisK
   }
 
   /**
-   * Persists the specified collection of {@link DiagnosisKey} instances. If the key data of a particular diagnosis key
-   * already exists in the database, this diagnosis key is not persisted.
+   * Persists the specified collection of {@link DiagnosisKey} instances and returns the number of inserted diagnosis
+   * keys. If the key data of a particular diagnosis key already exists in the database, this diagnosis key is not
+   * persisted.
    *
    * @param diagnosisKeys must not contain {@literal null}.
+   * @return Number of successfully inserted diagnosis keys.
    * @throws IllegalArgumentException in case the given collection contains {@literal null}.
    */
   @Timed
   @Transactional
-  public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {
+  public int saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {
+    int numberOfInsertedKeys = 0;
+
     for (DiagnosisKey diagnosisKey : diagnosisKeys) {
-      keyRepository.saveDoNothingOnConflict(
+      boolean keyInsertedSuccessfully = keyRepository.saveDoNothingOnConflict(
           diagnosisKey.getKeyData(), diagnosisKey.getRollingStartIntervalNumber(), diagnosisKey.getRollingPeriod(),
           diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel(),
           diagnosisKey.getOriginCountry(), diagnosisKey.getVisitedCountries().toArray(new String[0]),
           diagnosisKey.getReportType().name(), diagnosisKey.getDaysSinceOnsetOfSymptoms(),
           diagnosisKey.isConsentToFederation());
+
+      if (keyInsertedSuccessfully) {
+        numberOfInsertedKeys++;
+      }
     }
+
+    int conflictingKeys = diagnosisKeys.size() - numberOfInsertedKeys;
+    if (conflictingKeys > 0) {
+      logger.warn(""{} out of {} diagnosis keys conflicted with existing database entries and were ignored."",
+          conflictingKeys, diagnosisKeys.size());
+    }
+
+    return numberOfInsertedKeys;
   }
 
   /**
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
@@ -138,7 +138,7 @@ private List<DiagnosisKey> extractValidDiagnosisKeysFromPayload(SubmissionPayloa
       if (diagnosisKey.isYoungerThanRetentionThreshold(retentionDays)) {
         diagnosisKeys.add(diagnosisKey);
       } else {
-        logger.info(""Not persisting a diagnosis key, as it is outdated beyond retention threshold."");
+        logger.warn(""Not persisting a diagnosis key, as it is outdated beyond retention threshold."");
       }
     }
 
","
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
@@ -106,6 +106,7 @@ public class DiagnosisKey {
       this.visitedCountries = visitedCountries == null ? Collections.emptyList() : visitedCountries;
       this.reportType = reportType;
       this.daysSinceOnsetOfSymptoms = daysSinceOnsetOfSymptoms;
+      logValidationErrors();
     }
 
     /**
@@ -207,4 +208,14 @@ public class DiagnosisKey {
     return VALIDATOR.validate(this);
   }
 
+  /**
+   * Logs any validation errors for this diagnosis key.
+   */
+  private void logValidationErrors() {
+    Set<ConstraintViolation<DiagnosisKey>> violations = validate();
+    if (!violations.isEmpty()) {
+      for (ConstraintViolation<DiagnosisKey> violation : violations) {
+        logger.warn(""Validation error: {}"", violation.getMessage());
+      }
+    }
+  }
 }
","['README.md', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java', 'services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java']",3b67b75657b26418691e024e049af7f3494c787b
466,python3 create_patchfiles.py 466,"S3Publisher: Increase performance
The S3Publisher is currently running in only one thread, making it quite slow for uploads/requests for metadata.

Enhance the S3Publisher/ObjectStoreAccess, so that multiple threads are being used for interacting with S3.
",https://github.com/corona-warn-app/cwa-server/issues/150,https://github.com/corona-warn-app/cwa-server/pull/466,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java
@@ -404,6 +404,7 @@ public static class ObjectStore {
     private String bucket;
     private Boolean setPublicReadAclOnPutObject;
     private Integer maxNumberOfFailedOperations;
+    private Integer maxNumberOfS3Threads;
 
     public String getAccessKey() {
       return accessKey;
@@ -460,5 +461,13 @@ public Integer getMaxNumberOfFailedOperations() {
     public void setMaxNumberOfFailedOperations(Integer maxNumberOfFailedOperations) {
       this.maxNumberOfFailedOperations = maxNumberOfFailedOperations;
     }
+
+    public Integer getMaxNumberOfS3Threads() {
+      return maxNumberOfS3Threads;
+    }
+
+    public void setMaxNumberOfS3Threads(Integer maxNumberOfS3Threads) {
+      this.maxNumberOfS3Threads = maxNumberOfS3Threads;
+    }
   }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java
@@ -28,9 +28,13 @@
 import java.io.IOException;
 import java.nio.file.Path;
 import java.util.List;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
 import java.util.stream.Collectors;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
+import org.springframework.stereotype.Component;
 
 /**
  * Publishes a folder on the disk to S3 while keeping the folder and file structure.<br>
@@ -46,6 +50,7 @@
  *   <li>Currently not implemented: Supports multi threaded upload of files.</li>
  * </ul>
  */
+@Component
 public class S3Publisher {
 
   private static final Logger logger = LoggerFactory.getLogger(S3Publisher.class);
@@ -55,32 +60,33 @@ public class S3Publisher {
    */
   private static final String CWA_S3_ROOT = CwaApiStructureProvider.VERSION_DIRECTORY;
 
-  private final Path root;
   private final ObjectStoreAccess objectStoreAccess;
   private final FailedObjectStoreOperationsCounter failedOperationsCounter;
+  private final ThreadPoolTaskExecutor executor;
 
   /**
    * Creates an {@link S3Publisher} instance that attempts to publish the files at the specified location to an object
    * store. Object store operations are performed through the specified {@link ObjectStoreAccess} instance.
    *
-   * @param root                    The path of the directory that shall be published.
    * @param objectStoreAccess       The {@link ObjectStoreAccess} used to communicate with the object store.
    * @param failedOperationsCounter The {@link FailedObjectStoreOperationsCounter} that is used to monitor the number of
    *                                failed operations.
+   * @param executor                The executor that manages the upload task submission.
    */
-  public S3Publisher(Path root, ObjectStoreAccess objectStoreAccess,
-      FailedObjectStoreOperationsCounter failedOperationsCounter) {
-    this.root = root;
+  public S3Publisher(ObjectStoreAccess objectStoreAccess, FailedObjectStoreOperationsCounter failedOperationsCounter,
+      ThreadPoolTaskExecutor executor) {
     this.objectStoreAccess = objectStoreAccess;
     this.failedOperationsCounter = failedOperationsCounter;
+    this.executor = executor;
   }
 
   /**
    * Synchronizes the files to S3.
    *
+   * @param root The path of the directory that shall be published.
    * @throws IOException in case there were problems reading files from the disk.
    */
-  public void publish() throws IOException {
+  public void publish(Path root) throws IOException {
     PublishedFileSet published;
     List<LocalFile> toPublish = new PublishFileSet(root).getFiles();
     List<LocalFile> diff;
@@ -97,14 +103,25 @@ public void publish() throws IOException {
       diff = toPublish;
     }
 
-    logger.info(""Beginning upload... "");
-    for (LocalFile file : diff) {
-      try {
-        this.objectStoreAccess.putObject(file);
-      } catch (ObjectStoreOperationFailedException e) {
-        failedOperationsCounter.incrementAndCheckThreshold(e);
-      }
+    logger.info(""Beginning upload of {} files... "", diff.size());
+    try {
+      diff.stream()
+          .map(file -> executor.submit(() -> objectStoreAccess.putObject(file)))
+          .forEach(this::awaitThread);
+    } finally {
+      executor.shutdown();
     }
     logger.info(""Upload completed."");
   }
+
+  private void awaitThread(Future<?> result) {
+    try {
+      result.get();
+    } catch (ExecutionException e) {
+      failedOperationsCounter.incrementAndCheckThreshold(new ObjectStoreOperationFailedException(e.getMessage(), e));
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      throw new ObjectStoreOperationFailedException(e.getMessage(), e);
+    }
+  }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStorePublishingConfig.java
similarity index 77%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStorePublishingConfig.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStorePublishingConfig.java
@@ -26,6 +26,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.retry.annotation.EnableRetry;
+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
 import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
 import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
 import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
@@ -37,7 +38,7 @@
  */
 @Configuration
 @EnableRetry
-public class ObjectStoreClientConfig {
+public class ObjectStorePublishingConfig {
 
   private static final Region DEFAULT_REGION = Region.EU_CENTRAL_1;
 
@@ -61,4 +62,17 @@ private ObjectStoreClient createClient(ObjectStore objectStore) {
   private String removeTrailingSlash(String string) {
     return string.endsWith(""/"") ? string.substring(0, string.length() - 1) : string;
   }
+
+  /**
+   * Creates a {@link ThreadPoolTaskExecutor}, which is used to submit object store upload tasks.
+   */
+  @Bean
+  public ThreadPoolTaskExecutor createExecutor(DistributionServiceConfig distributionServiceConfig) {
+    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
+    executor.setCorePoolSize(distributionServiceConfig.getObjectStore().getMaxNumberOfS3Threads());
+    executor.setMaxPoolSize(distributionServiceConfig.getObjectStore().getMaxNumberOfS3Threads());
+    executor.setThreadNamePrefix(""object-store-operation-worker-"");
+    executor.initialize();
+    return executor;
+  }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java
@@ -21,8 +21,6 @@
 package app.coronawarn.server.services.distribution.runner;
 
 import app.coronawarn.server.services.distribution.assembly.component.OutputDirectoryProvider;
-import app.coronawarn.server.services.distribution.objectstore.FailedObjectStoreOperationsCounter;
-import app.coronawarn.server.services.distribution.objectstore.ObjectStoreAccess;
 import app.coronawarn.server.services.distribution.objectstore.S3Publisher;
 import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;
 import java.io.IOException;
@@ -44,23 +42,19 @@ public class S3Distribution implements ApplicationRunner {
   private static final Logger logger = LoggerFactory.getLogger(S3Distribution.class);
 
   private final OutputDirectoryProvider outputDirectoryProvider;
-  private final ObjectStoreAccess objectStoreAccess;
-  private final FailedObjectStoreOperationsCounter failedOperationsCounter;
+  private final S3Publisher s3Publisher;
 
-  S3Distribution(OutputDirectoryProvider outputDirectoryProvider, ObjectStoreAccess objectStoreAccess,
-      FailedObjectStoreOperationsCounter failedOperationsCounter) {
+  S3Distribution(OutputDirectoryProvider outputDirectoryProvider, S3Publisher s3Publisher) {
     this.outputDirectoryProvider = outputDirectoryProvider;
-    this.objectStoreAccess = objectStoreAccess;
-    this.failedOperationsCounter = failedOperationsCounter;
+    this.s3Publisher = s3Publisher;
   }
 
   @Override
   public void run(ApplicationArguments args) {
     try {
       Path pathToDistribute = outputDirectoryProvider.getFileOnDisk().toPath().toAbsolutePath();
-      S3Publisher s3Publisher = new S3Publisher(pathToDistribute, objectStoreAccess, failedOperationsCounter);
 
-      s3Publisher.publish();
+      s3Publisher.publish(pathToDistribute);
       logger.info(""Data pushed to Object Store successfully."");
     } catch (UnsupportedOperationException | ObjectStoreOperationFailedException | IOException e) {
       logger.error(""Distribution failed."", e);
diff --git a/services/distribution/src/main/resources/application.yaml b/services/distribution/src/main/resources/application.yaml
--- a/services/distribution/src/main/resources/application.yaml
+++ b/services/distribution/src/main/resources/application.yaml
@@ -51,6 +51,7 @@ services:
       retry-attempts: 3
       retry-backoff: 2000
       max-number-of-failed-operations: 5
+      max-number-of-s3-threads: 4
 
 spring:
   main:
","
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java
@@ -35,6 +35,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.boot.ApplicationArguments;
 import org.springframework.boot.ApplicationRunner;
 import org.springframework.core.annotation.Order;
@@ -52,6 +53,7 @@
   private final ObjectStoreAccess objectStoreAccess;
   private final FailedObjectStoreOperationsCounter failedOperationsCounter;
 
+  private static final int NUM_THREADS = 4; // Number of threads to use for interacting with S3
 
   /**
    * Creates an {@link S3Publisher} instance that attempts to publish the files at the specified location to an object
@@ -84,7 +86,7 @@
     logger.info(""Beginning upload... "");
 
     ExecutorService executorService = Executors.newFixedThreadPool(NUM_THREADS);
-    for (LocalFile file : diff) {
+    for (LocalFile file : diff) { 
       executorService.submit(() -> {
         try {
           this.objectStoreAccess.putObject(file);
@@ -93,6 +95,8 @@
       });
     }
     executorService.shutdown();
+    try {
+      executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+    }
     logger.info(""Upload completed."");
   }
 }
","['README.md', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java', 'services/distribution/src/main/resources/application.yaml']",b148f9eae02d75e509e9b0cc1ae0cdd3fbbad77e
260,python3 create_patchfiles.py 260,"Exposure configuration parameters not validated
The exposure configuration parameters are currently not validated after being read from the respective yml file. The validation code in ``ExposureConfigurationValidator`` is currently used in tests only.

However, the expected behavior shall be the following:
 - The ``RiskScoreParameters`` object is constructed based on yml file. (✅)
 - ``ExposureConfigurationValidator`` performs validation of the parameters.
 - In case of a failed validation, **do not** publish the exposure configuration parameters, **but do** generate and publish the diagnosis key bundles.
 - Clarify whether to keep any previously present (valid) configuration parameters on the object store if a validation error occurs.
 - Any validation errors shall be logged appropriately.
",https://github.com/corona-warn-app/cwa-server/issues/122,https://github.com/corona-warn-app/cwa-server/pull/260,"diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_classification.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_classification.proto
new file mode 100644
--- /dev/null
+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_classification.proto
@@ -0,0 +1,15 @@
+syntax = ""proto3"";
+package app.coronawarn.server.common.protocols.internal;
+option java_package = ""app.coronawarn.server.common.protocols.internal"";
+option java_multiple_files = true;
+
+message RiskScoreClassification {
+  repeated RiskScoreClass risk_classes = 1;
+}
+
+message RiskScoreClass {
+  string label = 1;
+  int32 min = 2;
+  int32 max = 3;
+  string url = 4;
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProvider.java
similarity index 60%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProvider.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProvider.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProvider.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProvider.java
@@ -17,18 +17,9 @@
  * under the License.
  */
 
-package app.coronawarn.server.services.distribution.assembly.exposureconfig;
+package app.coronawarn.server.services.distribution.assembly.appconfig;
 
 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;
-import app.coronawarn.server.common.protocols.internal.RiskScoreParameters.Builder;
-import app.coronawarn.server.services.distribution.assembly.exposureconfig.parsing.YamlConstructorForProtoBuf;
-import java.io.IOException;
-import java.io.InputStream;
-import org.springframework.core.io.ClassPathResource;
-import org.springframework.core.io.Resource;
-import org.yaml.snakeyaml.Yaml;
-import org.yaml.snakeyaml.error.YAMLException;
-import org.yaml.snakeyaml.introspector.BeanAccess;
 
 /**
  * Provides the Exposure Configuration based on a file in the file system.<br> The existing file must be a valid YAML
@@ -62,21 +53,6 @@ public static RiskScoreParameters readMasterFile() throws UnableToLoadFileExcept
    * @throws UnableToLoadFileException when the file/transformation did not succeed
    */
   public static RiskScoreParameters readFile(String path) throws UnableToLoadFileException {
-    Yaml yaml = new Yaml(new YamlConstructorForProtoBuf());
-    yaml.setBeanAccess(BeanAccess.FIELD); /* no setters on RiskScoreParameters available */
-
-    Resource riskScoreParametersResource = new ClassPathResource(path);
-    try (InputStream inputStream = riskScoreParametersResource.getInputStream()) {
-      Builder loaded = yaml.loadAs(inputStream, RiskScoreParameters.newBuilder().getClass());
-      if (loaded == null) {
-        throw new UnableToLoadFileException(path);
-      }
-
-      return loaded.build();
-    } catch (YAMLException e) {
-      throw new UnableToLoadFileException(""Parsing failed"", e);
-    } catch (IOException e) {
-      throw new UnableToLoadFileException(""Failed to load file "" + path, e);
-    }
+    return YamlLoader.loadYamlIntoProtobufBuilder(path, RiskScoreParameters.Builder.class).build();
   }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProvider.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProvider.java
@@ -0,0 +1,58 @@
+/*
+ * Corona-Warn-App
+ *
+ * SAP SE and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the ""License""); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.server.services.distribution.assembly.appconfig;
+
+import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;
+
+/**
+ * Provides the risk score classification based on a file on the file system. The existing file must be a valid YAML
+ * file, and must match the specification of the proto file risk_score_classification.proto.
+ */
+public class RiskScoreClassificationProvider {
+
+  private RiskScoreClassificationProvider() {
+  }
+
+  /**
+   * The location of the risk score classification master file.
+   */
+  public static final String MASTER_FILE = ""risk-score-classification/master.yaml"";
+
+  /**
+   * Fetches the master configuration as a {@link RiskScoreClassification} instance.
+   *
+   * @return the risk score classification as {@link RiskScoreClassification}
+   * @throws UnableToLoadFileException when the file/transformation did not succeed
+   */
+  public static RiskScoreClassification readMasterFile() throws UnableToLoadFileException {
+    return readFile(MASTER_FILE);
+  }
+
+  /**
+   * Fetches a risk score classification file based on the given path. The path must be available in the classloader.
+   *
+   * @param path The path, e.g. folder/my-risk-score-classification.yaml
+   * @return the RiskScoreClassification
+   * @throws UnableToLoadFileException when the file access/transformation did not succeed
+   */
+  public static RiskScoreClassification readFile(String path) throws UnableToLoadFileException {
+    return YamlLoader.loadYamlIntoProtobufBuilder(path, RiskScoreClassification.Builder.class).build();
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/UnableToLoadFileException.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/UnableToLoadFileException.java
similarity index 92%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/UnableToLoadFileException.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/UnableToLoadFileException.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/UnableToLoadFileException.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/UnableToLoadFileException.java
@@ -17,7 +17,7 @@
  * under the License.
  */
 
-package app.coronawarn.server.services.distribution.assembly.exposureconfig;
+package app.coronawarn.server.services.distribution.assembly.appconfig;
 
 /**
  * The file could not be loaded/parsed correctly.
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java
@@ -0,0 +1,66 @@
+/*
+ * Corona-Warn-App
+ *
+ * SAP SE and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the ""License""); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.server.services.distribution.assembly.appconfig;
+
+import app.coronawarn.server.services.distribution.assembly.appconfig.parsing.YamlConstructorForProtoBuf;
+import com.google.protobuf.Message;
+import java.io.IOException;
+import java.io.InputStream;
+import org.springframework.core.io.ClassPathResource;
+import org.springframework.core.io.Resource;
+import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.error.YAMLException;
+import org.yaml.snakeyaml.introspector.BeanAccess;
+
+public class YamlLoader {
+
+  private YamlLoader() {
+  }
+
+  /**
+   * Returns a protobuf {@link Message.Builder message builder} of the specified type, whose fields have been set to the
+   * corresponding values from the yaml file at the specified path.
+   *
+   * @param path        The absolute path of the yaml file within the class path.
+   * @param builderType The specific {@link com.google.protobuf.Message.Builder} implementation that will be returned.
+   * @return A prepared protobuf {@link Message.Builder message builder} of the specified type.
+   * @throws UnableToLoadFileException if either the file access or subsequent yaml parsing fails.
+   */
+  public static <T extends Message.Builder> T loadYamlIntoProtobufBuilder(String path, Class<T> builderType)
+      throws UnableToLoadFileException {
+    Yaml yaml = new Yaml(new YamlConstructorForProtoBuf());
+    // no setters for generated message classes available
+    yaml.setBeanAccess(BeanAccess.FIELD);
+
+    Resource riskScoreParametersResource = new ClassPathResource(path);
+    try (InputStream inputStream = riskScoreParametersResource.getInputStream()) {
+      T loaded = yaml.loadAs(inputStream, builderType);
+      if (loaded == null) {
+        throw new UnableToLoadFileException(path);
+      }
+
+      return loaded;
+    } catch (YAMLException e) {
+      throw new UnableToLoadFileException(""Parsing failed"", e);
+    } catch (IOException e) {
+      throw new UnableToLoadFileException(""Failed to load file "" + path, e);
+    }
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/parsing/YamlConstructorForProtoBuf.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/parsing/YamlConstructorForProtoBuf.java
similarity index 95%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/parsing/YamlConstructorForProtoBuf.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/parsing/YamlConstructorForProtoBuf.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/parsing/YamlConstructorForProtoBuf.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/parsing/YamlConstructorForProtoBuf.java
@@ -17,7 +17,7 @@
  * under the License.
  */
 
-package app.coronawarn.server.services.distribution.assembly.exposureconfig.parsing;
+package app.coronawarn.server.services.distribution.assembly.appconfig.parsing;
 
 import java.util.Arrays;
 import org.yaml.snakeyaml.constructor.Constructor;
@@ -39,6 +39,7 @@ public YamlConstructorForProtoBuf() {
 
   private static class ProtoBufPropertyUtils extends PropertyUtils {
 
+    @Override
     public Property getProperty(Class<?> type, String name, BeanAccess beanAccess) {
       return super.getProperty(type, transformToProtoNaming(name), beanAccess);
     }
@@ -55,5 +56,4 @@ private String snakeToCamelCase(String snakeCase) {
       return Character.toLowerCase(camelCase.charAt(0)) + camelCase.substring(1);
     }
   }
-
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java
@@ -0,0 +1,113 @@
+/*
+ * Corona-Warn-App
+ *
+ * SAP SE and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the ""License""); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.server.services.distribution.assembly.appconfig.structure.directory;
+
+import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;
+import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;
+import app.coronawarn.server.services.distribution.assembly.appconfig.ExposureConfigurationProvider;
+import app.coronawarn.server.services.distribution.assembly.appconfig.RiskScoreClassificationProvider;
+import app.coronawarn.server.services.distribution.assembly.appconfig.UnableToLoadFileException;
+import app.coronawarn.server.services.distribution.assembly.appconfig.structure.directory.decorator.AppConfigurationSigningDecorator;
+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.AppConfigurationValidator;
+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ExposureConfigurationValidator;
+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidator;
+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationResult;
+import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;
+import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;
+import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;
+import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;
+import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;
+import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;
+import com.google.protobuf.Message;
+import java.util.Set;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Creates the directory structure {@code /parameters/country/:country} and writes two files. One containing {@link
+ * RiskScoreParameters} and the another containing the {@link RiskScoreClassification}, wrapped in a signed zip
+ * archive.
+ */
+public class AppConfigurationDirectory extends DirectoryOnDisk {
+
+  private static final Logger logger = LoggerFactory.getLogger(AppConfigurationDirectory.class);
+  private static final String PARAMETERS_DIRECTORY = ""configuration"";
+  private static final String COUNTRY_DIRECTORY = ""country"";
+  private static final String COUNTRY = ""DE"";
+  private static final String EXPOSURE_CONFIGURATION_FILE_NAME = ""exposure_configuration"";
+  private static final String RISK_SCORE_CLASSIFICATION_FILE_NAME = ""risk_score_classification"";
+
+  private final IndexDirectoryOnDisk<String> countryDirectory =
+      new IndexDirectoryOnDisk<>(COUNTRY_DIRECTORY, __ -> Set.of(COUNTRY), Object::toString);
+
+  private final CryptoProvider cryptoProvider;
+
+  /**
+   * Creates an {@link AppConfigurationDirectory} for the exposure configuration and risk score classification.
+   *
+   * @param cryptoProvider The {@link CryptoProvider} whose artifacts to use for creating the signature.
+   */
+  public AppConfigurationDirectory(CryptoProvider cryptoProvider) {
+    super(PARAMETERS_DIRECTORY);
+
+    this.cryptoProvider = cryptoProvider;
+    addExposureConfigurationIfValid();
+    addRiskScoreClassificationIfValid();
+
+    this.addWritable(new IndexingDecoratorOnDisk<>(countryDirectory));
+  }
+
+  private void addExposureConfigurationIfValid() {
+    try {
+      RiskScoreParameters exposureConfig = ExposureConfigurationProvider.readMasterFile();
+      AppConfigurationValidator validator = new ExposureConfigurationValidator(exposureConfig);
+      addArchiveIfMessageValid(EXPOSURE_CONFIGURATION_FILE_NAME, exposureConfig, validator);
+    } catch (UnableToLoadFileException e) {
+      logger.error(""Exposure configuration will not be published! Unable to read configuration file from disk."");
+    }
+  }
+
+  private void addRiskScoreClassificationIfValid() {
+    try {
+      RiskScoreClassification riskScoreClassification = RiskScoreClassificationProvider.readMasterFile();
+      AppConfigurationValidator validator = new RiskScoreClassificationValidator(riskScoreClassification);
+      addArchiveIfMessageValid(RISK_SCORE_CLASSIFICATION_FILE_NAME, riskScoreClassification, validator);
+    } catch (UnableToLoadFileException e) {
+      logger.error(""Risk score classification will not be published! Unable to read configuration file from disk."");
+    }
+  }
+
+  /**
+   * If validation of the {@link Message} succeeds, it is written into a file, put into an archive with the specified
+   * name and added to the specified parent directory.
+   */
+  private void addArchiveIfMessageValid(String archiveName, Message message, AppConfigurationValidator validator) {
+    ValidationResult validationResult = validator.validate();
+
+    if (validationResult.hasErrors()) {
+      logger.error(""App configuration file creation failed. Validation failed for {}./n{}"",
+          archiveName, validationResult);
+    }
+
+    ArchiveOnDisk appConfigurationFile = new ArchiveOnDisk(archiveName);
+    appConfigurationFile.addWritable(new FileOnDisk(""export.bin"", message.toByteArray()));
+    countryDirectory.addWritableToAll(__ -> new AppConfigurationSigningDecorator(appConfigurationFile, cryptoProvider));
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/decorator/ExposureConfigSigningDecorator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/decorator/AppConfigurationSigningDecorator.java
similarity index 78%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/decorator/ExposureConfigSigningDecorator.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/decorator/AppConfigurationSigningDecorator.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/decorator/ExposureConfigSigningDecorator.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/decorator/AppConfigurationSigningDecorator.java
@@ -1,4 +1,4 @@
-package app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory.decorator;
+package app.coronawarn.server.services.distribution.assembly.appconfig.structure.directory.decorator;
 
 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;
 import app.coronawarn.server.services.distribution.assembly.structure.Writable;
@@ -7,9 +7,9 @@
 import app.coronawarn.server.services.distribution.assembly.structure.archive.decorator.signing.SigningDecoratorOnDisk;
 import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;
 
-public class ExposureConfigSigningDecorator extends SigningDecoratorOnDisk {
+public class AppConfigurationSigningDecorator extends SigningDecoratorOnDisk {
 
-  public ExposureConfigSigningDecorator(Archive<WritableOnDisk> archive, CryptoProvider cryptoProvider) {
+  public AppConfigurationSigningDecorator(Archive<WritableOnDisk> archive, CryptoProvider cryptoProvider) {
     super(archive, cryptoProvider);
   }
 
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AppConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AppConfigurationValidator.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AppConfigurationValidator.java
@@ -0,0 +1,37 @@
+/*
+ * Corona-Warn-App
+ *
+ * SAP SE and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the ""License""); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
+
+/**
+ * Classes that extend {@link AppConfigurationValidator} validate the values of an associated {@link
+ * com.google.protobuf.Message} instance.
+ */
+public abstract class AppConfigurationValidator {
+
+  protected ValidationResult errors;
+
+  /**
+   * Performs a validation of the associated {@link com.google.protobuf.Message} instance and returns information about
+   * validation failures.
+   *
+   * @return The ValidationResult instance, containing information about possible errors.
+   */
+  public abstract ValidationResult validate();
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java
similarity index 93%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidator.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidator.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java
@@ -17,11 +17,11 @@
  * under the License.
  */
 
-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
 
 import app.coronawarn.server.common.protocols.internal.RiskLevel;
 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;
-import app.coronawarn.server.services.distribution.assembly.exposureconfig.validation.WeightValidationError.ErrorType;
+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType;
 import java.beans.BeanInfo;
 import java.beans.IntrospectionException;
 import java.beans.Introspector;
@@ -36,12 +36,10 @@
  * <br>
  * Weights must be in the range of 0.001 to 100.<br> Scores must be in the range of 1 to 8.<br>
  */
-public class ExposureConfigurationValidator {
+public class ExposureConfigurationValidator extends AppConfigurationValidator {
 
   private final RiskScoreParameters config;
 
-  private ValidationResult errors;
-
   public ExposureConfigurationValidator(RiskScoreParameters config) {
     this.config = config;
   }
@@ -52,6 +50,7 @@ public ExposureConfigurationValidator(RiskScoreParameters config) {
    * @return the ValidationResult instance, containing information about possible errors.
    * @throws ValidationExecutionException in case the validation could not be performed
    */
+  @Override
   public ValidationResult validate() {
     this.errors = new ValidationResult();
 
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ParameterSpec.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
similarity index 93%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ParameterSpec.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ParameterSpec.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java
@@ -17,7 +17,7 @@
  * under the License.
  */
 
-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
 
 /**
  * Definition of the spec according to Apple/Google:
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/RiskLevelValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskLevelValidationError.java
similarity index 95%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/RiskLevelValidationError.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskLevelValidationError.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/RiskLevelValidationError.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskLevelValidationError.java
@@ -17,7 +17,7 @@
  * under the License.
  */
 
-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
 
 import java.util.Objects;
 
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java
@@ -0,0 +1,81 @@
+/*
+ * Corona-Warn-App
+ *
+ * SAP SE and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the ""License""); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
+
+import java.util.Objects;
+
+public class RiskScoreClassificationValidationError implements ValidationError {
+
+  private final String errorSource;
+
+  private final Object value;
+
+  private final ErrorType reason;
+
+  /**
+   * Creates a {@link RiskScoreClassificationValidationError} that stores the specified validation error source,
+   * erroneous value and a reason for the error to occur.
+   *
+   * @param errorSource A label that describes the property associated with this validation error.
+   * @param value       The value that caused the validation error.
+   * @param reason      A validation error specifier.
+   */
+  public RiskScoreClassificationValidationError(String errorSource, Object value, ErrorType reason) {
+    this.errorSource = errorSource;
+    this.value = value;
+    this.reason = reason;
+  }
+
+  @Override
+  public String toString() {
+    return ""RiskScoreClassificationValidationError{""
+        + ""errorType="" + reason
+        + "", parameter='"" + errorSource + '\''
+        + "", givenValue="" + value
+        + '}';
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    RiskScoreClassificationValidationError that = (RiskScoreClassificationValidationError) o;
+    return Objects.equals(errorSource, that.errorSource)
+        && Objects.equals(value, that.value)
+        && Objects.equals(reason, that.reason);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(errorSource, value, reason);
+  }
+
+  public enum ErrorType {
+    BLANK_LABEL,
+    MIN_GREATER_THAN_MAX,
+    VALUE_OUT_OF_BOUNDS,
+    INVALID_URL,
+    INVALID_PARTITIONING
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java
@@ -0,0 +1,113 @@
+/*
+ * Corona-Warn-App
+ *
+ * SAP SE and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the ""License""); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
+
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.BLANK_LABEL;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_PARTITIONING;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_URL;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.MIN_GREATER_THAN_MAX;
+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;
+
+import app.coronawarn.server.common.protocols.internal.RiskScoreClass;
+import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;
+import java.net.MalformedURLException;
+import java.net.URL;
+
+/**
+ * The RiskScoreClassificationValidator validates the values of an associated {@link RiskScoreClassification} instance.
+ */
+public class RiskScoreClassificationValidator extends AppConfigurationValidator {
+
+  /**
+   * This defines the number of possible values (0 ... RISK_SCORE_VALUE_RANGE - 1) for the total risk score.
+   */
+  public static final int RISK_SCORE_VALUE_RANGE = 256;
+
+  private final RiskScoreClassification riskScoreClassification;
+
+  public RiskScoreClassificationValidator(RiskScoreClassification riskScoreClassification) {
+    this.riskScoreClassification = riskScoreClassification;
+  }
+
+  /**
+   * Performs a validation of the associated {@link RiskScoreClassification} instance and returns information about
+   * validation failures.
+   *
+   * @return The ValidationResult instance, containing information about possible errors.
+   */
+  @Override
+  public ValidationResult validate() {
+    errors = new ValidationResult();
+
+    validateValues();
+    validateValueRangeCoverage();
+
+    return errors;
+  }
+
+  private void validateValues() {
+    for (RiskScoreClass riskScoreClass : riskScoreClassification.getRiskClassesList()) {
+      int minRiskLevel = riskScoreClass.getMin();
+      int maxRiskLevel = riskScoreClass.getMax();
+
+      validateLabel(riskScoreClass.getLabel());
+      validateRiskScoreValueBounds(minRiskLevel);
+      validateRiskScoreValueBounds(maxRiskLevel);
+      validateUrl(riskScoreClass.getUrl());
+
+      if (minRiskLevel > maxRiskLevel) {
+        errors.add(new RiskScoreClassificationValidationError(
+            ""minRiskLevel, maxRiskLevel"", minRiskLevel + "", "" + maxRiskLevel, MIN_GREATER_THAN_MAX));
+      }
+    }
+  }
+
+  private void validateLabel(String label) {
+    if (label.isBlank()) {
+      errors.add(new RiskScoreClassificationValidationError(""label"", label, BLANK_LABEL));
+    }
+  }
+
+  private void validateRiskScoreValueBounds(int value) {
+    if (value < 0 || value > RISK_SCORE_VALUE_RANGE - 1) {
+      errors.add(new RiskScoreClassificationValidationError(""minRiskLevel/maxRiskLevel"", value, VALUE_OUT_OF_BOUNDS));
+    }
+  }
+
+  private void validateUrl(String url) {
+    if (!url.isBlank()) {
+      try {
+        new URL(url);
+      } catch (MalformedURLException e) {
+        errors.add(new RiskScoreClassificationValidationError(""url"", url, INVALID_URL));
+      }
+    }
+  }
+
+  private void validateValueRangeCoverage() {
+    int partitionSum = riskScoreClassification.getRiskClassesList().stream()
+        .mapToInt(riskScoreClass -> (riskScoreClass.getMax() - riskScoreClass.getMin() + 1))
+        .sum();
+
+    if (partitionSum != RISK_SCORE_VALUE_RANGE) {
+      errors.add(new RiskScoreClassificationValidationError(""covered value range"", partitionSum, INVALID_PARTITIONING));
+    }
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java
similarity index 76%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationError.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationError.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java
@@ -17,11 +17,10 @@
  * under the License.
  */
 
-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
 
 /**
- * A validation error, found during the process of validating the Exposure Configuration. Can either be score or weight
- * related.
+ * A validation error, found during validation of a generated protocol buffers message class instance.
  */
 public interface ValidationError {
 
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationExecutionException.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationExecutionException.java
similarity index 91%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationExecutionException.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationExecutionException.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationExecutionException.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationExecutionException.java
@@ -17,7 +17,7 @@
  * under the License.
  */
 
-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
 
 /**
  * The validation could not be executed. Find more information about the root cause in the cause element, and in the
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationResult.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationResult.java
similarity index 87%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationResult.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationResult.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationResult.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationResult.java
@@ -17,7 +17,7 @@
  * under the License.
  */
 
-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
 
 import java.util.HashSet;
 import java.util.Objects;
@@ -40,11 +40,6 @@ public boolean add(ValidationError error) {
     return this.errors.add(error);
   }
 
-  @Override
-  public String toString() {
-    return errors.toString();
-  }
-
   /**
    * Checks whether this validation result instance has at least one error.
    *
@@ -54,13 +49,9 @@ public boolean hasErrors() {
     return !this.errors.isEmpty();
   }
 
-  /**
-   * Checks whether this validation result instance has no errors.
-   *
-   * @return true if yes, false otherwise
-   */
-  public boolean isSuccessful() {
-    return !hasErrors();
+  @Override
+  public String toString() {
+    return errors.toString();
   }
 
   @Override
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/WeightValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/WeightValidationError.java
similarity index 96%
rename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/WeightValidationError.java
rename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/WeightValidationError.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/WeightValidationError.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/WeightValidationError.java
@@ -17,7 +17,7 @@
  * under the License.
  */
 
-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;
+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;
 
 import java.util.Objects;
 
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/AppConfigurationStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/AppConfigurationStructureProvider.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/AppConfigurationStructureProvider.java
@@ -0,0 +1,45 @@
+/*
+ * Corona-Warn-App
+ *
+ * SAP SE and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the ""License""); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.server.services.distribution.assembly.component;
+
+import app.coronawarn.server.services.distribution.assembly.appconfig.structure.directory.AppConfigurationDirectory;
+import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;
+import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+
+/**
+ * Reads configuration parameters from the respective files in the class path and builds a {@link
+ * AppConfigurationDirectory} with them.
+ */
+@Component
+public class AppConfigurationStructureProvider {
+
+  private final CryptoProvider cryptoProvider;
+
+  @Autowired
+  public AppConfigurationStructureProvider(CryptoProvider cryptoProvider) {
+    this.cryptoProvider = cryptoProvider;
+  }
+
+  public Directory<WritableOnDisk> getAppConfiguration() {
+    return new AppConfigurationDirectory(cryptoProvider);
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java
@@ -36,15 +36,15 @@ public class CwaApiStructureProvider {
   public static final String VERSION_DIRECTORY = ""version"";
   public static final String VERSION_V1 = ""v1"";
 
-  private final ExposureConfigurationStructureProvider exposureConfigurationStructureProvider;
+  private final AppConfigurationStructureProvider appConfigurationStructureProvider;
 
   private final DiagnosisKeysStructureProvider diagnosisKeysStructureProvider;
 
   @Autowired
   public CwaApiStructureProvider(
-      ExposureConfigurationStructureProvider exposureConfigurationStructureProvider,
+      AppConfigurationStructureProvider appConfigurationStructureProvider,
       DiagnosisKeysStructureProvider diagnosisKeysStructureProvider) {
-    this.exposureConfigurationStructureProvider = exposureConfigurationStructureProvider;
+    this.appConfigurationStructureProvider = appConfigurationStructureProvider;
     this.diagnosisKeysStructureProvider = diagnosisKeysStructureProvider;
   }
 
@@ -56,7 +56,7 @@ public Directory<WritableOnDisk> getDirectory() {
         new IndexDirectoryOnDisk<>(VERSION_DIRECTORY, __ -> Set.of(VERSION_V1), Object::toString);
 
     versionDirectory
-        .addWritableToAll(__ -> exposureConfigurationStructureProvider.getExposureConfiguration());
+        .addWritableToAll(__ -> appConfigurationStructureProvider.getAppConfiguration());
     versionDirectory.addWritableToAll(__ -> diagnosisKeysStructureProvider.getDiagnosisKeys());
 
     return new IndexingDecoratorOnDisk<>(versionDirectory);
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java
deleted file mode 100644
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * Corona-Warn-App
- *
- * SAP SE and all other contributors /
- * copyright owners license this file to you under the Apache
- * License, Version 2.0 (the ""License""); you may not use this
- * file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package app.coronawarn.server.services.distribution.assembly.component;
-
-import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;
-import app.coronawarn.server.services.distribution.assembly.exposureconfig.ExposureConfigurationProvider;
-import app.coronawarn.server.services.distribution.assembly.exposureconfig.UnableToLoadFileException;
-import app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory.ExposureConfigurationDirectory;
-import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-
-/**
- * Reads the exposure configuration parameters from the respective file in the class path and builds a {@link
- * ExposureConfigurationDirectory} with them.
- */
-@Component
-public class ExposureConfigurationStructureProvider {
-
-  private static final Logger logger = LoggerFactory
-      .getLogger(ExposureConfigurationStructureProvider.class);
-
-  private final CryptoProvider cryptoProvider;
-
-  @Autowired
-  public ExposureConfigurationStructureProvider(CryptoProvider cryptoProvider) {
-    this.cryptoProvider = cryptoProvider;
-  }
-
-  public Directory<WritableOnDisk> getExposureConfiguration() {
-    var riskScoreParameters = readExposureConfiguration();
-    return new ExposureConfigurationDirectory(riskScoreParameters, cryptoProvider);
-  }
-
-  private RiskScoreParameters readExposureConfiguration() {
-    logger.debug(""Reading exposure configuration..."");
-    try {
-      return ExposureConfigurationProvider.readMasterFile();
-    } catch (UnableToLoadFileException e) {
-      logger.error(""Could not load exposure configuration parameters"", e);
-      throw new RuntimeException(e);
-    }
-  }
-}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/ExposureConfigurationDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/ExposureConfigurationDirectory.java
deleted file mode 100644
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/ExposureConfigurationDirectory.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Corona-Warn-App
- *
- * SAP SE and all other contributors /
- * copyright owners license this file to you under the Apache
- * License, Version 2.0 (the ""License""); you may not use this
- * file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory;
-
-import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;
-import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;
-import app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory.decorator.ExposureConfigSigningDecorator;
-import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;
-import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;
-import java.util.Set;
-
-/**
- * Creates the directory structure {@code /parameters/country/:country} and writes a file called {@code index}
- * containing {@link RiskScoreParameters} wrapped in a signed zip archive.
- */
-public class ExposureConfigurationDirectory extends DirectoryOnDisk {
-
-  private static final String PARAMETERS_DIRECTORY = ""parameters"";
-  private static final String COUNTRY_DIRECTORY = ""country"";
-  private static final String COUNTRY = ""DE"";
-  private static final String INDEX_FILE_NAME = ""index"";
-
-  /**
-   * Constructor.
-   *
-   * @param exposureConfig The {@link RiskScoreParameters} to sign and write.
-   * @param cryptoProvider The {@link CryptoProvider} whose artifacts to use for creating the signature.
-   */
-  public ExposureConfigurationDirectory(RiskScoreParameters exposureConfig,
-      CryptoProvider cryptoProvider) {
-    super(PARAMETERS_DIRECTORY);
-
-    ArchiveOnDisk archive = new ArchiveOnDisk(INDEX_FILE_NAME);
-    archive.addWritable(new FileOnDisk(""export.bin"", exposureConfig.toByteArray()));
-
-    IndexDirectoryOnDisk<String> country =
-        new IndexDirectoryOnDisk<>(COUNTRY_DIRECTORY, __ -> Set.of(COUNTRY), Object::toString);
-    country.addWritableToAll(__ ->
-        new ExposureConfigSigningDecorator(archive, cryptoProvider));
-
-    this.addWritable(new IndexingDecoratorOnDisk<>(country));
-  }
-}
diff --git a/services/distribution/src/main/resources/risk-score-classification/master.yaml b/services/distribution/src/main/resources/risk-score-classification/master.yaml
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/resources/risk-score-classification/master.yaml
@@ -0,0 +1,27 @@
+# This is the Risk Score Classification master file which partitions the risk
+# score value range (0-255) into distinct risk classes that will be used to by
+# the app in order to present the correct risk classification in a user
+# friendly manner, based on the underlying total risk score, to the user.
+#
+# The risk classes must not overlap and
+# cover the full risk score value range (0-255).
+#
+# Change this file with caution!
+
+risk_classes:
+  -
+    label: ""LOW""
+    min: 0
+    max: 100
+    url: ""https://www...""
+  -
+    label: ""MID""
+    min: 101
+    max: 200
+    url: ""https://www...""
+  -
+    label: ""HIGH""
+    min: 201
+    max: 255
+    url: ""https://www...""
+    
\ No newline at end of file
","
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java
@@ -50,7 +50,7 @@
   public Directory<WritableOnDisk> getExposureConfiguration() {
     var riskScoreParameters = readExposureConfiguration();
     return new ExposureConfigurationDirectory(riskScoreParameters, cryptoProvider);
   }
 
-  private RiskScoreParameters readExposureConfiguration() {
+  public RiskScoreParameters readExposureConfiguration() {
     logger.debug(""Reading exposure configuration..."");
     try {
       return ExposureConfigurationProvider.readMasterFile();
@@ -58,7 +58,7 @@
       logger.error(""Could not load exposure configuration parameters"", e);
       throw new RuntimeException(e);
     }
   }
 
 }
","['README.md', '/dev/null', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProvider.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/UnableToLoadFileException.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/parsing/YamlConstructorForProtoBuf.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/ExposureConfigurationDirectory.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/decorator/ExposureConfigSigningDecorator.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidator.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ParameterSpec.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/RiskLevelValidationError.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationError.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationExecutionException.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationResult.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/WeightValidationError.java']",218e0c75d3890fd6c1166fc63ce287f3b9d51fa7
419,python3 create_patchfiles.py 419,"S3Publisher: Resilience
The S3Publisher/ObjectStoreAccess is currently lacking resilience features, like re-trys and error handling. 
",https://github.com/corona-warn-app/cwa-server/issues/151,https://github.com/corona-warn-app/cwa-server/pull/419,"diff --git a/services/distribution/pom.xml b/services/distribution/pom.xml
--- a/services/distribution/pom.xml
+++ b/services/distribution/pom.xml
@@ -78,6 +78,11 @@
       <groupId>org.apache.commons</groupId>
       <version>3.2</version>
     </dependency>
+    <dependency>
+      <artifactId>spring-retry</artifactId>
+      <groupId>org.springframework.retry</groupId>
+      <version>1.3.0</version>
+    </dependency>
   </dependencies>
 
 </project>
\ No newline at end of file
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java
@@ -394,6 +394,7 @@ public static class ObjectStore {
     private Integer port;
     private String bucket;
     private Boolean setPublicReadAclOnPutObject;
+    private Integer maxNumberOfFailedOperations;
 
     public String getAccessKey() {
       return accessKey;
@@ -442,5 +443,13 @@ public Boolean isSetPublicReadAclOnPutObject() {
     public void setSetPublicReadAclOnPutObject(Boolean setPublicReadAclOnPutObject) {
       this.setPublicReadAclOnPutObject = setPublicReadAclOnPutObject;
     }
+
+    public Integer getMaxNumberOfFailedOperations() {
+      return maxNumberOfFailedOperations;
+    }
+
+    public void setMaxNumberOfFailedOperations(Integer maxNumberOfFailedOperations) {
+      this.maxNumberOfFailedOperations = maxNumberOfFailedOperations;
+    }
   }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/FailedObjectStoreOperationsCounter.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/FailedObjectStoreOperationsCounter.java
new file mode 100644
--- /dev/null
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/FailedObjectStoreOperationsCounter.java
@@ -0,0 +1,58 @@
+/*-
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.services.distribution.objectstore;
+
+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;
+import java.util.concurrent.atomic.AtomicInteger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Component;
+
+/**
+ * Maintains the count and maximum number of failed object store operations in a thread-safe manner.
+ */
+@Component
+public class FailedObjectStoreOperationsCounter {
+
+  private static final Logger logger = LoggerFactory.getLogger(FailedObjectStoreOperationsCounter.class);
+
+  private final int maxNumberOfFailedOperations;
+  private final AtomicInteger failedOperationsCounter = new AtomicInteger(0);
+
+  public FailedObjectStoreOperationsCounter(DistributionServiceConfig distributionServiceConfig) {
+    maxNumberOfFailedOperations = distributionServiceConfig.getObjectStore().getMaxNumberOfFailedOperations();
+  }
+
+  /**
+   * Increments the internal failed operations counter and rethrows the specified exception if the configured maximum
+   * number of failed object store operation was exceeded.
+   *
+   * @param cause The {@link ObjectStoreOperationFailedException} that is associated with the failed operation.
+   */
+  public void incrementAndCheckThreshold(ObjectStoreOperationFailedException cause) {
+    logger.error(""Object store operation failed."", cause);
+    if (failedOperationsCounter.incrementAndGet() > maxNumberOfFailedOperations) {
+      logger.error(""Number of failed object store operations exceeded threshold of {}."", maxNumberOfFailedOperations);
+      throw cause;
+    }
+  }
+}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java
@@ -21,11 +21,13 @@
 package app.coronawarn.server.services.distribution.objectstore;
 
 import app.coronawarn.server.services.distribution.assembly.component.CwaApiStructureProvider;
+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;
 import app.coronawarn.server.services.distribution.objectstore.publish.LocalFile;
 import app.coronawarn.server.services.distribution.objectstore.publish.PublishFileSet;
 import app.coronawarn.server.services.distribution.objectstore.publish.PublishedFileSet;
 import java.io.IOException;
 import java.nio.file.Path;
+import java.util.List;
 import java.util.stream.Collectors;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -48,18 +50,29 @@ public class S3Publisher {
 
   private static final Logger logger = LoggerFactory.getLogger(S3Publisher.class);
 
-  /** The default CWA root folder, which contains all CWA related files. */
+  /**
+   * The default CWA root folder, which contains all CWA related files.
+   */
   private static final String CWA_S3_ROOT = CwaApiStructureProvider.VERSION_DIRECTORY;
 
-  /** root folder for the upload on the local disk. */
   private final Path root;
+  private final ObjectStoreAccess objectStoreAccess;
+  private final FailedObjectStoreOperationsCounter failedOperationsCounter;
 
-  /** access to the object store. */
-  private final ObjectStoreAccess access;
-
-  public S3Publisher(Path root, ObjectStoreAccess access) {
+  /**
+   * Creates an {@link S3Publisher} instance that attempts to publish the files at the specified location to an object
+   * store. Object store operations are performed through the specified {@link ObjectStoreAccess} instance.
+   *
+   * @param root                    The path of the directory that shall be published.
+   * @param objectStoreAccess       The {@link ObjectStoreAccess} used to communicate with the object store.
+   * @param failedOperationsCounter The {@link FailedObjectStoreOperationsCounter} that is used to monitor the number of
+   *                                failed operations.
+   */
+  public S3Publisher(Path root, ObjectStoreAccess objectStoreAccess,
+      FailedObjectStoreOperationsCounter failedOperationsCounter) {
     this.root = root;
-    this.access = access;
+    this.objectStoreAccess = objectStoreAccess;
+    this.failedOperationsCounter = failedOperationsCounter;
   }
 
   /**
@@ -68,18 +81,29 @@ public S3Publisher(Path root, ObjectStoreAccess access) {
    * @throws IOException in case there were problems reading files from the disk.
    */
   public void publish() throws IOException {
-    var published = new PublishedFileSet(access.getObjectsWithPrefix(CWA_S3_ROOT));
-    var toPublish = new PublishFileSet(root);
+    PublishedFileSet published;
+    List<LocalFile> toPublish = new PublishFileSet(root).getFiles();
+    List<LocalFile> diff;
 
-    var diff = toPublish
-        .getFiles()
-        .stream()
-        .filter(published::isNotYetPublished)
-        .collect(Collectors.toList());
+    try {
+      published = new PublishedFileSet(objectStoreAccess.getObjectsWithPrefix(CWA_S3_ROOT));
+      diff = toPublish
+          .stream()
+          .filter(published::isNotYetPublished)
+          .collect(Collectors.toList());
+    } catch (ObjectStoreOperationFailedException e) {
+      failedOperationsCounter.incrementAndCheckThreshold(e);
+      // failed to retrieve existing files; publish everything
+      diff = toPublish;
+    }
 
     logger.info(""Beginning upload... "");
     for (LocalFile file : diff) {
-      this.access.putObject(file);
+      try {
+        this.objectStoreAccess.putObject(file);
+      } catch (ObjectStoreOperationFailedException e) {
+        failedOperationsCounter.incrementAndCheckThreshold(e);
+      }
     }
     logger.info(""Upload completed."");
   }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java
@@ -22,6 +22,7 @@
 
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.Api;
+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;
 import app.coronawarn.server.services.distribution.objectstore.client.S3Object;
 import java.time.LocalDate;
 import java.time.ZoneOffset;
@@ -39,10 +40,16 @@ public class S3RetentionPolicy {
 
   private final ObjectStoreAccess objectStoreAccess;
   private final Api api;
+  private final FailedObjectStoreOperationsCounter failedObjectStoreOperationsCounter;
 
-  public S3RetentionPolicy(ObjectStoreAccess objectStoreAccess, DistributionServiceConfig distributionServiceConfig) {
+  /**
+   * Creates an {@link S3RetentionPolicy} instance with the specified parameters.
+   */
+  public S3RetentionPolicy(ObjectStoreAccess objectStoreAccess, DistributionServiceConfig distributionServiceConfig,
+      FailedObjectStoreOperationsCounter failedOperationsCounter) {
     this.objectStoreAccess = objectStoreAccess;
     this.api = distributionServiceConfig.getApi();
+    this.failedObjectStoreOperationsCounter = failedOperationsCounter;
   }
 
   /**
@@ -77,6 +84,10 @@ public void applyRetentionPolicy(int retentionDays) {
    * @param diagnosisKey the  diagnosis key, that should be deleted.
    */
   public void deleteDiagnosisKey(S3Object diagnosisKey) {
-    objectStoreAccess.deleteObjectsWithPrefix(diagnosisKey.getObjectName());
+    try {
+      objectStoreAccess.deleteObjectsWithPrefix(diagnosisKey.getObjectName());
+    } catch (ObjectStoreOperationFailedException e) {
+      failedObjectStoreOperationsCounter.incrementAndCheckThreshold(e);
+    }
   }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java
@@ -25,6 +25,7 @@
 import java.net.URI;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.retry.annotation.EnableRetry;
 import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
 import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
 import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
@@ -35,6 +36,7 @@
  * Manages the instantiation of the {@link ObjectStoreClient} bean.
  */
 @Configuration
+@EnableRetry
 public class ObjectStoreClientConfig {
 
   private static final Region DEFAULT_REGION = Region.EU_CENTRAL_1;
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java
@@ -28,6 +28,10 @@
 import java.util.Map;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.retry.annotation.Backoff;
+import org.springframework.retry.annotation.Recover;
+import org.springframework.retry.annotation.Retryable;
+import org.springframework.retry.support.RetrySynchronizationManager;
 import software.amazon.awssdk.core.exception.SdkException;
 import software.amazon.awssdk.core.sync.RequestBody;
 import software.amazon.awssdk.services.s3.S3Client;
@@ -67,18 +71,29 @@ public boolean bucketExists(String bucketName) {
   }
 
   @Override
+  @Retryable(
+      value = SdkException.class,
+      maxAttemptsExpression = ""${services.distribution.objectstore.retry-attempts}"",
+      backoff = @Backoff(delayExpression = ""${services.distribution.objectstore.retry-backoff}""))
   public List<S3Object> getObjects(String bucket, String prefix) {
-    try {
-      ListObjectsV2Response response =
-          s3Client.listObjectsV2(ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).build());
-      return response.contents().stream().map(S3ClientWrapper::buildS3Object).collect(toList());
-    } catch (SdkException e) {
-      throw new ObjectStoreOperationFailedException(""Failed to upload object to object store"", e);
-    }
+    logRetryStatus(""object download"");
+    ListObjectsV2Response response =
+        s3Client.listObjectsV2(ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).build());
+    return response.contents().stream().map(S3ClientWrapper::buildS3Object).collect(toList());
+  }
+
+  @Recover
+  public List<S3Object> skipReadOperation(Throwable cause) {
+    throw new ObjectStoreOperationFailedException(""Failed to get objects from object store"", cause);
   }
 
   @Override
+  @Retryable(
+      value = SdkException.class,
+      maxAttemptsExpression = ""${services.distribution.objectstore.retry-attempts}"",
+      backoff = @Backoff(delayExpression = ""${services.distribution.objectstore.retry-backoff}""))
   public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {
+    logRetryStatus(""object upload"");
     RequestBody bodyFile = RequestBody.fromFile(filePath);
 
     var requestBuilder = PutObjectRequest.builder().bucket(bucket).key(objectName);
@@ -89,40 +104,46 @@ public void putObject(String bucket, String objectName, Path filePath, Map<Heade
       requestBuilder.cacheControl(headers.get(HeaderKey.CACHE_CONTROL));
     }
 
-    try {
-      s3Client.putObject(requestBuilder.build(), bodyFile);
-    } catch (SdkException e) {
-      throw new ObjectStoreOperationFailedException(""Failed to upload object to object store"", e);
-    }
+    s3Client.putObject(requestBuilder.build(), bodyFile);
   }
 
   @Override
+  @Retryable(value = {SdkException.class, ObjectStoreOperationFailedException.class},
+      maxAttemptsExpression = ""${services.distribution.objectstore.retry-attempts}"",
+      backoff = @Backoff(delayExpression = ""${services.distribution.objectstore.retry-backoff}""))
   public void removeObjects(String bucket, List<String> objectNames) {
     if (objectNames.isEmpty()) {
       return;
     }
+    logRetryStatus(""object deletion"");
 
     Collection<ObjectIdentifier> identifiers = objectNames.stream()
         .map(key -> ObjectIdentifier.builder().key(key).build()).collect(toList());
 
-    try {
-      DeleteObjectsResponse response = s3Client.deleteObjects(
-          DeleteObjectsRequest.builder()
-              .bucket(bucket)
-              .delete(Delete.builder().objects(identifiers).build()).build());
-
-      if (response.hasErrors()) {
-        String errMessage = ""Failed to remove objects from object store."";
-        logger.error(""{} {}"", errMessage, response.errors());
-        throw new ObjectStoreOperationFailedException(errMessage);
-      }
-    } catch (SdkException e) {
-      throw new ObjectStoreOperationFailedException(""Failed to remove objects from object store."", e);
+    DeleteObjectsResponse response = s3Client.deleteObjects(
+        DeleteObjectsRequest.builder()
+            .bucket(bucket)
+            .delete(Delete.builder().objects(identifiers).build()).build());
+
+    if (response.hasErrors()) {
+      throw new ObjectStoreOperationFailedException(""Failed to remove objects from object store."");
     }
   }
 
+  @Recover
+  private void skipModifyingOperation(Throwable cause) {
+    throw new ObjectStoreOperationFailedException(""Failed to modify objects on object store."", cause);
+  }
+
   private static S3Object buildS3Object(software.amazon.awssdk.services.s3.model.S3Object s3Object) {
     String etag = s3Object.eTag().replaceAll(""\"""", """");
     return new S3Object(s3Object.key(), etag);
   }
+
+  private void logRetryStatus(String action) {
+    int retryCount = RetrySynchronizationManager.getContext().getRetryCount();
+    if (retryCount > 0) {
+      logger.warn(""Retrying {} after {} failed attempt(s)."", action, retryCount);
+    }
+  }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java
@@ -21,6 +21,7 @@
 package app.coronawarn.server.services.distribution.runner;
 
 import app.coronawarn.server.services.distribution.assembly.component.OutputDirectoryProvider;
+import app.coronawarn.server.services.distribution.objectstore.FailedObjectStoreOperationsCounter;
 import app.coronawarn.server.services.distribution.objectstore.ObjectStoreAccess;
 import app.coronawarn.server.services.distribution.objectstore.S3Publisher;
 import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;
@@ -43,19 +44,21 @@ public class S3Distribution implements ApplicationRunner {
   private static final Logger logger = LoggerFactory.getLogger(S3Distribution.class);
 
   private final OutputDirectoryProvider outputDirectoryProvider;
-
   private final ObjectStoreAccess objectStoreAccess;
+  private final FailedObjectStoreOperationsCounter failedOperationsCounter;
 
-  S3Distribution(OutputDirectoryProvider outputDirectoryProvider, ObjectStoreAccess objectStoreAccess) {
+  S3Distribution(OutputDirectoryProvider outputDirectoryProvider, ObjectStoreAccess objectStoreAccess,
+      FailedObjectStoreOperationsCounter failedOperationsCounter) {
     this.outputDirectoryProvider = outputDirectoryProvider;
     this.objectStoreAccess = objectStoreAccess;
+    this.failedOperationsCounter = failedOperationsCounter;
   }
 
   @Override
   public void run(ApplicationArguments args) {
     try {
       Path pathToDistribute = outputDirectoryProvider.getFileOnDisk().toPath().toAbsolutePath();
-      S3Publisher s3Publisher = new S3Publisher(pathToDistribute, objectStoreAccess);
+      S3Publisher s3Publisher = new S3Publisher(pathToDistribute, objectStoreAccess, failedOperationsCounter);
 
       s3Publisher.publish();
       logger.info(""Data pushed to Object Store successfully."");
diff --git a/services/distribution/src/main/resources/application.yaml b/services/distribution/src/main/resources/application.yaml
--- a/services/distribution/src/main/resources/application.yaml
+++ b/services/distribution/src/main/resources/application.yaml
@@ -47,6 +47,9 @@ services:
       bucket: ${CWA_OBJECTSTORE_BUCKET:cwa}
       port: ${CWA_OBJECTSTORE_PORT:8003}
       set-public-read-acl-on-put-object: true
+      retry-attempts: 3
+      retry-backoff: 2000
+      max-number-of-failed-operations: 5
 
 spring:
   main:
","diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java
index 9a7b8c4..f3e7d89 100644
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java
@@ -46,6 +46,7 @@ public class S3Publisher {
   }
 
   /**
+   * Publishes the files to S3.
    *
    * @throws IOException in case there were problems reading files from the disk.
    */
@@ -57,6 +58,7 @@ public class S3Publisher {
       this.access.putObject(file);
     }
     logger.info(""Upload completed."");
+    logger.info(""Data pushed to Object Store successfully."");
   }
 }
","['README.md', '/dev/null', 'services/distribution/pom.xml', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java', 'services/distribution/src/main/resources/application.yaml']",896d24d3730d455ddc7a67bdaebd843ba7bd91dd
463,python3 create_patchfiles.py 463,"Distribution: Add Safeguard to not generate any exposure key file > 16MB
In order to prevent issues on the mobile device & potential abuse, add a safeguard, so that we do not publish any files, which are bigger than 16MB. In case this threshold is reached for any file, an error message must be logged.

Make sure to keep consistency with the index files. In order to align with the current concept of always generating a file, we should generate an empty file in this case as well.

@pithumke 




",https://github.com/corona-warn-app/cwa-server/issues/444,https://github.com/corona-warn-app/cwa-server/pull/463,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java
@@ -27,6 +27,7 @@
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
 import java.time.LocalDate;
 import java.time.LocalDateTime;
+import java.time.temporal.Temporal;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
@@ -35,12 +36,16 @@
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * An instance of this class contains a collection of {@link DiagnosisKey DiagnosisKeys}.
  */
 public abstract class DiagnosisKeyBundler {
 
+  private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyBundler.class);
+
   /**
    * The submission timestamp is counted in 1 hour intervals since epoch.
    */
@@ -51,8 +56,9 @@ public abstract class DiagnosisKeyBundler {
    */
   public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);
 
-  protected final int minNumberOfKeysPerBundle;
   protected final long expiryPolicyMinutes;
+  protected final int minNumberOfKeysPerBundle;
+  private final int maxNumberOfKeysPerBundle;
 
   // The hour at which the distribution runs. This field is needed to prevent the run from distributing any keys that
   // have already been submitted but may only be distributed in the future (e.g. because they are not expired yet).
@@ -61,9 +67,13 @@ public abstract class DiagnosisKeyBundler {
   // A map containing diagnosis keys, grouped by the LocalDateTime on which they may be distributed
   protected final Map<LocalDateTime, List<DiagnosisKey>> distributableDiagnosisKeys = new HashMap<>();
 
+  /**
+   * Constructs a DiagnosisKeyBundler based on the specified service configuration.
+   */
   public DiagnosisKeyBundler(DistributionServiceConfig distributionServiceConfig) {
-    this.minNumberOfKeysPerBundle = distributionServiceConfig.getShiftingPolicyThreshold();
     this.expiryPolicyMinutes = distributionServiceConfig.getExpiryPolicyMinutes();
+    this.minNumberOfKeysPerBundle = distributionServiceConfig.getShiftingPolicyThreshold();
+    this.maxNumberOfKeysPerBundle = distributionServiceConfig.getMaximumNumberOfKeysPerBundle();
   }
 
   /**
@@ -106,9 +116,14 @@ public List<DiagnosisKey> getAllDiagnosisKeys() {
   public Set<LocalDate> getDatesWithDistributableDiagnosisKeys() {
     return this.distributableDiagnosisKeys.keySet().stream()
         .map(LocalDateTime::toLocalDate)
+        .filter(this::numberOfKeysForDateBelowMaximum)
         .collect(Collectors.toSet());
   }
 
+  public boolean numberOfKeysForDateBelowMaximum(LocalDate date) {
+    return numberOfKeysBelowMaximum(getDiagnosisKeysForDate(date).size(), date);
+  }
+
   /**
    * Returns a set of all {@link LocalDateTime hours} of a specified {@link LocalDate date} during which {@link
    * DiagnosisKey diagnosis keys} shall be distributed.
@@ -116,9 +131,23 @@ public Set<LocalDate> getDatesWithDistributableDiagnosisKeys() {
   public Set<LocalDateTime> getHoursWithDistributableDiagnosisKeys(LocalDate currentDate) {
     return this.distributableDiagnosisKeys.keySet().stream()
         .filter(dateTime -> dateTime.toLocalDate().equals(currentDate))
+        .filter(this::numberOfKeysForHourBelowMaximum)
         .collect(Collectors.toSet());
   }
 
+  private boolean numberOfKeysForHourBelowMaximum(LocalDateTime hour) {
+    return numberOfKeysBelowMaximum(getDiagnosisKeysForHour(hour).size(), hour);
+  }
+
+  private boolean numberOfKeysBelowMaximum(int numberOfKeys, Temporal time) {
+    if (numberOfKeys > maxNumberOfKeysPerBundle) {
+      logger.error(""Number of diagnosis keys ({}) for {} exceeds the configured maximum."", numberOfKeys, time);
+      return false;
+    } else {
+      return true;
+    }
+  }
+
   /**
    * Returns the submission timestamp of a {@link DiagnosisKey} as a {@link LocalDateTime}.
    */
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java
@@ -67,6 +67,6 @@ public void prepare(ImmutableStack<Object> indices) {
 
   private IndexDirectory<LocalDate, WritableOnDisk> decorateDateDirectory(DiagnosisKeysDateDirectory dateDirectory) {
     return new DateAggregatingDecorator(new DateIndexingDecorator(dateDirectory, distributionServiceConfig),
-        cryptoProvider, distributionServiceConfig);
+        cryptoProvider, distributionServiceConfig, diagnosisKeyBundler);
   }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java
@@ -25,6 +25,7 @@
 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;
 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKeyExport;
 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;
+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.singing.DiagnosisKeySigningDecorator;
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;
 import app.coronawarn.server.services.distribution.assembly.structure.Writable;
@@ -54,15 +55,17 @@ public class DateAggregatingDecorator extends IndexDirectoryDecorator<LocalDate,
 
   private final CryptoProvider cryptoProvider;
   private final DistributionServiceConfig distributionServiceConfig;
+  private final DiagnosisKeyBundler diagnosisKeyBundler;
 
   /**
    * Creates a new DateAggregatingDecorator.
    */
   public DateAggregatingDecorator(IndexDirectory<LocalDate, WritableOnDisk> directory, CryptoProvider cryptoProvider,
-      DistributionServiceConfig distributionServiceConfig) {
+      DistributionServiceConfig distributionServiceConfig, DiagnosisKeyBundler diagnosisKeyBundler) {
     super(directory);
     this.cryptoProvider = cryptoProvider;
     this.distributionServiceConfig = distributionServiceConfig;
+    this.diagnosisKeyBundler = diagnosisKeyBundler;
   }
 
   @Override
@@ -77,6 +80,7 @@ public void prepare(ImmutableStack<Object> indices) {
     }
 
     Set<String> dates = this.getIndex(indices).stream()
+        .filter(diagnosisKeyBundler::numberOfKeysForDateBelowMaximum)
         .map(this.getIndexFormatter())
         .map(Object::toString)
         .collect(Collectors.toSet());
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/io/IO.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/io/IO.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/io/IO.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/io/IO.java
@@ -30,6 +30,11 @@
  */
 public class IO {
 
+  /**
+   * The maximum acceptable file size in bytes.
+   */
+  public static final int MAXIMUM_FILE_SIZE = 16000000;
+
   private IO() {
   }
 
@@ -51,12 +56,20 @@ public static void makeNewFile(File root, String name) {
   }
 
   /**
-   * Writes bytes into a file.
+   * Writes bytes into a file. If the resulting file would exceed the specified maximum file size, it is not written but
+   * removed instead.
    *
    * @param bytes      The content to write
    * @param outputFile The file to write the content into.
    */
   public static void writeBytesToFile(byte[] bytes, File outputFile) {
+    if (bytes.length > MAXIMUM_FILE_SIZE) {
+      String fileName = outputFile.getName();
+      throw new UncheckedIOException(
+          new IOException(
+              ""File size of "" + bytes.length + "" bytes exceeds the maximum file size. Deleting"" + fileName));
+    }
+
     try (FileOutputStream outputFileStream = new FileOutputStream(outputFile)) {
       outputFileStream.write(bytes);
     } catch (IOException e) {
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java
@@ -33,6 +33,7 @@ public class DistributionServiceConfig {
   private Integer retentionDays;
   private Integer expiryPolicyMinutes;
   private Integer shiftingPolicyThreshold;
+  private Integer maximumNumberOfKeysPerBundle;
   private String outputFileName;
   private Boolean includeIncompleteDays;
   private Boolean includeIncompleteHours;
@@ -81,6 +82,14 @@ public void setShiftingPolicyThreshold(Integer shiftingPolicyThreshold) {
     this.shiftingPolicyThreshold = shiftingPolicyThreshold;
   }
 
+  public Integer getMaximumNumberOfKeysPerBundle() {
+    return this.maximumNumberOfKeysPerBundle;
+  }
+
+  public void setMaximumNumberOfKeysPerBundle(Integer maximumNumberOfKeysPerBundle) {
+    this.maximumNumberOfKeysPerBundle = maximumNumberOfKeysPerBundle;
+  }
+
   public String getOutputFileName() {
     return outputFileName;
   }
diff --git a/services/distribution/src/main/resources/application.yaml b/services/distribution/src/main/resources/application.yaml
--- a/services/distribution/src/main/resources/application.yaml
+++ b/services/distribution/src/main/resources/application.yaml
@@ -13,6 +13,7 @@ services:
     retention-days: 14
     expiry-policy-minutes: 120
     shifting-policy-threshold: 140
+    maximum-number-of-keys-per-bundle: 600000
     include-incomplete-days: false
     include-incomplete-hours: false
     paths:
","--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java
@@ -42,6 +42,7 @@ public abstract class DiagnosisKeyBundler {
   protected final int minNumberOfKeysPerBundle;
   protected final long expiryPolicyMinutes;
 
+  protected final long maxFileSizeBytes = 16 * 1024 * 1024; // 16MB
 
   // The hour at which the distribution runs. This field is needed to prevent the run from distributing any keys that
   // have already been submitted but may only be distributed in the future (e.g. because they are not expired yet).
@@ -84,6 +85,11 @@ public abstract class DiagnosisKeyBundler {
    */
   public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys, LocalDateTime distributionTime) {
     this.distributionTime = distributionTime;
+    for (DiagnosisKey diagnosisKey : diagnosisKeys) {
+      if (diagnosisKey.getPayload().length > maxFileSizeBytes) {
+        throw new IllegalArgumentException(""Exposure key file size exceeds the maximum limit of 16MB"");
+      }
+    }
     this.createDiagnosisKeyDistributionMap(diagnosisKeys);
   }
 
@@ -101,6 +107,7 @@ public abstract class DiagnosisKeyBundler {
    */
   protected abstract void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys);
 
+
   /**
    * Returns all {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.
    */
","['README.md', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/io/IO.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java', 'services/distribution/src/main/resources/application.yaml']",eb68e1126a4f9bcb169afef6a2ca1dbbbcf8b3cd
308,python3 create_patchfiles.py 308,"Apple's Proposal for Exposure Key Validation
#92  Current Implementation

We used sensible assumptions for key validation.

## Suggested Enhancement

[Apple proposes](https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server?changes=latest_beta): 

> An EN server must reject invalid key files uploaded from a client app. Uploaded key data is considered invalid if:
>
> Any ENIntervalNumber values from the same user are not unique
> 
> There are any gaps in the ENIntervalNumber values for a user
> 
> Any keys in the file have overlapping time windows
> 
> The period of time covered by the data file exceeds 14 days
> 
> The TEKRollingPeriod value is not 144
> 
> You may optionally want to validate the clock time the device submits.

## Expected Benefits

Adherence to reference implementations.
",https://github.com/corona-warn-app/cwa-server/issues/179,https://github.com/corona-warn-app/cwa-server/pull/308,"diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
@@ -36,7 +36,6 @@
 import javax.validation.ConstraintViolation;
 import javax.validation.Validation;
 import javax.validation.Validator;
-import javax.validation.constraints.Min;
 import javax.validation.constraints.Size;
 import org.hibernate.validator.constraints.Range;
 
@@ -46,6 +45,14 @@
 @Entity
 @Table(name = ""diagnosis_key"")
 public class DiagnosisKey {
+
+  /**
+   * According to ""Setting Up an Exposure Notification Server"" by Apple, exposure notification servers are expected to
+   * reject any diagnosis keys that do not have a rolling period of a certain fixed value. See
+   * https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server
+   */
+  public static final int EXPECTED_ROLLING_PERIOD = 144;
+
   private static final Validator VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();
 
   @Id
@@ -58,7 +65,8 @@ public class DiagnosisKey {
   @ValidRollingStartIntervalNumber
   private int rollingStartIntervalNumber;
 
-  @Min(value = 1, message = ""Rolling period must be greater than 0."")
+  @Range(min = EXPECTED_ROLLING_PERIOD, max = EXPECTED_ROLLING_PERIOD,
+      message = ""Rolling period must be "" + EXPECTED_ROLLING_PERIOD + ""."")
   private int rollingPeriod;
 
   @Range(min = 0, max = 8, message = ""Risk level must be between 0 and 8."")
@@ -135,7 +143,7 @@ public long getSubmissionTimestamp() {
    * Checks if this diagnosis key falls into the period between now, and the retention threshold.
    *
    * @param daysToRetain the number of days before a key is outdated
-   * @return true, if the rolling start number is in the time span between now, and the given days to retain
+   * @return true, if the rolling start interval number is within the time between now, and the given days to retain
    * @throws IllegalArgumentException if {@code daysToRetain} is negative.
    */
   public boolean isYoungerThanRetentionThreshold(int daysToRetain) {
@@ -155,7 +163,7 @@ public boolean isYoungerThanRetentionThreshold(int daysToRetain) {
    *
    * <p><ul>
    * <li>Risk level must be between 0 and 8
-   * <li>Rolling start number must be greater than 0
+   * <li>Rolling start interval number must be greater than 0
    * <li>Rolling start number cannot be in the future
    * <li>Rolling period must be positive number
    * <li>Key data must be byte array of length 16
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java
@@ -21,7 +21,6 @@
 
 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;
 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.FinalBuilder;
-import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.RollingPeriodBuilder;
 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.RollingStartIntervalNumberBuilder;
 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.TransmissionRiskLevelBuilder;
 
@@ -38,14 +37,14 @@
  * An instance of this builder can be retrieved by calling {@link DiagnosisKey#builder()}. A {@link DiagnosisKey} can
  * then be build by either providing the required member values or by passing the respective protocol buffer object.
  */
-public class DiagnosisKeyBuilder implements Builder, RollingStartIntervalNumberBuilder,
-    RollingPeriodBuilder, TransmissionRiskLevelBuilder, FinalBuilder {
+public class DiagnosisKeyBuilder implements
+    Builder, RollingStartIntervalNumberBuilder, TransmissionRiskLevelBuilder, FinalBuilder {
 
   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyBuilder.class);
 
   private byte[] keyData;
   private int rollingStartIntervalNumber;
-  private int rollingPeriod;
+  private int rollingPeriod = DiagnosisKey.EXPECTED_ROLLING_PERIOD;
   private int transmissionRiskLevel;
   private long submissionTimestamp = -1L;
 
@@ -59,17 +58,11 @@ public RollingStartIntervalNumberBuilder withKeyData(byte[] keyData) {
   }
 
   @Override
-  public RollingPeriodBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber) {
+  public TransmissionRiskLevelBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber) {
     this.rollingStartIntervalNumber = rollingStartIntervalNumber;
     return this;
   }
 
-  @Override
-  public TransmissionRiskLevelBuilder withRollingPeriod(int rollingPeriod) {
-    this.rollingPeriod = rollingPeriod;
-    return this;
-  }
-
   @Override
   public FinalBuilder withTransmissionRiskLevel(int transmissionRiskLevel) {
     this.transmissionRiskLevel = transmissionRiskLevel;
@@ -81,8 +74,8 @@ public FinalBuilder fromProtoBuf(TemporaryExposureKey protoBufObject) {
     return this
         .withKeyData(protoBufObject.getKeyData().toByteArray())
         .withRollingStartIntervalNumber(protoBufObject.getRollingStartIntervalNumber())
-        .withRollingPeriod(protoBufObject.getRollingPeriod())
-        .withTransmissionRiskLevel(protoBufObject.getTransmissionRiskLevel());
+        .withTransmissionRiskLevel(protoBufObject.getTransmissionRiskLevel())
+        .withRollingPeriod(protoBufObject.getRollingPeriod());
   }
 
   @Override
@@ -91,6 +84,12 @@ public FinalBuilder withSubmissionTimestamp(long submissionTimestamp) {
     return this;
   }
 
+  @Override
+  public FinalBuilder withRollingPeriod(int rollingPeriod) {
+    this.rollingPeriod = rollingPeriod;
+    return this;
+  }
+
   @Override
   public DiagnosisKey build() {
     if (submissionTimestamp < 0) {
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java
@@ -48,25 +48,13 @@ interface Builder {
   interface RollingStartIntervalNumberBuilder {
 
     /**
-     * Adds the specified rolling start number to this builder.
+     * Adds the specified rolling start interval number to this builder.
      *
      * @param rollingStartIntervalNumber number describing when a key starts. It is equal to
      *                                   startTimeOfKeySinceEpochInSecs / (60 * 10).
      * @return this Builder instance.
      */
-    RollingPeriodBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber);
-  }
-
-  interface RollingPeriodBuilder {
-
-    /**
-     * Adds the specified rolling period to this builder.
-     *
-     * @param rollingPeriod Number describing how long a key is valid. It is expressed in increments
-     *                      of 10 minutes (e.g. 144 for 24 hours).
-     * @return this Builder instance.
-     */
-    TransmissionRiskLevelBuilder withRollingPeriod(int rollingPeriod);
+    TransmissionRiskLevelBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber);
   }
 
   interface TransmissionRiskLevelBuilder {
@@ -90,6 +78,16 @@ interface FinalBuilder {
      */
     FinalBuilder withSubmissionTimestamp(long submissionTimestamp);
 
+    /**
+     * Adds the specified rolling period to this builder. If not specified, the rolling period defaults to {@link
+     * DiagnosisKey#EXPECTED_ROLLING_PERIOD}
+     *
+     * @param rollingPeriod Number describing how long a key is valid. It is expressed in increments of 10 minutes (e.g.
+     *                      144 for 24 hours).
+     * @return this Builder instance.
+     */
+    FinalBuilder withRollingPeriod(int rollingPeriod);
+
     /**
      * Builds a {@link DiagnosisKey} instance. If no submission timestamp has been specified it will be set to ""now"" as
      * hours since epoch.
diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidRollingStartIntervalNumber.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidRollingStartIntervalNumber.java
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidRollingStartIntervalNumber.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidRollingStartIntervalNumber.java
@@ -35,7 +35,7 @@
    *
    * @return the error message
    */
-  String message() default ""Rolling start number must be greater 0 and cannot be in the future."";
+  String message() default ""Rolling start interval number must be greater 0 and cannot be in the future."";
 
   /**
    * Groups.
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java
@@ -71,7 +71,7 @@ public class TestDataGeneration implements ApplicationRunner {
   // The submission timestamp is counted in 1 hour intervals since epoch
   private static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);
 
-  // The rolling start number is counted in 10 minute intervals since epoch
+  // The rolling start interval number is counted in 10 minute intervals since epoch
   private static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);
 
   /**
@@ -166,7 +166,6 @@ private DiagnosisKey generateDiagnosisKey(long submissionTimestamp) {
     return DiagnosisKey.builder()
         .withKeyData(generateDiagnosisKeyBytes())
         .withRollingStartIntervalNumber(generateRollingStartIntervalNumber(submissionTimestamp))
-        .withRollingPeriod(generateRollingPeriod())
         .withTransmissionRiskLevel(generateTransmissionRiskLevel())
         .withSubmissionTimestamp(submissionTimestamp)
         .build();
@@ -182,8 +181,8 @@ private byte[] generateDiagnosisKeyBytes() {
   }
 
   /**
-   * Returns a random rolling start number (timestamp since when a key was active, represented by a 10 minute interval
-   * counter.) between a specific submission timestamp and the beginning of the retention period.
+   * Returns a random rolling start interval number (timestamp since when a key was active, represented by a 10 minute
+   * interval counter) between a specific submission timestamp and the beginning of the retention period.
    */
   private int generateRollingStartIntervalNumber(long submissionTimestamp) {
     long maxRollingStartIntervalNumber =
@@ -194,13 +193,6 @@ private int generateRollingStartIntervalNumber(long submissionTimestamp) {
     return Math.toIntExact(getRandomBetween(minRollingStartIntervalNumber, maxRollingStartIntervalNumber));
   }
 
-  /**
-   * Returns a rolling period (number of 10 minute intervals that a key was active for) of 1 day.
-   */
-  private int generateRollingPeriod() {
-    return Math.toIntExact(TimeUnit.DAYS.toSeconds(1) / TEN_MINUTES_INTERVAL_SECONDS);
-  }
-
   /**
    * Returns a random number between {@link RiskLevel#RISK_LEVEL_LOWEST_VALUE} and {@link
    * RiskLevel#RISK_LEVEL_HIGHEST_VALUE}.
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/ApiExceptionHandler.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/ApiExceptionHandler.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/ApiExceptionHandler.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/ApiExceptionHandler.java
@@ -20,8 +20,8 @@
 package app.coronawarn.server.services.submission.controller;
 
 import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;
-import app.coronawarn.server.services.submission.exception.InvalidPayloadException;
 import com.google.protobuf.InvalidProtocolBufferException;
+import javax.validation.ConstraintViolationException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.http.HttpStatus;
@@ -50,7 +50,7 @@ public void bindingExceptions(Exception ex, WebRequest wr) {
     logger.error(""Binding failed {}"", wr.getDescription(false), ex);
   }
 
-  @ExceptionHandler({InvalidDiagnosisKeyException.class, InvalidPayloadException.class})
+  @ExceptionHandler({InvalidDiagnosisKeyException.class, ConstraintViolationException.class})
   @ResponseStatus(HttpStatus.BAD_REQUEST)
   public void diagnosisKeyExceptions(Exception ex, WebRequest wr) {
     logger.error(""Erroneous Submission Payload {}"", wr.getDescription(false), ex);
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java
@@ -24,7 +24,7 @@
 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;
 import app.coronawarn.server.common.protocols.internal.SubmissionPayload;
 import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;
-import app.coronawarn.server.services.submission.exception.InvalidPayloadException;
+import app.coronawarn.server.services.submission.validation.ValidSubmissionPayload;
 import app.coronawarn.server.services.submission.verification.TanVerifier;
 import java.util.ArrayList;
 import java.util.List;
@@ -39,6 +39,7 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.util.StopWatch;
+import org.springframework.validation.annotation.Validated;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestHeader;
@@ -48,6 +49,7 @@
 
 @RestController
 @RequestMapping(""/version/v1"")
+@Validated
 public class SubmissionController {
 
   private static final Logger logger = LoggerFactory.getLogger(SubmissionController.class);
@@ -62,7 +64,6 @@ public class SubmissionController {
   private final TanVerifier tanVerifier;
   private final Double fakeDelayMovingAverageSamples;
   private final Integer retentionDays;
-  private final Integer maxNumberOfKeys;
   private Double fakeDelay;
 
   @Autowired
@@ -73,7 +74,6 @@ public class SubmissionController {
     fakeDelay = submissionServiceConfig.getInitialFakeDelayMilliseconds();
     fakeDelayMovingAverageSamples = submissionServiceConfig.getFakeDelayMovingAverageSamples();
     retentionDays = submissionServiceConfig.getRetentionDays();
-    maxNumberOfKeys = submissionServiceConfig.getMaxNumberOfKeys();
   }
 
   /**
@@ -86,7 +86,7 @@ public class SubmissionController {
    */
   @PostMapping(SUBMISSION_ROUTE)
   public DeferredResult<ResponseEntity<Void>> submitDiagnosisKey(
-      @RequestBody SubmissionPayload exposureKeys,
+      @ValidSubmissionPayload @RequestBody SubmissionPayload exposureKeys,
       @RequestHeader(""cwa-fake"") Integer fake,
       @RequestHeader(""cwa-authorization"") String tan) {
     if (fake != 0) {
@@ -147,9 +147,8 @@ private ResponseEntity<Void> buildTanInvalidResponseEntity() {
    */
   public void persistDiagnosisKeysPayload(SubmissionPayload protoBufDiagnosisKeys) {
     List<TemporaryExposureKey> protoBufferKeysList = protoBufDiagnosisKeys.getKeysList();
-    validatePayload(protoBufferKeysList);
-
     List<DiagnosisKey> diagnosisKeys = new ArrayList<>();
+
     for (TemporaryExposureKey protoBufferKey : protoBufferKeysList) {
       DiagnosisKey diagnosisKey = DiagnosisKey.builder().fromProtoBuf(protoBufferKey).build();
       if (diagnosisKey.isYoungerThanRetentionThreshold(retentionDays)) {
@@ -162,13 +161,6 @@ public void persistDiagnosisKeysPayload(SubmissionPayload protoBufDiagnosisKeys)
     diagnosisKeyService.saveDiagnosisKeys(diagnosisKeys);
   }
 
-  private void validatePayload(List<TemporaryExposureKey> protoBufKeysList) {
-    if (protoBufKeysList.isEmpty() || protoBufKeysList.size() > maxNumberOfKeys) {
-      throw new InvalidPayloadException(
-          String.format(""Number of keys must be between 1 and %s, but is %s."", maxNumberOfKeys, protoBufKeysList));
-    }
-  }
-
   private synchronized void updateFakeDelay(long realRequestDuration) {
     fakeDelay = fakeDelay + (1 / fakeDelayMovingAverageSamples) * (realRequestDuration - fakeDelay);
   }
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/exception/InvalidPayloadException.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/exception/InvalidPayloadException.java
deleted file mode 100644
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/exception/InvalidPayloadException.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Corona-Warn-App
- *
- * SAP SE and all other contributors /
- * copyright owners license this file to you under the Apache
- * License, Version 2.0 (the ""License""); you may not use this
- * file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package app.coronawarn.server.services.submission.exception;
-
-/**
- * Exception thrown to indicate an invalid payload of a
- * {@link app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey}.
- */
-public class InvalidPayloadException extends RuntimeException {
-
-  public InvalidPayloadException(String message) {
-    super(message);
-  }
-
-}
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/validation/ValidSubmissionPayload.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/validation/ValidSubmissionPayload.java
new file mode 100644
--- /dev/null
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/validation/ValidSubmissionPayload.java
@@ -0,0 +1,148 @@
+/*
+ * Corona-Warn-App
+ * SAP SE and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the ""License""); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.server.services.submission.validation;
+
+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
+import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;
+import app.coronawarn.server.common.protocols.internal.SubmissionPayload;
+import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Objects;
+import javax.validation.Constraint;
+import javax.validation.ConstraintValidator;
+import javax.validation.ConstraintValidatorContext;
+import javax.validation.Payload;
+
+@Constraint(validatedBy = ValidSubmissionPayload.SubmissionPayloadValidator.class)
+@Target({ElementType.PARAMETER})
+@Retention(RetentionPolicy.RUNTIME)
+@Documented
+public @interface ValidSubmissionPayload {
+
+  /**
+   * Error message.
+   *
+   * @return the error message
+   */
+  String message() default ""Invalid diagnosis key submission payload."";
+
+  /**
+   * Groups.
+   *
+   * @return
+   */
+  Class<?>[] groups() default {};
+
+  /**
+   * Payload.
+   *
+   * @return
+   */
+  Class<? extends Payload>[] payload() default {};
+
+  class SubmissionPayloadValidator implements
+      ConstraintValidator<ValidSubmissionPayload, SubmissionPayload> {
+
+    private final int maxNumberOfKeys;
+
+    public SubmissionPayloadValidator(SubmissionServiceConfig submissionServiceConfig) {
+      maxNumberOfKeys = submissionServiceConfig.getMaxNumberOfKeys();
+    }
+
+    /**
+     * Validates the following constraints.
+     * <ul>
+     *   <li>StartIntervalNumber values from the same {@link SubmissionPayload} shall be unique.</li>
+     *   <li>There must be no gaps for StartIntervalNumber values for a user.</li>
+     *   <li>There must not be any keys in the {@link SubmissionPayload} have overlapping time windows.</li>
+     *   <li>The period of time covered by the data file must not exceed the configured maximum number of days.</li>
+     * </ul>
+     */
+    @Override
+    public boolean isValid(SubmissionPayload submissionPayload, ConstraintValidatorContext validatorContext) {
+      List<TemporaryExposureKey> exposureKeys = submissionPayload.getKeysList();
+      validatorContext.disableDefaultConstraintViolation();
+
+      if (Objects.isNull(exposureKeys)) {
+        addViolation(validatorContext, ""Field 'keys' points to Null."");
+        return false;
+      }
+
+      boolean isValid = checkKeyCollectionSize(exposureKeys, validatorContext);
+      isValid &= checkUniqueStartIntervalNumbers(exposureKeys, validatorContext);
+      isValid &= checkNoGapsInTimeWindow(exposureKeys, validatorContext);
+
+      return isValid;
+    }
+
+    private void addViolation(ConstraintValidatorContext validatorContext, String message) {
+      validatorContext.buildConstraintViolationWithTemplate(message).addConstraintViolation();
+    }
+
+    private boolean checkKeyCollectionSize(List<TemporaryExposureKey> exposureKeys,
+        ConstraintValidatorContext validatorContext) {
+      if (exposureKeys.isEmpty() || exposureKeys.size() > maxNumberOfKeys) {
+        addViolation(validatorContext, String.format(
+            ""Number of keys must be between 1 and %s, but is %s."", maxNumberOfKeys, exposureKeys.size()));
+        return false;
+      }
+      return true;
+    }
+
+    private boolean checkUniqueStartIntervalNumbers(List<TemporaryExposureKey> exposureKeys,
+        ConstraintValidatorContext validatorContext) {
+      Integer[] startIntervalNumbers = exposureKeys.stream()
+          .mapToInt(TemporaryExposureKey::getRollingStartIntervalNumber).boxed().toArray(Integer[]::new);
+      long distinctSize = Arrays.stream(startIntervalNumbers)
+          .distinct()
+          .count();
+
+      if (distinctSize < exposureKeys.size()) {
+        addViolation(validatorContext, String.format(
+            ""Duplicate StartIntervalNumber found. StartIntervalNumbers: %s"", startIntervalNumbers));
+        return false;
+      }
+      return true;
+    }
+
+    private boolean checkNoGapsInTimeWindow(List<TemporaryExposureKey> exposureKeys,
+        ConstraintValidatorContext validatorContext) {
+      if (exposureKeys.size() < 2) {
+        return true;
+      }
+
+      Integer[] sortedStartIntervalNumbers = exposureKeys.stream()
+          .mapToInt(TemporaryExposureKey::getRollingStartIntervalNumber)
+          .sorted().boxed().toArray(Integer[]::new);
+
+      for (int i = 1; i < sortedStartIntervalNumbers.length; i++) {
+        if (sortedStartIntervalNumbers[i] != sortedStartIntervalNumbers[i - 1] + DiagnosisKey.EXPECTED_ROLLING_PERIOD) {
+          addViolation(validatorContext, String.format(
+              ""Subsequent intervals do not align. StartIntervalNumbers: %s"", sortedStartIntervalNumbers));
+          return false;
+        }
+      }
+      return true;
+    }
+  }
+}
","<patch>
--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java
@@ -108,7 +108,7 @@ public class DiagnosisKey {
    */
   public int getRollingStartIntervalNumber() {
     return rollingStartIntervalNumber;
-  }
+  }","['README.md', '/dev/null', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java', 'common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidRollingStartIntervalNumber.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java', 'services/submission/src/main/java/app/coronawarn/server/services/submission/controller/ApiExceptionHandler.java', 'services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java', 'services/submission/src/main/java/app/coronawarn/server/services/submission/exception/InvalidPayloadException.java']",9ef96cbec24163360512f3d4748a248d6eddd078
629,python3 create_patchfiles.py 629,"Simplifying DateAggregatingDecorator
The DateAggregatingDecorator should make more use of the `DiagnosisKeyBundler`. Please team up with @pithumke on this. 
",https://github.com/corona-warn-app/cwa-server/issues/607,https://github.com/corona-warn-app/cwa-server/pull/629,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java
@@ -32,6 +32,7 @@
 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;
 import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
+import java.util.Optional;
 import java.util.Set;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -86,6 +87,7 @@ private void addConfigurationArchiveIfValid(String archiveName) {
     ArchiveOnDisk appConfigurationFile = new ArchiveOnDisk(archiveName);
     appConfigurationFile.addWritable(new FileOnDisk(""export.bin"", applicationConfiguration.toByteArray()));
     countryDirectory.addWritableToAll(ignoredValue ->
-        new AppConfigurationSigningDecorator(appConfigurationFile, cryptoProvider, distributionServiceConfig));
+        Optional
+            .of(new AppConfigurationSigningDecorator(appConfigurationFile, cryptoProvider, distributionServiceConfig)));
   }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java
@@ -25,6 +25,7 @@
 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;
 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
+import java.util.Optional;
 import java.util.Set;
 import org.springframework.stereotype.Component;
 
@@ -59,8 +60,10 @@ public Directory<WritableOnDisk> getDirectory() {
         ignoredValue -> Set.of(distributionServiceConfig.getApi().getVersionV1()),
         Object::toString);
 
-    versionDirectory.addWritableToAll(ignoredValue -> appConfigurationStructureProvider.getAppConfiguration());
-    versionDirectory.addWritableToAll(ignoredValue -> diagnosisKeysStructureProvider.getDiagnosisKeys());
+    versionDirectory.addWritableToAll(ignoredValue ->
+        Optional.of(appConfigurationStructureProvider.getAppConfiguration()));
+    versionDirectory.addWritableToAll(ignoredValue ->
+        Optional.of(diagnosisKeysStructureProvider.getDiagnosisKeys()));
 
     return new IndexingDecoratorOnDisk<>(versionDirectory, distributionServiceConfig.getOutputFileName());
   }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java
@@ -95,6 +95,13 @@ public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys, LocalDateTi
     this.createDiagnosisKeyDistributionMap(diagnosisKeys);
   }
 
+  /**
+   * Returns the {@link LocalDateTime} at which the distribution runs.
+   */
+  public LocalDateTime getDistributionTime() {
+    return this.distributionTime;
+  }
+
   /**
    * Returns all {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.
    */
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java
@@ -23,7 +23,6 @@
 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;
-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.DateAggregatingDecorator;
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.DateIndexingDecorator;
 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;
 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;
@@ -31,6 +30,7 @@
 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
 import java.time.LocalDate;
+import java.util.Optional;
 import java.util.Set;
 
 public class DiagnosisKeysCountryDirectory extends IndexDirectoryOnDisk<String> {
@@ -57,14 +57,12 @@ public DiagnosisKeysCountryDirectory(DiagnosisKeyBundler diagnosisKeyBundler,
 
   @Override
   public void prepare(ImmutableStack<Object> indices) {
-    this.addWritableToAll(ignoredValue ->
-        decorateDateDirectory(
-            new DiagnosisKeysDateDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig)));
+    this.addWritableToAll(ignoredValue -> Optional.of(decorateDateDirectory(
+        new DiagnosisKeysDateDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig))));
     super.prepare(indices);
   }
 
   private IndexDirectory<LocalDate, WritableOnDisk> decorateDateDirectory(DiagnosisKeysDateDirectory dateDirectory) {
-    return new DateAggregatingDecorator(new DateIndexingDecorator(dateDirectory, distributionServiceConfig),
-        cryptoProvider, distributionServiceConfig, diagnosisKeyBundler);
+    return new DateIndexingDecorator(dateDirectory, distributionServiceConfig);
   }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java
@@ -23,14 +23,23 @@
 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;
+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.signing.DiagnosisKeySigningDecorator;
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.HourIndexingDecorator;
+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;
+import app.coronawarn.server.services.distribution.assembly.structure.Writable;
 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;
+import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;
+import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;
 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;
 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;
+import app.coronawarn.server.services.distribution.assembly.structure.file.File;
 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
 import java.time.LocalDate;
+import java.time.ZoneOffset;
 import java.time.format.DateTimeFormatter;
+import java.util.List;
+import java.util.Optional;
 
 public class DiagnosisKeysDateDirectory extends IndexDirectoryOnDisk<LocalDate> {
 
@@ -61,12 +70,39 @@ public void prepare(ImmutableStack<Object> indices) {
     this.addWritableToAll(ignoredValue -> {
       DiagnosisKeysHourDirectory hourDirectory =
           new DiagnosisKeysHourDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig);
-      return decorateHourDirectory(hourDirectory);
+      return Optional.of(decorateHourDirectory(hourDirectory));
     });
+    this.addWritableToAll(this::indicesToDateDirectoryArchive);
     super.prepare(indices);
   }
 
+  private Optional<Writable<WritableOnDisk>> indicesToDateDirectoryArchive(ImmutableStack<Object> currentIndices) {
+    LocalDate currentDate = (LocalDate) currentIndices.peek();
+    if (currentDate.equals(diagnosisKeyBundler.getDistributionTime().toLocalDate())) {
+      return Optional.empty();
+    }
+    String region = (String) currentIndices.pop().peek();
+
+    List<DiagnosisKey> diagnosisKeysForCurrentHour =
+        this.diagnosisKeyBundler.getDiagnosisKeysForDate(currentDate);
+
+    long startTimestamp = currentDate.atStartOfDay().toEpochSecond(ZoneOffset.UTC);
+    long endTimestamp = currentDate.plusDays(1).atStartOfDay().toEpochSecond(ZoneOffset.UTC);
+
+    File<WritableOnDisk> temporaryExposureKeyExportFile = TemporaryExposureKeyExportFile.fromDiagnosisKeys(
+        diagnosisKeysForCurrentHour, region, startTimestamp, endTimestamp, distributionServiceConfig);
+
+    Archive<WritableOnDisk> dateArchive = new ArchiveOnDisk(distributionServiceConfig.getOutputFileName());
+    dateArchive.addWritable(temporaryExposureKeyExportFile);
+
+    return Optional.of(decorateDiagnosisKeyArchive(dateArchive));
+  }
+
   private Directory<WritableOnDisk> decorateHourDirectory(DiagnosisKeysHourDirectory hourDirectory) {
     return new HourIndexingDecorator(hourDirectory, distributionServiceConfig);
   }
+
+  private Directory<WritableOnDisk> decorateDiagnosisKeyArchive(Archive<WritableOnDisk> archive) {
+    return new DiagnosisKeySigningDecorator(archive, cryptoProvider, distributionServiceConfig);
+  }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java
@@ -37,6 +37,7 @@
 import java.time.LocalDateTime;
 import java.time.ZoneOffset;
 import java.util.List;
+import java.util.Optional;
 
 public class DiagnosisKeysHourDirectory extends IndexDirectoryOnDisk<LocalDateTime> {
 
@@ -80,7 +81,7 @@ public void prepare(ImmutableStack<Object> indices) {
       Archive<WritableOnDisk> hourArchive = new ArchiveOnDisk(distributionServiceConfig.getOutputFileName());
       hourArchive.addWritable(temporaryExposureKeyExportFile);
 
-      return decorateDiagnosisKeyArchive(hourArchive);
+      return Optional.of(decorateDiagnosisKeyArchive(hourArchive));
     });
     super.prepare(indices);
   }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java
deleted file mode 100644
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java
+++ /dev/null
@@ -1,202 +0,0 @@
-/*-
- * ---license-start
- * Corona-Warn-App
- * ---
- * Copyright (C) 2020 SAP SE and all other contributors
- * ---
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * ---license-end
- */
-
-package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator;
-
-import static app.coronawarn.server.services.distribution.assembly.structure.util.functional.CheckedFunction.uncheckedFunction;
-
-import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;
-import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKeyExport;
-import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;
-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;
-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.signing.DiagnosisKeySigningDecorator;
-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;
-import app.coronawarn.server.services.distribution.assembly.structure.Writable;
-import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;
-import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;
-import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.DirectoryDecorator;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.IndexDirectoryDecorator;
-import app.coronawarn.server.services.distribution.assembly.structure.file.File;
-import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;
-import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
-import java.time.LocalDate;
-import java.util.List;
-import java.util.NoSuchElementException;
-import java.util.Optional;
-import java.util.Set;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-/**
- * A {@link DirectoryDecorator} that will bundle hour aggregates into date aggregates and sign them.
- */
-public class DateAggregatingDecorator extends IndexDirectoryDecorator<LocalDate, WritableOnDisk> {
-
-  private final CryptoProvider cryptoProvider;
-  private final DistributionServiceConfig distributionServiceConfig;
-  private final DiagnosisKeyBundler diagnosisKeyBundler;
-
-  /**
-   * Creates a new DateAggregatingDecorator.
-   */
-  public DateAggregatingDecorator(IndexDirectory<LocalDate, WritableOnDisk> directory, CryptoProvider cryptoProvider,
-      DistributionServiceConfig distributionServiceConfig, DiagnosisKeyBundler diagnosisKeyBundler) {
-    super(directory);
-    this.cryptoProvider = cryptoProvider;
-    this.distributionServiceConfig = distributionServiceConfig;
-    this.diagnosisKeyBundler = diagnosisKeyBundler;
-  }
-
-  @Override
-  public void prepare(ImmutableStack<Object> indices) {
-    super.prepare(indices);
-    Set<Directory<WritableOnDisk>> dayDirectories = this.getWritables().stream()
-        .filter(writable -> writable instanceof DirectoryOnDisk)
-        .map(directory -> (DirectoryOnDisk) directory)
-        .collect(Collectors.toSet());
-    if (dayDirectories.isEmpty()) {
-      return;
-    }
-
-    Set<String> dates = this.getIndex(indices).stream()
-        .filter(diagnosisKeyBundler::numberOfKeysForDateBelowMaximum)
-        .map(this.getIndexFormatter())
-        .map(Object::toString)
-        .collect(Collectors.toSet());
-
-    dayDirectories.stream()
-        .filter(dayDirectory -> dates.contains(dayDirectory.getName()))
-        .forEach(currentDirectory -> Stream.of(currentDirectory)
-            .map(this::getSubSubDirectoryArchives)
-            .map(this::getTemporaryExposureKeyExportFilesFromArchives)
-            .map(this::parseTemporaryExposureKeyExportsFromFiles)
-            .map(this::reduceTemporaryExposureKeyExportsToNewFile)
-            .map(temporaryExposureKeyExportFile -> {
-              Archive<WritableOnDisk> aggregate = new ArchiveOnDisk(distributionServiceConfig.getOutputFileName());
-              aggregate.addWritable(temporaryExposureKeyExportFile);
-              return aggregate;
-            })
-            .map(file -> new DiagnosisKeySigningDecorator(file, cryptoProvider, distributionServiceConfig))
-            .forEach(aggregate -> {
-              currentDirectory.addWritable(aggregate);
-              aggregate.prepare(indices);
-            })
-        );
-  }
-
-  /**
-   * Returns all archives that are 3 levels down from the root directory.
-   */
-  private Set<Archive<WritableOnDisk>> getSubSubDirectoryArchives(Directory<WritableOnDisk> rootDirectory) {
-    return getWritablesInDirectory(rootDirectory, 3).stream()
-        .filter(Writable::isArchive)
-        .map(archive -> (Archive<WritableOnDisk>) archive)
-        .collect(Collectors.toSet());
-  }
-
-  /**
-   * Traverses a directory {@code depth} levels deep and returns a flattened list of all writables at that depth. A
-   * {@code depth} of 0 or less returns a set only containing the root directory. A depth of 1 returns a set of
-   * writables in the root directory. A depth of 2 returns a set of all writables in all directories in the root
-   * directory, and so on.
-   *
-   * @param rootDirectory The directory in which to start traversal.
-   * @param depth         The depth to traverse.
-   * @return All writables that are {@code depth} levels down.
-   */
-  private Set<Writable<WritableOnDisk>> getWritablesInDirectory(Directory<WritableOnDisk> rootDirectory, int depth) {
-    if (depth <= 0) {
-      return Set.of(rootDirectory);
-    } else if (depth == 1) {
-      return rootDirectory.getWritables();
-    } else {
-      return rootDirectory.getWritables().stream()
-          .filter(Writable::isDirectory)
-          .flatMap(directory -> getWritablesInDirectory((Directory<WritableOnDisk>) directory, depth - 1).stream())
-          .collect(Collectors.toSet());
-    }
-  }
-
-  private Set<TemporaryExposureKeyExportFile> getTemporaryExposureKeyExportFilesFromArchives(
-      Set<Archive<WritableOnDisk>> hourArchives) {
-    return hourArchives.stream()
-        .map(Directory::getWritables)
-        .map(writables -> writables.stream()
-            .filter(writable -> writable.getName().equals(""export.bin"")))
-        .map(Stream::findFirst)
-        .map(Optional::orElseThrow)
-        .filter(writable -> writable instanceof File)
-        .map(file -> (TemporaryExposureKeyExportFile) file)
-        .collect(Collectors.toSet());
-  }
-
-  private Set<TemporaryExposureKeyExport> parseTemporaryExposureKeyExportsFromFiles(
-      Set<TemporaryExposureKeyExportFile> temporaryExposureKeyExportFiles) {
-    return temporaryExposureKeyExportFiles.stream()
-        .map(TemporaryExposureKeyExportFile::getBytesWithoutHeader)
-        .map(uncheckedFunction(TemporaryExposureKeyExport::parseFrom))
-        .collect(Collectors.toSet());
-  }
-
-  private TemporaryExposureKeyExportFile reduceTemporaryExposureKeyExportsToNewFile(
-      Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {
-    return TemporaryExposureKeyExportFile.fromTemporaryExposureKeys(
-        getTemporaryExposureKeys(temporaryExposureKeyExports),
-        getRegion(temporaryExposureKeyExports),
-        getStartTimestamp(temporaryExposureKeyExports),
-        getEndTimestamp(temporaryExposureKeyExports),
-        distributionServiceConfig
-    );
-  }
-
-  private static Set<TemporaryExposureKey> getTemporaryExposureKeys(
-      Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {
-    return temporaryExposureKeyExports.stream()
-        .map(TemporaryExposureKeyExport::getKeysList)
-        .flatMap(List::stream)
-        .collect(Collectors.toSet());
-  }
-
-  private static String getRegion(Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {
-    return temporaryExposureKeyExports.stream()
-        .map(TemporaryExposureKeyExport::getRegion)
-        .findAny()
-        .orElseThrow(NoSuchElementException::new);
-  }
-
-  private static long getStartTimestamp(
-      Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {
-    return temporaryExposureKeyExports.stream()
-        .mapToLong(TemporaryExposureKeyExport::getStartTimestamp)
-        .min()
-        .orElseThrow(NoSuchElementException::new);
-  }
-
-  private static long getEndTimestamp(Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {
-    return temporaryExposureKeyExports.stream()
-        .mapToLong(TemporaryExposureKeyExport::getEndTimestamp)
-        .max()
-        .orElseThrow(NoSuchElementException::new);
-  }
-}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java
@@ -27,6 +27,7 @@
 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.IndexFunction;
 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.WritableFunction;
 import java.util.HashSet;
+import java.util.Optional;
 import java.util.Set;
 
 /**
@@ -74,9 +75,9 @@ public void addWritableToAll(WritableFunction<WritableOnDisk> writableFunction)
   }
 
   /**
-   * Creates a new subdirectory for every element of the {@link IndexDirectory#getIndex index} and writes all its
-   * {@link IndexDirectory#addWritableToAll writables} to those. The respective element of the index will be pushed
-   * onto the Stack for subsequent {@link Writable#prepare} calls.
+   * Creates a new subdirectory for every element of the {@link IndexDirectory#getIndex index} and writes all its {@link
+   * IndexDirectory#addWritableToAll writables} to those. The respective element of the index will be pushed onto the
+   * Stack for subsequent {@link Writable#prepare} calls.
    *
    * @param indices A {@link ImmutableStack} of parameters from all {@link IndexDirectory IndexDirectories} further up
    *                in the hierarchy. The Stack may contain different types, depending on the types {@code T} of {@link
@@ -104,9 +105,11 @@ private DirectoryOnDisk makeSubDirectory(T index) {
 
   private void prepareMetaWritables(ImmutableStack<Object> indices, DirectoryOnDisk target) {
     this.metaWritables.forEach(metaWritableFunction -> {
-      Writable<WritableOnDisk> newWritable = metaWritableFunction.apply(indices);
-      target.addWritable(newWritable);
-      newWritable.prepare(indices);
+      Optional<Writable<WritableOnDisk>> maybeNewWritable = metaWritableFunction.apply(indices);
+      maybeNewWritable.ifPresent(newWritable -> {
+        target.addWritable(newWritable);
+        newWritable.prepare(indices);
+      });
     });
   }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/functional/WritableFunction.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/functional/WritableFunction.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/functional/WritableFunction.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/functional/WritableFunction.java
@@ -22,6 +22,7 @@
 
 import app.coronawarn.server.services.distribution.assembly.structure.Writable;
 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;
+import java.util.Optional;
 import java.util.function.Function;
 
 /**
@@ -30,7 +31,8 @@
  * @param <T> The specific type of {@link Writable} that this {@link WritableFunction} can create.
  */
 @FunctionalInterface
-public interface WritableFunction<T extends Writable<T>> extends Function<ImmutableStack<Object>, Writable<T>> {
+public interface WritableFunction<T extends Writable<T>> extends
+    Function<ImmutableStack<Object>, Optional<Writable<T>>> {
 
-  Writable<T> apply(ImmutableStack<Object> t);
+  Optional<Writable<T>> apply(ImmutableStack<Object> t);
 }
","
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java
@@ -56,7 +56,7 @@
    public DiagnosisKeysCountryDirectory(DiagnosisKeyBundler diagnosisKeyBundler,
        CryptoProvider cryptoProvider, DistributionServiceConfig distributionServiceConfig) {
     super(distributionServiceConfig.getApi().getCountryPath(), ignoredValue ->
-        Set.of(distributionServiceConfig.getApi().getCountryGermany()), Object::toString);
+        Set.of(distributionServiceConfig.getApi().getCountryGermany()), String::valueOf);
     this.diagnosisKeyBundler = diagnosisKeyBundler;
     this.cryptoProvider = cryptoProvider;
     this.distributionServiceConfig = distributionServiceConfig;
","['README.md', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/functional/WritableFunction.java']",2e2655a94ae13a663cdbbcb17c5b1065edccf90b
387,python3 create_patchfiles.py 387,"Use typed client and entities for tan verification
## Current Implementation
The current tan verification look like this:
https://github.com/corona-warn-app/cwa-server/blob/3b98beb268bac511c00f8e13bcbb4978a8cdb4fd/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java#L102-L115

There are a couple of issues I would see here:
1. The tan entity is build from a string which can cause bugs, encoding issues an more.
2. When the interface of the verification server changes (and this a repo owned by the same organization) this has to be modified as well and can cause runtime bugs without proper system testing

## Suggested Enhancement
I would suggest two things
1. Create a DTO (Pojo) for the tan payload and pass that to the rest template to let Jackson handle serialization
2. If a dependency between cwa projects is ""allowed"" (which I would think is perfectly fine)  I would actually move that entity to the verification server project in a separate maven module. I would add [Spring Feign client ](https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html) and use that in the CWA server. Feign is like the reverse version of `@RestController` and supports the same annotations. It will create the client implementation from the given interface at runtime.

The client would look like this:

```
@FeignClient(name = ""verification-server"", url = ""${services.submission.verification.baseUrl}"")
public interface StoreClient {

    @RequestMapping(method = RequestMethod.POST, value = ""${services.submission.verification.path}"", consumes = ""application/json"")
    ValidationResult validateTan(Tan tan); // both classes should be Pojos
}
```

The usage would look like this (I did not actually implemented that!):

```
 private boolean verifyWithVerificationService(String tanString) {
   Tan tan = Tan.from(tanString); // This should also do the UUID verification!
    
    ValidationResult result = verificationServer.validateTan(tan);

    return result != null;
  }
```

## Expected Benefits
- Compilation breaks when interface changes
- Less risk of bugs

",https://github.com/corona-warn-app/cwa-server/issues/327,https://github.com/corona-warn-app/cwa-server/pull/387,"diff --git a/THIRD-PARTY-NOTICES b/THIRD-PARTY-NOTICES
--- a/THIRD-PARTY-NOTICES
+++ b/THIRD-PARTY-NOTICES
@@ -80,6 +80,11 @@ Licensor:  VMWare Inc.
 Website:   https://spring.io/
 License:   Apache License 2.0
 
+Component: Spring Cloud
+Licensor:  VMWare Inc.
+Website:   https://spring.io/
+License:   Apache License 2.0
+
 Component: wait-for-it
 Licensor:  Giles Hall
 Website:   https://github.com/vishnubob/wait-for-it
@@ -90,9 +95,14 @@ Licensor:  Zenko
 Website:   https://github.com/scality/cloudserver
 License:   Apache License 2.0
 
+Component: Wiremock
+Licensor:  Tom Akehurst
+Website:   http://wiremock.org/
+License:   Apache License 2.0
+
 --------------------------------------------------------------------------------
 Apache License 2.0 (Commons IO, Commons Math 3, flyway, JSON-Simple,
-Maven, MinIO Object Storage, MojoHaus Flatten Maven Plugin, snakeyaml, Spring Boot, Zenko CloudServer)
+Maven, MinIO Object Storage, MojoHaus Flatten Maven Plugin, snakeyaml, Spring Boot, Spring Cloud, Zenko CloudServer, Wiremock)
 
                                  Apache License
                            Version 2.0, January 2004
diff --git a/services/submission/pom.xml b/services/submission/pom.xml
--- a/services/submission/pom.xml
+++ b/services/submission/pom.xml
@@ -26,9 +26,9 @@
       <artifactId>spring-boot-starter-security</artifactId>
     </dependency>
     <dependency>
-      <groupId>org.springframework.security</groupId>
-      <artifactId>spring-security-test</artifactId>
-      <scope>test</scope>
+      <groupId>org.springframework.cloud</groupId>
+      <artifactId>spring-cloud-starter-openfeign</artifactId>
+      <version>2.2.3.RELEASE</version>
     </dependency>
     <dependency>
       <groupId>org.apache.commons</groupId>
@@ -48,6 +48,18 @@
       <groupId>io.micrometer</groupId>
       <artifactId>micrometer-registry-prometheus</artifactId>
     </dependency>
+    <dependency>
+      <groupId>org.springframework.security</groupId>
+      <artifactId>spring-security-test</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.github.tomakehurst</groupId>
+      <artifactId>wiremock-jre8</artifactId>
+      <version>2.26.3</version>
+      <scope>test</scope>
+    </dependency>
+
   </dependencies>
 
   <build>
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java
@@ -25,6 +25,7 @@
 import org.springframework.boot.autoconfigure.domain.EntityScan;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.web.servlet.ServletComponentScan;
+import org.springframework.cloud.openfeign.EnableFeignClients;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
@@ -37,6 +38,7 @@
 @ComponentScan({""app.coronawarn.server.common.persistence"",
     ""app.coronawarn.server.services.submission""})
 @EnableConfigurationProperties
+@EnableFeignClients
 public class ServerApplication {
 
   @Bean
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/Tan.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/Tan.java
new file mode 100644
--- /dev/null
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/Tan.java
@@ -0,0 +1,82 @@
+/*-
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.services.submission.verification;
+
+import java.util.Objects;
+import java.util.UUID;
+
+/**
+ * A representation of a tan.
+ */
+class Tan {
+  private final UUID tan;
+
+  private Tan(UUID tan) {
+    this.tan = tan;
+  }
+
+  /**
+   * Creates a new {@link #Tan} instance for the given tan string.
+   *
+   * @param tanString A valid UUID string representation.
+   * @return The Tan instance
+   * @throws IllegalArgumentException when the given tan string is not a valid UUID.
+   */
+  public static Tan of(String tanString) {
+    UUID tan = UUID.fromString(tanString.trim());
+    return new Tan(tan);
+  }
+
+  /**
+   * Returns the tan entity as UUID.
+   * @return the tan.
+   */
+  public UUID getTan() {
+    return tan;
+  }
+
+  /**
+   * Returns the TAN in it's string representation.
+   *
+   * @return the tan UUID as a string.
+   */
+  @Override
+  public String toString() {
+    return tan.toString();
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    Tan tan1 = (Tan) o;
+    return tan.equals(tan1.tan);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(tan);
+  }
+}
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java
@@ -20,20 +20,12 @@
 
 package app.coronawarn.server.services.submission.verification;
 
-import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;
-import java.util.UUID;
+import feign.FeignException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.web.client.RestTemplateBuilder;
-import org.springframework.http.HttpEntity;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Service;
-import org.springframework.web.client.HttpClientErrorException;
 import org.springframework.web.client.RestClientException;
-import org.springframework.web.client.RestTemplate;
 
 /**
  * The TanVerifier performs the verification of submission TANs.
@@ -42,54 +34,32 @@
 public class TanVerifier {
 
   private static final Logger logger = LoggerFactory.getLogger(TanVerifier.class);
-  private final String verificationServiceUrl;
-  private final RestTemplate restTemplate;
-  private final HttpHeaders requestHeader = new HttpHeaders();
+  private final VerificationServerClient verificationServerClient;
 
   /**
    * This class can be used to verify a TAN against a configured verification service.
    *
-   * @param submissionServiceConfig A submission service configuration
-   * @param restTemplateBuilder     A rest template builder
+   * @param verificationServerClient The REST client to communicate with the verification server
    */
   @Autowired
-  public TanVerifier(SubmissionServiceConfig submissionServiceConfig, RestTemplateBuilder restTemplateBuilder) {
-    this.verificationServiceUrl = submissionServiceConfig.getVerificationBaseUrl()
-        + submissionServiceConfig.getVerificationPath();
-    this.restTemplate = restTemplateBuilder.build();
-    this.requestHeader.setContentType(MediaType.APPLICATION_JSON);
+  public TanVerifier(VerificationServerClient verificationServerClient) {
+    this.verificationServerClient = verificationServerClient;
   }
 
   /**
    * Verifies the specified TAN. Returns {@literal true} if the specified TAN is valid, {@literal false} otherwise.
    *
-   * @param tan Submission Authorization TAN
+   * @param tanString Submission Authorization TAN
    * @return {@literal true} if the specified TAN is valid, {@literal false} otherwise.
    * @throws RestClientException if status code is neither 2xx nor 4xx
    */
-  public boolean verifyTan(String tan) {
-    String trimmedTan = tan.trim();
-
-    if (!checkTanSyntax(trimmedTan)) {
-      logger.debug(""TAN Syntax check failed for TAN: {}"", trimmedTan);
-      return false;
-    }
-
-    return verifyWithVerificationService(trimmedTan);
-  }
-
-  /**
-   * Verifies if the provided TAN can be parsed as a UUID.
-   *
-   * @param tan Submission Authorization TAN
-   * @return {@literal true} if tan can be parsed as a UUID, {@literal false} otherwise
-   */
-  private boolean checkTanSyntax(String tan) {
+  public boolean verifyTan(String tanString) {
     try {
-      UUID.fromString(tan);
-      return true;
+      Tan tan = Tan.of(tanString);
+
+      return verifyWithVerificationService(tan);
     } catch (IllegalArgumentException e) {
-      logger.debug(""UUID creation failed for value: {}"", tan, e);
+      logger.debug(""TAN Syntax check failed for TAN: {}"", tanString.trim());
       return false;
     }
   }
@@ -101,16 +71,11 @@ private boolean checkTanSyntax(String tan) {
    * @return {@literal true} if verification service is able to verify the provided TAN, {@literal false} otherwise
    * @throws RestClientException if http status code is neither 2xx nor 404
    */
-  private boolean verifyWithVerificationService(String tan) {
-    String json = ""{ \""tan\"": \"""" + tan + ""\"" }"";
-    HttpEntity<String> entity = new HttpEntity<>(json, requestHeader);
-
+  private boolean verifyWithVerificationService(Tan tan) {
     try {
-      ResponseEntity<String> response = restTemplate.postForEntity(verificationServiceUrl, entity, String.class);
-      return response.getStatusCode().is2xxSuccessful();
-    } catch (HttpClientErrorException.NotFound e) {
-      // The verification service returns http status 404 if the TAN is invalid
-      logger.debug(""TAN verification failed"");
+      verificationServerClient.verifyTan(tan);
+      return true;
+    } catch (FeignException.NotFound e) {
       return false;
     }
   }
diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/VerificationServerClient.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/VerificationServerClient.java
new file mode 100644
--- /dev/null
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/VerificationServerClient.java
@@ -0,0 +1,42 @@
+/*-
+ * ---license-start
+ * Corona-Warn-App
+ * ---
+ * Copyright (C) 2020 SAP SE and all other contributors
+ * ---
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * ---license-end
+ */
+
+package app.coronawarn.server.services.submission.verification;
+
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.http.MediaType;
+import org.springframework.web.bind.annotation.PostMapping;
+
+/**
+ * This is a Spring Cloud Feign based HTTP client that allows type-safe HTTP calls
+ * and abstract the implementation away.
+ */
+@FeignClient(name = ""verification-server"", url = ""${services.submission.verification.base-url}"")
+public interface VerificationServerClient {
+
+  /**
+   * This methods calls the verification service with the given
+   * {#link tan}.
+   * @param tan the tan to verify.
+   * @return 404 when the tan is not valid.
+   */
+  @PostMapping(value = ""${services.submission.verification.path}"", consumes = MediaType.APPLICATION_JSON_VALUE)
+  String verifyTan(Tan tan);
+}
","Here is the patch file that resolves the issue:

```diff
--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java
+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java
@@ -43,7 +43,7 @@
  * The TanVerifier performs the verification of submission TANs.
  */
 @Service
-public class TanVerifier {
+public class TanVerifier implements StoreClient {
 
   private static final Logger logger = LoggerFactory.getLogger(TanVerifier.class);
   private final String verificationServiceUrl;
@@ -97,7 +97,7 @@
    * @return {@literal true} if verification service is able to verify the provided TAN, {@literal false} otherwise
    * @throws RestClientException if http status code is neither 2xx nor 404
    */
-  private boolean verifyWithVerificationService(String tan) {
+  public boolean verifyTan(Tan tan) {
     String json = ""{ \""tan\"": \"""" + tan + ""\"" }"";
     HttpEntity<String> entity = new HttpEntity<>(json, requestHeader);
 
@@ -114,7 +114,7 @@
       // The verification service returns http status 404 if the TAN is invalid
       logger.debug(""TAN verification failed"");
       return false;
-    }
+    }","['README.md', '/dev/null', 'THIRD-PARTY-NOTICES', 'services/submission/pom.xml', 'services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java', 'services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java']",db3d5faa1fe2702ef32ee0e3a965d0097c394df7
436,python3 create_patchfiles.py 436,"Remove ""empty"" dates/hours from index files
## Current Implementation
All dates/hours between the first submission and now (last full hour) are included in the index files, even if there were no submissions.

## Suggested Enhancement
Only list dates/hours for which there were submissions in the index files. The ""empty"" date/hour files should, however, still be generated, even if they are not in the index.

## Expected Benefits
Mobile clients need to do fewer requests (they can simply skip empty dates/hours).
",https://github.com/corona-warn-app/cwa-server/issues/140,https://github.com/corona-warn-app/cwa-server/pull/436,"diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java
@@ -27,6 +27,8 @@
 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;
 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
+import java.time.LocalDateTime;
+import java.time.temporal.ChronoUnit;
 import java.util.Collection;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -65,7 +67,7 @@ public class DiagnosisKeysStructureProvider {
   public Directory<WritableOnDisk> getDiagnosisKeys() {
     logger.debug(""Querying diagnosis keys from the database..."");
     Collection<DiagnosisKey> diagnosisKeys = diagnosisKeyService.getDiagnosisKeys();
-    diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys);
+    diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.now().truncatedTo(ChronoUnit.HOURS));
     return new DiagnosisKeysDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig);
   }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DemoDiagnosisKeyBundler.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DemoDiagnosisKeyBundler.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DemoDiagnosisKeyBundler.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DemoDiagnosisKeyBundler.java
@@ -24,15 +24,13 @@
 
 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
-import java.time.LocalDateTime;
 import java.util.Collection;
-import java.util.List;
 import org.springframework.context.annotation.Profile;
 import org.springframework.stereotype.Component;
 
 /**
- * An instance of this class contains a collection of {@link DiagnosisKey DiagnosisKeys}, that will be distributed
- * in the same hour they have been submitted.
+ * An instance of this class contains a collection of {@link DiagnosisKey DiagnosisKeys}, that will be distributed in
+ * the same hour they have been submitted.
  */
 @Profile(""demo"")
 @Component
@@ -44,20 +42,11 @@ public DemoDiagnosisKeyBundler(DistributionServiceConfig distributionServiceConf
 
   /**
    * Initializes the internal {@code distributableDiagnosisKeys} map, grouping the diagnosis keys by the submission
-   * timestamp, thus ignoring the expiry policy.
+   * timestamp, thus ignoring the expiry and shifting policies.
    */
   @Override
   protected void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys) {
     this.distributableDiagnosisKeys.clear();
     this.distributableDiagnosisKeys.putAll(diagnosisKeys.stream().collect(groupingBy(this::getSubmissionDateTime)));
   }
-
-  /**
-   * Returns all diagnosis keys that should be distributed in a specific hour, without respecting the shifting and
-   * expiry policies.
-   */
-  @Override
-  public List<DiagnosisKey> getDiagnosisKeysDistributableAt(LocalDateTime hour) {
-    return this.getDiagnosisKeysForHour(hour);
-  }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java
@@ -20,18 +20,20 @@
 
 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;
 
-import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.ONE_HOUR_INTERVAL_SECONDS;
 import static java.time.ZoneOffset.UTC;
 import static java.util.Collections.emptyList;
 
 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
+import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
+import java.util.Set;
+import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 
 /**
@@ -39,9 +41,23 @@
  */
 public abstract class DiagnosisKeyBundler {
 
+  /**
+   * The submission timestamp is counted in 1 hour intervals since epoch.
+   */
+  public static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);
+
+  /**
+   * The rolling start interval number is counted in 10 minute intervals since epoch.
+   */
+  public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);
+
   protected final int minNumberOfKeysPerBundle;
   protected final long expiryPolicyMinutes;
 
+  // The hour at which the distribution runs. This field is needed to prevent the run from distributing any keys that
+  // have already been submitted but may only be distributed in the future (e.g. because they are not expired yet).
+  protected LocalDateTime distributionTime;
+
   // A map containing diagnosis keys, grouped by the LocalDateTime on which they may be distributed
   protected final Map<LocalDateTime, List<DiagnosisKey>> distributableDiagnosisKeys = new HashMap<>();
 
@@ -51,11 +67,22 @@ public DiagnosisKeyBundler(DistributionServiceConfig distributionServiceConfig)
   }
 
   /**
-   * Sets the {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler} and calls {@link
-   * DiagnosisKeyBundler#createDiagnosisKeyDistributionMap}.
+   * Creates a {@link LocalDateTime} based on the specified epoch timestamp.
+   */
+  public static LocalDateTime getLocalDateTimeFromHoursSinceEpoch(long timestamp) {
+    return LocalDateTime.ofEpochSecond(TimeUnit.HOURS.toSeconds(timestamp), 0, UTC);
+  }
+
+  /**
+   * Sets the {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler} and the time at which the
+   * distribution runs and calls {@link DiagnosisKeyBundler#createDiagnosisKeyDistributionMap}.
+   *
+   * @param diagnosisKeys    The {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.
+   * @param distributionTime The {@link LocalDateTime} at which the distribution runs.
    */
-  public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {
-    createDiagnosisKeyDistributionMap(diagnosisKeys);
+  public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys, LocalDateTime distributionTime) {
+    this.distributionTime = distributionTime;
+    this.createDiagnosisKeyDistributionMap(diagnosisKeys);
   }
 
   /**
@@ -74,9 +101,23 @@ public List<DiagnosisKey> getAllDiagnosisKeys() {
   protected abstract void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys);
 
   /**
-   * Returns all diagnosis keys that should be distributed in a specific hour.
+   * Returns a set of all {@link LocalDate dates} on which {@link DiagnosisKey diagnosis keys} shall be distributed.
    */
-  public abstract List<DiagnosisKey> getDiagnosisKeysDistributableAt(LocalDateTime hour);
+  public Set<LocalDate> getDatesWithDistributableDiagnosisKeys() {
+    return this.distributableDiagnosisKeys.keySet().stream()
+        .map(LocalDateTime::toLocalDate)
+        .collect(Collectors.toSet());
+  }
+
+  /**
+   * Returns a set of all {@link LocalDateTime hours} of a specified {@link LocalDate date} during which {@link
+   * DiagnosisKey diagnosis keys} shall be distributed.
+   */
+  public Set<LocalDateTime> getHoursWithDistributableDiagnosisKeys(LocalDate currentDate) {
+    return this.distributableDiagnosisKeys.keySet().stream()
+        .filter(dateTime -> dateTime.toLocalDate().equals(currentDate))
+        .collect(Collectors.toSet());
+  }
 
   /**
    * Returns the submission timestamp of a {@link DiagnosisKey} as a {@link LocalDateTime}.
@@ -85,10 +126,21 @@ protected LocalDateTime getSubmissionDateTime(DiagnosisKey diagnosisKey) {
     return LocalDateTime.ofEpochSecond(diagnosisKey.getSubmissionTimestamp() * ONE_HOUR_INTERVAL_SECONDS, 0, UTC);
   }
 
+  /**
+   * Returns all diagnosis keys that should be distributed on a specific date.
+   */
+  public List<DiagnosisKey> getDiagnosisKeysForDate(LocalDate date) {
+    return this.distributableDiagnosisKeys.keySet().stream()
+        .filter(dateTime -> dateTime.toLocalDate().equals(date))
+        .map(this::getDiagnosisKeysForHour)
+        .flatMap(List::stream)
+        .collect(Collectors.toList());
+  }
+
   /**
    * Returns all diagnosis keys that should be distributed in a specific hour.
    */
-  protected List<DiagnosisKey> getDiagnosisKeysForHour(LocalDateTime hour) {
+  public List<DiagnosisKey> getDiagnosisKeysForHour(LocalDateTime hour) {
     return Optional
         .ofNullable(this.distributableDiagnosisKeys.get(hour))
         .orElse(emptyList());
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundler.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundler.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundler.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundler.java
@@ -20,7 +20,6 @@
 
 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;
 
-import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.TEN_MINUTES_INTERVAL_SECONDS;
 import static java.time.ZoneOffset.UTC;
 import static java.util.Collections.emptyList;
 import static java.util.stream.Collectors.groupingBy;
@@ -30,11 +29,13 @@
 import java.time.Duration;
 import java.time.LocalDateTime;
 import java.time.temporal.ChronoUnit;
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
+import java.util.stream.LongStream;
 import org.springframework.context.annotation.Profile;
 import org.springframework.stereotype.Component;
 
@@ -57,55 +58,38 @@ public ProdDiagnosisKeyBundler(DistributionServiceConfig distributionServiceConf
 
   /**
    * Initializes the internal {@code distributableDiagnosisKeys} map, grouping the diagnosis keys by the date on which
-   * they may be distributed, while respecting the expiry policy.
+   * they may be distributed, while respecting the expiry and shifting policies.
    */
   @Override
   protected void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys) {
     this.distributableDiagnosisKeys.clear();
-    this.distributableDiagnosisKeys.putAll(diagnosisKeys.stream().collect(groupingBy(this::getDistributionDateTime)));
-  }
-
-  /**
-   * Returns all diagnosis keys that should be distributed in a specific hour, while respecting the shifting and expiry
-   * policies.
-   */
-  @Override
-  public List<DiagnosisKey> getDiagnosisKeysDistributableAt(LocalDateTime hour) {
-    List<DiagnosisKey> keysSinceLastDistribution = getKeysSinceLastDistribution(hour);
-    if (keysSinceLastDistribution.size() >= minNumberOfKeysPerBundle) {
-      return keysSinceLastDistribution;
-    } else {
-      return emptyList();
+    if (diagnosisKeys.isEmpty()) {
+      return;
     }
-  }
+    Map<LocalDateTime, List<DiagnosisKey>> distributableDiagnosisKeysGroupedByExpiryPolicy = new HashMap<>(
+        diagnosisKeys.stream().collect(groupingBy(this::getDistributionDateTimeByExpiryPolicy)));
+    LocalDateTime earliestDistributableTimestamp =
+        getEarliestDistributableTimestamp(distributableDiagnosisKeysGroupedByExpiryPolicy).orElseThrow();
+    LocalDateTime latestDistributableTimestamp = this.distributionTime;
 
-  /**
-   * Returns a all distributable keys between a specific hour and the last distribution (bundle that was above the
-   * shifting threshold) or the earliest distributable key.
-   */
-  private List<DiagnosisKey> getKeysSinceLastDistribution(LocalDateTime hour) {
-    Optional<LocalDateTime> earliestDistributableTimestamp = getEarliestDistributableTimestamp();
-    if (earliestDistributableTimestamp.isEmpty() || hour.isBefore(earliestDistributableTimestamp.get())) {
-      return emptyList();
-    }
-    List<DiagnosisKey> distributableInCurrentHour = getDiagnosisKeysForHour(hour);
-    if (distributableInCurrentHour.size() >= minNumberOfKeysPerBundle) {
-      return distributableInCurrentHour;
-    }
-    LocalDateTime previousHour = hour.minusHours(1);
-    Collection<DiagnosisKey> distributableInPreviousHour = getDiagnosisKeysDistributableAt(previousHour);
-    if (distributableInPreviousHour.size() >= minNumberOfKeysPerBundle) {
-      // Last hour was distributed, so we can not combine the current hour with the last hour
-      return distributableInCurrentHour;
-    } else {
-      // Last hour was not distributed, so we can combine the current hour with the last hour
-      return Stream.concat(distributableInCurrentHour.stream(), getKeysSinceLastDistribution(previousHour).stream())
-          .collect(Collectors.toList());
-    }
+    List<DiagnosisKey> diagnosisKeyAccumulator = new ArrayList<>();
+    LongStream.range(0, earliestDistributableTimestamp.until(latestDistributableTimestamp, ChronoUnit.HOURS))
+        .forEach(hourCounter -> {
+          LocalDateTime currentHour = earliestDistributableTimestamp.plusHours(hourCounter);
+          Collection<DiagnosisKey> currentHourDiagnosisKeys = Optional
+              .ofNullable(distributableDiagnosisKeysGroupedByExpiryPolicy.get(currentHour))
+              .orElse(emptyList());
+          diagnosisKeyAccumulator.addAll(currentHourDiagnosisKeys);
+          if (diagnosisKeyAccumulator.size() >= minNumberOfKeysPerBundle) {
+            this.distributableDiagnosisKeys.put(currentHour, new ArrayList<>(diagnosisKeyAccumulator));
+            diagnosisKeyAccumulator.clear();
+          }
+        });
   }
 
-  private Optional<LocalDateTime> getEarliestDistributableTimestamp() {
-    return this.distributableDiagnosisKeys.keySet().stream().min(LocalDateTime::compareTo);
+  private static Optional<LocalDateTime> getEarliestDistributableTimestamp(
+      Map<LocalDateTime, List<DiagnosisKey>> distributableDiagnosisKeys) {
+    return distributableDiagnosisKeys.keySet().stream().min(LocalDateTime::compareTo);
   }
 
   /**
@@ -118,12 +102,13 @@ private LocalDateTime getExpiryDateTime(DiagnosisKey diagnosisKey) {
   }
 
   /**
-   * Calculates the earliest point in time at which the specified {@link DiagnosisKey} can be distributed. Before keys
-   * are allowed to be distributed, they must be expired for a configured amount of time.
+   * Calculates the earliest point in time at which the specified {@link DiagnosisKey} can be distributed, while
+   * respecting the expiry policy and the submission timestamp. Before keys are allowed to be distributed, they must be
+   * expired for a configured amount of time.
    *
    * @return {@link LocalDateTime} at which the specified {@link DiagnosisKey} can be distributed.
    */
-  private LocalDateTime getDistributionDateTime(DiagnosisKey diagnosisKey) {
+  private LocalDateTime getDistributionDateTimeByExpiryPolicy(DiagnosisKey diagnosisKey) {
     LocalDateTime submissionDateTime = getSubmissionDateTime(diagnosisKey);
     LocalDateTime expiryDateTime = getExpiryDateTime(diagnosisKey);
     long minutesBetweenExpiryAndSubmission = Duration.between(expiryDateTime, submissionDateTime).toMinutes();
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java
@@ -24,7 +24,6 @@
 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.HourIndexingDecorator;
-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime;
 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;
 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;
 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;
@@ -46,12 +45,12 @@ public class DiagnosisKeysDateDirectory extends IndexDirectoryOnDisk<LocalDate>
    * collection. Payload signing is be performed according to the specified {@link CryptoProvider}.
    *
    * @param diagnosisKeyBundler A {@link DiagnosisKeyBundler} containing the {@link DiagnosisKey DiagnosisKeys}.
-   * @param cryptoProvider The {@link CryptoProvider} used for payload signing.
+   * @param cryptoProvider      The {@link CryptoProvider} used for payload signing.
    */
   public DiagnosisKeysDateDirectory(DiagnosisKeyBundler diagnosisKeyBundler,
       CryptoProvider cryptoProvider, DistributionServiceConfig distributionServiceConfig) {
     super(distributionServiceConfig.getApi().getDatePath(),
-        __ -> DateTime.getDates(diagnosisKeyBundler.getAllDiagnosisKeys()), ISO8601::format);
+        __ -> diagnosisKeyBundler.getDatesWithDistributableDiagnosisKeys(), ISO8601::format);
     this.cryptoProvider = cryptoProvider;
     this.diagnosisKeyBundler = diagnosisKeyBundler;
     this.distributionServiceConfig = distributionServiceConfig;
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectory.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectory.java
@@ -23,7 +23,6 @@
 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;
-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.CountryIndexingDecorator;
 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;
 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;
 import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;
@@ -70,8 +69,6 @@ public void prepare(ImmutableStack<Object> indices) {
 
   private IndexDirectory<String, WritableOnDisk> decorateCountryDirectory(
       IndexDirectoryOnDisk<String> countryDirectory) {
-    return new CountryIndexingDecorator<>(
-        new IndexingDecoratorOnDisk<>(countryDirectory, distributionServiceConfig.getOutputFileName()),
-        distributionServiceConfig);
+    return new IndexingDecoratorOnDisk<>(countryDirectory, distributionServiceConfig.getOutputFileName());
   }
 }
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java
@@ -25,7 +25,6 @@
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.singing.DiagnosisKeySigningDecorator;
 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;
-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime;
 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;
 import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;
 import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;
@@ -53,8 +52,9 @@ public class DiagnosisKeysHourDirectory extends IndexDirectoryOnDisk<LocalDateTi
    */
   public DiagnosisKeysHourDirectory(DiagnosisKeyBundler diagnosisKeyBundler, CryptoProvider cryptoProvider,
       DistributionServiceConfig distributionServiceConfig) {
-    super(distributionServiceConfig.getApi().getHourPath(), indices -> DateTime.getHours(((LocalDate) indices.peek()),
-        diagnosisKeyBundler.getAllDiagnosisKeys()), LocalDateTime::getHour);
+    super(distributionServiceConfig.getApi().getHourPath(),
+        indices -> diagnosisKeyBundler.getHoursWithDistributableDiagnosisKeys(((LocalDate) indices.peek())),
+        LocalDateTime::getHour);
     this.diagnosisKeyBundler = diagnosisKeyBundler;
     this.cryptoProvider = cryptoProvider;
     this.distributionServiceConfig = distributionServiceConfig;
@@ -70,7 +70,7 @@ public void prepare(ImmutableStack<Object> indices) {
       String region = (String) currentIndices.pop().pop().peek();
 
       List<DiagnosisKey> diagnosisKeysForCurrentHour =
-          this.diagnosisKeyBundler.getDiagnosisKeysDistributableAt(currentHour);
+          this.diagnosisKeyBundler.getDiagnosisKeysForHour(currentHour);
 
       long startTimestamp = currentHour.toEpochSecond(ZoneOffset.UTC);
       long endTimestamp = currentHour.plusHours(1).toEpochSecond(ZoneOffset.UTC);
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/CountryIndexingDecorator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/CountryIndexingDecorator.java
deleted file mode 100644
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/CountryIndexingDecorator.java
+++ /dev/null
@@ -1,110 +0,0 @@
-/*-
- * ---license-start
- * Corona-Warn-App
- * ---
- * Copyright (C) 2020 SAP SE and all other contributors
- * ---
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * ---license-end
- */
-
-package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator;
-
-import app.coronawarn.server.services.distribution.assembly.structure.Writable;
-import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;
-import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;
-import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.IndexDirectoryDecorator;
-import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;
-import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;
-import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;
-import java.nio.charset.StandardCharsets;
-import java.util.Collection;
-import java.util.Set;
-import java.util.stream.Collectors;
-
-/**
- * This decorator creates the central index file for a country, e.g. DE.
- */
-public class CountryIndexingDecorator<T> extends IndexDirectoryDecorator<T, WritableOnDisk> {
-
-  /**
-   * Separate each entry in the index file with new line.
-   */
-  private static final String NEW_LINE_SEPARATOR = ""\r\n"";
-
-  /**
-   * the name of this index file.
-   */
-  private final String fileName;
-
-  /**
-   * Creates a new decorator instance for the given directory.
-   *
-   * @param directory                 The target country directory.
-   * @param distributionServiceConfig The config.
-   */
-  public CountryIndexingDecorator(IndexDirectory<T, WritableOnDisk> directory,
-      DistributionServiceConfig distributionServiceConfig) {
-    super(directory);
-    this.fileName = distributionServiceConfig.getOutputFileName();
-  }
-
-  @Override
-  public void prepare(ImmutableStack<Object> indices) {
-    super.prepare(indices);
-
-    Collection<DirectoryOnDisk> countryDirectories = this.getWritables().stream()
-        .filter(Writable::isDirectory)
-        .map(directory -> (DirectoryOnDisk) directory)
-        .collect(Collectors.toSet());
-
-    countryDirectories.forEach(this::writeIndexFileForCountry);
-  }
-
-  private void writeIndexFileForCountry(Directory<WritableOnDisk> directory) {
-    var dateDirectory = (Directory<WritableOnDisk>) directory.getWritables()
-        .stream()
-        .filter(Writable::isDirectory)
-        .findFirst()
-        .orElseThrow();
-
-    String resourcePaths = CountryIndexingDecorator.getExposureKeyExportPaths(dateDirectory)
-        .stream()
-        .sorted()
-        .collect(Collectors.joining(NEW_LINE_SEPARATOR));
-
-    directory.addWritable(new FileOnDisk(fileName, resourcePaths.getBytes(StandardCharsets.UTF_8)));
-  }
-
-  private static Set<String> getExposureKeyExportPaths(Directory<WritableOnDisk> rootDirectory) {
-    Collection<Directory<WritableOnDisk>> directories = rootDirectory.getWritables()
-        .stream()
-        .filter(Writable::isDirectory)
-        .filter(directory -> !(directory instanceof Archive))
-        .map(directory -> (Directory<WritableOnDisk>) directory)
-        .collect(Collectors.toSet());
-
-    if (directories.isEmpty()) {
-      return Set.of(rootDirectory.getName());
-    } else {
-      return directories.stream()
-          .map(CountryIndexingDecorator::getExposureKeyExportPaths)
-          .flatMap(Set::stream)
-          .map(childName -> rootDirectory.getName() + ""/"" + childName)
-          .collect(Collectors.toSet());
-    }
-  }
-}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java
deleted file mode 100644
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*-
- * ---license-start
- * Corona-Warn-App
- * ---
- * Copyright (C) 2020 SAP SE and all other contributors
- * ---
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * ---license-end
- */
-
-package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util;
-
-import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.ZoneOffset;
-import java.util.Collection;
-import java.util.Set;
-import java.util.concurrent.TimeUnit;
-import java.util.stream.Collectors;
-
-/**
- * Methods for conversions of time/date data.
- */
-public class DateTime {
-
-  /**
-   * The submission timestamp is counted in 1 hour intervals since epoch.
-   */
-  public static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);
-
-  /**
-   * The rolling start interval number is counted in 10 minute intervals since epoch.
-   */
-  public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);
-
-  private DateTime() {
-  }
-
-  /**
-   * Returns a set of all {@link LocalDate dates} that are associated with the submission timestamps of the specified
-   * {@link DiagnosisKey diagnosis keys}.
-   */
-  public static Set<LocalDate> getDates(Collection<DiagnosisKey> diagnosisKeys) {
-    return diagnosisKeys.stream()
-        .map(DiagnosisKey::getSubmissionTimestamp)
-        .map(timestamp -> LocalDate.ofEpochDay(timestamp / 24))
-        .collect(Collectors.toSet());
-  }
-
-  /**
-   * Returns a set of all {@link LocalDateTime hours} that are associated with the submission timestamps of the
-   * specified {@link DiagnosisKey diagnosis keys} and the specified {@link LocalDate date}.
-   */
-  public static Set<LocalDateTime> getHours(LocalDate currentDate, Collection<DiagnosisKey> diagnosisKeys) {
-    return diagnosisKeys.stream()
-        .map(DiagnosisKey::getSubmissionTimestamp)
-        .map(DateTime::getLocalDateTimeFromHoursSinceEpoch)
-        .filter(currentDateTime -> currentDateTime.toLocalDate().equals(currentDate))
-        .collect(Collectors.toSet());
-  }
-
-  /**
-   * Creates a {@link LocalDateTime} based on the specified epoch timestamp.
-   */
-  public static LocalDateTime getLocalDateTimeFromHoursSinceEpoch(long timestamp) {
-    return LocalDateTime.ofEpochSecond(TimeUnit.HOURS.toSeconds(timestamp), 0, ZoneOffset.UTC);
-  }
-}
diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java
@@ -20,8 +20,8 @@
 
 package app.coronawarn.server.services.distribution.runner;
 
-import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.ONE_HOUR_INTERVAL_SECONDS;
-import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.TEN_MINUTES_INTERVAL_SECONDS;
+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler.ONE_HOUR_INTERVAL_SECONDS;
+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler.TEN_MINUTES_INTERVAL_SECONDS;
 
 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;
 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;
","
--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java
+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java
@@ -66,7 +66,7 @@
     public void prepare(ImmutableStack<Object> indices) {
         this.addWritable(decorateCountryDirectory(
             new DiagnosisKeysCountryDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig)));
-        super.prepare(indices);
+        super.prepare(indices.pop());
     }
 
     private IndexDirectory<String, WritableOnDisk> decorateCountryDirectory(
","['README.md', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DemoDiagnosisKeyBundler.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundler.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectory.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/CountryIndexingDecorator.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java', 'services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java']",ebb112166c8b6bf21ba18232db773be9a03b93e8
