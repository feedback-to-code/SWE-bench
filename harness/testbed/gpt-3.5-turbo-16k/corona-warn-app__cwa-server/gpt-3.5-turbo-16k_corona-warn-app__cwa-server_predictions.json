[
    {
        "instance_id": "corona-warn-app__cwa-server-45",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nDiagnosis key submission unit tests\nImplement unit tests for the diagnosis key submission service according to best practices.\n\n</issue>\n\n<code>\n[start of README.md]\n1 # cwa-server\n2 \n3 # API\n4 ## Distribution\n5 ### Postman\n6 https://documenter.getpostman.com/view/5099981/Szmb8Lcd?version=latest\n7 ### OpenAPI\n8 https://github.com/corona-warn-app/cwa-server/blob/master/services/distribution/api_v1.json\n9 # Deployments\n10 ## Distribution Server Mock\n11 http://download-mock-ena-server.apps.p006.otc.mcs-paas.io/version/\n12 \n[end of README.md]\n[start of common/persistence/src/main/java/app/coronawarn/server/services/common/persistence/service/DiagnosisKeyService.java]\n1 package app.coronawarn.server.services.common.persistence.service;\n2 \n3 import java.util.Collection;\n4 import app.coronawarn.server.services.common.persistence.domain.DiagnosisKey;\n5 import app.coronawarn.server.services.common.persistence.repository.DiagnosisKeyRepository;\n6 import org.springframework.beans.factory.annotation.Autowired;\n7 import org.springframework.stereotype.Component;\n8 \n9 @Component\n10 public class DiagnosisKeyService {\n11 \n12   @Autowired\n13   private DiagnosisKeyRepository keyRepository;\n14 \n15   /**\n16    * Persists the specified collection of {@link DiagnosisKey} instances. Use the returned\n17    * collection for further operations as the saveDiagnosisKeys operation might have changed the\n18    * {@link DiagnosisKey} instances completely.\n19    *\n20    * @param diagnosisKeys must not contain {@literal null}.\n21    * @return a collection of the saved keys; will never contain {@literal null}.\n22    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n23    */\n24   public Collection<DiagnosisKey> saveDiagnosisKeys(\n25       Collection<DiagnosisKey> diagnosisKeys) {\n26     return keyRepository.saveAll(diagnosisKeys);\n27   }\n28 }\n29 \n[end of common/persistence/src/main/java/app/coronawarn/server/services/common/persistence/service/DiagnosisKeyService.java]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java]\n1 package app.coronawarn.server.services.submission.controller;\n2 \n3 import java.util.Collection;\n4 import java.util.Collections;\n5 import java.util.stream.Collectors;\n6 import app.coronawarn.server.common.protocols.generated.ExposureKeys.TemporaryExposureKey;\n7 import app.coronawarn.server.services.common.persistence.domain.DiagnosisKey;\n8 import app.coronawarn.server.services.common.persistence.service.DiagnosisKeyService;\n9 import app.coronawarn.server.services.submission.verification.TanVerifier;\n10 import org.springframework.beans.factory.annotation.Autowired;\n11 import org.springframework.http.ResponseEntity;\n12 import org.springframework.web.bind.annotation.GetMapping;\n13 import org.springframework.web.bind.annotation.PathVariable;\n14 import org.springframework.web.bind.annotation.PostMapping;\n15 import org.springframework.web.bind.annotation.RequestBody;\n16 import org.springframework.web.bind.annotation.RequestHeader;\n17 import org.springframework.web.bind.annotation.RequestMapping;\n18 import org.springframework.web.bind.annotation.RestController;\n19 \n20 // TODO Implement Unit Tests\n21 @RestController\n22 @RequestMapping(\"/version/v1\")\n23 public class SubmissionController {\n24 \n25   @Autowired\n26   private DiagnosisKeyService exposureKeyService;\n27 \n28   @Autowired\n29   private TanVerifier tanVerifier;\n30 \n31   @GetMapping(value = \"\")\n32   public ResponseEntity<String> hello() {\n33     return ResponseEntity.ok().body(\"Diagnosis Key Submission Endpoint v1\");\n34   }\n35 \n36   // TODO update protoSpec and endpoint to Collection<TemporaryExposureKey>\n37   @PostMapping(value = \"/diagnosis-keys/country/{country}\")\n38   public ResponseEntity<String> submitDiagnosisKey(\n39       @PathVariable String country,\n40       @RequestBody TemporaryExposureKey exposureKeys,\n41       @RequestHeader(value = \"cwa-fake\") Integer fake,\n42       @RequestHeader(value = \"cwa-authorization\") String tan) {\n43     if (fake != 0) {\n44       //TODO consider sleep or similar\n45       return buildSuccessResponseEntity();\n46     }\n47     if (!this.tanVerifier.verifyTan(tan)) {\n48       return buildTanInvalidResponseEntity();\n49     }\n50 \n51     persistDiagnosisKeysPayload(Collections.singleton(exposureKeys));\n52 \n53     return buildSuccessResponseEntity();\n54   }\n55 \n56   /**\n57    * @return A response that indicates that an invalid TAN was specified in the request.\n58    */\n59   private ResponseEntity<String> buildTanInvalidResponseEntity() {\n60     // TODO implement\n61     return null;\n62   }\n63 \n64   /**\n65    * @return A response that indicates successful request processing.\n66    */\n67   private ResponseEntity<String> buildSuccessResponseEntity() {\n68     return ResponseEntity.ok().build();\n69   }\n70 \n71   /**\n72    * Persists the diagnosis keys contained in the specified request payload.\n73    *\n74    * @param protoBufDiagnosisKeys Diagnosis keys that were specified in the request.\n75    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n76    */\n77   private void persistDiagnosisKeysPayload(\n78       Collection<TemporaryExposureKey> protoBufDiagnosisKeys) {\n79     Collection<DiagnosisKey> diagnosisKeys = protoBufDiagnosisKeys.stream()\n80         .map(aProtoBufKey -> DiagnosisKey.builder().fromProtoBuf(aProtoBufKey).build())\n81         .collect(Collectors.toList());\n82 \n83     this.exposureKeyService.saveDiagnosisKeys(diagnosisKeys);\n84   }\n85 }\n86 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java]\n[start of services/submission/src/main/resources/application.properties]\n1 logging.level.org.springframework.web=DEBUG\n2 spring.jpa.hibernate.ddl-auto = create\n3 spring.flyway.enabled=false\n4 \n[end of services/submission/src/main/resources/application.properties]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n@@ -21,6 +21,7 @@\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestHeader;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n@@ -30,6 +31,7 @@\n import app.coronawarn.server.services.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.services.common.persistence.service.DiagnosisKeyService;\n import app.coronawarn.server.services.submission.verification.TanVerifier;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.stream.Collectors;\n import app.coronawarn.server.common.protocols.generated.ExposureKeys.TemporaryExposureKey;\n@@ -56,6 +58,7 @@\n    * @return A response that indicates successful request processing.\n    */\n   private ResponseEntity<String> buildSuccessResponseEntity() {\n+    // TODO implement\n     return ResponseEntity.ok().build();\n   }\n \n@@ -73,6 +76,7 @@\n    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n    */\n   private void persistDiagnosisKeysPayload(\n+      @RequestBody Collection<TemporaryExposureKey> protoBufDiagnosisKeys) {\n     Collection<DiagnosisKey> diagnosisKeys = protoBufDiagnosisKeys.stream()\n         .map(aProtoBufKey -> DiagnosisKey.builder().fromProtoBuf(aProtoBufKey).build())\n         .collect(Collectors.toList());\n</patch>",
        "model_patch": "\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n@@ -21,6 +21,7 @@\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestHeader;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n@@ -30,6 +31,7 @@\n import app.coronawarn.server.services.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.services.common.persistence.service.DiagnosisKeyService;\n import app.coronawarn.server.services.submission.verification.TanVerifier;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.stream.Collectors;\n import app.coronawarn.server.common.protocols.generated.ExposureKeys.TemporaryExposureKey;\n@@ -56,6 +58,7 @@\n    * @return A response that indicates successful request processing.\n    */\n   private ResponseEntity<String> buildSuccessResponseEntity() {\n+    // TODO implement\n     return ResponseEntity.ok().build();\n   }\n \n@@ -73,6 +76,7 @@\n    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n    */\n   private void persistDiagnosisKeysPayload(\n+      @RequestBody Collection<TemporaryExposureKey> protoBufDiagnosisKeys) {\n     Collection<DiagnosisKey> diagnosisKeys = protoBufDiagnosisKeys.stream()\n         .map(aProtoBufKey -> DiagnosisKey.builder().fromProtoBuf(aProtoBufKey).build())\n         .collect(Collectors.toList());\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 45,
        "issue_numbers": [
            "34"
        ],
        "base_commit": "e8ca246da1ab3620b6340383d4a59fe2041af562",
        "patch": "diff --git a/common/persistence/src/main/java/app/coronawarn/server/services/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/services/common/persistence/service/DiagnosisKeyService.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/services/common/persistence/service/DiagnosisKeyService.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/services/common/persistence/service/DiagnosisKeyService.java\n@@ -13,16 +13,12 @@ public class DiagnosisKeyService {\n   private DiagnosisKeyRepository keyRepository;\n \n   /**\n-   * Persists the specified collection of {@link DiagnosisKey} instances. Use the returned\n-   * collection for further operations as the saveDiagnosisKeys operation might have changed the\n-   * {@link DiagnosisKey} instances completely.\n+   * Persists the specified collection of {@link DiagnosisKey} instances.\n    *\n    * @param diagnosisKeys must not contain {@literal null}.\n-   * @return a collection of the saved keys; will never contain {@literal null}.\n    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n    */\n-  public Collection<DiagnosisKey> saveDiagnosisKeys(\n-      Collection<DiagnosisKey> diagnosisKeys) {\n-    return keyRepository.saveAll(diagnosisKeys);\n+  public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n+    keyRepository.saveAll(diagnosisKeys);\n   }\n }\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n@@ -1,23 +1,22 @@\n package app.coronawarn.server.services.submission.controller;\n \n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.stream.Collectors;\n import app.coronawarn.server.common.protocols.generated.ExposureKeys.TemporaryExposureKey;\n import app.coronawarn.server.services.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.services.common.persistence.service.DiagnosisKeyService;\n import app.coronawarn.server.services.submission.verification.TanVerifier;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.stream.Collectors;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestHeader;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n-// TODO Implement Unit Tests\n @RestController\n @RequestMapping(\"/version/v1\")\n public class SubmissionController {\n@@ -34,9 +33,8 @@ public ResponseEntity<String> hello() {\n   }\n \n   // TODO update protoSpec and endpoint to Collection<TemporaryExposureKey>\n-  @PostMapping(value = \"/diagnosis-keys/country/{country}\")\n-  public ResponseEntity<String> submitDiagnosisKey(\n-      @PathVariable String country,\n+  @PostMapping(value = \"/diagnosis-keys\")\n+  public ResponseEntity<Void> submitDiagnosisKey(\n       @RequestBody TemporaryExposureKey exposureKeys,\n       @RequestHeader(value = \"cwa-fake\") Integer fake,\n       @RequestHeader(value = \"cwa-authorization\") String tan) {\n@@ -56,15 +54,14 @@ public ResponseEntity<String> submitDiagnosisKey(\n   /**\n    * @return A response that indicates that an invalid TAN was specified in the request.\n    */\n-  private ResponseEntity<String> buildTanInvalidResponseEntity() {\n-    // TODO implement\n-    return null;\n+  private ResponseEntity<Void> buildTanInvalidResponseEntity() {\n+    return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n   }\n \n   /**\n    * @return A response that indicates successful request processing.\n    */\n-  private ResponseEntity<String> buildSuccessResponseEntity() {\n+  private ResponseEntity<Void> buildSuccessResponseEntity() {\n     return ResponseEntity.ok().build();\n   }\n \ndiff --git a/services/submission/src/main/resources/application.properties b/services/submission/src/main/resources/application.properties\n--- a/services/submission/src/main/resources/application.properties\n+++ b/services/submission/src/main/resources/application.properties\n@@ -1,3 +1,3 @@\n logging.level.org.springframework.web=DEBUG\n-spring.jpa.hibernate.ddl-auto = create\n+spring.jpa.hibernate.ddl-auto=create\n spring.flyway.enabled=false\n",
        "test_patch": "diff --git a/services/distribution/src/test/resources/application.properties b/services/distribution/src/test/resources/application.properties\n--- a/services/distribution/src/test/resources/application.properties\n+++ b/services/distribution/src/test/resources/application.properties\n@@ -1,5 +1,4 @@\n-spring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver\n-spring.datasource.url=jdbc:hsqldb:mem:testdb;DB_CLOSE_DELAY=-1\n-spring.datasource.username=cwa\n-spring.datasource.password=cwa\n-spring.jpa.hibernate.ddl-auto=create\n\\ No newline at end of file\n+spring.jpa.hibernate.ddl-auto=create\n+logging.level.org.springframework=off\n+logging.level.root=warn\n+spring.main.banner-mode=off\ndiff --git a/services/distribution/src/test/resources/logback-test.xml b/services/distribution/src/test/resources/logback-test.xml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/logback-test.xml\n@@ -0,0 +1,5 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration>\n+  <include resource=\"org/springframework/boot/logging/logback/base.xml\" />\n+  <logger name=\"org.springframework\" level=\"off\"/>\n+</configuration>\ndiff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/ServerApplicationTests.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/ServerApplicationTests.java\n--- a/services/submission/src/test/java/app/coronawarn/server/services/submission/ServerApplicationTests.java\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/ServerApplicationTests.java\n@@ -1,13 +1,20 @@\n package app.coronawarn.server.services.submission;\n \n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import app.coronawarn.server.services.submission.controller.SubmissionController;\n import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n \n @SpringBootTest\n class ServerApplicationTests {\n \n-\t@Test\n-\tvoid contextLoads() {\n-\t}\n+  @Autowired\n+  private SubmissionController controller;\n \n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(this.controller);\n+  }\n }\ndiff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/SubmissionControllerTest.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/SubmissionControllerTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/SubmissionControllerTest.java\n@@ -0,0 +1,159 @@\n+package app.coronawarn.server.services.submission.controller;\n+\n+\n+import static app.coronawarn.server.common.protocols.generated.ExposureKeys.TemporaryExposureKey;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyCollection;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import app.coronawarn.server.services.common.persistence.service.DiagnosisKeyService;\n+import app.coronawarn.server.services.submission.verification.TanVerifier;\n+import com.google.protobuf.ByteString;\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.RequestEntity;\n+import org.springframework.http.ResponseEntity;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+public class SubmissionControllerTest {\n+\n+  private static final URI SUBMISSION_URL = URI.create(\"/version/v1/diagnosis-keys\");\n+\n+  @MockBean\n+  private DiagnosisKeyService diagnosisKeyService;\n+\n+  @MockBean\n+  private TanVerifier tanVerifier;\n+\n+  @Autowired\n+  private TestRestTemplate testRestTemplate;\n+\n+  @BeforeEach\n+  public void setUpMocks() {\n+    when(tanVerifier.verifyTan(anyString())).thenReturn(true);\n+  }\n+\n+  @Test\n+  public void checkResponseStatusForValidParameters() {\n+    ResponseEntity<Void> actResponse =\n+        executeRequest(buildTemporaryExposureKey(), buildOkHeaders());\n+\n+    assertEquals(HttpStatus.OK, actResponse.getStatusCode());\n+  }\n+\n+  @Test\n+  public void checkSaveOperationCallForValidParameters() {\n+    executeRequest(buildTemporaryExposureKey(), buildOkHeaders());\n+\n+    verify(diagnosisKeyService, atLeastOnce()).saveDiagnosisKeys(anyCollection());\n+  }\n+\n+  @ParameterizedTest\n+  @MethodSource(\"createIncompleteHeaders\")\n+  public void badRequestIfCwaHeadersMissing(HttpHeaders headers) {\n+    ResponseEntity<Void> actResponse = executeRequest(buildTemporaryExposureKey(), headers);\n+\n+    verify(diagnosisKeyService, never()).saveDiagnosisKeys(any());\n+    assertEquals(HttpStatus.BAD_REQUEST, actResponse.getStatusCode());\n+  }\n+\n+  private static Stream<Arguments> createIncompleteHeaders() {\n+    return Stream.of(\n+        Arguments.of(setContentTypeProtoBufHeader(new HttpHeaders())),\n+        Arguments.of(setContentTypeProtoBufHeader(setCwaFakeHeader(new HttpHeaders(), \"0\"))),\n+        Arguments.of(setContentTypeProtoBufHeader(setCwaAuthHeader(new HttpHeaders()))));\n+  }\n+\n+  @Test\n+  public void checkAcceptedHttpMethods() {\n+    Set<HttpMethod> expAllowedMethods =\n+        Stream.of(HttpMethod.POST, HttpMethod.OPTIONS)\n+            .collect(Collectors.toCollection(HashSet::new));\n+\n+    Set<HttpMethod> actAllowedMethods = testRestTemplate.optionsForAllow(SUBMISSION_URL.toString());\n+\n+    assertEquals(expAllowedMethods, actAllowedMethods);\n+  }\n+\n+  @Test\n+  public void invalidTanHandling() {\n+    when(tanVerifier.verifyTan(anyString())).thenReturn(false);\n+\n+    ResponseEntity<Void> actResponse =\n+        executeRequest(buildTemporaryExposureKey(), buildOkHeaders());\n+\n+    verify(diagnosisKeyService, never()).saveDiagnosisKeys(any());\n+    assertEquals(HttpStatus.FORBIDDEN, actResponse.getStatusCode());\n+  }\n+\n+  @Test\n+  public void fakeRequestHandling() {\n+    HttpHeaders headers = buildOkHeaders();\n+    setCwaFakeHeader(headers, \"1\");\n+\n+    ResponseEntity<Void> actResponse = executeRequest(buildTemporaryExposureKey(), headers);\n+\n+    verify(diagnosisKeyService, never()).saveDiagnosisKeys(any());\n+    assertEquals(HttpStatus.OK, actResponse.getStatusCode());\n+  }\n+\n+  private static HttpHeaders buildOkHeaders() {\n+    HttpHeaders headers = setCwaAuthHeader(setContentTypeProtoBufHeader(new HttpHeaders()));\n+\n+    return setCwaFakeHeader(headers, \"0\");\n+  }\n+\n+  private static HttpHeaders setContentTypeProtoBufHeader(HttpHeaders headers) {\n+    headers.setContentType(MediaType.valueOf(\"application/x-protobuf\"));\n+    return headers;\n+  }\n+\n+  private static HttpHeaders setCwaAuthHeader(HttpHeaders headers) {\n+    headers.set(\"cwa-authorization\", \"okTan\");\n+    return headers;\n+  }\n+\n+  private static HttpHeaders setCwaFakeHeader(HttpHeaders headers, String value) {\n+    headers.set(\"cwa-fake\", value);\n+    return headers;\n+  }\n+\n+  private static TemporaryExposureKey buildTemporaryExposureKey() {\n+    return buildTemporaryExposureKey(\"testKey123456789\", 3L, 2);\n+  }\n+\n+  private static TemporaryExposureKey buildTemporaryExposureKey(\n+      String keyData, long rollingStartNumber, int riskLevelValue) {\n+    return TemporaryExposureKey.newBuilder()\n+        .setKeyData(ByteString.copyFromUtf8(keyData))\n+        .setRollingStartNumber(rollingStartNumber)\n+        .setRiskLevelValue(riskLevelValue).build();\n+  }\n+\n+  private ResponseEntity<Void> executeRequest(TemporaryExposureKey body, HttpHeaders headers) {\n+    RequestEntity<TemporaryExposureKey> request =\n+        new RequestEntity<>(body, headers, HttpMethod.POST, SUBMISSION_URL);\n+    return testRestTemplate.postForEntity(SUBMISSION_URL, request, Void.class);\n+  }\n+}\ndiff --git a/services/submission/src/test/resources/application.properties b/services/submission/src/test/resources/application.properties\n--- a/services/submission/src/test/resources/application.properties\n+++ b/services/submission/src/test/resources/application.properties\n@@ -1,5 +1,4 @@\n-spring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver\n-spring.datasource.url=jdbc:hsqldb:mem:testdb;DB_CLOSE_DELAY=-1\n-spring.datasource.username=cwa\n-spring.datasource.password=cwa\n-spring.jpa.hibernate.ddl-auto=create\n\\ No newline at end of file\n+spring.jpa.hibernate.ddl-auto=create\n+logging.level.org.springframework=off\n+logging.level.root=warn\n+spring.main.banner-mode=off\ndiff --git a/services/submission/src/test/resources/logback-test.xml b/services/submission/src/test/resources/logback-test.xml\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/test/resources/logback-test.xml\n@@ -0,0 +1,5 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration>\n+  <include resource=\"org/springframework/boot/logging/logback/base.xml\" />\n+  <logger name=\"org.springframework\" level=\"off\"/>\n+</configuration>\n",
        "problem_statement": "Diagnosis key submission unit tests\nImplement unit tests for the diagnosis key submission service according to best practices.\n",
        "hints_text": "",
        "created_at": "2020-05-08T09:00:07Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-135",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nSubmission Service: Enable waiting for Fake Requests\nWhen fake requests are send to the submission service, ensure that the duration of the fake requests take as long as normal requests, so attackers sniffing the traffic are unable to distinguish between fake/normal requests.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <h1 align=\"center\">\n2     Corona-Warn-App Server\n3 </h1>\n4 \n5 <p align=\"center\">\n6     <a href=\"https://github.com/Exposure-Notification-App/ena-documentation/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n7     <a href=\"https://github.com/Exposure-Notification-App/ena-documentation/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=flat&circle-token=a7294b977bb9ea2c2d53ff62c9aa442670e19b59\"></a>\n9     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n10 </p>\n11 \n12 <p align=\"center\">\n13   <a href=\"#development\">Development</a> \u2022\n14   <a href=\"#service-apis\">Service APIs</a> \u2022\n15   <a href=\"#documentation\">Documentation</a> \u2022\n16   <a href=\"#support--feedback\">Support</a> \u2022\n17   <a href=\"#how-to-contribute\">How to Contribute</a> \u2022\n18   <a href=\"#contributors\">Contributors</a> \u2022\n19   <a href=\"#repositories\">Repositories</a> \u2022\n20   <a href=\"#licensing\">Licensing</a>\n21 </p>\n22 \n23 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n24 \n25 In this documentation, Corona-Warn-App services are also referred to as cwa services.\n26 \n27 ## Development\n28 \n29 After you've checked out this repository, you can run the application in one of the following ways:\n30 \n31 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n32   * Single components using the respective Dockerfile or\n33   * The full backend using the Docker Compose (which is considered the most convenient way)\n34 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n35   If you want to develop something in a single component, this approach is preferable.\n36 \n37 ### Docker-Based Deployment\n38 \n39 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n40 \n41 #### Running the Full cwa Backend Using Docker Compose\n42 \n43 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and MinIO build should be changed in this file before docker-compose is run.\n44 \n45 Once the services are built, you can start the whole backend using ```docker-compose up```.\n46 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose start distribution```.\n47 \n48 The docker-compose contains the following services:\n49 \n50 Service       | Description | Endpoint and Default Credentials\n51 --------------|-------------|-----------\n52 submission    | The Corona-Warn-App submission service                                            | http://localhost:8080 \n53 distribution  | The Corona-Warn-App distribution service                                          | NO ENDPOINT\n54 postgres      | A [postgres] database installation                                                | postgres:5432 <br> Username: postgres <br> Password: postgres\n55 pgadmin       | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database      | http://localhost:8081 <br> Username: user@domain.com <br> Password: password\n56 minio         | [MinIO] is an S3-compliant object store                                           | http://localhost:8082/ <br> Access key: cws_key_id <br> Secret key: cws_secret_key_id\n57 \n58 #### Running Single cwa Services Using Docker\n59 \n60 If you would like to build and run a single cwa service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective cwa service directory. The Docker script first builds the cwa service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n61 \n62 To build and run the distribution service, run the following command:\n63 \n64 ```bash\n65 ./services/distribution/build_and_run.sh\n66 ```\n67 \n68 To build and run the submission service, run the following command:\n69 \n70 ```bash\n71 ./services/submission/build_and_run.sh\n72 ```\n73 \n74 The submission service is available on localhost:8080.\n75 \n76 ### Maven-Based Build\n77 \n78 If you want to actively develop in one of the cwa services, the Maven-based runtime is most suitable.\n79 To prepare your machine to run the cwa project locally, we recommend that you first ensure that you've installed the following:\n80 \n81 * [Minimum JDK Version 11](https://openjdk.java.net/)\n82 * [Maven 3.6](https://maven.apache.org/)\n83 * [Postgres] (if you want to connect to a persistent storage; if a postgres connection is not specified, an in-memory [HSQLDB] is provided)\n84 * [MinIO] (if you want to run the distribution service and write the files to an object store instead of using your local file system)\n85 \n86 #### Build\n87 \n88 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n89 \n90 ### Run\n91 \n92 Navigate to the service you want to start and run the spring-boot:run target. The HSQLDB is used by default.\n93 When you start the submission service, the endpoint is available on your local port 8080.\n94 \n95 If you want to start the submission service, for example, you start it as follows:\n96 \n97 ```bash\n98   cd services/submission/\n99   mvn spring-boot:run\n100 ```\n101 \n102 If you want to use a Postgres database instead of the default in-memory HSQLDB, use the Postgres profile when starting the application:\n103 \n104 ```bash\n105   cd services/submission/\n106   mvn spring-boot:run -Dspring-boot.run.profiles=postgres\n107 ```\n108 \n109 To enable the S3 integration in the cwa distribution service, use the S3 profile when starting the application:\n110 \n111 ```bash\n112   cd services/distribution/\n113   mvn spring-boot:run -Dspring-boot.run.profiles=s3\n114 ```\n115 \n116 You can also combine multiple profiles if necessary:\n117 \n118 ```bash\n119   cd services/distribution/\n120   mvn spring-boot:run -Dspring-boot.run.profiles=dev,postgres,s3\n121 ```\n122 \n123 ### Debugging\n124 \n125 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n126 \n127 ```bash\n128 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n129 ```\n130 \n131 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n132 \n133 ## Service APIs\n134 \n135 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations: \n136 \n137 Service      | OpenAPI Specification\n138 -------------|-------------\n139 Submission Service        | https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json\n140 Distribution Service      | https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json\n141 \n142 ## Documentation\n143 \n144 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation] repository. This repository contains technical documents, UI/UX specifications, architecture information, and whitepapers for this implementation.\n145 \n146 ## Support and Feedback\n147 \n148 The following channels are available for discussions, feedback, and support requests:\n149 \n150 | Type                     | Channel                                                |\n151 | ------------------------ | ------------------------------------------------------ |\n152 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n153 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/concept-extension.svg?style=flat-square\"></a>  |\n154 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server/backend.svg?style=flat-square\"></a>  |\n155 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWD Team\"><img src=\"https://img.shields.io/badge/email-CWD%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n156 \n157 ## How to Contribute\n158 \n159 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n160 \n161 ## Contributors\n162 \n163 The German government requested SAP SE and Deutsche Telekom AG to develop the Corona-Warn-App. Deutsche Telekom is providing the infrastructure technology and is to operate and run the backend for the app in a safe, scalable, and stable manner. SAP is responsible for app development and the exposure notification backend. Development teams from both SAP and Deutsche Telekom are therefore contributing to this project. At the same time, commitment to open source means that all interested parties are being enabled **and encouraged** to contribute and become part of this developer community.\n164 \n165 ## Repositories\n166 \n167 The following public repositories are currently available for the Corona-Warn-App:\n168 \n169 | Repository          | Description                                                           |\n170 | ------------------- | --------------------------------------------------------------------- |\n171 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n172 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n173 \n174 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n175 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n176 [Postgres]: https://www.postgresql.org/\n177 [MinIO]: https://min.io/\n178 [HSQLDB]: http://hsqldb.org/\n179 ---\n180 \n181 ## Licensing\n182 \n183 This project is licensed under the **Apache 2.0** license. For more information, see the [LICENSE](./LICENSE) file.\n184 \n[end of README.md]\n[start of services/submission/pom.xml]\n1 <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n2 <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n3   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n4   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n5   <parent>\n6     <artifactId>services</artifactId>\n7     <groupId>org.opencwa</groupId>\n8     <version>0.0.1-SNAPSHOT</version>\n9     <relativePath>../pom.xml</relativePath>\n10   </parent>\n11   <modelVersion>4.0.0</modelVersion>\n12 \n13   <artifactId>submission</artifactId>\n14   <version>0.0.1-SNAPSHOT</version>\n15 \n16   <dependencies>\n17     <dependency>\n18       <groupId>org.springframework.boot</groupId>\n19       <artifactId>spring-boot-starter-web</artifactId>\n20     </dependency>\n21     <dependency>\n22       <groupId>org.springframework.boot</groupId>\n23       <artifactId>spring-boot-starter-security</artifactId>\n24     </dependency>\n25   </dependencies>\n26 \n27 </project>\n[end of services/submission/pom.xml]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java]\n1 package app.coronawarn.server.services.submission.controller;\n2 \n3 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n4 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n5 import app.coronawarn.server.common.protocols.internal.SubmissionPayload;\n6 import app.coronawarn.server.services.submission.verification.TanVerifier;\n7 import java.util.Collection;\n8 import java.util.stream.Collectors;\n9 import org.springframework.beans.factory.annotation.Autowired;\n10 import org.springframework.http.HttpStatus;\n11 import org.springframework.http.ResponseEntity;\n12 import org.springframework.web.bind.annotation.PostMapping;\n13 import org.springframework.web.bind.annotation.RequestBody;\n14 import org.springframework.web.bind.annotation.RequestHeader;\n15 import org.springframework.web.bind.annotation.RequestMapping;\n16 import org.springframework.web.bind.annotation.RestController;\n17 \n18 @RestController\n19 @RequestMapping(\"/version/v1\")\n20 public class SubmissionController {\n21 \n22   /**\n23    * The route to the submission endpoint (version agnostic).\n24    */\n25   public static final String SUBMISSION_ROUTE = \"/diagnosis-keys\";\n26 \n27   @Autowired\n28   private DiagnosisKeyService diagnosisKeyService;\n29 \n30   @Autowired\n31   private TanVerifier tanVerifier;\n32 \n33   @PostMapping(SUBMISSION_ROUTE)\n34   public ResponseEntity<Void> submitDiagnosisKey(\n35       @RequestBody SubmissionPayload exposureKeys,\n36       @RequestHeader(value = \"cwa-fake\") Integer fake,\n37       @RequestHeader(value = \"cwa-authorization\") String tan) {\n38     if (fake != 0) {\n39       return buildSuccessResponseEntity();\n40     }\n41     if (!this.tanVerifier.verifyTan(tan)) {\n42       return buildTanInvalidResponseEntity();\n43     }\n44 \n45     persistDiagnosisKeysPayload(exposureKeys);\n46 \n47     return buildSuccessResponseEntity();\n48   }\n49 \n50   /**\n51    * Returns a response that indicates that an invalid TAN was specified in the request.\n52    */\n53   private ResponseEntity<Void> buildTanInvalidResponseEntity() {\n54     return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n55   }\n56 \n57   /**\n58    * Returns a response that indicates successful request processing.\n59    */\n60   private ResponseEntity<Void> buildSuccessResponseEntity() {\n61     return ResponseEntity.ok().build();\n62   }\n63 \n64   /**\n65    * Persists the diagnosis keys contained in the specified request payload.\n66    *\n67    * @param protoBufDiagnosisKeys Diagnosis keys that were specified in the request.\n68    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n69    */\n70   private void persistDiagnosisKeysPayload(SubmissionPayload protoBufDiagnosisKeys) {\n71     Collection<DiagnosisKey> diagnosisKeys = protoBufDiagnosisKeys.getKeysList().stream()\n72         .map(aProtoBufKey -> DiagnosisKey.builder().fromProtoBuf(aProtoBufKey).build())\n73         .collect(Collectors.toList());\n74 \n75     this.diagnosisKeyService.saveDiagnosisKeys(diagnosisKeys);\n76   }\n77 }\n78 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java]\n[start of services/submission/src/main/resources/application.properties]\n1 logging.level.org.springframework.web=INFO\n2 \n3 spring.flyway.locations=classpath:db/migration/h2\n4 spring.flyway.enabled=true\n5 spring.jpa.hibernate.ddl-auto=validate\n6 \n[end of services/submission/src/main/resources/application.properties]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n@@ -34,7 +34,7 @@\n   public ResponseEntity<Void> submitDiagnosisKey(\n       @RequestBody SubmissionPayload exposureKeys,\n       @RequestHeader(value = \"cwa-fake\") Integer fake,\n-      @RequestHeader(value = \"cwa-authorization\") String tan) {\n+      @RequestHeader(value = \"cwa-authorization\", required = false) String tan) {\n     if (fake != 0) {\n       return buildSuccessResponseEntity();\n     }\n</patch>",
        "model_patch": "\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n@@ -34,7 +34,7 @@\n   public ResponseEntity<Void> submitDiagnosisKey(\n       @RequestBody SubmissionPayload exposureKeys,\n       @RequestHeader(value = \"cwa-fake\") Integer fake,\n-      @RequestHeader(value = \"cwa-authorization\") String tan) {\n+      @RequestHeader(value = \"cwa-authorization\", required = false) String tan) {\n     if (fake != 0) {\n       return buildSuccessResponseEntity();\n     }\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 135,
        "issue_numbers": [
            "109"
        ],
        "base_commit": "8655863c4c989c437ad9b5ef84c7e2afb699be8d",
        "patch": "diff --git a/services/submission/pom.xml b/services/submission/pom.xml\n--- a/services/submission/pom.xml\n+++ b/services/submission/pom.xml\n@@ -22,6 +22,12 @@\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-security</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-math3</artifactId>\n+      <version>3.2</version>\n+      <scope>compile</scope>\n+    </dependency>\n   </dependencies>\n \n </project>\n\\ No newline at end of file\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n@@ -5,15 +5,23 @@\n import app.coronawarn.server.common.protocols.internal.SubmissionPayload;\n import app.coronawarn.server.services.submission.verification.TanVerifier;\n import java.util.Collection;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n+import org.apache.commons.math3.distribution.PoissonDistribution;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.util.StopWatch;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestHeader;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.context.request.async.DeferredResult;\n \n @RestController\n @RequestMapping(\"/version/v1\")\n@@ -24,27 +32,57 @@ public class SubmissionController {\n    */\n   public static final String SUBMISSION_ROUTE = \"/diagnosis-keys\";\n \n+  @Value(\"${services.submission.fake_delay_moving_average_samples}\")\n+  private Double fakeDelayMovingAverageSamples;\n+\n+  // Exponential moving average of the last N real request durations (in ms), where\n+  // N = fakeDelayMovingAverageSamples.\n+  @Value(\"${services.submission.initial_fake_delay_milliseconds}\")\n+  private Double fakeDelay;\n+\n   @Autowired\n   private DiagnosisKeyService diagnosisKeyService;\n \n   @Autowired\n   private TanVerifier tanVerifier;\n \n+  private ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n+  private ForkJoinPool forkJoinPool = ForkJoinPool.commonPool();\n+\n   @PostMapping(SUBMISSION_ROUTE)\n-  public ResponseEntity<Void> submitDiagnosisKey(\n+  public DeferredResult<ResponseEntity<Void>> submitDiagnosisKey(\n       @RequestBody SubmissionPayload exposureKeys,\n       @RequestHeader(value = \"cwa-fake\") Integer fake,\n       @RequestHeader(value = \"cwa-authorization\") String tan) {\n+    final DeferredResult<ResponseEntity<Void>> deferredResult = new DeferredResult<>();\n     if (fake != 0) {\n-      return buildSuccessResponseEntity();\n-    }\n-    if (!this.tanVerifier.verifyTan(tan)) {\n-      return buildTanInvalidResponseEntity();\n+      setFakeDeferredResult(deferredResult);\n+    } else {\n+      setRealDeferredResult(deferredResult, exposureKeys, tan);\n     }\n+    return deferredResult;\n+  }\n \n-    persistDiagnosisKeysPayload(exposureKeys);\n+  private void setFakeDeferredResult(DeferredResult<ResponseEntity<Void>> deferredResult) {\n+    long delay = new PoissonDistribution(fakeDelay).sample();\n+    scheduledExecutor.schedule(() -> deferredResult.setResult(buildSuccessResponseEntity()),\n+        delay, TimeUnit.MILLISECONDS);\n+  }\n \n-    return buildSuccessResponseEntity();\n+  private void setRealDeferredResult(DeferredResult<ResponseEntity<Void>> deferredResult,\n+      SubmissionPayload exposureKeys, String tan) {\n+    forkJoinPool.submit(() -> {\n+      StopWatch stopWatch = new StopWatch();\n+      stopWatch.start();\n+      if (!this.tanVerifier.verifyTan(tan)) {\n+        deferredResult.setResult(buildTanInvalidResponseEntity());\n+      } else {\n+        persistDiagnosisKeysPayload(exposureKeys);\n+        deferredResult.setResult(buildSuccessResponseEntity());\n+      }\n+      stopWatch.stop();\n+      updateFakeDelay(stopWatch.getTotalTimeMillis());\n+    });\n   }\n \n   /**\n@@ -74,4 +112,8 @@ private void persistDiagnosisKeysPayload(SubmissionPayload protoBufDiagnosisKeys\n \n     this.diagnosisKeyService.saveDiagnosisKeys(diagnosisKeys);\n   }\n+\n+  private synchronized void updateFakeDelay(long realRequestDuration) {\n+    fakeDelay = fakeDelay + (1 / fakeDelayMovingAverageSamples) * (realRequestDuration - fakeDelay);\n+  }\n }\ndiff --git a/services/submission/src/main/resources/application.properties b/services/submission/src/main/resources/application.properties\n--- a/services/submission/src/main/resources/application.properties\n+++ b/services/submission/src/main/resources/application.properties\n@@ -1,5 +1,10 @@\n logging.level.org.springframework.web=INFO\n \n+# The initial value of the moving average for fake request delays.\n+services.submission.initial_fake_delay_milliseconds=10\n+# The number of samples for the calculation of the moving average for fake request delays.\n+services.submission.fake_delay_moving_average_samples=10\n+\n spring.flyway.locations=classpath:db/migration/h2\n spring.flyway.enabled=true\n spring.jpa.hibernate.ddl-auto=validate\n",
        "test_patch": "diff --git a/services/submission/src/test/resources/application.properties b/services/submission/src/test/resources/application.properties\n--- a/services/submission/src/test/resources/application.properties\n+++ b/services/submission/src/test/resources/application.properties\n@@ -3,4 +3,7 @@ logging.level.org.springframework=off\n logging.level.root=off\n spring.main.banner-mode=off\n \n+services.submission.initial_fake_delay_milliseconds=1\n+services.submission.fake_delay_moving_average_samples=1\n+\n spring.flyway.enabled=false\n",
        "problem_statement": "Submission Service: Enable waiting for Fake Requests\nWhen fake requests are send to the submission service, ensure that the duration of the fake requests take as long as normal requests, so attackers sniffing the traffic are unable to distinguish between fake/normal requests.\n",
        "hints_text": "",
        "created_at": "2020-05-17T13:49:18Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-652",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nValidate that no attributes are missing in .yaml\nvalidate that no attributes are missing in .yaml when accordingly re-enable the ``ScoreNegative`` test case in:\r\nhttps://github.com/corona-warn-app/cwa-server/blob/master/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\r\n\r\nNote: the validation probably should be done on the loading the values from yaml into a proto object, since validating directly on the resulting proto object is too late as the default value for an unloaded attribute in proto is 0 which we consider as a valid value (or risk score in the allowed range of 0-8)\r\n\r\nSee PR which disabled the test: https://github.com/corona-warn-app/cwa-server/pull/299\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/ARCHITECTURE.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env``` in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `localhost:8001` <br> `postgres:5432` (from containerized pgadmin) <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is `edc07f08-a1aa-11ea-bb37-0242ac130002`.\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 If you are already running a local Postgres, you need to create a database `cwa` and run the following setup scripts:\n101 \n102 * Create the different CWA roles first by executing [create-roles.sql](setup/create-roles.sql).\n103 * Create local database users for the specific roles by running [create-users.sql](./local-setup/create-users.sql).\n104 * It is recommended to also run [enable-test-data-docker-compose.sql](./local-setup/enable-test-data-docker-compose.sql)\n105 , which enables the test data generation profile. If you already had CWA running before and an existing `diagnosis-key`\n106 table on your database, you need to run [enable-test-data.sql](./local-setup/enable-test-data.sql) instead.\n107 \n108 You can also use `docker-compose` to start Postgres and Zenko. If you do that, you have to\n109 set the following environment-variables when running the Spring project:\n110 \n111 For the distribution module:\n112 \n113 ```bash\n114 POSTGRESQL_SERVICE_PORT=8001\n115 VAULT_FILESIGNING_SECRET=</path/to/your/private_key>\n116 SPRING_PROFILES_ACTIVE=signature-dev,disable-ssl-client-postgres\n117 ```\n118 \n119 For the submission module:\n120 \n121 ```bash\n122 POSTGRESQL_SERVICE_PORT=8001\n123 SPRING_PROFILES_ACTIVE=disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n124 ```\n125 \n126 #### Configure\n127 \n128 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n129 \n130 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n131 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n132 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n133   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n134 \n135 #### Build\n136 \n137 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n138 \n139 #### Run\n140 \n141 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n142 \n143 If you want to start the submission service, for example, you start it as follows:\n144 \n145 ```bash\n146   cd services/submission/\n147   mvn spring-boot:run\n148 ```\n149 \n150 #### Debugging\n151 \n152 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n153 \n154 ```bash\n155 mvn spring-boot:run -Dspring.profiles.active=dev\n156 ```\n157 \n158 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n159 \n160 ## Service APIs\n161 \n162 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n163 \n164 Service                   | OpenAPI Specification\n165 --------------------------|-------------\n166 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n167 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n168 \n169 ## Spring Profiles\n170 \n171 ### Distribution\n172 \n173 See [Distribution Service - Spring Profiles](/docs/DISTRIBUTION.md#spring-profiles).\n174 \n175 ### Submission\n176 \n177 See [Submission Service - Spring Profiles](/docs/SUBMISSION.md#spring-profiles).\n178 \n179 ## Documentation\n180 \n181 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n182 \n183 ## Support and Feedback\n184 \n185 The following channels are available for discussions, feedback, and support requests:\n186 \n187 | Type                     | Channel                                                |\n188 | ------------------------ | ------------------------------------------------------ |\n189 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n190 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n191 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n192 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n193 \n194 ## How to Contribute\n195 \n196 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n197 \n198 ## Contributors\n199 \n200 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n201 \n202 ## Repositories\n203 \n204 The following public repositories are currently available for the Corona-Warn-App:\n205 \n206 | Repository          | Description                                                           |\n207 | ------------------- | --------------------------------------------------------------------- |\n208 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n209 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n210 | [cwa-verification-server] | Backend implementation of the verification process|\n211 \n212 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n213 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n214 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n215 [Postgres]: https://www.postgresql.org/\n216 [HSQLDB]: http://hsqldb.org/\n217 [Zenko CloudServer]: https://github.com/scality/cloudserver\n218 \n219 ## Licensing\n220 \n221 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n222 \n223 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n224 \n225 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n226 \n227 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n228 \n[end of README.md]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n22 \n23 import java.util.Objects;\n24 \n25 /**\n26  * {@link ValidationError} instances hold information about errors that occurred during app configuration validation.\n27  */\n28 public class ValidationError {\n29 \n30   private final String errorSource;\n31   private final Object value;\n32   private final ErrorType reason;\n33 \n34   /**\n35    * Creates a {@link ValidationError} that stores the specified validation error source, erroneous value and a reason\n36    * for the error to occur.\n37    *\n38    * @param errorSource A label that describes the property associated with this validation error.\n39    * @param value       The value that caused the validation error.\n40    * @param reason      A validation error specifier.\n41    */\n42   public ValidationError(String errorSource, Object value, ErrorType reason) {\n43     this.errorSource = errorSource;\n44     this.value = value;\n45     this.reason = reason;\n46   }\n47 \n48   @Override\n49   public String toString() {\n50     return \"ValidationError{\"\n51         + \"errorType=\" + reason\n52         + \", errorSource='\" + errorSource + '\\''\n53         + \", givenValue=\" + value\n54         + '}';\n55   }\n56 \n57   @Override\n58   public boolean equals(Object o) {\n59     if (this == o) {\n60       return true;\n61     }\n62     if (o == null || getClass() != o.getClass()) {\n63       return false;\n64     }\n65     ValidationError that = (ValidationError) o;\n66     return Objects.equals(errorSource, that.errorSource)\n67         && Objects.equals(value, that.value)\n68         && Objects.equals(reason, that.reason);\n69   }\n70 \n71   @Override\n72   public int hashCode() {\n73     return Objects.hash(errorSource, value, reason);\n74   }\n75 \n76   public enum ErrorType {\n77     BLANK_LABEL,\n78     MIN_GREATER_THAN_MAX,\n79     VALUE_OUT_OF_BOUNDS,\n80     INVALID_URL,\n81     INVALID_PARTITIONING,\n82     TOO_MANY_DECIMAL_PLACES,\n83     MISSING_ENTRY\n84   }\n85 }\n86 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n@@ -1,6 +1,7 @@\n package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationError.ErrorType.MISSING_ENTRY;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n import app.coronawarn.server.common.protocols.internal.RiskScoreParameters.RiskScoreClassification;\n@@ -25,6 +26,7 @@ import java.util.Set;\n import org.junit.jupiter.api.Test;\n \n class ExposureConfigurationValidatorTest {\n+\n   private static final int MIN_RISK_SCORE = 0;\n   private static final int MAX_RISK_SCORE = 8;\n \n@@ -36,6 +38,7 @@ class ExposureConfigurationValidatorTest {\n \n   @Test\n   void testScoreNegative() {\n+    assertThat(validator.validateScoreNegative(createExposureConfiguration())).isEmpty();\n   }\n \n   @Test\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n@@ -1,6 +1,7 @@\n package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationError.ErrorType.MISSING_ENTRY;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n import app.coronawarn.server.common.protocols.internal.RiskScoreParameters.RiskScoreClassification;\n@@ -25,6 +26,7 @@ import java.util.Set;\n import org.junit.jupiter.api.Test;\n \n class ExposureConfigurationValidatorTest {\n+\n   private static final int MIN_RISK_SCORE = 0;\n   private static final int MAX_RISK_SCORE = 8;\n \n@@ -36,6 +38,7 @@ class ExposureConfigurationValidatorTest {\n \n   @Test\n   void testScoreNegative() {\n+    assertThat(validator.validateScoreNegative(createExposureConfiguration())).isEmpty();\n   }\n \n   @Test\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 652,
        "issue_numbers": [
            "320"
        ],
        "base_commit": "ac86a35d9c4a40d55315ce50052ea0e4a64f036e",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java\n@@ -79,7 +79,6 @@ public enum ErrorType {\n     VALUE_OUT_OF_BOUNDS,\n     INVALID_URL,\n     INVALID_PARTITIONING,\n-    TOO_MANY_DECIMAL_PLACES,\n-    MISSING_ENTRY\n+    TOO_MANY_DECIMAL_PLACES\n   }\n }\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n@@ -22,7 +22,6 @@\n \n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ExposureConfigurationValidator.CONFIG_PREFIX;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.buildError;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationError.ErrorType.MISSING_ENTRY;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationError.ErrorType.TOO_MANY_DECIMAL_PLACES;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n import static org.assertj.core.api.Assertions.assertThat;\n@@ -69,8 +68,6 @@ private static Stream<Arguments> createOkTests() {\n   private static Stream<Arguments> createFailedTests() {\n     return Stream.of(\n         ScoreTooHigh(),\n-        // TODO cwa-server/#320 Validate that no attributes are missing in .yaml\n-        // ScoreNegative(),\n         WeightNegative(),\n         WeightTooHigh()\n     ).map(Arguments::of);\n@@ -103,12 +100,6 @@ public static TestWithExpectedResult WeightTooHigh() {\n         .with(buildError(CONFIG_PREFIX + \"transmission\", 101d, VALUE_OUT_OF_BOUNDS));\n   }\n \n-  public static TestWithExpectedResult ScoreNegative() {\n-    return new TestWithExpectedResult(\"score_negative.yaml\")\n-        .with(buildError(CONFIG_PREFIX + \"transmission.appDefined1\", RiskLevel.UNRECOGNIZED, VALUE_OUT_OF_BOUNDS))\n-        .with(buildError(CONFIG_PREFIX + \"transmission.appDefined3\", null, MISSING_ENTRY));\n-  }\n-\n   public static TestWithExpectedResult ScoreTooHigh() {\n     return new TestWithExpectedResult(\"score_too_high.yaml\")\n         .with(buildError(CONFIG_PREFIX + \"transmission.appDefined1\", RiskLevel.UNRECOGNIZED, VALUE_OUT_OF_BOUNDS))\ndiff --git a/services/distribution/src/test/resources/parameters/score_negative.yaml b/services/distribution/src/test/resources/parameters/score_negative.yaml\ndeleted file mode 100644\n--- a/services/distribution/src/test/resources/parameters/score_negative.yaml\n+++ /dev/null\n@@ -1,44 +0,0 @@\n-transmission_weight: 100\n-duration_weight: 50\n-attenuation_weight: 80\n-\n-\n-transmission:\n-  app_defined_1: -2 # not ok, negative\n-  app_defined_2: 0\n-  #app_defined_3: 3 # not ok (missing -> unspecified)\n-  app_defined_4: 5\n-  app_defined_5: 5\n-  app_defined_6: 6\n-  app_defined_7: 7\n-  app_defined_8: 8\n-\n-duration:\n-  eq_0_min: 1\n-  gt_0_le_5_min: 2\n-  gt_5_le_10_min: 3\n-  gt_10_le_15_min: 4\n-  gt_15_le_20_min: 5\n-  gt_20_le_25_min: 6\n-  gt_25_le_30_min: 7\n-  gt_30_min: 8\n-\n-days_since_last_exposure:\n-  ge_14_days: 1\n-  ge_12_lt_14_days: 2\n-  ge_10_lt_12_days: 3\n-  ge_8_lt_10_days: 4\n-  ge_6_lt_8_days: 5\n-  ge_4_lt_6_days: 6\n-  ge_2_lt_4_days: 7\n-  ge_0_lt_2_days: 8\n-\n-attenuation:\n-  gt_73_dbm: 1\n-  gt_63_le_73_dbm: 2\n-  gt_51_le_63_dbm: 3\n-  gt_33_le_51_dbm: 4\n-  gt_27_le_33_dbm: 5\n-  gt_15_le_27_dbm: 6\n-  gt_10_le_15_dbm: 7\n-  lt_10_dbm: 8\n",
        "problem_statement": "Validate that no attributes are missing in .yaml\nvalidate that no attributes are missing in .yaml when accordingly re-enable the ``ScoreNegative`` test case in:\r\nhttps://github.com/corona-warn-app/cwa-server/blob/master/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\r\n\r\nNote: the validation probably should be done on the loading the values from yaml into a proto object, since validating directly on the resulting proto object is too late as the default value for an unloaded attribute in proto is 0 which we consider as a valid value (or risk score in the allowed range of 0-8)\r\n\r\nSee PR which disabled the test: https://github.com/corona-warn-app/cwa-server/pull/299\n",
        "hints_text": "",
        "created_at": "2020-07-06T08:16:37Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-106",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nSet Retention Days to 14\nAny key data that is associated to a point in time older than 14 days shall be removed from the database and will also be removed from the CDN and therefore the index file.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <h1 align=\"center\">\n2     Corona Warn App - Server\n3 </h1>\n4 \n5 <p align=\"center\">\n6     <a href=\"https://github.com/Exposure-Notification-App/ena-documentation/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n7     <a href=\"https://github.com/Exposure-Notification-App/ena-documentation/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=flat&circle-token=a7294b977bb9ea2c2d53ff62c9aa442670e19b59\"></a>\n9     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n10 </p>\n11 \n12 <p align=\"center\">\n13   <a href=\"#service-apis\">Service APIs</a> \u2022\n14   <a href=\"#development\">Development</a> \u2022\n15   <a href=\"#architecture--documentation\">Documentation</a> \u2022\n16   <a href=\"#contributing\">Contributing</a> \u2022\n17   <a href=\"#support--feedback\">Support</a> \u2022\n18   <a href=\"https://github.com/corona-warn-app/cwa-admin/releases\">Changelog</a>\n19 </p>\n20 \n21 This project has the goal to develop the official Corona-Warn-App for Germany based on the Exposure Notification API by [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/).  The apps (for both iOS and Android) will collect anonymous data from nearby mobile phones using Bluetooth technology. The data will be stored locally on each device, preventing authorities\u2019 access and control over tracing data. This repository contains the **implementation of the key server** for the Corona-Warn-App. This implementation is **work in progress** and contains alpha-quality code only.\n22 \n23 ## Service APIs\n24 \n25 Service      | OpenAPI Specification\n26 -------------|-------------\n27 Submission Service        | https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json\n28 Distribution Service      | https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json\n29 \n30 \n31 ## Development\n32 \n33 ### Setup\n34 \n35 To setup this project locally on your machine, we recommend to install the following prerequisites:\n36   - Java OpenJDK 11\n37   - Maven 3.6\n38   - Docker if you would like to build Docker images\n39   - Postgres if you would like to connect a persistent storage. If no postgres connection is specified an in-memory HSQLDB will be provided.\n40 \n41 ### Build\n42 \n43 After you checked out the repository run ```mvn install``` in your base directory to build the project.\n44 \n45 ### Run\n46 \n47 Navigate to the service you would like to start and run the spring-boot:run target. By default the HSQLDB will be used and after the Spring Boot application started the endpoint will be available on your local port 8080. As an example if you would like to start the submission service run:\n48 ```\n49   cd services/submission/\n50   mvn spring-boot:run\n51 ```\n52 \n53 If you want to use a postgres DB instead please use the postgres profile when starting the application:\n54 \n55 ```\n56   cd services/submission/\n57   mvn spring-boot:run -Dspring-boot.run.profiles=postgres\n58 ```\n59 \n60 In order to enable S3 integration, you will need the following vars in your env:\n61 \n62 Var | Description\n63 ----|----------------\n64 AWS_ACCESS_KEY_ID | The access key\n65 AWS_SECRET_ACCESS_KEY | The secret access key\n66 cwa.objectstore.endpoint | The S3 endpoint\n67 cwa.objectstore.bucket | The S3 bucket name\n68 \n69 ### Build and run Docker Images\n70 \n71 First download and install [Docker](https://www.docker.com/products/docker-desktop).\n72 \n73 If you want to build and run a docker image of a service you can use the prepared script in the respective service directory.\n74 To build and run the distribution service:\n75 ```\n76 ./services/distribution/build_and_run.sh\n77 ```\n78 \n79 To build and run the submission service:\n80 ```\n81 ./services/submission/build_and_run.sh\n82 ```\n83 The submission service will then be available locally on port 8080.\n84 \n85 ## Debugging \n86 \n87 You may run the application with the spring profile `dev` to enable the `DEBUG` log-level.\n88 \n89 ```\n90 mvn spring-boot:run -Dspring-boot.run.profiles=postgres,dev\n91 ```\n92 \n93 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the parameter `-Dspring-boot.run.fork=false`. \n94 \n95 \n96 ## Known Issues\n97 \n98 There are no known issues.\n99 \n100 ## Architecture & Documentation\n101 \n102 The full documentation for the Corona-Warn-App is in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. Please refer to this repository for technical documents, UI/UX specifications, architectures, and whitepapers of this implementation.\n103 \n104 ## Support & Feedback\n105 \n106 | Type                     | Channel                                                |\n107 | ------------------------ | ------------------------------------------------------ |\n108 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n109 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/concept-extension.svg?style=flat-square\"></a>  |\n110 | **iOS App Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-app-ios/issues/new/choose\" title=\"Open iOS Suggestion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-app-ios/ios-app.svg?style=flat-square\"></a>  |\n111 | **Android App Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-app-android/issues/new/choose\" title=\"Open Android Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-app-android/android-app.svg?style=flat-square\"></a>  |\n112 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server/backend.svg?style=flat-square\"></a>  |\n113 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWD Team\"><img src=\"https://img.shields.io/badge/email-CWD%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n114 \n115 ## Contributing\n116 \n117 Contributions and feedback are encouraged and always welcome. Please see our [Contribution Guidelines](./CONTRIBUTING.md) for details on how to contribute, the project structure and additional details you need to know to work with us. By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md).\n118 \n119 ## Contributors\n120 \n121 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App. Deutsche Telekom is providing the infrastructure technology and will operate and run the backend for the app in a safe, scalable, and stable manner. SAP is responsible for the development of the app development and the exposure notification backend. Therefore, development teams of SAP and T-Systems are contributing to this project. At the same time, our commitment to open source means that we are enabling -and encouraging- all interested parties to contribute and become part of its developer community. \n122 \n123 ## Repositories\n124 \n125 | Repository          | Description                                                           |\n126 | ------------------- | --------------------------------------------------------------------- |\n127 | [cwa-documentation] | Project overview, general documentation, and white papers.            |\n128 | [cwa-app-ios]       | Native iOS app using the Apple/Google exposure notification API.      |\n129 | [cwa-app-android]   | Native Android app using the Apple/Google exposure notification API.  |\n130 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API.|\n131 \n132 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n133 [cwa-app-ios]: https://github.com/corona-warn-app/cwa-app-ios\n134 [cwa-app-android]: https://github.com/corona-warn-app/cwa-app-android\n135 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n136 \n137 ---\n138 \n139 This project is licensed under the **Apache-2.0** license. For more information, see the [LICENSE](./LICENSE) file.\n140 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java]\n1 package app.coronawarn.server.common.persistence.repository;\n2 \n3 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n4 import org.springframework.data.jpa.repository.JpaRepository;\n5 import org.springframework.stereotype.Repository;\n6 \n7 @Repository\n8 public interface DiagnosisKeyRepository extends JpaRepository<DiagnosisKey, Long> {\n9 }\n10 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java]\n1 package app.coronawarn.server.common.persistence.service;\n2 \n3 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n4 import app.coronawarn.server.common.persistence.repository.DiagnosisKeyRepository;\n5 import java.util.Collection;\n6 import java.util.List;\n7 import org.springframework.beans.factory.annotation.Autowired;\n8 import org.springframework.data.domain.Sort;\n9 import org.springframework.stereotype.Component;\n10 \n11 @Component\n12 public class DiagnosisKeyService {\n13 \n14   @Autowired\n15   private DiagnosisKeyRepository keyRepository;\n16 \n17   /**\n18    * Persists the specified collection of {@link DiagnosisKey} instances.\n19    *\n20    * @param diagnosisKeys must not contain {@literal null}.\n21    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n22    */\n23   public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n24     keyRepository.saveAll(diagnosisKeys);\n25   }\n26 \n27   /**\n28    * Returns all persisted diagnosis keys, sorted by their submission timestamp.\n29    */\n30   public List<DiagnosisKey> getDiagnosisKeys() {\n31     return keyRepository.findAll(Sort.by(Sort.Direction.ASC, \"submissionTimestamp\"));\n32   }\n33 }\n34 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java]\n1 package app.coronawarn.server.services.distribution.runner;\n2 \n3 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n4 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n5 import app.coronawarn.server.services.distribution.crypto.CryptoProvider;\n6 import app.coronawarn.server.services.distribution.diagnosiskeys.structure.directory.DiagnosisKeysDirectoryImpl;\n7 import app.coronawarn.server.services.distribution.structure.directory.DirectoryImpl;\n8 import app.coronawarn.server.services.distribution.structure.directory.IndexDirectory;\n9 import app.coronawarn.server.services.distribution.structure.directory.IndexDirectoryImpl;\n10 import app.coronawarn.server.services.distribution.structure.directory.decorator.IndexingDecorator;\n11 import app.coronawarn.server.services.distribution.structure.util.ImmutableStack;\n12 import java.io.File;\n13 import java.io.IOException;\n14 import java.util.Collection;\n15 import java.util.Set;\n16 import org.apache.commons.io.FileUtils;\n17 import org.slf4j.Logger;\n18 import org.slf4j.LoggerFactory;\n19 import org.springframework.beans.factory.annotation.Autowired;\n20 import org.springframework.beans.factory.annotation.Value;\n21 import org.springframework.boot.ApplicationArguments;\n22 import org.springframework.boot.ApplicationRunner;\n23 import org.springframework.core.annotation.Order;\n24 import org.springframework.stereotype.Component;\n25 \n26 @Component\n27 @Order(2)\n28 /**\n29  * This runner retrieves stored diagnosis keys, the generates and persists the respective diagnosis\n30  * key bundles.\n31  */\n32 public class DiagnosisKeyDistributionRunner implements ApplicationRunner {\n33 \n34   private static final Logger logger = LoggerFactory\n35       .getLogger(DiagnosisKeyDistributionRunner.class);\n36 \n37   private static final String VERSION_DIRECTORY = \"version\";\n38 \n39   @Value(\"${app.coronawarn.server.services.distribution.version}\")\n40   private String version;\n41 \n42   @Value(\"${app.coronawarn.server.services.distribution.paths.output}\")\n43   private String outputPath;\n44 \n45   @Autowired\n46   private CryptoProvider cryptoProvider;\n47 \n48   @Autowired\n49   private DiagnosisKeyService diagnosisKeyService;\n50 \n51 \n52   @Override\n53   public void run(ApplicationArguments args) throws IOException {\n54     Collection<DiagnosisKey> diagnosisKeys = diagnosisKeyService.getDiagnosisKeys();\n55 \n56     DiagnosisKeysDirectoryImpl diagnosisKeysDirectory =\n57         new DiagnosisKeysDirectoryImpl(diagnosisKeys, cryptoProvider);\n58 \n59     IndexDirectory<?> versionDirectory =\n60         new IndexDirectoryImpl<>(VERSION_DIRECTORY, __ -> Set.of(version), Object::toString);\n61 \n62     versionDirectory.addDirectoryToAll(__ -> diagnosisKeysDirectory);\n63 \n64     java.io.File outputDirectory = new File(outputPath);\n65     clearDirectory(outputDirectory);\n66     DirectoryImpl root = new DirectoryImpl(outputDirectory);\n67     root.addDirectory(new IndexingDecorator<>(versionDirectory));\n68 \n69     root.prepare(new ImmutableStack<>());\n70     root.write();\n71     logger.debug(\"Diagnosis key distribution structure written successfully.\");\n72   }\n73 \n74   private static void clearDirectory(File directory) throws IOException {\n75     FileUtils.deleteDirectory(directory);\n76     directory.mkdirs();\n77   }\n78 }\n79 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/ExposureConfigurationDistributionRunner.java]\n1 package app.coronawarn.server.services.distribution.runner;\n2 \n3 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n4 import app.coronawarn.server.services.distribution.crypto.CryptoProvider;\n5 import app.coronawarn.server.services.distribution.exposureconfig.ExposureConfigurationProvider;\n6 import app.coronawarn.server.services.distribution.exposureconfig.UnableToLoadFileException;\n7 import app.coronawarn.server.services.distribution.exposureconfig.structure.directory.ExposureConfigurationDirectoryImpl;\n8 import app.coronawarn.server.services.distribution.structure.directory.Directory;\n9 import app.coronawarn.server.services.distribution.structure.directory.DirectoryImpl;\n10 import app.coronawarn.server.services.distribution.structure.directory.IndexDirectory;\n11 import app.coronawarn.server.services.distribution.structure.directory.IndexDirectoryImpl;\n12 import app.coronawarn.server.services.distribution.structure.directory.decorator.IndexingDecorator;\n13 import app.coronawarn.server.services.distribution.structure.util.ImmutableStack;\n14 import java.io.File;\n15 import java.util.Set;\n16 import org.slf4j.Logger;\n17 import org.slf4j.LoggerFactory;\n18 import org.springframework.beans.factory.annotation.Autowired;\n19 import org.springframework.beans.factory.annotation.Value;\n20 import org.springframework.boot.ApplicationArguments;\n21 import org.springframework.boot.ApplicationRunner;\n22 import org.springframework.core.annotation.Order;\n23 import org.springframework.stereotype.Component;\n24 \n25 @Component\n26 @Order(1)\n27 /**\n28  * Reads the exposure configuration parameters from the respective file in the class path, then\n29  * generates and persists the respective exposure configuration bundle.\n30  */\n31 public class ExposureConfigurationDistributionRunner implements ApplicationRunner {\n32 \n33   private static final Logger logger =\n34       LoggerFactory.getLogger(ExposureConfigurationDistributionRunner.class);\n35 \n36   @Value(\"${app.coronawarn.server.services.distribution.version}\")\n37   private String version;\n38 \n39   @Value(\"${app.coronawarn.server.services.distribution.paths.output}\")\n40   private String outputPath;\n41 \n42   @Autowired\n43   private CryptoProvider cryptoProvider;\n44 \n45   private static final String VERSION_DIRECTORY = \"version\";\n46 \n47   @Override\n48   public void run(ApplicationArguments args) {\n49     var riskScoreParameters = readExposureConfiguration();\n50     IndexDirectory<?> versionDirectory =\n51         new IndexDirectoryImpl<>(VERSION_DIRECTORY, __ -> Set.of(version), Object::toString);\n52     ExposureConfigurationDirectoryImpl parametersDirectory =\n53         new ExposureConfigurationDirectoryImpl(riskScoreParameters, cryptoProvider);\n54     Directory root = new DirectoryImpl(new File(outputPath));\n55     versionDirectory.addDirectoryToAll(__ -> parametersDirectory);\n56     root.addDirectory(new IndexingDecorator<>(versionDirectory));\n57     root.prepare(new ImmutableStack<>());\n58     root.write();\n59     logger.debug(\"Exposure configuration structure written successfully.\");\n60   }\n61 \n62   private RiskScoreParameters readExposureConfiguration() {\n63     try {\n64       return ExposureConfigurationProvider.readMasterFile();\n65     } catch (UnableToLoadFileException e) {\n66       logger.error(\"Could not load exposure configuration parameters\", e);\n67       throw new RuntimeException(e);\n68     }\n69   }\n70 }\n71 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/ExposureConfigurationDistributionRunner.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3DistributionRunner.java]\n1 package app.coronawarn.server.services.distribution.runner;\n2 \n3 import app.coronawarn.server.services.distribution.objectstore.S3Publisher;\n4 import java.io.IOException;\n5 import java.nio.file.Path;\n6 import org.slf4j.Logger;\n7 import org.slf4j.LoggerFactory;\n8 import org.springframework.beans.factory.annotation.Autowired;\n9 import org.springframework.beans.factory.annotation.Value;\n10 import org.springframework.boot.ApplicationArguments;\n11 import org.springframework.boot.ApplicationRunner;\n12 import org.springframework.core.annotation.Order;\n13 import org.springframework.stereotype.Component;\n14 \n15 /**\n16  * This runner will sync the base working directory to the S3.\n17  */\n18 @Component\n19 @Order(3)\n20 public class S3DistributionRunner implements ApplicationRunner {\n21 \n22   private Logger logger = LoggerFactory.getLogger(this.getClass());\n23 \n24   @Value(\"${app.coronawarn.server.services.distribution.paths.output}\")\n25   private String workdir;\n26 \n27   @Autowired\n28   private S3Publisher s3Publisher;\n29 \n30   @Override\n31   public void run(ApplicationArguments args) {\n32     try {\n33       Path pathToDistribute = Path.of(workdir).toAbsolutePath();\n34 \n35       s3Publisher.publishFolder(pathToDistribute);\n36     } catch (IOException | UnsupportedOperationException e) {\n37       logger.error(\"Distribution failed.\", e);\n38     }\n39     logger.debug(\"Data pushed to CDN successfully.\");\n40   }\n41 }\n42 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3DistributionRunner.java]\n[start of services/distribution/src/main/resources/application.properties]\n1 logging.level.org.springframework.web=INFO\n2 logging.level.app.coronawarn=INFO\n3 spring.main.web-application-type=NONE\n4 \n5 app.coronawarn.server.services.distribution.version=v1\n6 app.coronawarn.server.services.distribution.paths.output=out\n7 app.coronawarn.server.services.distribution.paths.privatekey=classpath:certificates/client/private.pem\n8 app.coronawarn.server.services.distribution.paths.certificate=classpath:certificates/chain/certificate.crt\n9 \n10 spring.flyway.enabled=false\n11 spring.jpa.hibernate.ddl-auto=validate\n12 \n[end of services/distribution/src/main/resources/application.properties]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java\n@@ -32,6 +32,7 @@\n import app.coronawarn.server.services.distribution.structure.directory.IndexDirectoryImpl;\n import app.coronawarn.server.services.distribution.structure.directory.decorator.IndexingDecorator;\n import app.coronawarn.server.services.distribution.structure.util.ImmutableStack;\n+import java.time.LocalDate;\n import java.io.File;\n import java.io.IOException;\n import java.util.Collection;\n@@ -54,7 +55,7 @@\n   public void run(ApplicationArguments args) throws IOException {\n     Collection<DiagnosisKey> diagnosisKeys = diagnosisKeyService.getDiagnosisKeys();\n \n-    DiagnosisKeysDirectoryImpl diagnosisKeysDirectory =\n+    DiagnosisKeysDirectoryImpl diagnosisKeysDirectory = new DiagnosisKeysDirectoryImpl(\n         diagnosisKeys, cryptoProvider);\n \n     IndexDirectory<?> versionDirectory =\n@@ -62,6 +63,7 @@\n         new IndexDirectoryImpl<>(VERSION_DIRECTORY, __ -> Set.of(version), Object::toString);\n \n     versionDirectory.addDirectoryToAll(__ -> diagnosisKeysDirectory);\n+    versionDirectory.addDirectoryToAll(__ -> new IndexDirectoryImpl<>(LocalDate.now().toString(), __ -> Set.of(LocalDate.now().toString()), Object::toString));\n \n     java.io.File outputDirectory = new File(outputPath);\n     clearDirectory(outputDirectory);\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java\n@@ -32,6 +32,7 @@\n import app.coronawarn.server.services.distribution.structure.directory.IndexDirectoryImpl;\n import app.coronawarn.server.services.distribution.structure.directory.decorator.IndexingDecorator;\n import app.coronawarn.server.services.distribution.structure.util.ImmutableStack;\n+import java.time.LocalDate;\n import java.io.File;\n import java.io.IOException;\n import java.util.Collection;\n@@ -54,7 +55,7 @@\n   public void run(ApplicationArguments args) throws IOException {\n     Collection<DiagnosisKey> diagnosisKeys = diagnosisKeyService.getDiagnosisKeys();\n \n-    DiagnosisKeysDirectoryImpl diagnosisKeysDirectory =\n+    DiagnosisKeysDirectoryImpl diagnosisKeysDirectory = new DiagnosisKeysDirectoryImpl(\n         diagnosisKeys, cryptoProvider);\n \n     IndexDirectory<?> versionDirectory =\n@@ -62,6 +63,7 @@\n         new IndexDirectoryImpl<>(VERSION_DIRECTORY, __ -> Set.of(version), Object::toString);\n \n     versionDirectory.addDirectoryToAll(__ -> diagnosisKeysDirectory);\n+    versionDirectory.addDirectoryToAll(__ -> new IndexDirectoryImpl<>(LocalDate.now().toString(), __ -> Set.of(LocalDate.now().toString()), Object::toString));\n \n     java.io.File outputDirectory = new File(outputPath);\n     clearDirectory(outputDirectory);\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 106,
        "issue_numbers": [
            "5"
        ],
        "base_commit": "23b492fe7b9f0821f2a8c34516cb858efcfaa55b",
        "patch": "diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java\n@@ -1,9 +1,18 @@\n package app.coronawarn.server.common.persistence.repository;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import javax.transaction.Transactional;\n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.stereotype.Repository;\n \n @Repository\n public interface DiagnosisKeyRepository extends JpaRepository<DiagnosisKey, Long> {\n+\n+  /**\n+   * Deletes all entries that have a submission timestamp lesser or equal to the specified one.\n+   *\n+   * @param submissionTimestamp the submission timestamp up to which entries will be deleted.\n+   */\n+  @Transactional\n+  public void deleteBySubmissionTimestampIsLessThanEqual(long submissionTimestamp);\n }\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n@@ -1,7 +1,11 @@\n package app.coronawarn.server.common.persistence.service;\n \n+import static java.time.ZoneOffset.UTC;\n+\n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.common.persistence.repository.DiagnosisKeyRepository;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n import java.util.Collection;\n import java.util.List;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -30,4 +34,18 @@ public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n   public List<DiagnosisKey> getDiagnosisKeys() {\n     return keyRepository.findAll(Sort.by(Sort.Direction.ASC, \"submissionTimestamp\"));\n   }\n+\n+  /**\n+   * Deletes all diagnosis key entries which have a submission timestamp that is older than the\n+   * specified number of days.\n+   *\n+   * @param daysToRetain the number of days until which diagnosis keys will be retained.\n+   */\n+  public void applyRetentionPolicy(int daysToRetain) {\n+    long threshold = LocalDateTime\n+        .ofInstant(Instant.now(), UTC)\n+        .minusDays(daysToRetain)\n+        .toEpochSecond(UTC) / 3600L;\n+    keyRepository.deleteBySubmissionTimestampIsLessThanEqual(threshold);\n+  }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/DiagnosisKeyDistributionRunner.java\n@@ -24,7 +24,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-@Order(2)\n+@Order(3)\n /**\n  * This runner retrieves stored diagnosis keys, the generates and persists the respective diagnosis\n  * key bundles.\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/ExposureConfigurationDistributionRunner.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/ExposureConfigurationDistributionRunner.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/ExposureConfigurationDistributionRunner.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/ExposureConfigurationDistributionRunner.java\n@@ -23,7 +23,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-@Order(1)\n+@Order(2)\n /**\n  * Reads the exposure configuration parameters from the respective file in the class path, then\n  * generates and persists the respective exposure configuration bundle.\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicyRunner.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicyRunner.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicyRunner.java\n@@ -0,0 +1,37 @@\n+package app.coronawarn.server.services.distribution.runner;\n+\n+import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.ApplicationArguments;\n+import org.springframework.boot.ApplicationRunner;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This runner removes any diagnosis keys from the database that were submitted before a configured\n+ * threshold of days.\n+ */\n+@Component\n+@Order(1)\n+public class RetentionPolicyRunner implements ApplicationRunner {\n+\n+  private static final Logger logger = LoggerFactory\n+      .getLogger(RetentionPolicyRunner.class);\n+\n+  @Autowired\n+  private DiagnosisKeyService diagnosisKeyService;\n+\n+  @Value(\"${app.coronawarn.server.services.distribution.retention_days}\")\n+  private Integer rententionDays;\n+\n+  @Override\n+  public void run(ApplicationArguments args) {\n+    diagnosisKeyService.applyRetentionPolicy(rententionDays);\n+\n+    logger.debug(\"Retention policy applied successfully. Deleted all entries older that {} days.\",\n+        rententionDays);\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3DistributionRunner.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3DistributionRunner.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3DistributionRunner.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3DistributionRunner.java\n@@ -16,7 +16,7 @@\n  * This runner will sync the base working directory to the S3.\n  */\n @Component\n-@Order(3)\n+@Order(4)\n public class S3DistributionRunner implements ApplicationRunner {\n \n   private Logger logger = LoggerFactory.getLogger(this.getClass());\ndiff --git a/services/distribution/src/main/resources/application.properties b/services/distribution/src/main/resources/application.properties\n--- a/services/distribution/src/main/resources/application.properties\n+++ b/services/distribution/src/main/resources/application.properties\n@@ -2,6 +2,7 @@ logging.level.org.springframework.web=INFO\n logging.level.app.coronawarn=INFO\n spring.main.web-application-type=NONE\n \n+app.coronawarn.server.services.distribution.retention_days=14\n app.coronawarn.server.services.distribution.version=v1\n app.coronawarn.server.services.distribution.paths.output=out\n app.coronawarn.server.services.distribution.paths.privatekey=classpath:certificates/client/private.pem\n",
        "test_patch": "diff --git a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/TestApplication.java b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/TestApplication.java\nnew file mode 100644\n--- /dev/null\n+++ b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/TestApplication.java\n@@ -0,0 +1,15 @@\n+package app.coronawarn.server.common.persistence;\n+\n+import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@SpringBootApplication\n+@Configuration\n+public class TestApplication {\n+  @Bean\n+  DiagnosisKeyService createDiagnosisKeyService() {\n+    return new DiagnosisKeyService();\n+  }\n+}\ndiff --git a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n@@ -0,0 +1,125 @@\n+package app.coronawarn.server.common.persistence.service;\n+\n+import static java.time.ZoneOffset.UTC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.common.persistence.repository.DiagnosisKeyRepository;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.assertj.core.util.Lists;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+\n+@DataJpaTest\n+public class DiagnosisKeyServiceTest {\n+\n+  @Autowired\n+  private DiagnosisKeyService diagnosisKeyService;\n+\n+  @Autowired\n+  private DiagnosisKeyRepository diagnosisKeyRepository;\n+\n+  @AfterEach\n+  public void tearDown() {\n+    diagnosisKeyRepository.deleteAll();\n+  }\n+\n+  @Test\n+  void testRetrievalForEmptyDB() {\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+    assertDiagnosisKeysEqual(Lists.emptyList(), actKeys);\n+  }\n+\n+  @Test\n+  void testSaveAndRetrieve() {\n+    var expKeys = List.of(buildDiagnosisKeyForSubmissionTimestamp(0L));\n+\n+    diagnosisKeyService.saveDiagnosisKeys(expKeys);\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+\n+    assertDiagnosisKeysEqual(expKeys, actKeys);\n+  }\n+\n+  @Test\n+  void testSortedRetrievalResult() {\n+    var expKeys = new ArrayList<>(List.of(\n+        buildDiagnosisKeyForSubmissionTimestamp(1L),\n+        buildDiagnosisKeyForSubmissionTimestamp(0L)));\n+\n+    diagnosisKeyService.saveDiagnosisKeys(expKeys);\n+\n+    // reverse to match expected sort order\n+    Collections.reverse(expKeys);\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+\n+    assertDiagnosisKeysEqual(expKeys, actKeys);\n+  }\n+\n+  @Test\n+  void testApplyRetentionPolicyForEmptyDb() {\n+    diagnosisKeyService.applyRetentionPolicy(1);\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+    assertDiagnosisKeysEqual(Lists.emptyList(), actKeys);\n+  }\n+\n+  @Test\n+  void testApplyRetentionPolicyForOneNotApplicableEntry() {\n+    var expKeys = List.of(buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusHours(23)));\n+\n+    diagnosisKeyService.saveDiagnosisKeys(expKeys);\n+    diagnosisKeyService.applyRetentionPolicy(1);\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+\n+    assertDiagnosisKeysEqual(expKeys, actKeys);\n+  }\n+\n+  @Test\n+  void testApplyRetentionPolicyForOneApplicableEntry() {\n+    var keys = List.of(buildDiagnosisKeyForDateTime(OffsetDateTime.now(UTC).minusDays(1L)));\n+\n+    diagnosisKeyService.saveDiagnosisKeys(keys);\n+    diagnosisKeyService.applyRetentionPolicy(1);\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+\n+    assertDiagnosisKeysEqual(Lists.emptyList(), actKeys);\n+  }\n+\n+  private void assertDiagnosisKeysEqual(List<DiagnosisKey> expDiagKeys,\n+      List<DiagnosisKey> actDiagKeys) {\n+    assertEquals(expDiagKeys.size(), actDiagKeys.size(), \"Cardinality mismatch\");\n+\n+    for (int i = 0; i < expDiagKeys.size(); i++) {\n+      var expDiagKey = expDiagKeys.get(i);\n+      var actDiagKey = actDiagKeys.get(i);\n+\n+      assertEquals(\n+          expDiagKey.getKeyData(), actDiagKey.getKeyData(), \"keyData mismatch\");\n+      assertEquals(expDiagKey.getRollingStartNumber(), actDiagKey.getRollingStartNumber(),\n+          \"rollingStartNumber mismatch\");\n+      assertEquals(expDiagKey.getRollingPeriod(), actDiagKey.getRollingPeriod(),\n+          \"rollingPeriod mismatch\");\n+      assertEquals(expDiagKey.getTransmissionRiskLevel(), actDiagKey.getTransmissionRiskLevel(),\n+          \"transmissionRiskLevel mismatch\");\n+      assertEquals(expDiagKey.getSubmissionTimestamp(), actDiagKey.getSubmissionTimestamp(),\n+          \"submissionTimestamp mismatch\");\n+    }\n+  }\n+\n+  public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissionTimeStamp) {\n+    return DiagnosisKey.builder()\n+        .withKeyData(new byte[16])\n+        .withRollingStartNumber(0L)\n+        .withRollingPeriod(1L)\n+        .withTransmissionRiskLevel(2)\n+        .withSubmissionTimestamp(submissionTimeStamp).build();\n+  }\n+\n+  public static DiagnosisKey buildDiagnosisKeyForDateTime(OffsetDateTime dateTime) {\n+    return buildDiagnosisKeyForSubmissionTimestamp(dateTime.toEpochSecond() / 3600);\n+  }\n+}\ndiff --git a/common/persistence/src/test/resources/application.properties b/common/persistence/src/test/resources/application.properties\nnew file mode 100644\n--- /dev/null\n+++ b/common/persistence/src/test/resources/application.properties\n@@ -0,0 +1,6 @@\n+spring.flyway.enabled=false\n+spring.jpa.hibernate.ddl-auto=create\n+spring.jpa.properties.hibernate.show_sql=false\n+spring.main.banner-mode=off\n+logging.level.org.springframework=off\n+logging.level.root=off\n\\ No newline at end of file\ndiff --git a/common/persistence/src/test/resources/logback-test.xml b/common/persistence/src/test/resources/logback-test.xml\nnew file mode 100644\n--- /dev/null\n+++ b/common/persistence/src/test/resources/logback-test.xml\n@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration>\n+  <include resource=\"org/springframework/boot/logging/logback/base.xml\" />\n+  <logger name=\"org.springframework\" level=\"off\"/>\n+  <logger name=\"root\" level=\"ERROR\"/>\n+</configuration>\ndiff --git a/services/distribution/src/test/resources/application.properties b/services/distribution/src/test/resources/application.properties\n--- a/services/distribution/src/test/resources/application.properties\n+++ b/services/distribution/src/test/resources/application.properties\n@@ -3,6 +3,7 @@ logging.level.org.springframework=off\n logging.level.root=off\n spring.main.banner-mode=off\n \n+app.coronawarn.server.services.distribution.retention_days=14\n app.coronawarn.server.services.distribution.version=v1\n app.coronawarn.server.services.distribution.paths.output=out\n app.coronawarn.server.services.distribution.paths.privatekey=classpath:certificates/client/private.pem\n",
        "problem_statement": "Set Retention Days to 14\nAny key data that is associated to a point in time older than 14 days shall be removed from the database and will also be removed from the CDN and therefore the index file.\n",
        "hints_text": "",
        "created_at": "2020-05-14T23:08:17Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-350",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nBlank URL in RiskScoreClassificationValidator\nIn `app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidator#validateUrl` [(link to source code)](https://github.com/corona-warn-app/cwa-server/blob/63dda0c2a5e1ff09fe998dd05637d76dea2e3833/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java#L89) an empty URL does not lead to an error. This is not in line with e.g. validation of a label. In case the label is blank, an error is added. Maybe you can check that this is implemented as intended.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"b69ab69f-9823-4549-8961-c41sa74b2f36\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the certificate and private key for the distribution service, the paths need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108   * `VAULT_FILESIGNING_CERT` should be the path to the certificate, example available in `<repo-root>/docker-compose-test-secrets/certificate.cert`\n109 \n110 #### Build\n111 \n112 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n113 \n114 #### Run\n115 \n116 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n117 \n118 If you want to start the submission service, for example, you start it as follows:\n119 \n120 ```bash\n121   cd services/submission/\n122   mvn spring-boot:run\n123 ```\n124 \n125 #### Debugging\n126 \n127 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n128 \n129 ```bash\n130 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n131 ```\n132 \n133 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n134 \n135 ## Service APIs\n136 \n137 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n138 \n139 Service      | OpenAPI Specification\n140 -------------|-------------\n141 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n142 Distribution Service      | [services/distribution/api_v1.json)](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n143 \n144 ## Spring Profiles\n145 \n146 ### Distribution\n147 \n148 Profile      | Effect\n149 -------------|-------------\n150 `dev`        | Turns the log level to `DEBUG`.\n151 `cloud`      | Removes default values for the `datasource` and `objectstore` configurations.\n152 `demo`       | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten.\n153 `testdata`   | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n154 \n155 ### Submission\n156 \n157 Profile      | Effect\n158 -------------|-------------\n159 `dev`        | Turns the log level to `DEBUG`.\n160 `cloud`      | Removes default values for the `datasource` configuration.\n161 \n162 ## Documentation\n163 \n164 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n165 \n166 ## Support and Feedback\n167 \n168 The following channels are available for discussions, feedback, and support requests:\n169 \n170 | Type                     | Channel                                                |\n171 | ------------------------ | ------------------------------------------------------ |\n172 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n173 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n174 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n175 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n176 \n177 ## How to Contribute\n178 \n179 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n180 \n181 ## Contributors\n182 \n183 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n184 \n185 ## Repositories\n186 \n187 The following public repositories are currently available for the Corona-Warn-App:\n188 \n189 | Repository          | Description                                                           |\n190 | ------------------- | --------------------------------------------------------------------- |\n191 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n192 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n193 | [cwa-verification-server] | Backend implementation of the verification process|\n194 \n195 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n196 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n197 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n198 [Postgres]: https://www.postgresql.org/\n199 [HSQLDB]: http://hsqldb.org/\n200 [Zenko CloudServer]: https://github.com/scality/cloudserver\n201 \n202 ## Licensing\n203 \n204 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n205 \n206 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n207 \n208 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n209 \n210 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n211 \n[end of README.md]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n21 \n22 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.BLANK_LABEL;\n23 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_PARTITIONING;\n24 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_URL;\n25 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n26 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n27 \n28 import app.coronawarn.server.common.protocols.internal.RiskScoreClass;\n29 import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n30 import java.net.MalformedURLException;\n31 import java.net.URL;\n32 \n33 /**\n34  * The RiskScoreClassificationValidator validates the values of an associated {@link RiskScoreClassification} instance.\n35  */\n36 public class RiskScoreClassificationValidator extends ConfigurationValidator {\n37 \n38   private final RiskScoreClassification riskScoreClassification;\n39 \n40   public RiskScoreClassificationValidator(RiskScoreClassification riskScoreClassification) {\n41     this.riskScoreClassification = riskScoreClassification;\n42   }\n43 \n44   /**\n45    * Performs a validation of the associated {@link RiskScoreClassification} instance and returns information about\n46    * validation failures.\n47    *\n48    * @return The ValidationResult instance, containing information about possible errors.\n49    */\n50   @Override\n51   public ValidationResult validate() {\n52     errors = new ValidationResult();\n53 \n54     validateValues();\n55     validateValueRangeCoverage();\n56 \n57     return errors;\n58   }\n59 \n60   private void validateValues() {\n61     for (RiskScoreClass riskScoreClass : riskScoreClassification.getRiskClassesList()) {\n62       int minRiskLevel = riskScoreClass.getMin();\n63       int maxRiskLevel = riskScoreClass.getMax();\n64 \n65       validateLabel(riskScoreClass.getLabel());\n66       validateRiskScoreValueBounds(minRiskLevel);\n67       validateRiskScoreValueBounds(maxRiskLevel);\n68       validateUrl(riskScoreClass.getUrl());\n69 \n70       if (minRiskLevel > maxRiskLevel) {\n71         errors.add(new RiskScoreClassificationValidationError(\n72             \"minRiskLevel, maxRiskLevel\", minRiskLevel + \", \" + maxRiskLevel, MIN_GREATER_THAN_MAX));\n73       }\n74     }\n75   }\n76 \n77   private void validateLabel(String label) {\n78     if (label.isBlank()) {\n79       errors.add(new RiskScoreClassificationValidationError(\"label\", label, BLANK_LABEL));\n80     }\n81   }\n82 \n83   private void validateRiskScoreValueBounds(int value) {\n84     if (!RiskScoreValidator.isInBounds(value)) {\n85       errors.add(new RiskScoreClassificationValidationError(\"minRiskLevel/maxRiskLevel\", value, VALUE_OUT_OF_BOUNDS));\n86     }\n87   }\n88 \n89   private void validateUrl(String url) {\n90     if (!url.isBlank()) {\n91       try {\n92         new URL(url);\n93       } catch (MalformedURLException e) {\n94         errors.add(new RiskScoreClassificationValidationError(\"url\", url, INVALID_URL));\n95       }\n96     }\n97   }\n98 \n99   private void validateValueRangeCoverage() {\n100     int partitionSum = riskScoreClassification.getRiskClassesList().stream()\n101         .mapToInt(riskScoreClass -> (riskScoreClass.getMax() - riskScoreClass.getMin() + 1))\n102         .sum();\n103 \n104     if (partitionSum != ParameterSpec.RISK_SCORE_MAX + 1) {\n105       errors.add(new RiskScoreClassificationValidationError(\"covered value range\", partitionSum, INVALID_PARTITIONING));\n106     }\n107   }\n108 }\n109 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\n@@ -78,7 +78,7 @@\n    * @param label The label to validate.\n    */\n   private void validateLabel(String label) {\n-    if (label.isBlank()) {\n+    if (label == null || label.isBlank()) {\n       errors.add(new RiskScoreClassificationValidationError(\"label\", label, BLANK_LABEL));\n     }\n   }\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\n@@ -78,7 +78,7 @@\n    * @param label The label to validate.\n    */\n   private void validateLabel(String label) {\n-    if (label.isBlank()) {\n+    if (label == null || label.isBlank()) {\n       errors.add(new RiskScoreClassificationValidationError(\"label\", label, BLANK_LABEL));\n     }\n   }\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 350,
        "issue_numbers": [
            "341"
        ],
        "base_commit": "8d8a0a5e16bc252364812017a85418b054d739f7",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\n@@ -87,12 +87,10 @@ private void validateRiskScoreValueBounds(int value) {\n   }\n \n   private void validateUrl(String url) {\n-    if (!url.isBlank()) {\n-      try {\n-        new URL(url);\n-      } catch (MalformedURLException e) {\n-        errors.add(new RiskScoreClassificationValidationError(\"url\", url, INVALID_URL));\n-      }\n+    try {\n+      new URL(url.trim());\n+    } catch (MalformedURLException e) {\n+      errors.add(new RiskScoreClassificationValidationError(\"url\", url, INVALID_URL));\n     }\n   }\n \n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n@@ -39,19 +39,19 @@ class RiskScoreClassificationValidatorTest {\n \n   private final static int MAX_SCORE = ParameterSpec.RISK_SCORE_MAX;\n   private final static String VALID_LABEL = \"myLabel\";\n-  private final static String VALID_URL = \"\";\n+  private final static String VALID_URL = \"https://www.my.url\";\n \n   @ParameterizedTest\n   @ValueSource(strings = {\"\", \" \"})\n   void failsForBlankLabels(String invalidLabel) {\n-    var validator = buildValidator(buildRiskClass(invalidLabel, 0, MAX_SCORE, \"\"));\n+    var validator = buildValidator(buildRiskClass(invalidLabel, 0, MAX_SCORE, VALID_URL));\n     var expectedResult = buildExpectedResult(buildError(\"label\", invalidLabel, ErrorType.BLANK_LABEL));\n \n     assertThat(validator.validate()).isEqualTo(expectedResult);\n   }\n \n   @ParameterizedTest\n-  @ValueSource(strings = {\"invalid.Url\", \"invalid-url\", \"$$$://invalid.url\"})\n+  @ValueSource(strings = {\"invalid.Url\", \"invalid-url\", \"$$$://invalid.url\", \"\", \" \"})\n   void failsForInvalidUrl(String invalidUrl) {\n     var validator = buildValidator(buildRiskClass(VALID_LABEL, 0, MAX_SCORE, invalidUrl));\n     var expectedResult = buildExpectedResult(buildError(\"url\", invalidUrl, ErrorType.INVALID_URL));\n@@ -133,10 +133,8 @@ void doesNotFailForValidClassification(RiskScoreClassification validClassificati\n \n   private static Stream<Arguments> createValidClassifications() {\n     return Stream.of(\n-        // blank url\n-        buildClassification(buildRiskClass(VALID_LABEL, 0, MAX_SCORE, \"\")),\n-        // legit url\n-        buildClassification(buildRiskClass(VALID_LABEL, 0, MAX_SCORE, \"http://www.sap.com\")),\n+        // valid url\n+        buildClassification(buildRiskClass(VALID_LABEL, 0, MAX_SCORE, VALID_URL)),\n         // [0:MAX_SCORE/2][MAX_SCORE/2:MAX_SCORE]\n         buildClassification(\n             buildRiskClass(VALID_LABEL, 0, MAX_SCORE / 2, VALID_URL),\n",
        "problem_statement": "Blank URL in RiskScoreClassificationValidator\nIn `app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidator#validateUrl` [(link to source code)](https://github.com/corona-warn-app/cwa-server/blob/63dda0c2a5e1ff09fe998dd05637d76dea2e3833/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java#L89) an empty URL does not lead to an error. This is not in line with e.g. validation of a label. In case the label is blank, an error is added. Maybe you can check that this is implemented as intended.\n",
        "hints_text": "Confirmed URL should **not** be empty - It should be a valid URL with http/https as allowed protocol",
        "created_at": "2020-05-27T19:55:53Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-642",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\n[MINOR] Incorrect value range in attenuation risk parameter\n## Describe the bug\r\nThe `AttenuationRiskParameters` proto message (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto)) is defined as follows:\r\n```proto3\r\nmessage AttenuationRiskParameters {\r\n  RiskLevel gt_73_dbm = 1;            // A > 73 dBm, lowest risk\r\n  RiskLevel gt_63_le_73_dbm = 2;      // 63 < A <= 73 dBm\r\n  RiskLevel gt_51_le_63_dbm = 3;      // 51 < A <= 63 dBm\r\n  RiskLevel gt_33_le_51_dbm = 4;      // 33 < A <= 51 dBm\r\n  RiskLevel gt_27_le_33_dbm = 5;      // 27 < A <= 33 dBm\r\n  RiskLevel gt_15_le_27_dbm = 6;      // 15 < A <= 27 dBm\r\n  RiskLevel gt_10_le_15_dbm = 7;      // 10 < A <= 15 dBm\r\n  RiskLevel lt_10_dbm = 8;            // A <= 10 dBm, highest risk\r\n}\r\n```\r\n\r\nThere is no value range that includes an attenuation of **exactly** 10dBm.\r\n\r\n## Expected behaviour\r\nAccording to the [Google/Apple spec](https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration), the last value range should be \"less than or equal to 10dBm\" (`le_10_dbm`):\r\n\r\n![image](https://user-images.githubusercontent.com/8984460/86034663-57f91580-ba3b-11ea-9444-e5020e6dcc46.png)\r\n\r\n## Possible Fix\r\n- Correct the last attenuation value range according to spec\r\n- Update dependent code/configuration respectively ([here](https://github.com/corona-warn-app/cwa-server/blob/b8afdce9a3bc8fd927fe4ec9be2e910ee8f1635d/services/distribution/src/test/resources/objectstore/publisher/examplefile), [here](https://github.com/corona-warn-app/cwa-server/tree/b8afdce9a3bc8fd927fe4ec9be2e910ee8f1635d/services/distribution/src/test/resources/parameters), [here](https://github.com/corona-warn-app/cwa-server/tree/d6c0ad58f6473bd55af9a0cbe2c0cc8db3914af6/services/distribution/src/main/resources/master-config) and possibly more).\r\n\r\n## Additional context\r\n- This \"bug\" doesn't have any technical implications and should only be fixed for consistency\r\n- Downwards-compatibility of the proto messages should not be infringed by the proposed change\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/ARCHITECTURE.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env``` in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `localhost:8001` <br> `postgres:5432` (from containerized pgadmin) <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is `edc07f08-a1aa-11ea-bb37-0242ac130002`.\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 If you are already running a local Postgres, you need to create a database `cwa` and run the following setup scripts:\n101 \n102 * Create the different CWA roles first by executing [create-roles.sql](setup/create-roles.sql).\n103 * Create local database users for the specific roles by running [create-users.sql](./local-setup/create-users.sql).\n104 * It is recommended to also run [enable-test-data-docker-compose.sql](./local-setup/enable-test-data-docker-compose.sql)\n105 , which enables the test data generation profile. If you already had CWA running before and an existing `diagnosis-key`\n106 table on your database, you need to run [enable-test-data.sql](./local-setup/enable-test-data.sql) instead.\n107 \n108 You can also use `docker-compose` to start Postgres and Zenko. If you do that, you have to\n109 set the following environment-variables when running the Spring project:\n110 \n111 For the distribution module:\n112 \n113 ```bash\n114 POSTGRESQL_SERVICE_PORT=8001\n115 VAULT_FILESIGNING_SECRET=</path/to/your/private_key>\n116 SPRING_PROFILES_ACTIVE=signature-dev,disable-ssl-client-postgres\n117 ```\n118 \n119 For the submission module:\n120 \n121 ```bash\n122 POSTGRESQL_SERVICE_PORT=8001\n123 SPRING_PROFILES_ACTIVE=disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n124 ```\n125 \n126 #### Configure\n127 \n128 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n129 \n130 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n131 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n132 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n133   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n134 \n135 #### Build\n136 \n137 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n138 \n139 #### Run\n140 \n141 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n142 \n143 If you want to start the submission service, for example, you start it as follows:\n144 \n145 ```bash\n146   cd services/submission/\n147   mvn spring-boot:run\n148 ```\n149 \n150 #### Debugging\n151 \n152 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n153 \n154 ```bash\n155 mvn spring-boot:run -Dspring.profiles.active=dev\n156 ```\n157 \n158 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n159 \n160 ## Service APIs\n161 \n162 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n163 \n164 Service                   | OpenAPI Specification\n165 --------------------------|-------------\n166 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n167 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n168 \n169 ## Spring Profiles\n170 \n171 ### Distribution\n172 \n173 See [Distribution Service - Spring Profiles](/docs/DISTRIBUTION.md#spring-profiles).\n174 \n175 ### Submission\n176 \n177 See [Submission Service - Spring Profiles](/docs/SUBMISSION.md#spring-profiles).\n178 \n179 ## Documentation\n180 \n181 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n182 \n183 The documentation for cwa-server can be found under the [/docs](./docs) folder.\n184 \n185 The JavaDoc documentation for cwa-server is hosted by Github Pages at [https://corona-warn-app.github.io/cwa-server](https://corona-warn-app.github.io/cwa-server).\n186 \n187 ## Support and Feedback\n188 \n189 The following channels are available for discussions, feedback, and support requests:\n190 \n191 | Type                     | Channel                                                |\n192 | ------------------------ | ------------------------------------------------------ |\n193 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n194 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n195 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n196 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n197 \n198 ## How to Contribute\n199 \n200 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n201 \n202 ## Contributors\n203 \n204 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n205 \n206 ## Repositories\n207 \n208 The following public repositories are currently available for the Corona-Warn-App:\n209 \n210 | Repository          | Description                                                           |\n211 | ------------------- | --------------------------------------------------------------------- |\n212 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n213 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n214 | [cwa-verification-server] | Backend implementation of the verification process|\n215 \n216 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n217 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n218 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n219 [Postgres]: https://www.postgresql.org/\n220 [HSQLDB]: http://hsqldb.org/\n221 [Zenko CloudServer]: https://github.com/scality/cloudserver\n222 \n223 ## Licensing\n224 \n225 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n226 \n227 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n228 \n229 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n230 \n231 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n232 \n[end of README.md]\n[start of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto]\n1 // See page 15:\n2 // https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ExposureNotification-FrameworkDocumentationv1.2.pdf\n3 syntax = \"proto3\";\n4 package app.coronawarn.server.common.protocols.internal;\n5 option java_package = \"app.coronawarn.server.common.protocols.internal\";\n6 option java_multiple_files = true;\n7 import \"app/coronawarn/server/common/protocols/internal/risk_level.proto\";\n8 \n9 message RiskScoreParameters {\n10 \n11   // App-specific mapping\n12   TransmissionRiskParameters transmission = 1;\n13   double transmission_weight= 2;\n14 \n15   DurationRiskParameters duration = 3;\n16   double duration_weight= 4;\n17 \n18   DaysSinceLastExposureRiskParameters days_since_last_exposure = 5;\n19   double days_weight= 6;\n20 \n21   AttenuationRiskParameters attenuation = 7;\n22   double attenuation_weight= 8;\n23 \n24   message TransmissionRiskParameters {\n25     RiskLevel app_defined_1 = 1;\n26     RiskLevel app_defined_2 = 2;\n27     RiskLevel app_defined_3 = 3;\n28     RiskLevel app_defined_4 = 4;\n29     RiskLevel app_defined_5 = 5;\n30     RiskLevel app_defined_6 = 6;\n31     RiskLevel app_defined_7 = 7;\n32     RiskLevel app_defined_8 = 8;\n33   }\n34   message DurationRiskParameters {\n35     RiskLevel eq_0_min = 1;             // D = 0 min, lowest risk\n36     RiskLevel gt_0_le_5_min = 2;        // 0 < D <= 5 min\n37     RiskLevel gt_5_le_10_min = 3;       // 5 < D <= 10 min\n38     RiskLevel gt_10_le_15_min = 4;      // 10 < D <= 15 min\n39     RiskLevel gt_15_le_20_min = 5;      // 15 < D <= 20 min\n40     RiskLevel gt_20_le_25_min = 6;      // 20 < D <= 25 min\n41     RiskLevel gt_25_le_30_min = 7;      // 25 < D <= 30 min\n42     RiskLevel gt_30_min = 8;            // > 30 min, highest risk\n43   }\n44   message DaysSinceLastExposureRiskParameters {\n45     RiskLevel ge_14_days = 1;           // D >= 14 days, lowest risk\n46     RiskLevel ge_12_lt_14_days = 2;     // 12 <= D < 14 days\n47     RiskLevel ge_10_lt_12_days = 3;     // 10 <= D < 12 days\n48     RiskLevel ge_8_lt_10_days = 4;      // 8 <= D < 10 days\n49     RiskLevel ge_6_lt_8_days = 5;       // 6 <= D < 8 days\n50     RiskLevel ge_4_lt_6_days = 6;       // 4 <= D < 6 days\n51     RiskLevel ge_2_lt_4_days = 7;       // 2 <= D < 4 days\n52     RiskLevel ge_0_lt_2_days = 8;       // 0 <= D < 2 days, highest risk\n53   }\n54   message AttenuationRiskParameters {\n55     RiskLevel gt_73_dbm = 1;            // A > 73 dBm, lowest risk\n56     RiskLevel gt_63_le_73_dbm = 2;      // 63 < A <= 73 dBm\n57     RiskLevel gt_51_le_63_dbm = 3;      // 51 < A <= 63 dBm\n58     RiskLevel gt_33_le_51_dbm = 4;      // 33 < A <= 51 dBm\n59     RiskLevel gt_27_le_33_dbm = 5;      // 27 < A <= 33 dBm\n60     RiskLevel gt_15_le_27_dbm = 6;      // 15 < A <= 27 dBm\n61     RiskLevel gt_10_le_15_dbm = 7;      // 10 < A <= 15 dBm\n62     RiskLevel lt_10_dbm = 8;            // A <= 10 dBm, highest risk\n63   }\n64 }\n[end of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto]\n[start of services/distribution/src/main/resources/master-config/exposure-config.yaml]\n1 # This is the Exposure Config master file which defines the risk parameters for the mobile clients\n2 # Change this file with caution.\n3 #\n4 # Weights must be in range of 0.001 to 100\n5 # Parameter Scores must be in range of 0 to 8.\n6 #\n7 # Further documentation:\n8 # https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration\n9 #\n10 \n11 # Weight Section\n12 \n13 transmission_weight: 50\n14 duration_weight: 50\n15 attenuation_weight: 50\n16 days_weight: 20\n17 \n18 # Parameters Section\n19 \n20 transmission:\n21   app_defined_1: 1\n22   app_defined_2: 2\n23   app_defined_3: 3\n24   app_defined_4: 4\n25   app_defined_5: 5\n26   app_defined_6: 6\n27   app_defined_7: 7\n28   app_defined_8: 8\n29 \n30 duration:\n31   eq_0_min: 0\n32   gt_0_le_5_min: 0\n33   gt_5_le_10_min: 0\n34   gt_10_le_15_min: 1\n35   gt_15_le_20_min: 1\n36   gt_20_le_25_min: 1\n37   gt_25_le_30_min: 1\n38   gt_30_min: 1\n39 \n40 days_since_last_exposure:\n41   ge_14_days: 5\n42   ge_12_lt_14_days: 5\n43   ge_10_lt_12_days: 5\n44   ge_8_lt_10_days: 5\n45   ge_6_lt_8_days: 5\n46   ge_4_lt_6_days: 5\n47   ge_2_lt_4_days: 5\n48   ge_0_lt_2_days: 5\n49 \n50 attenuation:\n51   gt_73_dbm: 0\n52   gt_63_le_73_dbm: 1\n53   gt_51_le_63_dbm: 1\n54   gt_33_le_51_dbm: 1\n55   gt_27_le_33_dbm: 1\n56   gt_15_le_27_dbm: 1\n57   gt_10_le_15_dbm: 1\n58   lt_10_dbm: 1\n59 \n[end of services/distribution/src/main/resources/master-config/exposure-config.yaml]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\n+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\n@@ -61,7 +61,7 @@\n     RiskLevel gt_15_le_27_dbm = 6;      // 15 < A <= 27 dBm\n     RiskLevel gt_10_le_15_dbm = 7;      // 10 < A <= 15 dBm\n     RiskLevel lt_10_dbm = 8;            // A <= 10 dBm, highest risk\n-}\n+  RiskLevel le_10_dbm = 9;            // A <= 10 dBm, highest risk\n+}\n</patch>",
        "model_patch": "\n--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\n+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\n@@ -61,7 +61,7 @@\n     RiskLevel gt_15_le_27_dbm = 6;      // 15 < A <= 27 dBm\n     RiskLevel gt_10_le_15_dbm = 7;      // 10 < A <= 15 dBm\n     RiskLevel lt_10_dbm = 8;            // A <= 10 dBm, highest risk\n-}\n+  RiskLevel le_10_dbm = 9;            // A <= 10 dBm, highest risk\n+}\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 642,
        "issue_numbers": [
            "638"
        ],
        "base_commit": "fa9adc6631233172684910191efdf00429799365",
        "patch": "diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\n--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\n+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\n@@ -59,6 +59,6 @@ message RiskScoreParameters {\n     RiskLevel gt_27_le_33_dbm = 5;      // 27 < A <= 33 dBm\n     RiskLevel gt_15_le_27_dbm = 6;      // 15 < A <= 27 dBm\n     RiskLevel gt_10_le_15_dbm = 7;      // 10 < A <= 15 dBm\n-    RiskLevel lt_10_dbm = 8;            // A <= 10 dBm, highest risk\n+    RiskLevel le_10_dbm = 8;            // A <= 10 dBm, highest risk\n   }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/services/distribution/src/main/resources/master-config/exposure-config.yaml b/services/distribution/src/main/resources/master-config/exposure-config.yaml\n--- a/services/distribution/src/main/resources/master-config/exposure-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/exposure-config.yaml\n@@ -55,4 +55,4 @@ attenuation:\n   gt_27_le_33_dbm: 1\n   gt_15_le_27_dbm: 1\n   gt_10_le_15_dbm: 1\n-  lt_10_dbm: 1\n+  le_10_dbm: 1\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoaderTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoaderTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoaderTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoaderTest.java\n@@ -40,8 +40,9 @@ void okFile() throws UnableToLoadFileException {\n   @ValueSource(strings = {\n       \"configtests/app-config_empty.yaml\",\n       \"configtests/wrong_file.yaml\",\n-      \"configtests/broken_syntax.yaml\",\n-      \"file_does_not_exist_anywhere.yaml\"\n+      \"configtests/app-config_broken_syntax.yaml\",\n+      \"configtests/naming_mismatch.yaml\",\n+      \"configtests/file_does_not_exist_anywhere.yaml\"\n   })\n   void throwsLoadFailure(String fileName) {\n     assertThatExceptionOfType(UnableToLoadFileException.class).isThrownBy(() -> loadApplicationConfiguration(fileName));\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n@@ -22,8 +22,7 @@\n \n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ExposureConfigurationValidator.CONFIG_PREFIX;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.buildError;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationError.ErrorType.TOO_MANY_DECIMAL_PLACES;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationError.ErrorType.*;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import app.coronawarn.server.common.protocols.internal.RiskLevel;\ndiff --git a/services/distribution/src/test/resources/configtests/exposure-config_ok.yaml b/services/distribution/src/test/resources/configtests/exposure-config_ok.yaml\n--- a/services/distribution/src/test/resources/configtests/exposure-config_ok.yaml\n+++ b/services/distribution/src/test/resources/configtests/exposure-config_ok.yaml\n@@ -55,4 +55,4 @@ attenuation:\n   gt_27_le_33_dbm: 5\n   gt_15_le_27_dbm: 6\n   gt_10_le_15_dbm: 7\n-  lt_10_dbm: 8\n\\ No newline at end of file\n+  le_10_dbm: 8\ndiff --git a/services/distribution/src/test/resources/configtests/naming_mismatch.yaml b/services/distribution/src/test/resources/configtests/naming_mismatch.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/configtests/naming_mismatch.yaml\n@@ -0,0 +1,43 @@\n+transmission_weight: 10.001\n+duration_weight: 0.001\n+attenuation_weight: 100\n+\n+transmission:\n+  foo: 2 # \"foo\" does not exist in proto\n+  app_defined_2: 2\n+  app_defined_3: 3\n+  app_defined_4: 4\n+  app_defined_5: 5\n+  app_defined_6: 6\n+  app_defined_7: 7\n+  app_defined_8: 8\n+\n+duration:\n+  eq_0_min: 1\n+  gt_0_le_5_min: 2\n+  gt_5_le_10_min: 3\n+  gt_10_le_15_min: 4\n+  gt_15_le_20_min: 5\n+  gt_20_le_25_min: 6\n+  gt_25_le_30_min: 7\n+  gt_30_min: 8\n+\n+days_since_last_exposure:\n+  ge_14_days: 1\n+  ge_12_lt_14_days: 2\n+  ge_10_lt_12_days: 3\n+  ge_8_lt_10_days: 4\n+  ge_6_lt_8_days: 5\n+  ge_4_lt_6_days: 6\n+  ge_2_lt_4_days: 7\n+  ge_0_lt_2_days: 8\n+\n+attenuation:\n+  gt_73_dbm: 1\n+  gt_63_le_73_dbm: 2\n+  gt_51_le_63_dbm: 3\n+  gt_33_le_51_dbm: 4\n+  gt_27_le_33_dbm: 5\n+  gt_15_le_27_dbm: 6\n+  gt_10_le_15_dbm: 7\n+  le_10_dbm: 8\ndiff --git a/services/distribution/src/test/resources/objectstore/publisher/examplefile b/services/distribution/src/test/resources/objectstore/publisher/examplefile\n--- a/services/distribution/src/test/resources/objectstore/publisher/examplefile\n+++ b/services/distribution/src/test/resources/objectstore/publisher/examplefile\n@@ -43,4 +43,4 @@ attenuation:\n   gt_27_le_33_dbm: 5\n   gt_15_le_27_dbm: 6\n   gt_10_le_15_dbm: 7\n-  lt_10_dbm: 8\n\\ No newline at end of file\n+  le_10_dbm: 8\ndiff --git a/services/distribution/src/test/resources/parameters/all_ok.yaml b/services/distribution/src/test/resources/parameters/all_ok.yaml\n--- a/services/distribution/src/test/resources/parameters/all_ok.yaml\n+++ b/services/distribution/src/test/resources/parameters/all_ok.yaml\n@@ -43,4 +43,4 @@ attenuation:\n   gt_27_le_33_dbm: 5\n   gt_15_le_27_dbm: 6\n   gt_10_le_15_dbm: 7\n-  lt_10_dbm: 8\n\\ No newline at end of file\n+  le_10_dbm: 8\ndiff --git a/services/distribution/src/test/resources/parameters/broken_syntax.yaml b/services/distribution/src/test/resources/parameters/broken_syntax.yaml\n--- a/services/distribution/src/test/resources/parameters/broken_syntax.yaml\n+++ b/services/distribution/src/test/resources/parameters/broken_syntax.yaml\n@@ -40,4 +40,4 @@ attenuation:\n   gt_27_le_33_dbm: 5\n   gt_15_le_27_dbm: 6\n   gt_10_le_15_dbm: 7\n-  lt_10_dbm: 8\n\\ No newline at end of file\n+  le_10_dbm: 8\ndiff --git a/services/distribution/src/test/resources/parameters/partly_filled.yaml b/services/distribution/src/test/resources/parameters/partly_filled.yaml\n--- a/services/distribution/src/test/resources/parameters/partly_filled.yaml\n+++ b/services/distribution/src/test/resources/parameters/partly_filled.yaml\n@@ -43,4 +43,4 @@ attenuation:\n   gt_27_le_33_dbm: 5\n   gt_15_le_27_dbm: 6\n   gt_10_le_15_dbm: 7\n-  lt_10_dbm: 8\n\\ No newline at end of file\n+  le_10_dbm: 8\ndiff --git a/services/distribution/src/test/resources/parameters/score_too_high.yaml b/services/distribution/src/test/resources/parameters/score_too_high.yaml\n--- a/services/distribution/src/test/resources/parameters/score_too_high.yaml\n+++ b/services/distribution/src/test/resources/parameters/score_too_high.yaml\n@@ -40,4 +40,4 @@ attenuation:\n   gt_27_le_33_dbm: 5\n   gt_15_le_27_dbm: 6\n   gt_10_le_15_dbm: 7\n-  lt_10_dbm: 8\n\\ No newline at end of file\n+  le_10_dbm: 8\ndiff --git a/services/distribution/src/test/resources/parameters/weight_negative.yaml b/services/distribution/src/test/resources/parameters/weight_negative.yaml\n--- a/services/distribution/src/test/resources/parameters/weight_negative.yaml\n+++ b/services/distribution/src/test/resources/parameters/weight_negative.yaml\n@@ -41,4 +41,4 @@ attenuation:\n   gt_27_le_33_dbm: 5\n   gt_15_le_27_dbm: 6\n   gt_10_le_15_dbm: 7\n-  lt_10_dbm: 8\n\\ No newline at end of file\n+  le_10_dbm: 8\ndiff --git a/services/distribution/src/test/resources/parameters/weight_ok.yaml b/services/distribution/src/test/resources/parameters/weight_ok.yaml\n--- a/services/distribution/src/test/resources/parameters/weight_ok.yaml\n+++ b/services/distribution/src/test/resources/parameters/weight_ok.yaml\n@@ -40,4 +40,4 @@ attenuation:\n   gt_27_le_33_dbm: 5\n   gt_15_le_27_dbm: 6\n   gt_10_le_15_dbm: 7\n-  lt_10_dbm: 8\n\\ No newline at end of file\n+  le_10_dbm: 8\ndiff --git a/services/distribution/src/test/resources/parameters/weight_too_high.yaml b/services/distribution/src/test/resources/parameters/weight_too_high.yaml\n--- a/services/distribution/src/test/resources/parameters/weight_too_high.yaml\n+++ b/services/distribution/src/test/resources/parameters/weight_too_high.yaml\n@@ -40,4 +40,4 @@ attenuation:\n   gt_27_le_33_dbm: 5\n   gt_15_le_27_dbm: 6\n   gt_10_le_15_dbm: 7\n-  lt_10_dbm: 8\n\\ No newline at end of file\n+  le_10_dbm: 8\n",
        "problem_statement": "[MINOR] Incorrect value range in attenuation risk parameter\n## Describe the bug\r\nThe `AttenuationRiskParameters` proto message (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto)) is defined as follows:\r\n```proto3\r\nmessage AttenuationRiskParameters {\r\n  RiskLevel gt_73_dbm = 1;            // A > 73 dBm, lowest risk\r\n  RiskLevel gt_63_le_73_dbm = 2;      // 63 < A <= 73 dBm\r\n  RiskLevel gt_51_le_63_dbm = 3;      // 51 < A <= 63 dBm\r\n  RiskLevel gt_33_le_51_dbm = 4;      // 33 < A <= 51 dBm\r\n  RiskLevel gt_27_le_33_dbm = 5;      // 27 < A <= 33 dBm\r\n  RiskLevel gt_15_le_27_dbm = 6;      // 15 < A <= 27 dBm\r\n  RiskLevel gt_10_le_15_dbm = 7;      // 10 < A <= 15 dBm\r\n  RiskLevel lt_10_dbm = 8;            // A <= 10 dBm, highest risk\r\n}\r\n```\r\n\r\nThere is no value range that includes an attenuation of **exactly** 10dBm.\r\n\r\n## Expected behaviour\r\nAccording to the [Google/Apple spec](https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration), the last value range should be \"less than or equal to 10dBm\" (`le_10_dbm`):\r\n\r\n![image](https://user-images.githubusercontent.com/8984460/86034663-57f91580-ba3b-11ea-9444-e5020e6dcc46.png)\r\n\r\n## Possible Fix\r\n- Correct the last attenuation value range according to spec\r\n- Update dependent code/configuration respectively ([here](https://github.com/corona-warn-app/cwa-server/blob/b8afdce9a3bc8fd927fe4ec9be2e910ee8f1635d/services/distribution/src/test/resources/objectstore/publisher/examplefile), [here](https://github.com/corona-warn-app/cwa-server/tree/b8afdce9a3bc8fd927fe4ec9be2e910ee8f1635d/services/distribution/src/test/resources/parameters), [here](https://github.com/corona-warn-app/cwa-server/tree/d6c0ad58f6473bd55af9a0cbe2c0cc8db3914af6/services/distribution/src/main/resources/master-config) and possibly more).\r\n\r\n## Additional context\r\n- This \"bug\" doesn't have any technical implications and should only be fixed for consistency\r\n- Downwards-compatibility of the proto messages should not be infringed by the proposed change\n",
        "hints_text": "",
        "created_at": "2020-07-01T11:58:13Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-299",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nRKI: Adjust Risk Score Parameters in master config\nRKI decided for the following risk score parameter values:\r\n\r\n```\r\n1       2       3       4       5       6       7       8 // Bucket No.\r\n----------------------------------------------------------\r\n0       1       2       4       5       7       8       8 // Duration\r\n0       0       1       2       5       7       8       8 // Attenuation\r\n1       1       1       1       2       6       8       6 // Days\r\n1       2       3       4       5       6       7       8 // Transmission Risk \r\n```\r\n\n\n</issue>\n\n<code>\n[start of README.md]\n1 <h1 align=\"center\">\n2     Corona-Warn-App Server\n3 </h1>\n4 \n5 <p align=\"center\">\n6     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n9         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n10         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n11     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n12 </p>\n13 \n14 <p align=\"center\">\n15   <a href=\"#development\">Development</a> \u2022\n16   <a href=\"#service-apis\">Service APIs</a> \u2022\n17   <a href=\"#documentation\">Documentation</a> \u2022\n18   <a href=\"#support-and-feedback\">Support</a> \u2022\n19   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n20   <a href=\"#contributors\">Contributors</a> \u2022\n21   <a href=\"#repositories\">Repositories</a> \u2022\n22   <a href=\"#licensing\">Licensing</a>\n23 </p>\n24 \n25 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n26 \n27 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n28 \n29 ## Architecture Overview\n30 \n31 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n32 a good starting point in how the backend services interact with other services, and what purpose\n33 they serve.\n34 \n35 ## Development\n36 \n37 After you've checked out this repository, you can run the application in one of the following ways:\n38 \n39 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n40   * Single components using the respective Dockerfile or\n41   * The full backend using the Docker Compose (which is considered the most convenient way)\n42 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n43   If you want to develop something in a single component, this approach is preferable.\n44 \n45 ### Docker-Based Deployment\n46 \n47 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n48 \n49 #### Running the Full CWA Backend Using Docker Compose\n50 \n51 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n52 \n53 Once the services are built, you can start the whole backend using ```docker-compose up```.\n54 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n55 \n56 The docker-compose contains the following services:\n57 \n58 Service           | Description | Endpoint and Default Credentials\n59 ------------------|-------------|-----------\n60 submission        | The Corona-Warn-App submission service                                                      | http://localhost:8000 <br> http://localhost:8005 (for actuator endpoint)\n61 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n62 postgres          | A [postgres] database installation                                                          | postgres:8001 <br> Username: postgres <br> Password: postgres\n63 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | http://localhost:8002 <br> Username: user@domain.com <br> Password: password\n64 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | http://localhost:8003/ <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n65 verification-fake | A very simple fake implementation for the tan verification.                                 | http://localhost:8004/version/v1/tan/verify <br> The only valid tan is \"b69ab69f-9823-4549-8961-c41sa74b2f36\"\n66 \n67 ##### Known Limitation\n68 \n69 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n70 \n71 #### Running Single CWA Services Using Docker\n72 \n73 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n74 \n75 To build and run the distribution service, run the following command:\n76 \n77 ```bash\n78 ./services/distribution/build_and_run.sh\n79 ```\n80 \n81 To build and run the submission service, run the following command:\n82 \n83 ```bash\n84 ./services/submission/build_and_run.sh\n85 ```\n86 \n87 The submission service is available on [localhost:8080](http://localhost:8080 ).\n88 \n89 ### Maven-Based Build\n90 \n91 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n92 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n93 \n94 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n95 * [Maven 3.6](https://maven.apache.org/)\n96 * [Postgres]\n97 * [Zenko CloudServer]\n98 \n99 #### Configure\n100 \n101 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n102 \n103 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n104 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the certificate and private key for the distribution service, the paths need to be prefixed with `file:`\n106     * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n107     * `VAULT_FILESIGNING_CERT` should be the path to the certificate, example available in `<repo-root>/docker-compose-test-secrets/certificate.cert`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json\n141 Distribution Service      | https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json\n142 \n143 ## Spring Profiles\n144 \n145 #### Distribution\n146 \n147 Profile      | Effect\n148 -------------|-------------\n149 `dev`        | Turns the log level to `DEBUG`.\n150 `cloud`      | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`       | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten.\n152 `testdata`   | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 \n154 #### Submission\n155 \n156 Profile      | Effect\n157 -------------|-------------\n158 `dev`        | Turns the log level to `DEBUG`.\n159 `cloud`      | Removes default values for the `datasource` configuration.\n160 \n161 ## Documentation\n162 \n163 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n164 \n165 ## Support and Feedback\n166 \n167 The following channels are available for discussions, feedback, and support requests:\n168 \n169 | Type                     | Channel                                                |\n170 | ------------------------ | ------------------------------------------------------ |\n171 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n172 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n173 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n174 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n175 \n176 ## How to Contribute\n177 \n178 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n179 \n180 ## Contributors\n181 \n182 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n183 \n184 ## Repositories\n185 \n186 The following public repositories are currently available for the Corona-Warn-App:\n187 \n188 | Repository          | Description                                                           |\n189 | ------------------- | --------------------------------------------------------------------- |\n190 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n191 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n192 | [cwa-verification-server] | Backend implementation of the verification process|\n193 \n194 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n195 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n196 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n197 [Postgres]: https://www.postgresql.org/\n198 [HSQLDB]: http://hsqldb.org/\n199 [Zenko CloudServer]: https://github.com/scality/cloudserver\n200 \n201 ## Licensing\n202 \n203 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n204 \n205 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n206 \n207 You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.\n208 \n209 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n210 \n[end of README.md]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n21 \n22 import app.coronawarn.server.common.protocols.internal.RiskLevel;\n23 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n24 import app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType;\n25 import java.beans.BeanInfo;\n26 import java.beans.IntrospectionException;\n27 import java.beans.Introspector;\n28 import java.beans.PropertyDescriptor;\n29 import java.lang.reflect.InvocationTargetException;\n30 import java.math.BigDecimal;\n31 import java.util.Arrays;\n32 \n33 /**\n34  * The Exposure Configuration Validator checks the values of a given RiskScoreParameters instance. Validation is\n35  * performed according to the Apple/Google spec.<br>\n36  * <br>\n37  * Weights must be in the range of 0.001 to 100.<br> Scores must be in the range of 1 to 8.<br>\n38  */\n39 public class ExposureConfigurationValidator extends ConfigurationValidator {\n40 \n41   private final RiskScoreParameters config;\n42 \n43   public ExposureConfigurationValidator(RiskScoreParameters config) {\n44     this.config = config;\n45   }\n46 \n47   /**\n48    * Triggers the validation of the configuration.\n49    *\n50    * @return the ValidationResult instance, containing information about possible errors.\n51    * @throws ValidationExecutionException in case the validation could not be performed\n52    */\n53   @Override\n54   public ValidationResult validate() {\n55     this.errors = new ValidationResult();\n56 \n57     validateWeights();\n58 \n59     try {\n60       validateParameterRiskLevels(\"duration\", config.getDuration());\n61       validateParameterRiskLevels(\"transmission\", config.getTransmission());\n62       validateParameterRiskLevels(\"daysSinceLastExposure\", config.getDaysSinceLastExposure());\n63       validateParameterRiskLevels(\"attenuation\", config.getAttenuation());\n64     } catch (IntrospectionException e) {\n65       throw new ValidationExecutionException(\"Unable to check risk levels\", e);\n66     }\n67 \n68     return errors;\n69   }\n70 \n71   private void validateParameterRiskLevels(String name, Object object)\n72       throws IntrospectionException {\n73     BeanInfo bean = Introspector.getBeanInfo(object.getClass());\n74 \n75     Arrays.stream(bean.getPropertyDescriptors())\n76         .filter(propertyDescriptor -> propertyDescriptor.getPropertyType() == RiskLevel.class)\n77         .forEach(propertyDescriptor -> validateScore(propertyDescriptor, object, name));\n78   }\n79 \n80   private void validateScore(\n81       PropertyDescriptor propertyDescriptor, Object object, String parameter) {\n82     try {\n83       RiskLevel level = (RiskLevel) propertyDescriptor.getReadMethod().invoke(object);\n84 \n85       if (level == RiskLevel.UNRECOGNIZED || level == RiskLevel.RISK_LEVEL_UNSPECIFIED) {\n86         this.errors.add(new RiskLevelValidationError(parameter, propertyDescriptor.getName()));\n87       }\n88     } catch (IllegalAccessException | InvocationTargetException e) {\n89       throw new ValidationExecutionException(\n90           \"Unable to read property \" + propertyDescriptor.getName(), e);\n91     }\n92   }\n93 \n94   private void validateWeights() {\n95     validateWeight(config.getTransmissionWeight(), \"transmission\");\n96     validateWeight(config.getDurationWeight(), \"duration\");\n97     validateWeight(config.getAttenuationWeight(), \"attenuation\");\n98   }\n99 \n100   private void validateWeight(double weight, String name) {\n101     if (isOutOfRange(ParameterSpec.WEIGHT_MIN, ParameterSpec.WEIGHT_MAX, weight)) {\n102       this.errors.add(new WeightValidationError(name, weight, ErrorType.OUT_OF_RANGE));\n103     }\n104 \n105     if (!respectsMaximumDecimalPlaces(weight)) {\n106       this.errors.add(new WeightValidationError(name, weight, ErrorType.TOO_MANY_DECIMAL_PLACES));\n107     }\n108   }\n109 \n110   private boolean respectsMaximumDecimalPlaces(double weight) {\n111     BigDecimal bd = new BigDecimal(String.valueOf(weight));\n112 \n113     return bd.scale() <= ParameterSpec.WEIGHT_MAX_DECIMALS;\n114   }\n115 \n116 \n117   private boolean isOutOfRange(double min, double max, double x) {\n118     return x < min || x > max;\n119   }\n120 }\n121 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java]\n[start of services/distribution/src/main/resources/master-config/exposure-config.yaml]\n1 # This is the Exposure Config master file which defines the risk parameters for the mobile clients\n2 # Change this file with caution.\n3 #\n4 # Weights must be in range of 0.001 to 100\n5 # Parameter Scores must be in range of 1 to 8.\n6 #\n7 # Further documentation:\n8 # https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration\n9 #\n10 \n11 # Weight Section\n12 \n13 transmission_weight: 50\n14 duration_weight: 50\n15 attenuation_weight: 50\n16 days_weight: 20\n17 \n18 # Parameters Section\n19 \n20 transmission:\n21   app_defined_1: 1\n22   app_defined_2: 2\n23   app_defined_3: 3\n24   app_defined_4: 4\n25   app_defined_5: 5\n26   app_defined_6: 6\n27   app_defined_7: 7\n28   app_defined_8: 8\n29 \n30 duration:\n31   eq_0_min: 1\n32   gt_0_le_5_min: 2\n33   gt_5_le_10_min: 3\n34   gt_10_le_15_min: 4\n35   gt_15_le_20_min: 5\n36   gt_20_le_25_min: 6\n37   gt_25_le_30_min: 7\n38   gt_30_min: 8\n39 \n40 days_since_last_exposure:\n41   ge_14_days: 1\n42   ge_12_lt_14_days: 2\n43   ge_10_lt_12_days: 3\n44   ge_8_lt_10_days: 4\n45   ge_6_lt_8_days: 5\n46   ge_4_lt_6_days: 6\n47   ge_2_lt_4_days: 7\n48   ge_0_lt_2_days: 8\n49 \n50 attenuation:\n51   gt_73_dbm: 1\n52   gt_63_le_73_dbm: 2\n53   gt_51_le_63_dbm: 3\n54   gt_33_le_51_dbm: 4\n55   gt_27_le_33_dbm: 5\n56   gt_15_le_27_dbm: 6\n57   gt_10_le_15_dbm: 7\n58   lt_10_dbm: 8\n[end of services/distribution/src/main/resources/master-config/exposure-config.yaml]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/main/resources/master-config/exposure-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/exposure-config.yaml\n@@ -13,9 +13,9 @@\n duration_weight: 50\n attenuation_weight: 50\n days_weight: 20\n \n # Parameters Section\n-transmission:\n-  app_defined_1: 1\n-  app_defined_2: 2\n-  app_defined_3: 3\n-  app_defined_4: 4\n-  app_defined_5: 5\n-  app_defined_6: 6\n-  app_defined_7: 7\n-  app_defined_8: 8\n+transmission:\n+  app_defined_1: 0\n+  app_defined_2: 1\n+  app_defined_3: 2\n+  app_defined_4: 4\n+  app_defined_5: 5\n+  app_defined_6: 7\n+  app_defined_7: 8\n+  app_defined_8: 8\n duration:\n   eq_0_min: 0\n   gt_0_le_5_min: 1\n   gt_5_le_10_min: 2\n   gt_10_le_15_min: 4\n   gt_15_le_20_min: 5\n   gt_20_le_25_min: 7\n   gt_25_le_30_min: 8\n   gt_30_min: 8\n days_since_last_exposure:\n   ge_14_days: 1\n   ge_12_lt_14_days: 2\n   ge_10_lt_12_days: 3\n   ge_8_lt_10_days: 4\n   ge_6_lt_8_days: 5\n   ge_4_lt_6_days: 7\n   ge_2_lt_4_days: 8\n   ge_0_lt_2_days: 8\n attenuation:\n   gt_73_dbm: 1\n   gt_63_le_73_dbm: 2\n   gt_51_le_63_dbm: 3\n   gt_33_le_51_dbm: 4\n   gt_27_le_33_dbm: 5\n   gt_15_le_27_dbm: 6\n   gt_10_le_15_dbm: 7\n   lt_10_dbm: 8\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/resources/master-config/exposure-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/exposure-config.yaml\n@@ -13,9 +13,9 @@\n duration_weight: 50\n attenuation_weight: 50\n days_weight: 20\n \n # Parameters Section\n-transmission:\n-  app_defined_1: 1\n-  app_defined_2: 2\n-  app_defined_3: 3\n-  app_defined_4: 4\n-  app_defined_5: 5\n-  app_defined_6: 6\n-  app_defined_7: 7\n-  app_defined_8: 8\n+transmission:\n+  app_defined_1: 0\n+  app_defined_2: 1\n+  app_defined_3: 2\n+  app_defined_4: 4\n+  app_defined_5: 5\n+  app_defined_6: 7\n+  app_defined_7: 8\n+  app_defined_8: 8\n duration:\n   eq_0_min: 0\n   gt_0_le_5_min: 1\n   gt_5_le_10_min: 2\n   gt_10_le_15_min: 4\n   gt_15_le_20_min: 5\n   gt_20_le_25_min: 7\n   gt_25_le_30_min: 8\n   gt_30_min: 8\n days_since_last_exposure:\n   ge_14_days: 1\n   ge_12_lt_14_days: 2\n   ge_10_lt_12_days: 3\n   ge_8_lt_10_days: 4\n   ge_6_lt_8_days: 5\n   ge_4_lt_6_days: 7\n   ge_2_lt_4_days: 8\n   ge_0_lt_2_days: 8\n attenuation:\n   gt_73_dbm: 1\n   gt_63_le_73_dbm: 2\n   gt_51_le_63_dbm: 3\n   gt_33_le_51_dbm: 4\n   gt_27_le_33_dbm: 5\n   gt_15_le_27_dbm: 6\n   gt_10_le_15_dbm: 7\n   lt_10_dbm: 8\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 299,
        "issue_numbers": [
            "298"
        ],
        "base_commit": "c5991b2fcb894aa4a8eec41c51a2f2cc366a13b5",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java\n@@ -82,7 +82,7 @@ private void validateScore(\n     try {\n       RiskLevel level = (RiskLevel) propertyDescriptor.getReadMethod().invoke(object);\n \n-      if (level == RiskLevel.UNRECOGNIZED || level == RiskLevel.RISK_LEVEL_UNSPECIFIED) {\n+      if (level == RiskLevel.UNRECOGNIZED) {\n         this.errors.add(new RiskLevelValidationError(parameter, propertyDescriptor.getName()));\n       }\n     } catch (IllegalAccessException | InvocationTargetException e) {\ndiff --git a/services/distribution/src/main/resources/master-config/exposure-config.yaml b/services/distribution/src/main/resources/master-config/exposure-config.yaml\n--- a/services/distribution/src/main/resources/master-config/exposure-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/exposure-config.yaml\n@@ -2,7 +2,7 @@\n # Change this file with caution.\n #\n # Weights must be in range of 0.001 to 100\n-# Parameter Scores must be in range of 1 to 8.\n+# Parameter Scores must be in range of 0 to 8.\n #\n # Further documentation:\n # https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration\n@@ -28,31 +28,31 @@ transmission:\n   app_defined_8: 8\n \n duration:\n-  eq_0_min: 1\n-  gt_0_le_5_min: 2\n-  gt_5_le_10_min: 3\n+  eq_0_min: 0\n+  gt_0_le_5_min: 1\n+  gt_5_le_10_min: 2\n   gt_10_le_15_min: 4\n   gt_15_le_20_min: 5\n-  gt_20_le_25_min: 6\n-  gt_25_le_30_min: 7\n+  gt_20_le_25_min: 7\n+  gt_25_le_30_min: 8\n   gt_30_min: 8\n \n days_since_last_exposure:\n   ge_14_days: 1\n-  ge_12_lt_14_days: 2\n-  ge_10_lt_12_days: 3\n-  ge_8_lt_10_days: 4\n-  ge_6_lt_8_days: 5\n+  ge_12_lt_14_days: 1\n+  ge_10_lt_12_days: 1\n+  ge_8_lt_10_days: 1\n+  ge_6_lt_8_days: 2\n   ge_4_lt_6_days: 6\n-  ge_2_lt_4_days: 7\n-  ge_0_lt_2_days: 8\n+  ge_2_lt_4_days: 8\n+  ge_0_lt_2_days: 6\n \n attenuation:\n-  gt_73_dbm: 1\n-  gt_63_le_73_dbm: 2\n-  gt_51_le_63_dbm: 3\n-  gt_33_le_51_dbm: 4\n+  gt_73_dbm: 0\n+  gt_63_le_73_dbm: 0\n+  gt_51_le_63_dbm: 1\n+  gt_33_le_51_dbm: 2\n   gt_27_le_33_dbm: 5\n-  gt_15_le_27_dbm: 6\n-  gt_10_le_15_dbm: 7\n-  lt_10_dbm: 8\n\\ No newline at end of file\n+  gt_15_le_27_dbm: 7\n+  gt_10_le_15_dbm: 8\n+  lt_10_dbm: 8\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n@@ -72,7 +72,8 @@ private static Stream<Arguments> createOkTests() {\n   private static Stream<Arguments> createFailedTests() {\n     return Stream.of(\n         ScoreTooHigh(),\n-        ScoreNegative(),\n+        // TODO cwa-server/#320 Validate that no attributes are missing in .yaml\n+        // ScoreNegative(),\n         WeightNegative(),\n         WeightTooHigh()\n     ).map(Arguments::of);\n@@ -107,9 +108,8 @@ public static TestWithExpectedResult WeightTooHigh() {\n \n   public static TestWithExpectedResult ScoreNegative() {\n     return new TestWithExpectedResult(\"score_negative.yaml\")\n-        .with(new RiskLevelValidationError(\"transmission\", \"appDefined1\"))\n-        .with(new RiskLevelValidationError(\"transmission\", \"appDefined2\"))\n-        .with(new RiskLevelValidationError(\"transmission\", \"appDefined3\"));\n+         .with(new RiskLevelValidationError(\"transmission\", \"appDefined1\"))\n+         .with(new RiskLevelValidationError(\"transmission\", \"appDefined3\"));\n   }\n \n   public static TestWithExpectedResult ScoreTooHigh() {\ndiff --git a/services/distribution/src/test/resources/parameters/score_negative.yaml b/services/distribution/src/test/resources/parameters/score_negative.yaml\n--- a/services/distribution/src/test/resources/parameters/score_negative.yaml\n+++ b/services/distribution/src/test/resources/parameters/score_negative.yaml\n@@ -5,7 +5,7 @@ attenuation_weight: 80\n \n transmission:\n   app_defined_1: -2 # not ok, negative\n-  app_defined_2: 0 # not ok, unspecified\n+  app_defined_2: 0\n   #app_defined_3: 3 # not ok (missing -> unspecified)\n   app_defined_4: 5\n   app_defined_5: 5\n",
        "problem_statement": "RKI: Adjust Risk Score Parameters in master config\nRKI decided for the following risk score parameter values:\r\n\r\n```\r\n1       2       3       4       5       6       7       8 // Bucket No.\r\n----------------------------------------------------------\r\n0       1       2       4       5       7       8       8 // Duration\r\n0       0       1       2       5       7       8       8 // Attenuation\r\n1       1       1       1       2       6       8       6 // Days\r\n1       2       3       4       5       6       7       8 // Transmission Risk \r\n```\r\n\n",
        "hints_text": "Config file that needs updating: [master.yaml](https://github.com/corona-warn-app/cwa-server/blob/master/services/distribution/src/main/resources/exposure-config/master.yaml)",
        "created_at": "2020-05-25T09:41:14Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-349",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nS3Publisher should set Cache Control Headers\nThe S3Publisher is currently not setting Cache Control Headers. We should cache-control: public, maxage=N\r\n\r\nN depends on the type of file:\r\n- for hours index files, it should be rather low (5 minutes)\r\n- for days index files, it should be higher (2 hours)\r\n- for all generated aggregate files, it should be 24 hours\r\n\r\nE-Tag should already been set, but should also be verified.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"b69ab69f-9823-4549-8961-c41sa74b2f36\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json)](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile      | Effect\n148 -------------|-------------\n149 `dev`        | Turns the log level to `DEBUG` and sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n150 `cloud`      | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`       | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten.\n152 `testdata`   | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 \n154 ### Submission\n155 \n156 Profile      | Effect\n157 -------------|-------------\n158 `dev`        | Turns the log level to `DEBUG`.\n159 `cloud`      | Removes default values for the `datasource` configuration.\n160 \n161 ## Documentation\n162 \n163 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n164 \n165 ## Support and Feedback\n166 \n167 The following channels are available for discussions, feedback, and support requests:\n168 \n169 | Type                     | Channel                                                |\n170 | ------------------------ | ------------------------------------------------------ |\n171 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n172 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n173 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n174 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n175 \n176 ## How to Contribute\n177 \n178 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n179 \n180 ## Contributors\n181 \n182 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n183 \n184 ## Repositories\n185 \n186 The following public repositories are currently available for the Corona-Warn-App:\n187 \n188 | Repository          | Description                                                           |\n189 | ------------------- | --------------------------------------------------------------------- |\n190 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n191 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n192 | [cwa-verification-server] | Backend implementation of the verification process|\n193 \n194 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n195 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n196 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n197 [Postgres]: https://www.postgresql.org/\n198 [HSQLDB]: http://hsqldb.org/\n199 [Zenko CloudServer]: https://github.com/scality/cloudserver\n200 \n201 ## Licensing\n202 \n203 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n204 \n205 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n206 \n207 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n208 \n209 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n210 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.objectstore;\n21 \n22 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n23 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;\n24 import app.coronawarn.server.services.distribution.objectstore.publish.LocalFile;\n25 import io.minio.MinioClient;\n26 import io.minio.PutObjectOptions;\n27 import io.minio.Result;\n28 import io.minio.errors.InvalidEndpointException;\n29 import io.minio.errors.InvalidPortException;\n30 import io.minio.errors.MinioException;\n31 import io.minio.messages.DeleteError;\n32 import io.minio.messages.Item;\n33 import java.io.IOException;\n34 import java.security.GeneralSecurityException;\n35 import java.util.ArrayList;\n36 import java.util.List;\n37 import java.util.Map;\n38 import java.util.stream.Collectors;\n39 import org.slf4j.Logger;\n40 import org.slf4j.LoggerFactory;\n41 import org.springframework.stereotype.Component;\n42 \n43 /**\n44  * <p>Grants access to the S3 compatible object storage hosted by Telekom in Germany, enabling\n45  * basic functionality for working with files.</p>\n46  * <br>\n47  * Make sure the following properties are available on the env:\n48  * <ul>\n49  * <li>services.distribution.objectstore.endpoint</li>\n50  * <li>services.distribution.objectstore.bucket</li>\n51  * <li>services.distribution.objectstore.accessKey</li>\n52  * <li>services.distribution.objectstore.secretKey</li>\n53  * <li>services.distribution.objectstore.port</li>\n54  * </ul>\n55  */\n56 @Component\n57 public class ObjectStoreAccess {\n58 \n59   private static final Logger logger = LoggerFactory.getLogger(ObjectStoreAccess.class);\n60 \n61   private static final String DEFAULT_REGION = \"eu-west-1\";\n62 \n63   private final boolean isSetPublicReadAclOnPutObject;\n64 \n65   private final String bucket;\n66 \n67   private final MinioClient client;\n68 \n69   /**\n70    * Constructs an {@link ObjectStoreAccess} instance for communication with the specified object store endpoint and\n71    * bucket.\n72    *\n73    * @param distributionServiceConfig The config properties\n74    * @throws IOException              When there were problems creating the S3 client\n75    * @throws GeneralSecurityException When there were problems creating the S3 client\n76    * @throws MinioException           When there were problems creating the S3 client\n77    */\n78   ObjectStoreAccess(DistributionServiceConfig distributionServiceConfig)\n79       throws IOException, GeneralSecurityException, MinioException {\n80     this.client = createClient(distributionServiceConfig.getObjectStore());\n81 \n82     this.bucket = distributionServiceConfig.getObjectStore().getBucket();\n83     this.isSetPublicReadAclOnPutObject = distributionServiceConfig.getObjectStore().isSetPublicReadAclOnPutObject();\n84 \n85     if (!this.client.bucketExists(this.bucket)) {\n86       throw new IllegalArgumentException(\"Supplied bucket does not exist \" + bucket);\n87     }\n88   }\n89 \n90   private MinioClient createClient(ObjectStore objectStore)\n91       throws InvalidPortException, InvalidEndpointException {\n92     if (isSsl(objectStore)) {\n93       return new MinioClient(\n94           objectStore.getEndpoint(),\n95           objectStore.getPort(),\n96           objectStore.getAccessKey(), objectStore.getSecretKey(),\n97           DEFAULT_REGION,\n98           true\n99       );\n100     } else {\n101       return new MinioClient(\n102           objectStore.getEndpoint(),\n103           objectStore.getPort(),\n104           objectStore.getAccessKey(), objectStore.getSecretKey()\n105       );\n106     }\n107   }\n108 \n109   private boolean isSsl(ObjectStore objectStore) {\n110     return objectStore.getEndpoint().startsWith(\"https://\");\n111   }\n112 \n113   /**\n114    * Stores the target file on the S3.\n115    *\n116    * @param localFile the file to be published\n117    */\n118   public void putObject(LocalFile localFile)\n119       throws IOException, GeneralSecurityException, MinioException {\n120     String s3Key = localFile.getS3Key();\n121     PutObjectOptions options = createOptionsFor(localFile);\n122 \n123     logger.info(\"... uploading {}\", s3Key);\n124     this.client.putObject(bucket, s3Key, localFile.getFile().toString(), options);\n125   }\n126 \n127   /**\n128    * Deletes objects in the object store, based on the given prefix (folder structure).\n129    *\n130    * @param prefix the prefix, e.g. my/folder/\n131    */\n132   public void deleteObjectsWithPrefix(String prefix)\n133       throws MinioException, GeneralSecurityException, IOException {\n134     List<String> toDelete = getObjectsWithPrefix(prefix)\n135         .stream()\n136         .map(S3Object::getObjectName)\n137         .collect(Collectors.toList());\n138 \n139     logger.info(\"Deleting {} entries with prefix {}\", toDelete.size(), prefix);\n140     var deletionResponse = this.client.removeObjects(bucket, toDelete);\n141 \n142     List<DeleteError> errors = new ArrayList<>();\n143     for (Result<DeleteError> deleteErrorResult : deletionResponse) {\n144       errors.add(deleteErrorResult.get());\n145     }\n146 \n147     if (!errors.isEmpty()) {\n148       throw new MinioException(\"Can't delete files, number of errors: \" + errors.size());\n149     }\n150   }\n151 \n152   /**\n153    * Fetches the list of objects in the store with the given prefix.\n154    *\n155    * @param prefix the prefix, e.g. my/folder/\n156    * @return the list of objects\n157    */\n158   public List<S3Object> getObjectsWithPrefix(String prefix)\n159       throws IOException, GeneralSecurityException, MinioException {\n160     var objects = this.client.listObjects(bucket, prefix, true);\n161 \n162     var list = new ArrayList<S3Object>();\n163     for (Result<Item> item : objects) {\n164       list.add(S3Object.of(item.get()));\n165     }\n166 \n167     return list;\n168   }\n169 \n170   private PutObjectOptions createOptionsFor(LocalFile file) {\n171     var options = new PutObjectOptions(file.getFile().toFile().length(), -1);\n172 \n173     if (this.isSetPublicReadAclOnPutObject) {\n174       options.setHeaders(Map.of(\"x-amz-acl\", \"public-read\"));\n175     }\n176 \n177     return options;\n178   }\n179 \n180 }\n181 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java\n@@ -59,6 +59,7 @@ public class ObjectStoreAccess {\n   private final boolean isSetPublicReadAclOnPutObject;\n \n   private final String bucket;\n+  private final int cacheControlMaxAge;\n \n   private final MinioClient client;\n \n@@ -78,6 +79,7 @@ public class ObjectStoreAccess {\n     this.bucket = distributionServiceConfig.getObjectStore().getBucket();\n     this.isSetPublicReadAclOnPutObject = distributionServiceConfig.getObjectStore().isSetPublicReadAclOnPutObject();\n \n+    this.cacheControlMaxAge = distributionServiceConfig.getObjectStore().getCacheControlMaxAge();\n     if (!this.client.bucketExists(this.bucket)) {\n       throw new IllegalArgumentException(\"Supplied bucket does not exist \" + bucket);\n     }\n@@ -118,6 +120,7 @@ public class ObjectStoreAccess {\n     PutObjectOptions options = createOptionsFor(localFile);\n \n     logger.info(\"... uploading {}\", s3Key);\n+    options.setCacheControl(\"public, max-age=\" + cacheControlMaxAge);\n     this.client.putObject(bucket, s3Key, localFile.getFile().toString(), options);\n   }\n \n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java\n@@ -59,6 +59,7 @@ public class ObjectStoreAccess {\n   private final boolean isSetPublicReadAclOnPutObject;\n \n   private final String bucket;\n+  private final int cacheControlMaxAge;\n \n   private final MinioClient client;\n \n@@ -78,6 +79,7 @@ public class ObjectStoreAccess {\n     this.bucket = distributionServiceConfig.getObjectStore().getBucket();\n     this.isSetPublicReadAclOnPutObject = distributionServiceConfig.getObjectStore().isSetPublicReadAclOnPutObject();\n \n+    this.cacheControlMaxAge = distributionServiceConfig.getObjectStore().getCacheControlMaxAge();\n     if (!this.client.bucketExists(this.bucket)) {\n       throw new IllegalArgumentException(\"Supplied bucket does not exist \" + bucket);\n     }\n@@ -118,6 +120,7 @@ public class ObjectStoreAccess {\n     PutObjectOptions options = createOptionsFor(localFile);\n \n     logger.info(\"... uploading {}\", s3Key);\n+    options.setCacheControl(\"public, max-age=\" + cacheControlMaxAge);\n     this.client.putObject(bucket, s3Key, localFile.getFile().toString(), options);\n   }\n \n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 349,
        "issue_numbers": [
            "149"
        ],
        "base_commit": "ef4edb4c92fb9bf65544e22e2b4f2e8f8a55fa97",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java\n@@ -20,19 +20,17 @@\n package app.coronawarn.server.services.distribution.objectstore;\n \n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n-import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;\n import app.coronawarn.server.services.distribution.objectstore.publish.LocalFile;\n import io.minio.MinioClient;\n import io.minio.PutObjectOptions;\n import io.minio.Result;\n-import io.minio.errors.InvalidEndpointException;\n-import io.minio.errors.InvalidPortException;\n import io.minio.errors.MinioException;\n import io.minio.messages.DeleteError;\n import io.minio.messages.Item;\n import java.io.IOException;\n import java.security.GeneralSecurityException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n@@ -58,7 +56,11 @@ public class ObjectStoreAccess {\n \n   private static final Logger logger = LoggerFactory.getLogger(ObjectStoreAccess.class);\n \n-  private static final String DEFAULT_REGION = \"eu-west-1\";\n+  /**\n+   * Specifies the default maximum amount of time in seconds that a published resource can be considered \"fresh\" when\n+   * held in a cache.\n+   */\n+  public static final int DEFAULT_MAX_CACHE_AGE = 300;\n \n   private final boolean isSetPublicReadAclOnPutObject;\n \n@@ -71,14 +73,14 @@ public class ObjectStoreAccess {\n    * bucket.\n    *\n    * @param distributionServiceConfig The config properties\n+   * @param minioClient               The client used for interaction with the object store\n    * @throws IOException              When there were problems creating the S3 client\n    * @throws GeneralSecurityException When there were problems creating the S3 client\n    * @throws MinioException           When there were problems creating the S3 client\n    */\n-  ObjectStoreAccess(DistributionServiceConfig distributionServiceConfig)\n+  ObjectStoreAccess(DistributionServiceConfig distributionServiceConfig, MinioClient minioClient)\n       throws IOException, GeneralSecurityException, MinioException {\n-    this.client = createClient(distributionServiceConfig.getObjectStore());\n-\n+    this.client = minioClient;\n     this.bucket = distributionServiceConfig.getObjectStore().getBucket();\n     this.isSetPublicReadAclOnPutObject = distributionServiceConfig.getObjectStore().isSetPublicReadAclOnPutObject();\n \n@@ -87,38 +89,25 @@ public class ObjectStoreAccess {\n     }\n   }\n \n-  private MinioClient createClient(ObjectStore objectStore)\n-      throws InvalidPortException, InvalidEndpointException {\n-    if (isSsl(objectStore)) {\n-      return new MinioClient(\n-          objectStore.getEndpoint(),\n-          objectStore.getPort(),\n-          objectStore.getAccessKey(), objectStore.getSecretKey(),\n-          DEFAULT_REGION,\n-          true\n-      );\n-    } else {\n-      return new MinioClient(\n-          objectStore.getEndpoint(),\n-          objectStore.getPort(),\n-          objectStore.getAccessKey(), objectStore.getSecretKey()\n-      );\n-    }\n-  }\n-\n-  private boolean isSsl(ObjectStore objectStore) {\n-    return objectStore.getEndpoint().startsWith(\"https://\");\n+  /**\n+   * Stores the target file on the S3 and sets cache control headers according to the default maximum age value.\n+   *\n+   * @param localFile The file to be published.\n+   */\n+  public void putObject(LocalFile localFile) throws IOException, GeneralSecurityException, MinioException {\n+    putObject(localFile, DEFAULT_MAX_CACHE_AGE);\n   }\n \n   /**\n-   * Stores the target file on the S3.\n+   * Stores the target file on the S3 and sets cache control headers according to the specified maximum age value.\n    *\n-   * @param localFile the file to be published\n+   * @param localFile The file to be published.\n+   * @param maxAge    A cache control parameter that specifies the maximum amount of time in seconds that a resource can\n+   *                  be considered \"fresh\" when held in a cache.\n    */\n-  public void putObject(LocalFile localFile)\n-      throws IOException, GeneralSecurityException, MinioException {\n+  public void putObject(LocalFile localFile, int maxAge) throws IOException, GeneralSecurityException, MinioException {\n     String s3Key = localFile.getS3Key();\n-    PutObjectOptions options = createOptionsFor(localFile);\n+    PutObjectOptions options = createOptionsFor(localFile, maxAge);\n \n     logger.info(\"... uploading {}\", s3Key);\n     this.client.putObject(bucket, s3Key, localFile.getFile().toString(), options);\n@@ -167,12 +156,14 @@ public List<S3Object> getObjectsWithPrefix(String prefix)\n     return list;\n   }\n \n-  private PutObjectOptions createOptionsFor(LocalFile file) {\n+  private PutObjectOptions createOptionsFor(LocalFile file, int maxAge) {\n     var options = new PutObjectOptions(file.getFile().toFile().length(), -1);\n \n+    Map<String, String> headers = new HashMap<>(Map.of(\"cache-control\", \"public,max-age=\" + maxAge));\n     if (this.isSetPublicReadAclOnPutObject) {\n-      options.setHeaders(Map.of(\"x-amz-acl\", \"public-read\"));\n+      headers.put(\"x-amz-acl\", \"public-read\");\n     }\n+    options.setHeaders(headers);\n \n     return options;\n   }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreClientConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreClientConfig.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreClientConfig.java\n@@ -0,0 +1,66 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.objectstore;\n+\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;\n+import io.minio.MinioClient;\n+import io.minio.errors.InvalidEndpointException;\n+import io.minio.errors.InvalidPortException;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Manages the instantiation of the {@link MinioClient} bean.\n+ */\n+@Configuration\n+public class ObjectStoreClientConfig {\n+\n+  private static final String DEFAULT_REGION = \"eu-west-1\";\n+\n+  @Bean\n+  public MinioClient createMinioClient(DistributionServiceConfig distributionServiceConfig)\n+      throws InvalidPortException, InvalidEndpointException {\n+    return createClient(distributionServiceConfig.getObjectStore());\n+  }\n+\n+  private MinioClient createClient(ObjectStore objectStore)\n+      throws InvalidPortException, InvalidEndpointException {\n+    if (isSsl(objectStore)) {\n+      return new MinioClient(\n+          objectStore.getEndpoint(),\n+          objectStore.getPort(),\n+          objectStore.getAccessKey(), objectStore.getSecretKey(),\n+          DEFAULT_REGION,\n+          true\n+      );\n+    } else {\n+      return new MinioClient(\n+          objectStore.getEndpoint(),\n+          objectStore.getPort(),\n+          objectStore.getAccessKey(), objectStore.getSecretKey()\n+      );\n+    }\n+  }\n+\n+  private boolean isSsl(ObjectStore objectStore) {\n+    return objectStore.getEndpoint().startsWith(\"https://\");\n+  }\n+}\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccessUnitTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccessUnitTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccessUnitTest.java\n@@ -0,0 +1,113 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.objectstore;\n+\n+import static java.util.Map.entry;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import app.coronawarn.server.services.distribution.objectstore.publish.LocalFile;\n+import io.minio.MinioClient;\n+import io.minio.PutObjectOptions;\n+import java.io.File;\n+import java.nio.file.Path;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {MinioClient.class}, initializers = ConfigFileApplicationContextInitializer.class)\n+class ObjectStoreAccessUnitTest {\n+\n+  private static final String EXP_S3_KEY = \"fooS3Key\";\n+  private static final String EXP_FILE_CONTENT = \"barFileContent\";\n+\n+  private final DistributionServiceConfig distributionServiceConfig;\n+  private final String expBucketName;\n+  private LocalFile testLocalFile;\n+  private ObjectStoreAccess objectStoreAccess;\n+\n+  @MockBean\n+  private MinioClient minioClient;\n+\n+  @Autowired\n+  public ObjectStoreAccessUnitTest(DistributionServiceConfig distributionServiceConfig) {\n+    this.distributionServiceConfig = distributionServiceConfig;\n+    this.expBucketName = distributionServiceConfig.getObjectStore().getBucket();\n+  }\n+\n+  @BeforeEach\n+  public void setUpMocks() throws Exception {\n+    when(minioClient.bucketExists(any())).thenReturn(true);\n+    this.objectStoreAccess = new ObjectStoreAccess(distributionServiceConfig, minioClient);\n+    this.testLocalFile = setUpLocalFileMock();\n+  }\n+\n+  private LocalFile setUpLocalFileMock() {\n+    var testLocalFile = mock(LocalFile.class);\n+    var testPath = mock(Path.class);\n+\n+    when(testLocalFile.getS3Key()).thenReturn(EXP_S3_KEY);\n+    when(testLocalFile.getFile()).thenReturn(testPath);\n+    when(testPath.toFile()).thenReturn(mock(File.class));\n+    when(testPath.toString()).thenReturn(EXP_FILE_CONTENT);\n+\n+    return testLocalFile;\n+  }\n+\n+  @Test\n+  void testPutObjectSetsDefaultCacheControlHeader() throws Exception {\n+    ArgumentCaptor<PutObjectOptions> options = ArgumentCaptor.forClass(PutObjectOptions.class);\n+    var expHeader = entry(\"cache-control\", \"public,max-age=\" + ObjectStoreAccess.DEFAULT_MAX_CACHE_AGE);\n+\n+    objectStoreAccess.putObject(testLocalFile);\n+\n+    verify(minioClient, atLeastOnce())\n+        .putObject(eq(expBucketName), eq(EXP_S3_KEY), eq(EXP_FILE_CONTENT), options.capture());\n+    Assertions.assertThat(options.getValue().headers()).contains(expHeader);\n+  }\n+\n+  @Test\n+  void testPutObjectSetsSpecifiedCacheControlHeader() throws Exception {\n+    ArgumentCaptor<PutObjectOptions> options = ArgumentCaptor.forClass(PutObjectOptions.class);\n+    var expMaxAge = 1337;\n+    var expHeader = entry(\"cache-control\", \"public,max-age=\" + expMaxAge);\n+\n+    objectStoreAccess.putObject(testLocalFile, expMaxAge);\n+\n+    verify(minioClient, atLeastOnce())\n+        .putObject(eq(expBucketName), eq(EXP_S3_KEY), eq(EXP_FILE_CONTENT), options.capture());\n+    Assertions.assertThat(options.getValue().headers()).contains(expHeader);\n+  }\n+}\n",
        "problem_statement": "S3Publisher should set Cache Control Headers\nThe S3Publisher is currently not setting Cache Control Headers. We should cache-control: public, maxage=N\r\n\r\nN depends on the type of file:\r\n- for hours index files, it should be rather low (5 minutes)\r\n- for days index files, it should be higher (2 hours)\r\n- for all generated aggregate files, it should be 24 hours\r\n\r\nE-Tag should already been set, but should also be verified.\n",
        "hints_text": "For the sake of simplicity, I think we can get away with just setting everything to 5 minutes. In the worst case, we need to expect requests for all available files by all 4 CDN master cache servers every 5 minutes. We serve a peak total of 356\u202c files (1 version index, 1 version OpenAPI JSON, 2 country indices for diagnosis keys and parameters, 1 date index, 14 date aggregates, 14 hour indices, 14*24 hour aggregates, 1 parameter configuration). If we set everything to 5 minutes, this would lead to an average of:\r\n* 1424\u202c requests per 5 minutes\r\n* ~285 requests per minute\r\n* ~5 requests per second\r\n\r\nI think the object storage should easily be able to handle that, even if for some reason the CDN edge cache servers decided to request stuff themselves.\n5 Minutes is OK for now - let's keep it simple in the first iteration.",
        "created_at": "2020-05-27T19:29:49Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-424",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nApplication Configuration: Add version update support\nWe would like to keep the mobile application informed about new releases/current release of the app. This information can then be presented to the user, in order to ask for applying updates. \r\n\r\nWe would like to add new fields to the application config (example values):\r\n \r\n```yaml\r\napp-version:\r\n    ios:\r\n        latest: 1.5.2\r\n        min: 1.2.2\r\n    android: \r\n        latest: 1.3.2\r\n        min: 1.1.2\r\n```\r\n\r\nAfter downloading the config, the app checks whether the signature can be verified. If that is the case, it will get the current & min values from the config based on the target platform. \r\n\r\nThis information can now be used to prompt users for updating the app. The values for the versions must follow semantic versioning.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile          | Effect\n148 -----------------|-------------\n149 `dev`            | Turns the log level to `DEBUG`.\n150 `cloud`          | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`           | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n152 `testdata`       | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 `signature-dev`  | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n154 `signature-prod` | Provides production app package IDs for the signature info\n155 \n156 ### Submission\n157 \n158 Profile      | Effect\n159 -------------|-------------\n160 `dev`        | Turns the log level to `DEBUG`.\n161 `cloud`      | Removes default values for the `datasource` configuration.\n162 \n163 ## Documentation\n164 \n165 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n166 \n167 ## Support and Feedback\n168 \n169 The following channels are available for discussions, feedback, and support requests:\n170 \n171 | Type                     | Channel                                                |\n172 | ------------------------ | ------------------------------------------------------ |\n173 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n174 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n175 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n176 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n177 \n178 ## How to Contribute\n179 \n180 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n181 \n182 ## Contributors\n183 \n184 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n185 \n186 ## Repositories\n187 \n188 The following public repositories are currently available for the Corona-Warn-App:\n189 \n190 | Repository          | Description                                                           |\n191 | ------------------- | --------------------------------------------------------------------- |\n192 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n193 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n194 | [cwa-verification-server] | Backend implementation of the verification process|\n195 \n196 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n197 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n198 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n199 [Postgres]: https://www.postgresql.org/\n200 [HSQLDB]: http://hsqldb.org/\n201 [Zenko CloudServer]: https://github.com/scality/cloudserver\n202 \n203 ## Licensing\n204 \n205 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n206 \n207 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n208 \n209 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n210 \n211 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n212 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto]\n1 syntax = \"proto3\";\n2 package app.coronawarn.server.common.protocols.internal;\n3 option java_package = \"app.coronawarn.server.common.protocols.internal\";\n4 option java_multiple_files = true;\n5 import \"app/coronawarn/server/common/protocols/internal/risk_score_classification.proto\";\n6 import \"app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\";\n7 \n8 message ApplicationConfiguration {\n9 \n10   int32 minRiskScore = 1;\n11 \n12   app.coronawarn.server.common.protocols.internal.RiskScoreClassification riskScoreClasses = 2;\n13 \n14   app.coronawarn.server.common.protocols.internal.RiskScoreParameters exposureConfig = 3;\n15 \n16   AttenuationDurationThresholds attenuationDurationThresholds = 4;\n17 }\n18 \n19 message AttenuationDurationThresholds {\n20   int32 lower = 1;\n21   int32 upper = 2;\n22 }\n[end of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig;\n22 \n23 import app.coronawarn.server.services.distribution.assembly.appconfig.parsing.YamlConstructorForProtoBuf;\n24 import com.google.protobuf.Message;\n25 import java.io.IOException;\n26 import java.io.InputStream;\n27 import org.springframework.core.io.ClassPathResource;\n28 import org.springframework.core.io.Resource;\n29 import org.yaml.snakeyaml.Yaml;\n30 import org.yaml.snakeyaml.error.YAMLException;\n31 import org.yaml.snakeyaml.introspector.BeanAccess;\n32 \n33 public class YamlLoader {\n34 \n35   private YamlLoader() {\n36   }\n37 \n38   /**\n39    * Returns a protobuf {@link Message.Builder message builder} of the specified type, whose fields have been set to the\n40    * corresponding values from the yaml file at the specified path.\n41    *\n42    * @param path        The absolute path of the yaml file within the class path.\n43    * @param builderType The specific {@link com.google.protobuf.Message.Builder} implementation that will be returned.\n44    * @return A prepared protobuf {@link Message.Builder message builder} of the specified type.\n45    * @throws UnableToLoadFileException if either the file access or subsequent yaml parsing fails.\n46    */\n47   public static <T extends Message.Builder> T loadYamlIntoProtobufBuilder(String path, Class<T> builderType)\n48       throws UnableToLoadFileException {\n49     Yaml yaml = new Yaml(new YamlConstructorForProtoBuf(path));\n50     // no setters for generated message classes available\n51     yaml.setBeanAccess(BeanAccess.FIELD);\n52 \n53     Resource riskScoreParametersResource = new ClassPathResource(path);\n54     try (InputStream inputStream = riskScoreParametersResource.getInputStream()) {\n55       T loaded = yaml.loadAs(inputStream, builderType);\n56       if (loaded == null) {\n57         throw new UnableToLoadFileException(path);\n58       }\n59 \n60       return loaded;\n61     } catch (YAMLException e) {\n62       throw new UnableToLoadFileException(\"Parsing failed\", e);\n63     } catch (IOException e) {\n64       throw new UnableToLoadFileException(\"Failed to load file \" + path, e);\n65     }\n66   }\n67 }\n68 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n22 \n23 import java.util.Objects;\n24 \n25 public class GeneralValidationError implements ValidationError {\n26 \n27   private final String errorSource;\n28   private final Object value;\n29   private final ErrorType reason;\n30 \n31   /**\n32    * Creates a {@link GeneralValidationError} that stores the specified validation error source,\n33    * erroneous value and a reason for the error to occur.\n34    *\n35    * @param errorSource A label that describes the property associated with this validation error.\n36    * @param value       The value that caused the validation error.\n37    * @param reason      A validation error specifier.\n38    */\n39   public GeneralValidationError(String errorSource, Object value, ErrorType reason) {\n40     this.errorSource = errorSource;\n41     this.value = value;\n42     this.reason = reason;\n43   }\n44 \n45   @Override\n46   public String toString() {\n47     return \"GeneralValidationError{\"\n48         + \"errorType=\" + reason\n49         + \", parameter='\" + errorSource + '\\''\n50         + \", givenValue=\" + value\n51         + '}';\n52   }\n53 \n54   @Override\n55   public boolean equals(Object o) {\n56     if (this == o) {\n57       return true;\n58     }\n59     if (o == null || getClass() != o.getClass()) {\n60       return false;\n61     }\n62     GeneralValidationError that = (GeneralValidationError) o;\n63     return Objects.equals(errorSource, that.errorSource)\n64         && Objects.equals(value, that.value)\n65         && Objects.equals(reason, that.reason);\n66   }\n67 \n68   @Override\n69   public int hashCode() {\n70     return Objects.hash(errorSource, value, reason);\n71   }\n72 \n73   public enum ErrorType {\n74     BLANK_LABEL,\n75     MIN_GREATER_THAN_MAX,\n76     VALUE_OUT_OF_BOUNDS,\n77     INVALID_URL,\n78     INVALID_PARTITIONING\n79   }\n80 }\n81 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java]\n[start of services/distribution/src/main/resources/master-config/app-config.yaml]\n1 #----------------------------------------------------------------------\n2 # This is the Corona Warn App master configuration file.\n3 # ----------------------------------------------------------------------\n4 #\n5 # This configuration file will be fetched by the mobile app in order to function.\n6 #\n7 # It currently provides settings for minimum risk score, score classes and exposure configuration.\n8 #\n9 # Change this file with caution!\n10 \n11 min-risk-score: 90\n12 attenuationDurationThresholds:\n13   lower: 50\n14   upper: 70\n15 risk-score-classes: !include risk-score-classification.yaml\n16 exposure-config: !include exposure-config.yaml\n[end of services/distribution/src/main/resources/master-config/app-config.yaml]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/main/resources/master-config/app-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/app-config.yaml\n@@ -11,6 +11,14 @@\n # Change this file with caution!\n \n min-risk-score: 90\n+app-version:\n+    ios:\n+        latest: 1.5.2\n+        min: 1.2.2\n+    android: \n+        latest: 1.3.2\n+        min: 1.1.2\n attenuationDurationThresholds:\n   lower: 50\n   upper: 70\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/resources/master-config/app-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/app-config.yaml\n@@ -11,6 +11,14 @@\n # Change this file with caution!\n \n min-risk-score: 90\n+app-version:\n+    ios:\n+        latest: 1.5.2\n+        min: 1.2.2\n+    android: \n+        latest: 1.3.2\n+        min: 1.1.2\n attenuationDurationThresholds:\n   lower: 50\n   upper: 70\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 424,
        "issue_numbers": [
            "416"
        ],
        "base_commit": "2be284e0518658dcb7ef8d1df5515fd5f962e242",
        "patch": "diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto\n--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto\n+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto\n@@ -4,6 +4,7 @@ option java_package = \"app.coronawarn.server.common.protocols.internal\";\n option java_multiple_files = true;\n import \"app/coronawarn/server/common/protocols/internal/risk_score_classification.proto\";\n import \"app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\";\n+import \"app/coronawarn/server/common/protocols/internal/app_version_config.proto\";\n \n message ApplicationConfiguration {\n \n@@ -14,6 +15,8 @@ message ApplicationConfiguration {\n   app.coronawarn.server.common.protocols.internal.RiskScoreParameters exposureConfig = 3;\n \n   AttenuationDurationThresholds attenuationDurationThresholds = 4;\n+\n+  app.coronawarn.server.common.protocols.internal.ApplicationVersionConfiguration appVersion = 5;\n }\n \n message AttenuationDurationThresholds {\ndiff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_version_config.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_version_config.proto\nnew file mode 100644\n--- /dev/null\n+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_version_config.proto\n@@ -0,0 +1,20 @@\n+syntax = \"proto3\";\n+package app.coronawarn.server.common.protocols.internal;\n+option java_package = \"app.coronawarn.server.common.protocols.internal\";\n+option java_multiple_files = true;\n+\n+message ApplicationVersionConfiguration {\n+  ApplicationVersionInfo ios = 1;\n+  ApplicationVersionInfo android = 2;\n+}\n+\n+message ApplicationVersionInfo {\n+  SemanticVersion latest = 1;\n+  SemanticVersion min = 2;\n+}\n+\n+message SemanticVersion {\n+  uint32 major = 1;\n+  uint32 minor = 2;\n+  uint32 patch = 3;\n+}\n\\ No newline at end of file\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProvider.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProvider.java\n@@ -0,0 +1,56 @@\n+/*\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig;\n+\n+import app.coronawarn.server.common.protocols.internal.ApplicationVersionConfiguration;\n+\n+/**\n+ * Provides the mobile app version configuration based on a file in the file system.<br> The existing file must be a\n+ * valid YAML file, and must match the specification of the proto file app_version_config.proto.\n+ */\n+public class ApplicationVersionConfigurationProvider {\n+\n+  /**\n+   * The location of the app version config master file.\n+   */\n+  public static final String MASTER_FILE = \"master-config/app-version-config.yaml\";\n+\n+  /**\n+   * Fetches the master configuration as an ApplicationVersionConfig instance.\n+   *\n+   * @return the mobile app version configuration as ApplicationVersionConfig\n+   * @throws UnableToLoadFileException when the file/transformation did not succeed\n+   */\n+  public static ApplicationVersionConfiguration readMasterFile() throws UnableToLoadFileException {\n+    return readFile(MASTER_FILE);\n+  }\n+\n+  /**\n+   * Fetches an app version configuration file based on the given path. The path must be available in the classloader.\n+   *\n+   * @param path the path, e.g. folder/my-app-version-config.yaml\n+   * @return the ApplicationVersionConfig\n+   * @throws UnableToLoadFileException when the file/transformation did not succeed\n+   */\n+  public static ApplicationVersionConfiguration readFile(String path) throws UnableToLoadFileException {\n+    return YamlLoader.loadYamlIntoProtobufBuilder(path, ApplicationVersionConfiguration.Builder.class).build();\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java\n@@ -50,8 +50,8 @@ public static <T extends Message.Builder> T loadYamlIntoProtobufBuilder(String p\n     // no setters for generated message classes available\n     yaml.setBeanAccess(BeanAccess.FIELD);\n \n-    Resource riskScoreParametersResource = new ClassPathResource(path);\n-    try (InputStream inputStream = riskScoreParametersResource.getInputStream()) {\n+    Resource configurationResource = new ClassPathResource(path);\n+    try (InputStream inputStream = configurationResource.getInputStream()) {\n       T loaded = yaml.loadAs(inputStream, builderType);\n       if (loaded == null) {\n         throw new UnableToLoadFileException(path);\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationVersionConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationVersionConfigurationValidator.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationVersionConfigurationValidator.java\n@@ -0,0 +1,81 @@\n+/*\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n+\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n+\n+import app.coronawarn.server.common.protocols.internal.ApplicationVersionConfiguration;\n+import app.coronawarn.server.common.protocols.internal.ApplicationVersionInfo;\n+import app.coronawarn.server.common.protocols.internal.SemanticVersion;\n+\n+public class ApplicationVersionConfigurationValidator extends ConfigurationValidator {\n+\n+  private final ApplicationVersionConfiguration config;\n+\n+  public ApplicationVersionConfigurationValidator(ApplicationVersionConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  @Override\n+  public ValidationResult validate() {\n+    this.errors = new ValidationResult();\n+    validateApplicationVersionInfo(\"ios\", config.getIos());\n+    validateApplicationVersionInfo(\"android\", config.getAndroid());\n+    return this.errors;\n+  }\n+\n+  private void validateApplicationVersionInfo(String name, ApplicationVersionInfo appVersionInfo) {\n+    SemanticVersion minVersion = appVersionInfo.getMin();\n+    ComparisonResult comparisonResult = compare(appVersionInfo.getLatest(), minVersion);\n+    if (ComparisonResult.LOWER.equals(comparisonResult)) {\n+      this.errors.add(new GeneralValidationError(name + \": latest/min\",\n+          minVersion.getMajor() + \".\" + minVersion.getMinor() + \".\" + minVersion.getPatch(), MIN_GREATER_THAN_MAX));\n+    }\n+  }\n+\n+  private ComparisonResult compare(SemanticVersion left, SemanticVersion right) {\n+    if (left.getMajor() < right.getMajor()) {\n+      return ComparisonResult.LOWER;\n+    }\n+    if (left.getMajor() > right.getMajor()) {\n+      return ComparisonResult.HIGHER;\n+    }\n+    if (left.getMinor() < right.getMinor()) {\n+      return ComparisonResult.LOWER;\n+    }\n+    if (left.getMinor() > right.getMinor()) {\n+      return ComparisonResult.HIGHER;\n+    }\n+    if (left.getPatch() < right.getPatch()) {\n+      return ComparisonResult.LOWER;\n+    }\n+    if (left.getPatch() > right.getPatch()) {\n+      return ComparisonResult.HIGHER;\n+    }\n+    return ComparisonResult.EQUAL;\n+  }\n+\n+  private enum ComparisonResult {\n+    LOWER,\n+    EQUAL,\n+    HIGHER\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java\n@@ -44,7 +44,7 @@ public GeneralValidationError(String errorSource, Object value, ErrorType reason\n \n   @Override\n   public String toString() {\n-    return \"GeneralValidationError{\"\n+    return \"RiskScoreClassificationValidationError{\"\n         + \"errorType=\" + reason\n         + \", parameter='\" + errorSource + '\\''\n         + \", givenValue=\" + value\ndiff --git a/services/distribution/src/main/resources/master-config/app-config.yaml b/services/distribution/src/main/resources/master-config/app-config.yaml\n--- a/services/distribution/src/main/resources/master-config/app-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/app-config.yaml\n@@ -13,4 +13,5 @@ attenuationDurationThresholds:\n   lower: 50\n   upper: 70\n risk-score-classes: !include risk-score-classification.yaml\n-exposure-config: !include exposure-config.yaml\n\\ No newline at end of file\n+exposure-config: !include exposure-config.yaml\n+app-version: !include app-version-config.yaml\n\\ No newline at end of file\ndiff --git a/services/distribution/src/main/resources/master-config/app-version-config.yaml b/services/distribution/src/main/resources/master-config/app-version-config.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/resources/master-config/app-version-config.yaml\n@@ -0,0 +1,25 @@\n+# This is the Application Version Configuration master file which contains information for clients\n+# about the latest and minimum supported mobile app versions on Android and iOS.\n+#\n+# The latest version must not be lower than the min version.\n+#\n+# Change this file with caution!\n+\n+ios:\n+  latest:\n+    major: 1\n+    minor: 5\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 2\n+    patch: 2\n+android:\n+  latest:\n+    major: 1\n+    minor: 3\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 1\n+    patch: 2\n\\ No newline at end of file\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProviderMasterFileTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProviderMasterFileTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProviderMasterFileTest.java\n@@ -0,0 +1,49 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ApplicationVersionConfigurationValidator;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ExposureConfigurationValidator;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationResult;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This test will verify that the provided Exposure Configuration master file is syntactically\n+ * correct and according to spec.\n+ * <p>\n+ * There should never be any deployment when this test is failing.\n+ */\n+class ApplicationVersionConfigurationProviderMasterFileTest {\n+\n+  private static final ValidationResult SUCCESS = new ValidationResult();\n+\n+  @Test\n+  void testMasterFile() throws UnableToLoadFileException {\n+    var config = ApplicationVersionConfigurationProvider.readMasterFile();\n+\n+    var validator = new ApplicationVersionConfigurationValidator(config);\n+    ValidationResult result = validator.validate();\n+\n+    assertThat(result).isEqualTo(SUCCESS);\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProviderTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProviderTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProviderTest.java\n@@ -0,0 +1,59 @@\n+/*\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import app.coronawarn.server.common.protocols.internal.ApplicationVersionConfiguration;\n+import org.junit.jupiter.api.Test;\n+\n+public class ApplicationVersionConfigurationProviderTest {\n+\n+  @Test\n+  void okFile() throws UnableToLoadFileException {\n+    ApplicationVersionConfiguration result =\n+        ApplicationVersionConfigurationProvider.readFile(\"app-version/all_ok.yaml\");\n+\n+    assertThat(result).withFailMessage(\"File is null, indicating loading failed\").isNotNull();\n+  }\n+\n+  @Test\n+  void wrongFile() {\n+    assertUnableToLoadFile(\"app-version/wrong_file.yaml\");\n+  }\n+\n+  @Test\n+  void brokenSyntax() {\n+    assertUnableToLoadFile(\"app-version/broken_syntax.yaml\");\n+  }\n+\n+  @Test\n+  void doesNotExist() {\n+    assertUnableToLoadFile(\"file_does_not_exist_anywhere.yaml\");\n+  }\n+\n+  public static void assertUnableToLoadFile(String s) {\n+    assertThat(catchThrowable(() ->\n+        ApplicationVersionConfigurationProvider.readFile(s)))\n+        .isInstanceOf(UnableToLoadFileException.class);\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationVersionConfigurationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationVersionConfigurationValidatorTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationVersionConfigurationValidatorTest.java\n@@ -0,0 +1,61 @@\n+/*\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n+\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.buildError;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.buildExpectedResult;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.protocols.internal.ApplicationVersionConfiguration;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.ApplicationVersionConfigurationProvider;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.UnableToLoadFileException;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType;\n+import org.junit.jupiter.api.Test;\n+\n+public class ApplicationVersionConfigurationValidatorTest {\n+\n+  private static final ValidationResult SUCCESS = new ValidationResult();\n+\n+  @Test\n+  void succeedsIfLatestEqualsMin() throws UnableToLoadFileException {\n+    ApplicationVersionConfiguration config = ApplicationVersionConfigurationProvider\n+        .readFile(\"app-version/latest-equals-min.yaml\");\n+    var validator = new ApplicationVersionConfigurationValidator(config);\n+    assertThat(validator.validate()).isEqualTo(SUCCESS);\n+  }\n+\n+  @Test\n+  void succeedsIfLatestHigherThanMin() throws UnableToLoadFileException {\n+    ApplicationVersionConfiguration config = ApplicationVersionConfigurationProvider\n+        .readFile(\"app-version/latest-higher-than-min.yaml\");\n+    var validator = new ApplicationVersionConfigurationValidator(config);\n+    assertThat(validator.validate()).isEqualTo(SUCCESS);\n+  }\n+\n+  @Test\n+  void failsIfLatestLowerThanMin() throws UnableToLoadFileException {\n+    ApplicationVersionConfiguration config = ApplicationVersionConfigurationProvider\n+        .readFile(\"app-version/latest-lower-than-min.yaml\");\n+    var validator = new ApplicationVersionConfigurationValidator(config);\n+    assertThat(validator.validate())\n+        .isEqualTo(buildExpectedResult(buildError(\"ios: latest/min\", \"1.2.2\", ErrorType.MIN_GREATER_THAN_MAX)));\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n@@ -150,7 +150,7 @@ private static Stream<Arguments> createValidClassifications() {\n     ).map(Arguments::of);\n   }\n \n-  private static GeneralValidationError buildError(String parameter, Object value, ErrorType reason) {\n+  public static GeneralValidationError buildError(String parameter, Object value, ErrorType reason) {\n     return new GeneralValidationError(parameter, value, reason);\n   }\n \ndiff --git a/services/distribution/src/test/resources/app-version/all_ok.yaml b/services/distribution/src/test/resources/app-version/all_ok.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/app-version/all_ok.yaml\n@@ -0,0 +1,18 @@\n+ios:\n+  latest:\n+    major: 1\n+    minor: 5\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 2\n+    patch: 2\n+android:\n+  latest:\n+    major: 1\n+    minor: 3\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 1\n+    patch: 2\ndiff --git a/services/distribution/src/test/resources/app-version/broken_syntax.yaml b/services/distribution/src/test/resources/app-version/broken_syntax.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/app-version/broken_syntax.yaml\n@@ -0,0 +1,18 @@\n+ios:\n+  latest:\n+      major: 1 # wrong syntax, indent too high\n+    minor: 5\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 2\n+    patch: 2\n+android:\n+  latest:\n+    major: 1\n+    minor: 3\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 1\n+    patch: 2\ndiff --git a/services/distribution/src/test/resources/app-version/empty.yaml b/services/distribution/src/test/resources/app-version/empty.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/app-version/empty.yaml\n@@ -0,0 +1 @@\n+# empty file\n\\ No newline at end of file\ndiff --git a/services/distribution/src/test/resources/app-version/latest-equals-min.yaml b/services/distribution/src/test/resources/app-version/latest-equals-min.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/app-version/latest-equals-min.yaml\n@@ -0,0 +1,18 @@\n+ios:\n+  latest:\n+    major: 1\n+    minor: 2\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 2\n+    patch: 2\n+android:\n+  latest:\n+    major: 1\n+    minor: 3\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 3\n+    patch: 2\ndiff --git a/services/distribution/src/test/resources/app-version/latest-higher-than-min.yaml b/services/distribution/src/test/resources/app-version/latest-higher-than-min.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/app-version/latest-higher-than-min.yaml\n@@ -0,0 +1,18 @@\n+ios:\n+  latest:\n+    major: 1\n+    minor: 2\n+    patch: 3\n+  min:\n+    major: 1\n+    minor: 2\n+    patch: 2\n+android:\n+  latest:\n+    major: 1\n+    minor: 3\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 3\n+    patch: 2\ndiff --git a/services/distribution/src/test/resources/app-version/latest-lower-than-min.yaml b/services/distribution/src/test/resources/app-version/latest-lower-than-min.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/app-version/latest-lower-than-min.yaml\n@@ -0,0 +1,18 @@\n+ios:\n+  latest:\n+    major: 1\n+    minor: 2\n+    patch: 1\n+  min:\n+    major: 1\n+    minor: 2\n+    patch: 2\n+android:\n+  latest:\n+    major: 1\n+    minor: 3\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 3\n+    patch: 2\ndiff --git a/services/distribution/src/test/resources/app-version/wrong_file.yaml b/services/distribution/src/test/resources/app-version/wrong_file.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/app-version/wrong_file.yaml\n@@ -0,0 +1,20 @@\n+ID: com.acme.mta.sample\n+version: 1.0.1\n+modules:\n+  - name: pricing-ui\n+    type: nodejs\n+    path: ./ui\n+    requires:\n+      - name: thedatabase\n+\n+  - name: pricing-backend\n+    type: java\n+    path: ./backend\n+    provides:\n+      - name: price_opt\n+        properties:\n+          protocol: http\n+          uri: myhost.mydomain\n+resources:\n+  - name: thedatabase\n+    type: com.sap.xs.hdi-container\n\\ No newline at end of file\ndiff --git a/services/distribution/src/test/resources/configtests/app-config_ok.yaml b/services/distribution/src/test/resources/configtests/app-config_ok.yaml\n--- a/services/distribution/src/test/resources/configtests/app-config_ok.yaml\n+++ b/services/distribution/src/test/resources/configtests/app-config_ok.yaml\n@@ -3,4 +3,5 @@ attenuationDurationThresholds:\n   lower: 50\n   upper: 70\n risk-score-classes: !include risk-score-class_ok.yaml\n-exposure-config: !include exposure-config_ok.yaml\n\\ No newline at end of file\n+exposure-config: !include exposure-config_ok.yaml\n+app-version: !include app-version-config_ok.yaml\n\\ No newline at end of file\ndiff --git a/services/distribution/src/test/resources/configtests/app-version-config_ok.yaml b/services/distribution/src/test/resources/configtests/app-version-config_ok.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/configtests/app-version-config_ok.yaml\n@@ -0,0 +1,18 @@\n+ios:\n+  latest:\n+    major: 1\n+    minor: 5\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 2\n+    patch: 2\n+android:\n+  latest:\n+    major: 1\n+    minor: 3\n+    patch: 2\n+  min:\n+    major: 1\n+    minor: 1\n+    patch: 2\n",
        "problem_statement": "Application Configuration: Add version update support\nWe would like to keep the mobile application informed about new releases/current release of the app. This information can then be presented to the user, in order to ask for applying updates. \r\n\r\nWe would like to add new fields to the application config (example values):\r\n \r\n```yaml\r\napp-version:\r\n    ios:\r\n        latest: 1.5.2\r\n        min: 1.2.2\r\n    android: \r\n        latest: 1.3.2\r\n        min: 1.1.2\r\n```\r\n\r\nAfter downloading the config, the app checks whether the signature can be verified. If that is the case, it will get the current & min values from the config based on the target platform. \r\n\r\nThis information can now be used to prompt users for updating the app. The values for the versions must follow semantic versioning.\n",
        "hints_text": "",
        "created_at": "2020-06-02T19:03:56Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-431",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nApplication Configuration: Attenuation Duration\nThe RKI requested weighting parameters for the three buckets defined by the attenuation duration threshold. Add this to the attenuation duration configuration.\r\n\r\n@michael-burwig \r\n\r\n```yaml\r\nattenuation-duration:\r\n  thresholds:\r\n    lower: 50\r\n    upper: 70\r\n  weights:\r\n    low: 1 # attenuation < 50 dB \r\n    mid: 0.5 # attenuation >50 dB && < 70 dB \r\n    high: 0 # attenuation > 70dB is ignored\r\n```\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile          | Effect\n148 -----------------|-------------\n149 `dev`            | Turns the log level to `DEBUG`.\n150 `cloud`          | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`           | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n152 `testdata`       | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 `signature-dev`  | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n154 `signature-prod` | Provides production app package IDs for the signature info\n155 \n156 ### Submission\n157 \n158 Profile      | Effect\n159 -------------|-------------\n160 `dev`        | Turns the log level to `DEBUG`.\n161 `cloud`      | Removes default values for the `datasource` configuration.\n162 \n163 ## Documentation\n164 \n165 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n166 \n167 ## Support and Feedback\n168 \n169 The following channels are available for discussions, feedback, and support requests:\n170 \n171 | Type                     | Channel                                                |\n172 | ------------------------ | ------------------------------------------------------ |\n173 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n174 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n175 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n176 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n177 \n178 ## How to Contribute\n179 \n180 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n181 \n182 ## Contributors\n183 \n184 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n185 \n186 ## Repositories\n187 \n188 The following public repositories are currently available for the Corona-Warn-App:\n189 \n190 | Repository          | Description                                                           |\n191 | ------------------- | --------------------------------------------------------------------- |\n192 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n193 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n194 | [cwa-verification-server] | Backend implementation of the verification process|\n195 \n196 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n197 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n198 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n199 [Postgres]: https://www.postgresql.org/\n200 [HSQLDB]: http://hsqldb.org/\n201 [Zenko CloudServer]: https://github.com/scality/cloudserver\n202 \n203 ## Licensing\n204 \n205 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n206 \n207 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n208 \n209 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n210 \n211 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n212 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto]\n1 syntax = \"proto3\";\n2 package app.coronawarn.server.common.protocols.internal;\n3 option java_package = \"app.coronawarn.server.common.protocols.internal\";\n4 option java_multiple_files = true;\n5 import \"app/coronawarn/server/common/protocols/internal/risk_score_classification.proto\";\n6 import \"app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\";\n7 import \"app/coronawarn/server/common/protocols/internal/app_version_config.proto\";\n8 \n9 message ApplicationConfiguration {\n10 \n11   int32 minRiskScore = 1;\n12 \n13   app.coronawarn.server.common.protocols.internal.RiskScoreClassification riskScoreClasses = 2;\n14 \n15   app.coronawarn.server.common.protocols.internal.RiskScoreParameters exposureConfig = 3;\n16 \n17   AttenuationDurationThresholds attenuationDurationThresholds = 4;\n18 \n19   app.coronawarn.server.common.protocols.internal.ApplicationVersionConfiguration appVersion = 5;\n20 }\n21 \n22 message AttenuationDurationThresholds {\n23   int32 lower = 1;\n24   int32 upper = 2;\n25 }\n[end of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n22 \n23 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n24 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n25 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MAX;\n26 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;\n27 \n28 import app.coronawarn.server.common.protocols.internal.ApplicationConfiguration;\n29 import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n30 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n31 \n32 /**\n33  * This validator validates a {@link ApplicationConfiguration}. It will re-use the {@link ConfigurationValidator} from\n34  * the sub-configurations of {@link RiskScoreParameters} and {@link RiskScoreClassification}.\n35  */\n36 public class ApplicationConfigurationValidator extends ConfigurationValidator {\n37 \n38   private final ApplicationConfiguration config;\n39 \n40   /**\n41    * Creates a new instance for the given {@link ApplicationConfiguration}.\n42    *\n43    * @param config the Application Configuration to validate.\n44    */\n45   public ApplicationConfigurationValidator(ApplicationConfiguration config) {\n46     this.config = config;\n47   }\n48 \n49   @Override\n50   public ValidationResult validate() {\n51     this.errors = new ValidationResult();\n52 \n53     validateMinRisk();\n54     validateAttenuationDurationThresholds();\n55 \n56     ValidationResult exposureResult = new ExposureConfigurationValidator(config.getExposureConfig()).validate();\n57     ValidationResult riskScoreResult = new RiskScoreClassificationValidator(config.getRiskScoreClasses()).validate();\n58 \n59     return errors.with(exposureResult).with(riskScoreResult);\n60   }\n61 \n62   private void validateMinRisk() {\n63     int minLevel = this.config.getMinRiskScore();\n64 \n65     if (!RiskScoreValidator.isInBounds(minLevel)) {\n66       this.errors.add(new MinimumRiskLevelValidationError(minLevel));\n67     }\n68   }\n69 \n70   private void validateAttenuationDurationThresholds() {\n71     int lower = config.getAttenuationDurationThresholds().getLower();\n72     int upper = config.getAttenuationDurationThresholds().getUpper();\n73 \n74     checkThresholdBound(\"lower\", lower);\n75     checkThresholdBound(\"upper\", upper);\n76 \n77     if (lower > upper) {\n78       String parameters = \"attenuationDurationThreshold.lower, attenuationDurationThreshold.upper\";\n79       String values = lower + \", \" + upper;\n80       this.errors.add(new GeneralValidationError(parameters, values, MIN_GREATER_THAN_MAX));\n81     }\n82   }\n83 \n84   private void checkThresholdBound(String boundLabel, int boundValue) {\n85     if (boundValue < ATTENUATION_DURATION_THRESHOLD_MIN || boundValue > ATTENUATION_DURATION_THRESHOLD_MAX) {\n86       this.errors.add(\n87           new GeneralValidationError(\"attenuationDurationThreshold.\" + boundLabel, boundValue, VALUE_OUT_OF_BOUNDS));\n88     }\n89   }\n90 }\n91 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n22 \n23 /**\n24  * Definition of the spec according to Apple/Google:\n25  * https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration\n26  */\n27 public class ParameterSpec {\n28 \n29   private ParameterSpec() {\n30   }\n31 \n32   /**\n33    * The minimum weight value for mobile API.\n34    */\n35   public static final double WEIGHT_MIN = 0.001;\n36 \n37   /**\n38    * The maximum weight value for mobile API.\n39    */\n40   public static final int WEIGHT_MAX = 100;\n41 \n42   /**\n43    * Maximum number of allowed decimals.\n44    */\n45   public static final int WEIGHT_MAX_DECIMALS = 3;\n46 \n47   /**\n48    * The allowed minimum value for risk score.\n49    */\n50   public static final int RISK_SCORE_MIN = 0;\n51 \n52   /**\n53    * The allowed maximum value for a risk score.\n54    */\n55   public static final int RISK_SCORE_MAX = 4096;\n56 \n57   /**\n58    * The allowed minimum value for an attenuation threshold.\n59    */\n60   public static final int ATTENUATION_DURATION_THRESHOLD_MIN = 0;\n61 \n62   /**\n63    * The allowed maximum value for an attenuation threshold.\n64    */\n65   public static final int ATTENUATION_DURATION_THRESHOLD_MAX = 100;\n66 }\n67 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java]\n[start of services/distribution/src/main/resources/master-config/app-config.yaml]\n1 #----------------------------------------------------------------------\n2 # This is the Corona Warn App master configuration file.\n3 # ----------------------------------------------------------------------\n4 #\n5 # This configuration file will be fetched by the mobile app in order to function.\n6 #\n7 # It currently provides settings for minimum risk score, score classes and exposure configuration.\n8 #\n9 # Change this file with caution!\n10 \n11 min-risk-score: 90\n12 attenuationDurationThresholds:\n13   lower: 50\n14   upper: 70\n15 risk-score-classes: !include risk-score-classification.yaml\n16 exposure-config: !include exposure-config.yaml\n17 app-version: !include app-version-config.yaml\n[end of services/distribution/src/main/resources/master-config/app-config.yaml]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/main/resources/master-config/app-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/app-config.yaml\n@@ -12,6 +12,9 @@\n   lower: 50\n   upper: 70\n risk-score-classes: !include risk-score-classification.yaml\n+weights:\n+  low: 1 # attenuation < 50 dB \n+  mid: 0.5 # attenuation >50 dB && < 70 dB \n+  high: 0 # attenuation > 70dB is ignored\n exposure-config: !include exposure-config.yaml\n app-version: !include app-version-config.yaml\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/resources/master-config/app-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/app-config.yaml\n@@ -12,6 +12,9 @@\n   lower: 50\n   upper: 70\n risk-score-classes: !include risk-score-classification.yaml\n+weights:\n+  low: 1 # attenuation < 50 dB \n+  mid: 0.5 # attenuation >50 dB && < 70 dB \n+  high: 0 # attenuation > 70dB is ignored\n exposure-config: !include exposure-config.yaml\n app-version: !include app-version-config.yaml\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 431,
        "issue_numbers": [
            "428"
        ],
        "base_commit": "20492aaed28176142700486f99877b602b9f1cde",
        "patch": "diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto\n--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto\n+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto\n@@ -5,6 +5,7 @@ option java_multiple_files = true;\n import \"app/coronawarn/server/common/protocols/internal/risk_score_classification.proto\";\n import \"app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\";\n import \"app/coronawarn/server/common/protocols/internal/app_version_config.proto\";\n+import \"app/coronawarn/server/common/protocols/internal/attenuation_duration.proto\";\n \n message ApplicationConfiguration {\n \n@@ -14,12 +15,7 @@ message ApplicationConfiguration {\n \n   app.coronawarn.server.common.protocols.internal.RiskScoreParameters exposureConfig = 3;\n \n-  AttenuationDurationThresholds attenuationDurationThresholds = 4;\n+  app.coronawarn.server.common.protocols.internal.AttenuationDuration attenuationDuration = 4;\n \n   app.coronawarn.server.common.protocols.internal.ApplicationVersionConfiguration appVersion = 5;\n }\n-\n-message AttenuationDurationThresholds {\n-  int32 lower = 1;\n-  int32 upper = 2;\n-}\n\\ No newline at end of file\ndiff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto\nnew file mode 100644\n--- /dev/null\n+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto\n@@ -0,0 +1,20 @@\n+syntax = \"proto3\";\n+package app.coronawarn.server.common.protocols.internal;\n+option java_package = \"app.coronawarn.server.common.protocols.internal\";\n+option java_multiple_files = true;\n+\n+message AttenuationDuration {\n+  Thresholds thresholds = 1;\n+  Weights weights = 2;\n+}\n+\n+message Thresholds {\n+  int32 lower = 1;\n+  int32 upper = 2;\n+}\n+\n+message Weights {\n+  double low = 1;\n+  double mid = 2;\n+  double high = 3;\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java\n@@ -20,11 +20,6 @@\n \n package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MAX;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;\n-\n import app.coronawarn.server.common.protocols.internal.ApplicationConfiguration;\n import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n@@ -51,12 +46,13 @@ public ValidationResult validate() {\n     this.errors = new ValidationResult();\n \n     validateMinRisk();\n-    validateAttenuationDurationThresholds();\n \n-    ValidationResult exposureResult = new ExposureConfigurationValidator(config.getExposureConfig()).validate();\n-    ValidationResult riskScoreResult = new RiskScoreClassificationValidator(config.getRiskScoreClasses()).validate();\n+    errors.with(new ExposureConfigurationValidator(config.getExposureConfig()).validate());\n+    errors.with(new RiskScoreClassificationValidator(config.getRiskScoreClasses()).validate());\n+    errors.with(new ApplicationVersionConfigurationValidator(config.getAppVersion()).validate());\n+    errors.with(new AttenuationDurationValidator(config.getAttenuationDuration()).validate());\n \n-    return errors.with(exposureResult).with(riskScoreResult);\n+    return errors;\n   }\n \n   private void validateMinRisk() {\n@@ -66,25 +62,4 @@ private void validateMinRisk() {\n       this.errors.add(new MinimumRiskLevelValidationError(minLevel));\n     }\n   }\n-\n-  private void validateAttenuationDurationThresholds() {\n-    int lower = config.getAttenuationDurationThresholds().getLower();\n-    int upper = config.getAttenuationDurationThresholds().getUpper();\n-\n-    checkThresholdBound(\"lower\", lower);\n-    checkThresholdBound(\"upper\", upper);\n-\n-    if (lower > upper) {\n-      String parameters = \"attenuationDurationThreshold.lower, attenuationDurationThreshold.upper\";\n-      String values = lower + \", \" + upper;\n-      this.errors.add(new GeneralValidationError(parameters, values, MIN_GREATER_THAN_MAX));\n-    }\n-  }\n-\n-  private void checkThresholdBound(String boundLabel, int boundValue) {\n-    if (boundValue < ATTENUATION_DURATION_THRESHOLD_MIN || boundValue > ATTENUATION_DURATION_THRESHOLD_MAX) {\n-      this.errors.add(\n-          new GeneralValidationError(\"attenuationDurationThreshold.\" + boundLabel, boundValue, VALUE_OUT_OF_BOUNDS));\n-    }\n-  }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java\n@@ -0,0 +1,94 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n+\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MIN;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.OUT_OF_RANGE;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.TOO_MANY_DECIMAL_PLACES;\n+\n+import app.coronawarn.server.common.protocols.internal.AttenuationDuration;\n+import java.math.BigDecimal;\n+\n+/**\n+ * The AttenuationDurationValidator validates the values of an associated {@link AttenuationDuration} instance.\n+ */\n+public class AttenuationDurationValidator extends ConfigurationValidator {\n+\n+  private final AttenuationDuration attenuationDuration;\n+\n+  public AttenuationDurationValidator(AttenuationDuration attenuationDuration) {\n+    this.attenuationDuration = attenuationDuration;\n+  }\n+\n+  @Override\n+  public ValidationResult validate() {\n+    errors = new ValidationResult();\n+\n+    validateThresholds();\n+    validateWeights();\n+\n+    return errors;\n+  }\n+\n+  private void validateThresholds() {\n+    int lower = attenuationDuration.getThresholds().getLower();\n+    int upper = attenuationDuration.getThresholds().getUpper();\n+\n+    checkThresholdBound(\"lower\", lower);\n+    checkThresholdBound(\"upper\", upper);\n+\n+    if (lower > upper) {\n+      String parameters = \"attenuation-duration.thresholds.lower, attenuation-duration.thresholds.upper\";\n+      String values = lower + \", \" + upper;\n+      this.errors.add(new GeneralValidationError(parameters, values, MIN_GREATER_THAN_MAX));\n+    }\n+  }\n+\n+  private void checkThresholdBound(String thresholdLabel, int thresholdValue) {\n+    if (thresholdValue < ATTENUATION_DURATION_THRESHOLD_MIN || thresholdValue > ATTENUATION_DURATION_THRESHOLD_MAX) {\n+      this.errors.add(new GeneralValidationError(\n+          \"attenuation-duration.thresholds.\" + thresholdLabel, thresholdValue, VALUE_OUT_OF_BOUNDS));\n+    }\n+  }\n+\n+  private void validateWeights() {\n+    checkWeight(\"low\", attenuationDuration.getWeights().getLow());\n+    checkWeight(\"mid\", attenuationDuration.getWeights().getMid());\n+    checkWeight(\"high\", attenuationDuration.getWeights().getHigh());\n+  }\n+\n+  private void checkWeight(String weightLabel, double weightValue) {\n+    if (weightValue < ATTENUATION_DURATION_WEIGHT_MIN || weightValue > ATTENUATION_DURATION_WEIGHT_MAX) {\n+      this.errors.add(new WeightValidationError(\n+          \"attenuation-duration.weights.\" + weightLabel, weightValue, OUT_OF_RANGE));\n+    }\n+\n+    if (BigDecimal.valueOf(weightValue).scale() > ParameterSpec.ATTENUATION_DURATION_WEIGHT_MAX_DECIMALS) {\n+      this.errors.add(new WeightValidationError(\n+          \"attenuation-duration.weights.\" + weightLabel, weightValue, TOO_MANY_DECIMAL_PLACES));\n+    }\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\n@@ -63,4 +63,19 @@ private ParameterSpec() {\n    * The allowed maximum value for an attenuation threshold.\n    */\n   public static final int ATTENUATION_DURATION_THRESHOLD_MAX = 100;\n+\n+  /**\n+   * The allowed minimum value for an attenuation weight.\n+   */\n+  public static final double ATTENUATION_DURATION_WEIGHT_MIN = .0;\n+\n+  /**\n+   * The allowed maximum value for an attenuation weight.\n+   */\n+  public static final double ATTENUATION_DURATION_WEIGHT_MAX = 1.;\n+\n+  /**\n+   * Maximum number of allowed decimals for an attenuation weight.\n+   */\n+  public static final int ATTENUATION_DURATION_WEIGHT_MAX_DECIMALS = 3;\n }\ndiff --git a/services/distribution/src/main/resources/master-config/app-config.yaml b/services/distribution/src/main/resources/master-config/app-config.yaml\n--- a/services/distribution/src/main/resources/master-config/app-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/app-config.yaml\n@@ -9,9 +9,7 @@\n # Change this file with caution!\n \n min-risk-score: 90\n-attenuationDurationThresholds:\n-  lower: 50\n-  upper: 70\n+attenuation-duration: !include attenuation-duration.yaml\n risk-score-classes: !include risk-score-classification.yaml\n exposure-config: !include exposure-config.yaml\n-app-version: !include app-version-config.yaml\n\\ No newline at end of file\n+app-version: !include app-version-config.yaml\ndiff --git a/services/distribution/src/main/resources/master-config/attenuation-duration.yaml b/services/distribution/src/main/resources/master-config/attenuation-duration.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/resources/master-config/attenuation-duration.yaml\n@@ -0,0 +1,15 @@\n+# This is the attenuation and duration parameter thresholds. The lower and\n+# upper threshold partitions the value range into 3 subsets: low, mid, high\n+#\n+# Each of the aforementioned partitions has a weight in the range of [0, 1]\n+# assigned to it. The number of decimal places is restricted to 3.\n+#\n+# Change this file with caution!\n+\n+thresholds:\n+  lower: 50\n+  upper: 70\n+weights:\n+  low: 1.0\n+  mid: 0.5\n+  high: 0.0\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/AttenuationDurationMasterFileTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/AttenuationDurationMasterFileTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/AttenuationDurationMasterFileTest.java\n@@ -0,0 +1,47 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.protocols.internal.AttenuationDuration;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.AttenuationDurationValidator;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ConfigurationValidator;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationResult;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This test will verify that the provided attenuation/duration parameters master file is syntactically correct and\n+ * according to spec. There should never be any deployment when this test is failing.\n+ */\n+class AttenuationDurationMasterFileTest {\n+\n+  private static final ValidationResult SUCCESS = new ValidationResult();\n+\n+  @Test\n+  void testMasterFile() throws UnableToLoadFileException {\n+    AttenuationDuration config = ApplicationConfigurationProvider.readMasterFile().getAttenuationDuration();\n+\n+    ConfigurationValidator validator = new AttenuationDurationValidator(config);\n+\n+    assertThat(validator.validate()).isEqualTo(SUCCESS);\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidatorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidatorTest.java\n@@ -20,26 +20,16 @@\n \n package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MAX;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.MINIMAL_RISK_SCORE_CLASSIFICATION;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.buildExpectedResult;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n-import app.coronawarn.server.common.protocols.internal.ApplicationConfiguration;\n-import app.coronawarn.server.common.protocols.internal.AttenuationDurationThresholds;\n import app.coronawarn.server.services.distribution.assembly.appconfig.ApplicationConfigurationProvider;\n-import app.coronawarn.server.services.distribution.assembly.appconfig.ExposureConfigurationProvider;\n import app.coronawarn.server.services.distribution.assembly.appconfig.UnableToLoadFileException;\n import java.util.stream.Stream;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n-import org.junit.jupiter.params.provider.ValueSource;\n \n class ApplicationConfigurationValidatorTest {\n \n@@ -59,43 +49,6 @@ void negative(TestWithExpectedResult test) throws UnableToLoadFileException {\n     assertThat(getResultForTest(test)).isEqualTo(test.result);\n   }\n \n-  @ParameterizedTest\n-  @ValueSource(ints = {ATTENUATION_DURATION_THRESHOLD_MIN - 1, ATTENUATION_DURATION_THRESHOLD_MAX + 1})\n-  void negativeForAttenuationDurationThresholdOutOfBounds(int invalidThresholdValue) throws Exception {\n-    ApplicationConfigurationValidator validator = getValidatorForAttenuationDurationThreshold(\n-        invalidThresholdValue, invalidThresholdValue);\n-\n-    ValidationResult expectedResult = buildExpectedResult(\n-        new GeneralValidationError(\"attenuationDurationThreshold.upper\", invalidThresholdValue, VALUE_OUT_OF_BOUNDS),\n-        new GeneralValidationError(\"attenuationDurationThreshold.lower\", invalidThresholdValue, VALUE_OUT_OF_BOUNDS));\n-\n-    assertThat(validator.validate()).isEqualTo(expectedResult);\n-  }\n-\n-  @Test\n-  void negativeForUpperAttenuationDurationThresholdLesserThanLower() throws Exception {\n-    ApplicationConfigurationValidator validator = getValidatorForAttenuationDurationThreshold(\n-        ATTENUATION_DURATION_THRESHOLD_MAX, ATTENUATION_DURATION_THRESHOLD_MIN);\n-\n-    ValidationResult expectedResult = buildExpectedResult(\n-        new GeneralValidationError(\"attenuationDurationThreshold.lower, attenuationDurationThreshold.upper\",\n-            (ATTENUATION_DURATION_THRESHOLD_MAX + \", \" + ATTENUATION_DURATION_THRESHOLD_MIN), MIN_GREATER_THAN_MAX));\n-\n-    assertThat(validator.validate()).isEqualTo(expectedResult);\n-  }\n-\n-  private ApplicationConfigurationValidator getValidatorForAttenuationDurationThreshold(int lower, int upper)\n-      throws Exception {\n-    ApplicationConfiguration appConfig = ApplicationConfiguration.newBuilder()\n-        .setMinRiskScore(100)\n-        .setRiskScoreClasses(MINIMAL_RISK_SCORE_CLASSIFICATION)\n-        .setExposureConfig(ExposureConfigurationProvider.readFile(\"configtests/exposure-config_ok.yaml\"))\n-        .setAttenuationDurationThresholds(AttenuationDurationThresholds.newBuilder()\n-            .setLower(lower)\n-            .setUpper(upper)).build();\n-    return new ApplicationConfigurationValidator(appConfig);\n-  }\n-\n   @Test\n   void circular() {\n     assertThatThrownBy(() -> {\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidatorTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidatorTest.java\n@@ -0,0 +1,114 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n+\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MIN;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.buildError;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.buildExpectedResult;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.OUT_OF_RANGE;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.TOO_MANY_DECIMAL_PLACES;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.protocols.internal.AttenuationDuration;\n+import app.coronawarn.server.common.protocols.internal.Thresholds;\n+import app.coronawarn.server.common.protocols.internal.Weights;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class AttenuationDurationValidatorTest {\n+  private static final Thresholds VALID_THRESHOLDS =\n+      buildThresholds(ATTENUATION_DURATION_THRESHOLD_MIN, ATTENUATION_DURATION_THRESHOLD_MAX);\n+  private static final Weights VALID_WEIGHTS =\n+      buildWeights(ATTENUATION_DURATION_WEIGHT_MAX, ATTENUATION_DURATION_WEIGHT_MAX, ATTENUATION_DURATION_WEIGHT_MAX);\n+\n+  @ParameterizedTest\n+  @ValueSource(ints = {ATTENUATION_DURATION_THRESHOLD_MIN - 1, ATTENUATION_DURATION_THRESHOLD_MAX + 1})\n+  void failsIfAttenuationDurationThresholdOutOfBounds(int invalidThresholdValue) {\n+    AttenuationDurationValidator validator = buildValidator(\n+        buildThresholds(invalidThresholdValue, invalidThresholdValue), VALID_WEIGHTS);\n+\n+    ValidationResult expectedResult = buildExpectedResult(\n+        buildError(\"attenuation-duration.thresholds.lower\", invalidThresholdValue, VALUE_OUT_OF_BOUNDS),\n+        buildError(\"attenuation-duration.thresholds.upper\", invalidThresholdValue, VALUE_OUT_OF_BOUNDS));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  @Test\n+  void failsIfUpperAttenuationDurationThresholdLesserThanLower() {\n+    AttenuationDurationValidator validator = buildValidator(\n+        buildThresholds(ATTENUATION_DURATION_THRESHOLD_MAX, ATTENUATION_DURATION_THRESHOLD_MIN), VALID_WEIGHTS);\n+\n+    ValidationResult expectedResult = buildExpectedResult(\n+        new GeneralValidationError(\"attenuation-duration.thresholds.lower, attenuation-duration.thresholds.upper\",\n+            (ATTENUATION_DURATION_THRESHOLD_MAX + \", \" + ATTENUATION_DURATION_THRESHOLD_MIN), MIN_GREATER_THAN_MAX));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(doubles = {ATTENUATION_DURATION_WEIGHT_MIN - .1, ATTENUATION_DURATION_WEIGHT_MAX + .1})\n+  void failsIfWeightsOutOfBounds(double invalidWeightValue) {\n+    AttenuationDurationValidator validator = buildValidator(VALID_THRESHOLDS,\n+        buildWeights(invalidWeightValue, invalidWeightValue, invalidWeightValue));\n+\n+    ValidationResult expectedResult = buildExpectedResult(\n+        new WeightValidationError(\"attenuation-duration.weights.low\", invalidWeightValue, OUT_OF_RANGE),\n+        new WeightValidationError(\"attenuation-duration.weights.mid\", invalidWeightValue, OUT_OF_RANGE),\n+        new WeightValidationError(\"attenuation-duration.weights.high\", invalidWeightValue, OUT_OF_RANGE));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  @Test\n+  void failsIfWeightsHaveTooManyDecimalPlaces() {\n+    double invalidWeightValue = ATTENUATION_DURATION_WEIGHT_MAX - 0.0000001;\n+    AttenuationDurationValidator validator = buildValidator(VALID_THRESHOLDS,\n+        buildWeights(invalidWeightValue, invalidWeightValue, invalidWeightValue));\n+\n+    ValidationResult expectedResult = buildExpectedResult(\n+        new WeightValidationError(\"attenuation-duration.weights.low\", invalidWeightValue, TOO_MANY_DECIMAL_PLACES),\n+        new WeightValidationError(\"attenuation-duration.weights.mid\", invalidWeightValue, TOO_MANY_DECIMAL_PLACES),\n+        new WeightValidationError(\"attenuation-duration.weights.high\", invalidWeightValue, TOO_MANY_DECIMAL_PLACES));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  private static AttenuationDurationValidator buildValidator(Thresholds thresholds, Weights weights) {\n+    return new AttenuationDurationValidator(AttenuationDuration.newBuilder()\n+        .setThresholds(thresholds)\n+        .setWeights(weights).build());\n+  }\n+\n+  private static Thresholds buildThresholds(int lower, int upper) {\n+    return Thresholds.newBuilder().setLower(lower).setUpper(upper).build();\n+  }\n+\n+  private static Weights buildWeights(double low, double mid, double high) {\n+    return Weights.newBuilder().setLow(low).setMid(mid).setHigh(high).build();\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n@@ -166,7 +166,7 @@ private static RiskScoreClass buildRiskClass(String label, int min, int max, Str\n     return RiskScoreClass.newBuilder().setLabel(label).setMin(min).setMax(max).setUrl(url).build();\n   }\n \n-  public static ValidationResult buildExpectedResult(GeneralValidationError... errors) {\n+  public static ValidationResult buildExpectedResult(ValidationError... errors) {\n     var validationResult = new ValidationResult();\n     Arrays.stream(errors).forEach(validationResult::add);\n     return validationResult;\ndiff --git a/services/distribution/src/test/resources/configtests/app-config_ok.yaml b/services/distribution/src/test/resources/configtests/app-config_ok.yaml\n--- a/services/distribution/src/test/resources/configtests/app-config_ok.yaml\n+++ b/services/distribution/src/test/resources/configtests/app-config_ok.yaml\n@@ -1,7 +1,5 @@\n min-risk-score: 100\n-attenuationDurationThresholds:\n-  lower: 50\n-  upper: 70\n+attenuation-duration: !include attenuation-duration.yaml\n risk-score-classes: !include risk-score-class_ok.yaml\n exposure-config: !include exposure-config_ok.yaml\n-app-version: !include app-version-config_ok.yaml\n\\ No newline at end of file\n+app-version: !include app-version-config_ok.yaml\ndiff --git a/services/distribution/src/test/resources/configtests/attenuation-duration.yaml b/services/distribution/src/test/resources/configtests/attenuation-duration.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/configtests/attenuation-duration.yaml\n@@ -0,0 +1,7 @@\n+thresholds:\n+  lower: 50\n+  upper: 70\n+weights:\n+  low: 1.0\n+  mid: 0.5\n+  high: 0.0\n",
        "problem_statement": "Application Configuration: Attenuation Duration\nThe RKI requested weighting parameters for the three buckets defined by the attenuation duration threshold. Add this to the attenuation duration configuration.\r\n\r\n@michael-burwig \r\n\r\n```yaml\r\nattenuation-duration:\r\n  thresholds:\r\n    lower: 50\r\n    upper: 70\r\n  weights:\r\n    low: 1 # attenuation < 50 dB \r\n    mid: 0.5 # attenuation >50 dB && < 70 dB \r\n    high: 0 # attenuation > 70dB is ignored\r\n```\n",
        "hints_text": "Are the weights in the range of [0, 1]?\nIs the threshold value range still [0, 100]?\nThresholds remain unchanged.\r\nFor weight, lets go with 0...1 for now. There will be another RKI call in the afternoon which might change that though.",
        "created_at": "2020-06-03T09:23:16Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-441",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nApplication Configuration: Attenuation Duration Enhancements\nWe need two additional configuration variables for the attenuation duration, namely defaultBucketOffset and riskScoreNormalizationDivisor.\r\n\r\nThe target config should look like this:\r\n\r\n```yaml\r\ndefault-bucket-offset: 0 # discussed as W4\r\nrisk-score-normalization-divisor: 25 # discussed as W5 \r\nthresholds:\r\n  lower: 50\r\n  upper: 70\r\nweights:\r\n  low: 1.0\r\n  mid: 0.5\r\n  high: 0.0\r\n```\r\n\r\nValue range for bucket offset: 0 or 1 (int)\r\nrisk score normalization divisor: 1...1000 (int)\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile          | Effect\n148 -----------------|-------------\n149 `dev`            | Turns the log level to `DEBUG`.\n150 `cloud`          | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`           | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n152 `testdata`       | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 `signature-dev`  | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n154 `signature-prod` | Provides production app package IDs for the signature info\n155 \n156 ### Submission\n157 \n158 Profile      | Effect\n159 -------------|-------------\n160 `dev`        | Turns the log level to `DEBUG`.\n161 `cloud`      | Removes default values for the `datasource` configuration.\n162 \n163 ## Documentation\n164 \n165 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n166 \n167 ## Support and Feedback\n168 \n169 The following channels are available for discussions, feedback, and support requests:\n170 \n171 | Type                     | Channel                                                |\n172 | ------------------------ | ------------------------------------------------------ |\n173 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n174 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n175 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n176 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n177 \n178 ## How to Contribute\n179 \n180 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n181 \n182 ## Contributors\n183 \n184 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n185 \n186 ## Repositories\n187 \n188 The following public repositories are currently available for the Corona-Warn-App:\n189 \n190 | Repository          | Description                                                           |\n191 | ------------------- | --------------------------------------------------------------------- |\n192 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n193 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n194 | [cwa-verification-server] | Backend implementation of the verification process|\n195 \n196 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n197 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n198 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n199 [Postgres]: https://www.postgresql.org/\n200 [HSQLDB]: http://hsqldb.org/\n201 [Zenko CloudServer]: https://github.com/scality/cloudserver\n202 \n203 ## Licensing\n204 \n205 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n206 \n207 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n208 \n209 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n210 \n211 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n212 \n[end of README.md]\n[start of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto]\n1 syntax = \"proto3\";\n2 package app.coronawarn.server.common.protocols.internal;\n3 option java_package = \"app.coronawarn.server.common.protocols.internal\";\n4 option java_multiple_files = true;\n5 \n6 message AttenuationDuration {\n7   Thresholds thresholds = 1;\n8   Weights weights = 2;\n9 }\n10 \n11 message Thresholds {\n12   int32 lower = 1;\n13   int32 upper = 2;\n14 }\n15 \n16 message Weights {\n17   double low = 1;\n18   double mid = 2;\n19   double high = 3;\n20 }\n21 \n[end of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n22 \n23 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n24 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n25 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MAX;\n26 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;\n27 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MAX;\n28 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MIN;\n29 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.OUT_OF_RANGE;\n30 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.TOO_MANY_DECIMAL_PLACES;\n31 \n32 import app.coronawarn.server.common.protocols.internal.AttenuationDuration;\n33 import java.math.BigDecimal;\n34 \n35 /**\n36  * The AttenuationDurationValidator validates the values of an associated {@link AttenuationDuration} instance.\n37  */\n38 public class AttenuationDurationValidator extends ConfigurationValidator {\n39 \n40   private final AttenuationDuration attenuationDuration;\n41 \n42   public AttenuationDurationValidator(AttenuationDuration attenuationDuration) {\n43     this.attenuationDuration = attenuationDuration;\n44   }\n45 \n46   @Override\n47   public ValidationResult validate() {\n48     errors = new ValidationResult();\n49 \n50     validateThresholds();\n51     validateWeights();\n52 \n53     return errors;\n54   }\n55 \n56   private void validateThresholds() {\n57     int lower = attenuationDuration.getThresholds().getLower();\n58     int upper = attenuationDuration.getThresholds().getUpper();\n59 \n60     checkThresholdBound(\"lower\", lower);\n61     checkThresholdBound(\"upper\", upper);\n62 \n63     if (lower > upper) {\n64       String parameters = \"attenuation-duration.thresholds.lower, attenuation-duration.thresholds.upper\";\n65       String values = lower + \", \" + upper;\n66       this.errors.add(new GeneralValidationError(parameters, values, MIN_GREATER_THAN_MAX));\n67     }\n68   }\n69 \n70   private void checkThresholdBound(String thresholdLabel, int thresholdValue) {\n71     if (thresholdValue < ATTENUATION_DURATION_THRESHOLD_MIN || thresholdValue > ATTENUATION_DURATION_THRESHOLD_MAX) {\n72       this.errors.add(new GeneralValidationError(\n73           \"attenuation-duration.thresholds.\" + thresholdLabel, thresholdValue, VALUE_OUT_OF_BOUNDS));\n74     }\n75   }\n76 \n77   private void validateWeights() {\n78     checkWeight(\"low\", attenuationDuration.getWeights().getLow());\n79     checkWeight(\"mid\", attenuationDuration.getWeights().getMid());\n80     checkWeight(\"high\", attenuationDuration.getWeights().getHigh());\n81   }\n82 \n83   private void checkWeight(String weightLabel, double weightValue) {\n84     if (weightValue < ATTENUATION_DURATION_WEIGHT_MIN || weightValue > ATTENUATION_DURATION_WEIGHT_MAX) {\n85       this.errors.add(new WeightValidationError(\n86           \"attenuation-duration.weights.\" + weightLabel, weightValue, OUT_OF_RANGE));\n87     }\n88 \n89     if (BigDecimal.valueOf(weightValue).scale() > ParameterSpec.ATTENUATION_DURATION_WEIGHT_MAX_DECIMALS) {\n90       this.errors.add(new WeightValidationError(\n91           \"attenuation-duration.weights.\" + weightLabel, weightValue, TOO_MANY_DECIMAL_PLACES));\n92     }\n93   }\n94 }\n95 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n22 \n23 /**\n24  * Definition of the spec according to Apple/Google:\n25  * https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration\n26  */\n27 public class ParameterSpec {\n28 \n29   private ParameterSpec() {\n30   }\n31 \n32   /**\n33    * The minimum weight value for mobile API.\n34    */\n35   public static final double WEIGHT_MIN = 0.001;\n36 \n37   /**\n38    * The maximum weight value for mobile API.\n39    */\n40   public static final int WEIGHT_MAX = 100;\n41 \n42   /**\n43    * Maximum number of allowed decimals.\n44    */\n45   public static final int WEIGHT_MAX_DECIMALS = 3;\n46 \n47   /**\n48    * The allowed minimum value for risk score.\n49    */\n50   public static final int RISK_SCORE_MIN = 0;\n51 \n52   /**\n53    * The allowed maximum value for a risk score.\n54    */\n55   public static final int RISK_SCORE_MAX = 4096;\n56 \n57   /**\n58    * The allowed minimum value for an attenuation threshold.\n59    */\n60   public static final int ATTENUATION_DURATION_THRESHOLD_MIN = 0;\n61 \n62   /**\n63    * The allowed maximum value for an attenuation threshold.\n64    */\n65   public static final int ATTENUATION_DURATION_THRESHOLD_MAX = 100;\n66 \n67   /**\n68    * The allowed minimum value for an attenuation weight.\n69    */\n70   public static final double ATTENUATION_DURATION_WEIGHT_MIN = .0;\n71 \n72   /**\n73    * The allowed maximum value for an attenuation weight.\n74    */\n75   public static final double ATTENUATION_DURATION_WEIGHT_MAX = 1.;\n76 \n77   /**\n78    * Maximum number of allowed decimals for an attenuation weight.\n79    */\n80   public static final int ATTENUATION_DURATION_WEIGHT_MAX_DECIMALS = 3;\n81 }\n82 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java]\n[start of services/distribution/src/main/resources/master-config/attenuation-duration.yaml]\n1 # This is the attenuation and duration parameter thresholds. The lower and\n2 # upper threshold partitions the value range into 3 subsets: low, mid, high\n3 #\n4 # Each of the aforementioned partitions has a weight in the range of [0, 1]\n5 # assigned to it. The number of decimal places is restricted to 3.\n6 #\n7 # Change this file with caution!\n8 \n9 thresholds:\n10   lower: 50\n11   upper: 70\n12 weights:\n13   low: 1.0\n14   mid: 0.5\n15   high: 0.0\n16 \n[end of services/distribution/src/main/resources/master-config/attenuation-duration.yaml]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/main/resources/master-config/attenuation-duration.yaml\n+++ b/services/distribution/src/main/resources/master-config/attenuation-duration.yaml\n@@ -9,6 +9,8 @@\n thresholds:\n   lower: 50\n   upper: 70\n+default-bucket-offset: 0\n+risk-score-normalization-divisor: 25\n weights:\n   low: 1.0\n   mid: 0.5\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/resources/master-config/attenuation-duration.yaml\n+++ b/services/distribution/src/main/resources/master-config/attenuation-duration.yaml\n@@ -9,6 +9,8 @@\n thresholds:\n   lower: 50\n   upper: 70\n+default-bucket-offset: 0\n+risk-score-normalization-divisor: 25\n weights:\n   low: 1.0\n   mid: 0.5\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 441,
        "issue_numbers": [
            "437"
        ],
        "base_commit": "2165f162938409e6401c926d8643835a114ab887",
        "patch": "diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto\n--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto\n+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/attenuation_duration.proto\n@@ -6,6 +6,8 @@ option java_multiple_files = true;\n message AttenuationDuration {\n   Thresholds thresholds = 1;\n   Weights weights = 2;\n+  int32 defaultBucketOffset = 3;\n+  int32 riskScoreNormalizationDivisor = 4;\n }\n \n message Thresholds {\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidator.java\n@@ -26,6 +26,10 @@\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MAX;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MIN;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.DEFAULT_BUCKET_OFFSET_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.DEFAULT_BUCKET_OFFSET_MIN;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.RISK_SCORE_NORMALIZATION_DIVISOR_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.RISK_SCORE_NORMALIZATION_DIVISOR_MIN;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.OUT_OF_RANGE;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.TOO_MANY_DECIMAL_PLACES;\n \n@@ -49,6 +53,8 @@ public ValidationResult validate() {\n \n     validateThresholds();\n     validateWeights();\n+    validateDefaultBucketOffset();\n+    validateRiskScoreNormalizationDivisor();\n \n     return errors;\n   }\n@@ -57,8 +63,8 @@ private void validateThresholds() {\n     int lower = attenuationDuration.getThresholds().getLower();\n     int upper = attenuationDuration.getThresholds().getUpper();\n \n-    checkThresholdBound(\"lower\", lower);\n-    checkThresholdBound(\"upper\", upper);\n+    checkValueRange(\"thresholds.lower\", lower, ATTENUATION_DURATION_THRESHOLD_MIN, ATTENUATION_DURATION_THRESHOLD_MAX);\n+    checkValueRange(\"thresholds.upper\", upper, ATTENUATION_DURATION_THRESHOLD_MIN, ATTENUATION_DURATION_THRESHOLD_MAX);\n \n     if (lower > upper) {\n       String parameters = \"attenuation-duration.thresholds.lower, attenuation-duration.thresholds.upper\";\n@@ -67,10 +73,10 @@ private void validateThresholds() {\n     }\n   }\n \n-  private void checkThresholdBound(String thresholdLabel, int thresholdValue) {\n-    if (thresholdValue < ATTENUATION_DURATION_THRESHOLD_MIN || thresholdValue > ATTENUATION_DURATION_THRESHOLD_MAX) {\n+  private void checkValueRange(String parameterLabel, int value, int min, int max) {\n+    if (value < min || value > max) {\n       this.errors.add(new GeneralValidationError(\n-          \"attenuation-duration.thresholds.\" + thresholdLabel, thresholdValue, VALUE_OUT_OF_BOUNDS));\n+          \"attenuation-duration.\" + parameterLabel, value, VALUE_OUT_OF_BOUNDS));\n     }\n   }\n \n@@ -91,4 +97,15 @@ private void checkWeight(String weightLabel, double weightValue) {\n           \"attenuation-duration.weights.\" + weightLabel, weightValue, TOO_MANY_DECIMAL_PLACES));\n     }\n   }\n+\n+  private void validateDefaultBucketOffset() {\n+    int bucketOffset = attenuationDuration.getDefaultBucketOffset();\n+    checkValueRange(\"default-bucket-offset\", bucketOffset, DEFAULT_BUCKET_OFFSET_MIN, DEFAULT_BUCKET_OFFSET_MAX);\n+  }\n+\n+  private void validateRiskScoreNormalizationDivisor() {\n+    int riskScoreNormalizationDivisor = attenuationDuration.getRiskScoreNormalizationDivisor();\n+    checkValueRange(\"risk-score-normalization-divisor\", riskScoreNormalizationDivisor,\n+        RISK_SCORE_NORMALIZATION_DIVISOR_MIN, RISK_SCORE_NORMALIZATION_DIVISOR_MAX);\n+  }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\n@@ -78,4 +78,25 @@ private ParameterSpec() {\n    * Maximum number of allowed decimals for an attenuation weight.\n    */\n   public static final int ATTENUATION_DURATION_WEIGHT_MAX_DECIMALS = 3;\n+\n+\n+  /**\n+   * The allowed minimum value for a default bucket offset.\n+   */\n+  public static final int DEFAULT_BUCKET_OFFSET_MIN = 0;\n+\n+  /**\n+   * The allowed maximum value for a default bucket offset.\n+   */\n+  public static final int DEFAULT_BUCKET_OFFSET_MAX = 1;\n+\n+  /**\n+   * The allowed minimum value for a risk score normalization divisor.\n+   */\n+  public static final int RISK_SCORE_NORMALIZATION_DIVISOR_MIN = 0;\n+\n+  /**\n+   * The allowed maximum value for a risk score normalization divisor.\n+   */\n+  public static final int RISK_SCORE_NORMALIZATION_DIVISOR_MAX = 1000;\n }\ndiff --git a/services/distribution/src/main/resources/master-config/attenuation-duration.yaml b/services/distribution/src/main/resources/master-config/attenuation-duration.yaml\n--- a/services/distribution/src/main/resources/master-config/attenuation-duration.yaml\n+++ b/services/distribution/src/main/resources/master-config/attenuation-duration.yaml\n@@ -4,6 +4,9 @@\n # Each of the aforementioned partitions has a weight in the range of [0, 1]\n # assigned to it. The number of decimal places is restricted to 3.\n #\n+# default-bucket-offset value range: {0, 1}\n+# risk-score-normalization-divisor value range: [1, 1000]\n+#\n # Change this file with caution!\n \n thresholds:\n@@ -13,3 +16,5 @@ weights:\n   low: 1.0\n   mid: 0.5\n   high: 0.0\n+default-bucket-offset: 0\n+risk-score-normalization-divisor: 25\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidatorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AttenuationDurationValidatorTest.java\n@@ -26,6 +26,10 @@\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MAX;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_WEIGHT_MIN;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.DEFAULT_BUCKET_OFFSET_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.DEFAULT_BUCKET_OFFSET_MIN;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.RISK_SCORE_NORMALIZATION_DIVISOR_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.RISK_SCORE_NORMALIZATION_DIVISOR_MIN;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.buildError;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.buildExpectedResult;\n import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType.OUT_OF_RANGE;\n@@ -44,12 +48,14 @@ public class AttenuationDurationValidatorTest {\n       buildThresholds(ATTENUATION_DURATION_THRESHOLD_MIN, ATTENUATION_DURATION_THRESHOLD_MAX);\n   private static final Weights VALID_WEIGHTS =\n       buildWeights(ATTENUATION_DURATION_WEIGHT_MAX, ATTENUATION_DURATION_WEIGHT_MAX, ATTENUATION_DURATION_WEIGHT_MAX);\n+  private static final int VALID_BUCKET_OFFSET = DEFAULT_BUCKET_OFFSET_MAX;\n+  private static final int VALID_NORMALIZATION_DIVISOR = RISK_SCORE_NORMALIZATION_DIVISOR_MIN;\n \n   @ParameterizedTest\n   @ValueSource(ints = {ATTENUATION_DURATION_THRESHOLD_MIN - 1, ATTENUATION_DURATION_THRESHOLD_MAX + 1})\n   void failsIfAttenuationDurationThresholdOutOfBounds(int invalidThresholdValue) {\n     AttenuationDurationValidator validator = buildValidator(\n-        buildThresholds(invalidThresholdValue, invalidThresholdValue), VALID_WEIGHTS);\n+        buildThresholds(invalidThresholdValue, invalidThresholdValue));\n \n     ValidationResult expectedResult = buildExpectedResult(\n         buildError(\"attenuation-duration.thresholds.lower\", invalidThresholdValue, VALUE_OUT_OF_BOUNDS),\n@@ -58,10 +64,35 @@ void failsIfAttenuationDurationThresholdOutOfBounds(int invalidThresholdValue) {\n     assertThat(validator.validate()).isEqualTo(expectedResult);\n   }\n \n+  @ParameterizedTest\n+  @ValueSource(ints = {DEFAULT_BUCKET_OFFSET_MIN - 1, DEFAULT_BUCKET_OFFSET_MAX + 1})\n+  void failsIfBucketOffsetOutOfBounds(int invalidDefaultBucketOffsetValue) {\n+    AttenuationDurationValidator validator = buildValidator(VALID_THRESHOLDS, VALID_WEIGHTS,\n+        invalidDefaultBucketOffsetValue, VALID_NORMALIZATION_DIVISOR);\n+\n+    ValidationResult expectedResult = buildExpectedResult(\n+        buildError(\"attenuation-duration.default-bucket-offset\", invalidDefaultBucketOffsetValue, VALUE_OUT_OF_BOUNDS));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(ints = {RISK_SCORE_NORMALIZATION_DIVISOR_MIN - 1, RISK_SCORE_NORMALIZATION_DIVISOR_MAX + 1})\n+  void failsIfRiskScoreNormalizationDivisorOutOfBounds(int invalidRiskScoreNormalizationDivisorValue) {\n+    AttenuationDurationValidator validator = buildValidator(VALID_THRESHOLDS, VALID_WEIGHTS, VALID_BUCKET_OFFSET,\n+        invalidRiskScoreNormalizationDivisorValue);\n+\n+    ValidationResult expectedResult = buildExpectedResult(\n+        buildError(\"attenuation-duration.risk-score-normalization-divisor\", invalidRiskScoreNormalizationDivisorValue,\n+            VALUE_OUT_OF_BOUNDS));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n   @Test\n   void failsIfUpperAttenuationDurationThresholdLesserThanLower() {\n     AttenuationDurationValidator validator = buildValidator(\n-        buildThresholds(ATTENUATION_DURATION_THRESHOLD_MAX, ATTENUATION_DURATION_THRESHOLD_MIN), VALID_WEIGHTS);\n+        buildThresholds(ATTENUATION_DURATION_THRESHOLD_MAX, ATTENUATION_DURATION_THRESHOLD_MIN));\n \n     ValidationResult expectedResult = buildExpectedResult(\n         new GeneralValidationError(\"attenuation-duration.thresholds.lower, attenuation-duration.thresholds.upper\",\n@@ -73,7 +104,7 @@ void failsIfUpperAttenuationDurationThresholdLesserThanLower() {\n   @ParameterizedTest\n   @ValueSource(doubles = {ATTENUATION_DURATION_WEIGHT_MIN - .1, ATTENUATION_DURATION_WEIGHT_MAX + .1})\n   void failsIfWeightsOutOfBounds(double invalidWeightValue) {\n-    AttenuationDurationValidator validator = buildValidator(VALID_THRESHOLDS,\n+    AttenuationDurationValidator validator = buildValidator(\n         buildWeights(invalidWeightValue, invalidWeightValue, invalidWeightValue));\n \n     ValidationResult expectedResult = buildExpectedResult(\n@@ -87,7 +118,7 @@ void failsIfWeightsOutOfBounds(double invalidWeightValue) {\n   @Test\n   void failsIfWeightsHaveTooManyDecimalPlaces() {\n     double invalidWeightValue = ATTENUATION_DURATION_WEIGHT_MAX - 0.0000001;\n-    AttenuationDurationValidator validator = buildValidator(VALID_THRESHOLDS,\n+    AttenuationDurationValidator validator = buildValidator(\n         buildWeights(invalidWeightValue, invalidWeightValue, invalidWeightValue));\n \n     ValidationResult expectedResult = buildExpectedResult(\n@@ -98,10 +129,22 @@ void failsIfWeightsHaveTooManyDecimalPlaces() {\n     assertThat(validator.validate()).isEqualTo(expectedResult);\n   }\n \n-  private static AttenuationDurationValidator buildValidator(Thresholds thresholds, Weights weights) {\n+  private static AttenuationDurationValidator buildValidator(Thresholds thresholds) {\n+    return buildValidator(thresholds, VALID_WEIGHTS, VALID_BUCKET_OFFSET, VALID_NORMALIZATION_DIVISOR);\n+  }\n+\n+  private static AttenuationDurationValidator buildValidator(Weights weights) {\n+    return buildValidator(VALID_THRESHOLDS, weights, VALID_BUCKET_OFFSET, VALID_NORMALIZATION_DIVISOR);\n+  }\n+\n+  private static AttenuationDurationValidator buildValidator(\n+      Thresholds thresholds, Weights weights, int defaultBucketOffset, int riskScoreNormalizationDivisor) {\n     return new AttenuationDurationValidator(AttenuationDuration.newBuilder()\n         .setThresholds(thresholds)\n-        .setWeights(weights).build());\n+        .setWeights(weights)\n+        .setDefaultBucketOffset(defaultBucketOffset)\n+        .setRiskScoreNormalizationDivisor(riskScoreNormalizationDivisor)\n+        .build());\n   }\n \n   private static Thresholds buildThresholds(int lower, int upper) {\ndiff --git a/services/distribution/src/test/resources/configtests/attenuation-duration.yaml b/services/distribution/src/test/resources/configtests/attenuation-duration.yaml\n--- a/services/distribution/src/test/resources/configtests/attenuation-duration.yaml\n+++ b/services/distribution/src/test/resources/configtests/attenuation-duration.yaml\n@@ -5,3 +5,5 @@ weights:\n   low: 1.0\n   mid: 0.5\n   high: 0.0\n+default-bucket-offset: 0\n+risk-score-normalization-divisor: 25\n",
        "problem_statement": "Application Configuration: Attenuation Duration Enhancements\nWe need two additional configuration variables for the attenuation duration, namely defaultBucketOffset and riskScoreNormalizationDivisor.\r\n\r\nThe target config should look like this:\r\n\r\n```yaml\r\ndefault-bucket-offset: 0 # discussed as W4\r\nrisk-score-normalization-divisor: 25 # discussed as W5 \r\nthresholds:\r\n  lower: 50\r\n  upper: 70\r\nweights:\r\n  low: 1.0\r\n  mid: 0.5\r\n  high: 0.0\r\n```\r\n\r\nValue range for bucket offset: 0 or 1 (int)\r\nrisk score normalization divisor: 1...1000 (int)\n",
        "hints_text": "@michael-burwig \nProposed .proto file:\r\n```\r\nsyntax = \"proto3\";\r\npackage app.coronawarn.server.common.protocols.internal;\r\noption java_package = \"app.coronawarn.server.common.protocols.internal\";\r\noption java_multiple_files = true;\r\n\r\nmessage AttenuationDuration {\r\n  Thresholds thresholds = 1;\r\n  Weights weights = 2;\r\n  int32 defaultBucketOffset = 3;\r\n  int32 riskScoreNormalizationDivisor = 4;\r\n}\r\n\r\nmessage Thresholds {\r\n  int32 lower = 1;\r\n  int32 upper = 2;\r\n}\r\n\r\nmessage Weights {\r\n  double low = 1;\r\n  double mid = 2;\r\n  double high = 3;\r\n}\r\n```",
        "created_at": "2020-06-03T19:38:59Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-346",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nRetention: Enforce period on Object Store\nCurrently, the retention period is only enforced for keys on the database, but it should be enforced on the S3 as well.\r\n\r\nTherefore, we need to delete the items on the S3, when the retention policy is reached.\r\n\r\nWhen the retention mechanism is kicked off, and then delete the following keys with the prefix:\r\n`version/v1/diagnosis-keys/country/DE/date/<RETENTIONDATE>`\r\nWhere RETENTIONDATE is `current date - retention period`.\r\n\r\nIdeally, we should also try to delete older items as well, in case the retention run did not succeed or did not run at all.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"b69ab69f-9823-4549-8961-c41sa74b2f36\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json)](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile      | Effect\n148 -------------|-------------\n149 `dev`        | Turns the log level to `DEBUG` and sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n150 `cloud`      | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`       | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten.\n152 `testdata`   | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 \n154 ### Submission\n155 \n156 Profile      | Effect\n157 -------------|-------------\n158 `dev`        | Turns the log level to `DEBUG`.\n159 `cloud`      | Removes default values for the `datasource` configuration.\n160 \n161 ## Documentation\n162 \n163 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n164 \n165 ## Support and Feedback\n166 \n167 The following channels are available for discussions, feedback, and support requests:\n168 \n169 | Type                     | Channel                                                |\n170 | ------------------------ | ------------------------------------------------------ |\n171 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n172 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n173 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n174 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n175 \n176 ## How to Contribute\n177 \n178 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n179 \n180 ## Contributors\n181 \n182 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n183 \n184 ## Repositories\n185 \n186 The following public repositories are currently available for the Corona-Warn-App:\n187 \n188 | Repository          | Description                                                           |\n189 | ------------------- | --------------------------------------------------------------------- |\n190 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n191 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n192 | [cwa-verification-server] | Backend implementation of the verification process|\n193 \n194 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n195 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n196 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n197 [Postgres]: https://www.postgresql.org/\n198 [HSQLDB]: http://hsqldb.org/\n199 [Zenko CloudServer]: https://github.com/scality/cloudserver\n200 \n201 ## Licensing\n202 \n203 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n204 \n205 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n206 \n207 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n208 \n209 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n210 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.objectstore;\n21 \n22 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n23 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;\n24 import app.coronawarn.server.services.distribution.objectstore.publish.LocalFile;\n25 import io.minio.MinioClient;\n26 import io.minio.PutObjectOptions;\n27 import io.minio.Result;\n28 import io.minio.errors.InvalidEndpointException;\n29 import io.minio.errors.InvalidPortException;\n30 import io.minio.errors.MinioException;\n31 import io.minio.messages.DeleteError;\n32 import io.minio.messages.Item;\n33 import java.io.IOException;\n34 import java.security.GeneralSecurityException;\n35 import java.util.ArrayList;\n36 import java.util.List;\n37 import java.util.Map;\n38 import java.util.stream.Collectors;\n39 import org.slf4j.Logger;\n40 import org.slf4j.LoggerFactory;\n41 import org.springframework.stereotype.Component;\n42 \n43 /**\n44  * <p>Grants access to the S3 compatible object storage hosted by Telekom in Germany, enabling\n45  * basic functionality for working with files.</p>\n46  * <br>\n47  * Make sure the following properties are available on the env:\n48  * <ul>\n49  * <li>services.distribution.objectstore.endpoint</li>\n50  * <li>services.distribution.objectstore.bucket</li>\n51  * <li>services.distribution.objectstore.accessKey</li>\n52  * <li>services.distribution.objectstore.secretKey</li>\n53  * <li>services.distribution.objectstore.port</li>\n54  * </ul>\n55  */\n56 @Component\n57 public class ObjectStoreAccess {\n58 \n59   private static final Logger logger = LoggerFactory.getLogger(ObjectStoreAccess.class);\n60 \n61   private static final String DEFAULT_REGION = \"eu-west-1\";\n62 \n63   private final boolean isSetPublicReadAclOnPutObject;\n64 \n65   private final String bucket;\n66 \n67   private final MinioClient client;\n68 \n69   /**\n70    * Constructs an {@link ObjectStoreAccess} instance for communication with the specified object store endpoint and\n71    * bucket.\n72    *\n73    * @param distributionServiceConfig The config properties\n74    * @throws IOException              When there were problems creating the S3 client\n75    * @throws GeneralSecurityException When there were problems creating the S3 client\n76    * @throws MinioException           When there were problems creating the S3 client\n77    */\n78   ObjectStoreAccess(DistributionServiceConfig distributionServiceConfig)\n79       throws IOException, GeneralSecurityException, MinioException {\n80     this.client = createClient(distributionServiceConfig.getObjectStore());\n81 \n82     this.bucket = distributionServiceConfig.getObjectStore().getBucket();\n83     this.isSetPublicReadAclOnPutObject = distributionServiceConfig.getObjectStore().isSetPublicReadAclOnPutObject();\n84 \n85     if (!this.client.bucketExists(this.bucket)) {\n86       throw new IllegalArgumentException(\"Supplied bucket does not exist \" + bucket);\n87     }\n88   }\n89 \n90   private MinioClient createClient(ObjectStore objectStore)\n91       throws InvalidPortException, InvalidEndpointException {\n92     if (isSsl(objectStore)) {\n93       return new MinioClient(\n94           objectStore.getEndpoint(),\n95           objectStore.getPort(),\n96           objectStore.getAccessKey(), objectStore.getSecretKey(),\n97           DEFAULT_REGION,\n98           true\n99       );\n100     } else {\n101       return new MinioClient(\n102           objectStore.getEndpoint(),\n103           objectStore.getPort(),\n104           objectStore.getAccessKey(), objectStore.getSecretKey()\n105       );\n106     }\n107   }\n108 \n109   private boolean isSsl(ObjectStore objectStore) {\n110     return objectStore.getEndpoint().startsWith(\"https://\");\n111   }\n112 \n113   /**\n114    * Stores the target file on the S3.\n115    *\n116    * @param localFile the file to be published\n117    */\n118   public void putObject(LocalFile localFile)\n119       throws IOException, GeneralSecurityException, MinioException {\n120     String s3Key = localFile.getS3Key();\n121     PutObjectOptions options = createOptionsFor(localFile);\n122 \n123     logger.info(\"... uploading {}\", s3Key);\n124     this.client.putObject(bucket, s3Key, localFile.getFile().toString(), options);\n125   }\n126 \n127   /**\n128    * Deletes objects in the object store, based on the given prefix (folder structure).\n129    *\n130    * @param prefix the prefix, e.g. my/folder/\n131    */\n132   public List<DeleteError> deleteObjectsWithPrefix(String prefix)\n133       throws MinioException, GeneralSecurityException, IOException {\n134     List<String> toDelete = getObjectsWithPrefix(prefix)\n135         .stream()\n136         .map(S3Object::getObjectName)\n137         .collect(Collectors.toList());\n138 \n139     logger.info(\"Deleting {} entries with prefix {}\", toDelete.size(), prefix);\n140     var deletionResponse = this.client.removeObjects(bucket, toDelete);\n141 \n142     List<DeleteError> errors = new ArrayList<>();\n143     for (Result<DeleteError> deleteErrorResult : deletionResponse) {\n144       errors.add(deleteErrorResult.get());\n145     }\n146 \n147     logger.info(\"Deletion result: {}\", errors.size());\n148 \n149     return errors;\n150   }\n151 \n152   /**\n153    * Fetches the list of objects in the store with the given prefix.\n154    *\n155    * @param prefix the prefix, e.g. my/folder/\n156    * @return the list of objects\n157    */\n158   public List<S3Object> getObjectsWithPrefix(String prefix)\n159       throws IOException, GeneralSecurityException, MinioException {\n160     var objects = this.client.listObjects(bucket, prefix, true);\n161 \n162     var list = new ArrayList<S3Object>();\n163     for (Result<Item> item : objects) {\n164       list.add(S3Object.of(item.get()));\n165     }\n166 \n167     return list;\n168   }\n169 \n170   private PutObjectOptions createOptionsFor(LocalFile file) {\n171     var options = new PutObjectOptions(file.getFile().toFile().length(), -1);\n172 \n173     if (this.isSetPublicReadAclOnPutObject) {\n174       options.setHeaders(Map.of(\"x-amz-acl\", \"public-read\"));\n175     }\n176 \n177     return options;\n178   }\n179 \n180 }\n181 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.runner;\n21 \n22 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n23 import app.coronawarn.server.services.distribution.Application;\n24 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n25 import org.slf4j.Logger;\n26 import org.slf4j.LoggerFactory;\n27 import org.springframework.boot.ApplicationArguments;\n28 import org.springframework.boot.ApplicationRunner;\n29 import org.springframework.context.ApplicationContext;\n30 import org.springframework.core.annotation.Order;\n31 import org.springframework.stereotype.Component;\n32 \n33 /**\n34  * This runner removes any diagnosis keys from the database that were submitted before a configured threshold of days.\n35  */\n36 @Component\n37 @Order(1)\n38 public class RetentionPolicy implements ApplicationRunner {\n39 \n40   private static final Logger logger = LoggerFactory\n41       .getLogger(RetentionPolicy.class);\n42 \n43   private final DiagnosisKeyService diagnosisKeyService;\n44 \n45   private final ApplicationContext applicationContext;\n46 \n47   private final Integer retentionDays;\n48 \n49   /**\n50    * Creates a new RetentionPolicy.\n51    */\n52   RetentionPolicy(DiagnosisKeyService diagnosisKeyService,\n53       ApplicationContext applicationContext,\n54       DistributionServiceConfig distributionServiceConfig) {\n55     this.diagnosisKeyService = diagnosisKeyService;\n56     this.applicationContext = applicationContext;\n57     this.retentionDays = distributionServiceConfig.getRetentionDays();\n58   }\n59 \n60   @Override\n61   public void run(ApplicationArguments args) {\n62     try {\n63       diagnosisKeyService.applyRetentionPolicy(retentionDays);\n64     } catch (Exception e) {\n65       logger.error(\"Application of retention policy failed.\", e);\n66       Application.killApplication(applicationContext);\n67     }\n68 \n69     logger.debug(\"Retention policy applied successfully. Deleted all entries older that {} days.\",\n70         retentionDays);\n71   }\n72 }\n73 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java\n@@ -62,7 +62,7 @@ public void run(ApplicationArguments args) {\n     try {\n       diagnosisKeyService.applyRetentionPolicy(retentionDays);\n     } catch (Exception e) {\n-      logger.error(\"Application of retention policy failed.\", e);\n+      logger.error(\"Application of retention policy failed. {}\", e.getMessage());\n       Application.killApplication(applicationContext);\n     }\n \n@@ -69,4 +69,4 @@ public void run(ApplicationArguments args) {\n     logger.debug(\"Retention policy applied successfully. Deleted all entries older that {} days.\",\n         retentionDays);\n   }\n-}\n\\ No newline at end of file\n+}\n\\ No newline at end of file",
        "model_patch": "--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java\n@@ -62,7 +62,7 @@ public void run(ApplicationArguments args) {\n     try {\n       diagnosisKeyService.applyRetentionPolicy(retentionDays);\n     } catch (Exception e) {\n-      logger.error(\"Application of retention policy failed.\", e);\n+      logger.error(\"Application of retention policy failed. {}\", e.getMessage());\n       Application.killApplication(applicationContext);\n     }\n \n@@ -69,4 +69,4 @@ public void run(ApplicationArguments args) {\n     logger.debug(\"Retention policy applied successfully. Deleted all entries older that {} days.\",\n         retentionDays);\n   }\n-}\n\\ No newline at end of file\n+}\n\\ No newline at end of file",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 346,
        "issue_numbers": [
            "329"
        ],
        "base_commit": "92f3c9bd98420cd26c4216cace3e481874be6140",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccess.java\n@@ -129,7 +129,7 @@ public void putObject(LocalFile localFile)\n    *\n    * @param prefix the prefix, e.g. my/folder/\n    */\n-  public List<DeleteError> deleteObjectsWithPrefix(String prefix)\n+  public void deleteObjectsWithPrefix(String prefix)\n       throws MinioException, GeneralSecurityException, IOException {\n     List<String> toDelete = getObjectsWithPrefix(prefix)\n         .stream()\n@@ -144,9 +144,9 @@ public List<DeleteError> deleteObjectsWithPrefix(String prefix)\n       errors.add(deleteErrorResult.get());\n     }\n \n-    logger.info(\"Deletion result: {}\", errors.size());\n-\n-    return errors;\n+    if (!errors.isEmpty()) {\n+      throw new MinioException(\"Can't delete files, number of errors: \" + errors.size());\n+    }\n   }\n \n   /**\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java\n@@ -0,0 +1,90 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.objectstore;\n+\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.Api;\n+import io.minio.errors.MinioException;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.security.GeneralSecurityException;\n+import java.time.LocalDate;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Creates an S3RetentionPolicy object, which applies the retention policy to the S3 compatible storage.\n+ */\n+@Component\n+public class S3RetentionPolicy {\n+\n+  private final ObjectStoreAccess objectStoreAccess;\n+  private final Api api;\n+\n+  @Autowired\n+  public S3RetentionPolicy(ObjectStoreAccess objectStoreAccess, DistributionServiceConfig distributionServiceConfig) {\n+    this.objectStoreAccess = objectStoreAccess;\n+    this.api = distributionServiceConfig.getApi();\n+  }\n+\n+  /**\n+   * Deletes all diagnosis-key files from S3 that are older than retentionDays.\n+   *\n+   * @param retentionDays the number of days, that files should be retained on S3.\n+   */\n+  public void applyRetentionPolicy(int retentionDays) throws MinioException, GeneralSecurityException, IOException {\n+    List<S3Object> diagnosisKeysObjects = objectStoreAccess.getObjectsWithPrefix(\"version/v1/\"\n+        + api.getDiagnosisKeysPath() + \"/\"\n+        + api.getCountryPath() + \"/\"\n+        + api.getCountryGermany() + \"/\"\n+        + api.getDatePath() + \"/\");\n+    final String regex = \".*([0-9]{4}-[0-9]{2}-[0-9]{2}).*\";\n+    final Pattern pattern = Pattern.compile(regex);\n+\n+    final LocalDate cutOffDate = LocalDate.now(ZoneOffset.UTC).minusDays(retentionDays);\n+\n+    diagnosisKeysObjects.stream()\n+        .filter(diagnosisKeysObject -> {\n+          Matcher matcher = pattern.matcher(diagnosisKeysObject.getObjectName());\n+          return matcher.matches() && LocalDate.parse(matcher.group(1), DateTimeFormatter.ISO_LOCAL_DATE)\n+              .isBefore(cutOffDate);\n+        })\n+        .forEach(this::deleteDiagnosisKey);\n+  }\n+\n+  /**\n+   * Java stream do not support checked exceptions within streams. This helper method rethrows them as unchecked\n+   * expressions, so they can be passed up to the Retention Policy.\n+   *\n+   * @param diagnosisKey the  diagnosis key, that should be deleted.\n+   */\n+  public void deleteDiagnosisKey(S3Object diagnosisKey) {\n+    try {\n+      objectStoreAccess.deleteObjectsWithPrefix(diagnosisKey.getObjectName());\n+    } catch (Exception e) {\n+      throw new UncheckedIOException(new IOException(e));\n+    }\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/RetentionPolicy.java\n@@ -22,6 +22,7 @@\n import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n import app.coronawarn.server.services.distribution.Application;\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import app.coronawarn.server.services.distribution.objectstore.S3RetentionPolicy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.boot.ApplicationArguments;\n@@ -46,27 +47,32 @@ public class RetentionPolicy implements ApplicationRunner {\n \n   private final Integer retentionDays;\n \n+  private final S3RetentionPolicy s3RetentionPolicy;\n+\n   /**\n    * Creates a new RetentionPolicy.\n    */\n   RetentionPolicy(DiagnosisKeyService diagnosisKeyService,\n       ApplicationContext applicationContext,\n-      DistributionServiceConfig distributionServiceConfig) {\n+      DistributionServiceConfig distributionServiceConfig,\n+      S3RetentionPolicy s3RetentionPolicy) {\n     this.diagnosisKeyService = diagnosisKeyService;\n     this.applicationContext = applicationContext;\n     this.retentionDays = distributionServiceConfig.getRetentionDays();\n+    this.s3RetentionPolicy = s3RetentionPolicy;\n   }\n \n   @Override\n   public void run(ApplicationArguments args) {\n     try {\n       diagnosisKeyService.applyRetentionPolicy(retentionDays);\n+      s3RetentionPolicy.applyRetentionPolicy(retentionDays);\n     } catch (Exception e) {\n       logger.error(\"Application of retention policy failed.\", e);\n       Application.killApplication(applicationContext);\n     }\n \n-    logger.debug(\"Retention policy applied successfully. Deleted all entries older that {} days.\",\n+    logger.debug(\"Retention policy applied successfully. Deleted all entries older than {} days.\",\n         retentionDays);\n   }\n }\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicyTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicyTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicyTest.java\n@@ -0,0 +1,92 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.objectstore;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;\n+import io.minio.errors.MinioException;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.time.LocalDate;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {S3RetentionPolicy.class, ObjectStore.class},\n+    initializers = ConfigFileApplicationContextInitializer.class)\n+class S3RetentionPolicyTest {\n+\n+  @MockBean\n+  private ObjectStoreAccess objectStoreAccess;\n+\n+  @Autowired\n+  private S3RetentionPolicy s3RetentionPolicy;\n+\n+  @Autowired DistributionServiceConfig distributionServiceConfig;\n+\n+  @Test\n+  void shouldDeleteOldFiles() throws IOException, GeneralSecurityException, MinioException {\n+    String expectedFileToBeDeleted = generateFileName(LocalDate.now().minusDays(2));\n+\n+    when(objectStoreAccess.getObjectsWithPrefix(any())).thenReturn(List.of(\n+        new S3Object(expectedFileToBeDeleted),\n+        new S3Object(generateFileName(LocalDate.now())),\n+        new S3Object(\"version/v1/configuration/country/DE/app_config\")));\n+\n+    s3RetentionPolicy.applyRetentionPolicy(1);\n+\n+    verify(objectStoreAccess, atLeastOnce()).deleteObjectsWithPrefix(eq(expectedFileToBeDeleted));\n+  }\n+\n+  @Test\n+  void shouldNotDeleteFilesIfAllAreValid() throws IOException, GeneralSecurityException, MinioException {\n+    when(objectStoreAccess.getObjectsWithPrefix(any())).thenReturn(List.of(\n+        new S3Object(generateFileName(LocalDate.now().minusDays(1))),\n+        new S3Object(generateFileName(LocalDate.now().plusDays(1))),\n+        new S3Object(generateFileName(LocalDate.now())),\n+        new S3Object(\"version/v1/configuration/country/DE/app_config\")));\n+\n+    s3RetentionPolicy.applyRetentionPolicy(1);\n+\n+    verify(objectStoreAccess, never()).deleteObjectsWithPrefix(any());\n+  }\n+\n+  private String generateFileName(LocalDate date) {\n+    var api = distributionServiceConfig.getApi();\n+\n+    return \"version/v1/\" + api.getDiagnosisKeysPath() + \"/\"  + api.getCountryPath() + \"/\"\n+        + api.getCountryGermany() + \"/\" + api.getDatePath() + \"/\" + date.toString() + \"/hour/0\";\n+  }\n+}\n",
        "problem_statement": "Retention: Enforce period on Object Store\nCurrently, the retention period is only enforced for keys on the database, but it should be enforced on the S3 as well.\r\n\r\nTherefore, we need to delete the items on the S3, when the retention policy is reached.\r\n\r\nWhen the retention mechanism is kicked off, and then delete the following keys with the prefix:\r\n`version/v1/diagnosis-keys/country/DE/date/<RETENTIONDATE>`\r\nWhere RETENTIONDATE is `current date - retention period`.\r\n\r\nIdeally, we should also try to delete older items as well, in case the retention run did not succeed or did not run at all.\n",
        "hints_text": "I propose to just remove the \"delta upload\" feature from the S3Publisher (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java#L75)) and instead just wipe the whole bucket on every distribution run and to upload everything anew. This way, the only place where retention policies need to be applied is the DB as a single source of truth (which is already done) and we remove some moving parts and complexity that could potentially cause problems. Also see review comment [here](https://github.com/corona-warn-app/cwa-server/pull/147#discussion_r426311639).",
        "created_at": "2020-05-27T15:03:01Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-352",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nSonar - Mitigate/Audit synchronized class \"Stack\"\nSee https://sonarcloud.io/project/issues?id=corona-warn-app_cwa-server&issues=AXI3CJu7vPFV4POpyUFA&open=AXI3CJu7vPFV4POpyUFA\r\n\r\nStrongly consider using existing [data structure implementations.](https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/stack/ImmutableStack.html)\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"b69ab69f-9823-4549-8961-c41sa74b2f36\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json)](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile      | Effect\n148 -------------|-------------\n149 `dev`        | Turns the log level to `DEBUG` and sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n150 `cloud`      | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`       | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten.\n152 `testdata`   | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 \n154 ### Submission\n155 \n156 Profile      | Effect\n157 -------------|-------------\n158 `dev`        | Turns the log level to `DEBUG`.\n159 `cloud`      | Removes default values for the `datasource` configuration.\n160 \n161 ## Documentation\n162 \n163 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n164 \n165 ## Support and Feedback\n166 \n167 The following channels are available for discussions, feedback, and support requests:\n168 \n169 | Type                     | Channel                                                |\n170 | ------------------------ | ------------------------------------------------------ |\n171 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n172 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n173 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n174 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n175 \n176 ## How to Contribute\n177 \n178 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n179 \n180 ## Contributors\n181 \n182 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n183 \n184 ## Repositories\n185 \n186 The following public repositories are currently available for the Corona-Warn-App:\n187 \n188 | Repository          | Description                                                           |\n189 | ------------------- | --------------------------------------------------------------------- |\n190 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n191 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n192 | [cwa-verification-server] | Backend implementation of the verification process|\n193 \n194 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n195 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n196 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n197 [Postgres]: https://www.postgresql.org/\n198 [HSQLDB]: http://hsqldb.org/\n199 [Zenko CloudServer]: https://github.com/scality/cloudserver\n200 \n201 ## Licensing\n202 \n203 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n204 \n205 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n206 \n207 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n208 \n209 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n210 \n[end of README.md]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.structure.directory;\n21 \n22 import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n23 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n24 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.Formatter;\n25 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.WritableFunction;\n26 import java.util.Set;\n27 import java.util.Stack;\n28 \n29 /**\n30  * A \"meta {@link Directory directory}\" that maps its on-disk subdirectories to some list of elements. This list of\n31  * elements is determined by a {@link WritableFunction}.\n32  *\n33  * @param <W> The specific type of {@link Writable} that this {@link IndexDirectory} can be a child of.\n34  * @param <T> The type of the elements in the index.\n35  */\n36 public interface IndexDirectory<T, W extends Writable<W>> extends Directory<W> {\n37 \n38   /**\n39    * Adds a writable under the name {@code name}, whose content is calculated by the {@code writableFunction} to each\n40    * one of the directories created from the index. The {@code fileFunction} calculates the file content from a {@link\n41    * java.util.Stack} of parent {@link IndexDirectoryOnDisk} indices. File content calculation happens on {@link\n42    * DirectoryOnDisk#write}.\n43    *\n44    * @param writableFunction A function that can output a new writable.\n45    */\n46   void addWritableToAll(WritableFunction<W> writableFunction);\n47 \n48   /**\n49    * Calls the {@link app.coronawarn.server.services.distribution.assembly.structure.util.functional.IndexFunction} with\n50    * the {@code indices} to calculate and return the elements of the index of this {@link IndexDirectory}.\n51    *\n52    * @param indices A {@link Stack} of parameters from all {@link IndexDirectory IndexDirectories} further up in the\n53    *                hierarchy. The Stack may contain different types, depending on the types {@code T} of {@link\n54    *                IndexDirectory IndexDirectories} further up in the hierarchy.\n55    */\n56   Set<T> getIndex(ImmutableStack<Object> indices);\n57 \n58   /**\n59    * Returns the function used to format elements of the index (e.g. for writing to disk).\n60    */\n61   Formatter<T> getIndexFormatter();\n62 }\n63 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.structure.directory;\n21 \n22 import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n23 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n24 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n25 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.Formatter;\n26 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.IndexFunction;\n27 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.WritableFunction;\n28 import java.util.HashSet;\n29 import java.util.Set;\n30 import java.util.Stack;\n31 \n32 /**\n33  * An {@link IndexDirectory} that can be written to disk.\n34  *\n35  * @param <T> The type of the elements in the index.\n36  */\n37 public class IndexDirectoryOnDisk<T> extends DirectoryOnDisk implements IndexDirectory<T, WritableOnDisk> {\n38 \n39   // Writables to be written into every directory created through the index\n40   private final Set<WritableFunction<WritableOnDisk>> metaWritables = new HashSet<>();\n41   private final IndexFunction<T> indexFunction;\n42   private final Formatter<T> indexFormatter;\n43 \n44   /**\n45    * Constructs a {@link IndexDirectoryOnDisk} instance that represents a directory, containing an index in the form of\n46    * sub directories.\n47    *\n48    * @param name           The name that this directory should have on disk.\n49    * @param indexFunction  An {@link IndexFunction} that calculates the index of this {@link IndexDirectoryOnDisk} from\n50    *                       a {@link java.util.Stack} of parent {@link IndexDirectoryOnDisk} indices. The top element of\n51    *                       the stack is from the closest {@link IndexDirectoryOnDisk} in the parent chain.\n52    * @param indexFormatter A {@link Formatter} used to format the directory name for each index element returned by the\n53    *                       {@link IndexDirectoryOnDisk#indexFunction}.\n54    */\n55   public IndexDirectoryOnDisk(String name, IndexFunction<T> indexFunction, Formatter<T> indexFormatter) {\n56     super(name);\n57     this.indexFunction = indexFunction;\n58     this.indexFormatter = indexFormatter;\n59   }\n60 \n61   @Override\n62   public Formatter<T> getIndexFormatter() {\n63     return this.indexFormatter;\n64   }\n65 \n66   @Override\n67   public Set<T> getIndex(ImmutableStack<Object> indices) {\n68     return this.indexFunction.apply(indices);\n69   }\n70 \n71   @Override\n72   public void addWritableToAll(WritableFunction<WritableOnDisk> writableFunction) {\n73     this.metaWritables.add(writableFunction);\n74   }\n75 \n76   /**\n77    * Creates a new subdirectory for every element of the {@link IndexDirectory#getIndex index} and writes all its\n78    * {@link IndexDirectory#addWritableToAll writables} to those. The respective element of the index will be pushed\n79    * onto the Stack for subsequent {@link Writable#prepare} calls.\n80    *\n81    * @param indices A {@link Stack} of parameters from all {@link IndexDirectory IndexDirectories} further up in the\n82    *                hierarchy. The Stack may contain different types, depending on the types {@code T} of\n83    *                {@link IndexDirectory IndexDirectories} further up in the hierarchy.\n84    */\n85   @Override\n86   public void prepare(ImmutableStack<Object> indices) {\n87     super.prepare(indices);\n88     this.prepareIndex(indices);\n89   }\n90 \n91   private void prepareIndex(ImmutableStack<Object> indices) {\n92     this.getIndex(indices).forEach(currentIndex -> {\n93       ImmutableStack<Object> newIndices = indices.push(currentIndex);\n94       DirectoryOnDisk subDirectory = makeSubDirectory(currentIndex);\n95       prepareMetaWritables(newIndices, subDirectory);\n96     });\n97   }\n98 \n99   private DirectoryOnDisk makeSubDirectory(T index) {\n100     DirectoryOnDisk subDirectory = new DirectoryOnDisk(this.indexFormatter.apply(index).toString());\n101     this.addWritable(subDirectory);\n102     return subDirectory;\n103   }\n104 \n105   private void prepareMetaWritables(ImmutableStack<Object> indices, DirectoryOnDisk target) {\n106     this.metaWritables.forEach(metaWritableFunction -> {\n107       Writable<WritableOnDisk> newWritable = metaWritableFunction.apply(indices);\n108       target.addWritable(newWritable);\n109       newWritable.prepare(indices);\n110     });\n111   }\n112 }\n113 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStack.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.structure.util;\n21 \n22 import java.util.Stack;\n23 \n24 public class ImmutableStack<T> {\n25 \n26   private final Stack<T> stack;\n27 \n28   public ImmutableStack() {\n29     this.stack = new Stack<>();\n30   }\n31 \n32   /**\n33    * Creates a clone of the specified {@link ImmutableStack}.\n34    */\n35   public ImmutableStack(ImmutableStack<T> other) {\n36     this.stack = (Stack<T>) other.stack.clone();\n37   }\n38 \n39   /**\n40    * Returns a clone of this stack that contains the specified item at its top position.\n41    */\n42   public ImmutableStack<T> push(T item) {\n43     ImmutableStack<T> clone = new ImmutableStack<>(this);\n44     clone.stack.push(item);\n45     return clone;\n46   }\n47 \n48   /**\n49    * Returns a clone of this stack with its top element removed.\n50    */\n51   public ImmutableStack<T> pop() {\n52     ImmutableStack<T> clone = new ImmutableStack<>(this);\n53     clone.stack.pop();\n54     return clone;\n55   }\n56 \n57   public T peek() {\n58     return this.stack.peek();\n59   }\n60 }\n61 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStack.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java\n@@ -36,7 +36,7 @@ public interface IndexDirectory<T, W extends Writable<W>> extends Directory<W> {\n    * @param writableFunction A function that can output a new writable.\n    */\n   void addWritableToAll(WritableFunction<W> writableFunction);\n-  \n+\n   /**\n    * Calls the {@link app.coronawarn.server.services.distribution.assembly.structure.util.functional.IndexFunction} with\n    * the {@code indices} to calculate and return the elements of the index of this {@link IndexDirectory}.\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java\n@@ -36,7 +36,7 @@ public interface IndexDirectory<T, W extends Writable<W>> extends Directory<W> {\n    * @param writableFunction A function that can output a new writable.\n    */\n   void addWritableToAll(WritableFunction<W> writableFunction);\n-  \n+\n   /**\n    * Calls the {@link app.coronawarn.server.services.distribution.assembly.structure.util.functional.IndexFunction} with\n    * the {@code indices} to calculate and return the elements of the index of this {@link IndexDirectory}.\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 352,
        "issue_numbers": [
            "271"
        ],
        "base_commit": "207bdd8d4d701ab8df608db7caa9f2613fa86b84",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectory.java\n@@ -24,7 +24,6 @@\n import app.coronawarn.server.services.distribution.assembly.structure.util.functional.Formatter;\n import app.coronawarn.server.services.distribution.assembly.structure.util.functional.WritableFunction;\n import java.util.Set;\n-import java.util.Stack;\n \n /**\n  * A \"meta {@link Directory directory}\" that maps its on-disk subdirectories to some list of elements. This list of\n@@ -38,7 +37,7 @@ public interface IndexDirectory<T, W extends Writable<W>> extends Directory<W> {\n   /**\n    * Adds a writable under the name {@code name}, whose content is calculated by the {@code writableFunction} to each\n    * one of the directories created from the index. The {@code fileFunction} calculates the file content from a {@link\n-   * java.util.Stack} of parent {@link IndexDirectoryOnDisk} indices. File content calculation happens on {@link\n+   * ImmutableStack} of parent {@link IndexDirectoryOnDisk} indices. File content calculation happens on {@link\n    * DirectoryOnDisk#write}.\n    *\n    * @param writableFunction A function that can output a new writable.\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java\n@@ -27,7 +27,6 @@\n import app.coronawarn.server.services.distribution.assembly.structure.util.functional.WritableFunction;\n import java.util.HashSet;\n import java.util.Set;\n-import java.util.Stack;\n \n /**\n  * An {@link IndexDirectory} that can be written to disk.\n@@ -47,7 +46,7 @@ public class IndexDirectoryOnDisk<T> extends DirectoryOnDisk implements IndexDir\n    *\n    * @param name           The name that this directory should have on disk.\n    * @param indexFunction  An {@link IndexFunction} that calculates the index of this {@link IndexDirectoryOnDisk} from\n-   *                       a {@link java.util.Stack} of parent {@link IndexDirectoryOnDisk} indices. The top element of\n+   *                       a {@link ImmutableStack} of parent {@link IndexDirectoryOnDisk} indices. The top element of\n    *                       the stack is from the closest {@link IndexDirectoryOnDisk} in the parent chain.\n    * @param indexFormatter A {@link Formatter} used to format the directory name for each index element returned by the\n    *                       {@link IndexDirectoryOnDisk#indexFunction}.\n@@ -78,9 +77,9 @@ public void addWritableToAll(WritableFunction<WritableOnDisk> writableFunction)\n    * {@link IndexDirectory#addWritableToAll writables} to those. The respective element of the index will be pushed\n    * onto the Stack for subsequent {@link Writable#prepare} calls.\n    *\n-   * @param indices A {@link Stack} of parameters from all {@link IndexDirectory IndexDirectories} further up in the\n-   *                hierarchy. The Stack may contain different types, depending on the types {@code T} of\n-   *                {@link IndexDirectory IndexDirectories} further up in the hierarchy.\n+   * @param indices A {@link ImmutableStack} of parameters from all {@link IndexDirectory IndexDirectories} further up\n+   *                in the hierarchy. The Stack may contain different types, depending on the types {@code T} of {@link\n+   *                IndexDirectory IndexDirectories} further up in the hierarchy.\n    */\n   @Override\n   public void prepare(ImmutableStack<Object> indices) {\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStack.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStack.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStack.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStack.java\n@@ -19,21 +19,22 @@\n \n package app.coronawarn.server.services.distribution.assembly.structure.util;\n \n-import java.util.Stack;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n \n public class ImmutableStack<T> {\n \n-  private final Stack<T> stack;\n+  private final Deque<T> stack;\n \n   public ImmutableStack() {\n-    this.stack = new Stack<>();\n+    this.stack = new ArrayDeque<>();\n   }\n \n   /**\n    * Creates a clone of the specified {@link ImmutableStack}.\n    */\n   public ImmutableStack(ImmutableStack<T> other) {\n-    this.stack = (Stack<T>) other.stack.clone();\n+    this.stack = new ArrayDeque<>(other.stack);\n   }\n \n   /**\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStackTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStackTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStackTest.java\n@@ -0,0 +1,69 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.structure.util;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayDeque;\n+import java.util.NoSuchElementException;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+\n+class ImmutableStackTest {\n+\n+  private final ImmutableStack<String> stack =\n+      new ImmutableStack<String>().push(\"Joker\").push(\"Queen\").push(\"King\");\n+\n+  @Test\n+  void checkPushes() {\n+    var newStack = stack.push(\"Ace\");\n+\n+    assertThat(newStack).isNotSameAs(stack);\n+    assertThat(newStack.peek()).isEqualTo(\"Ace\");\n+    assertThat(stack.peek()).isEqualTo(\"King\");\n+  }\n+\n+  @Test\n+  void checkPops() {\n+    var newStack = stack.pop();\n+\n+    assertThat(newStack).isNotSameAs(stack);\n+    assertThat(newStack.peek()).isEqualTo(\"Queen\");\n+    assertThat(stack.peek()).isEqualTo(\"King\");\n+  }\n+\n+  @Test\n+  void checkPeeks() {\n+    assertThat(stack.peek()).isEqualTo(\"King\");\n+  }\n+\n+  @Test\n+  void checksEmptyStackHasNoting() {\n+    assertThat(new ImmutableStack<>().peek()).isNull();\n+  }\n+\n+  @Test\n+  void throwsExceptionWhenPopsFromEmptyStack() {\n+    assertThatExceptionOfType(NoSuchElementException.class)\n+        .isThrownBy(() -> new ImmutableStack<>().pop());\n+  }\n+}\n",
        "problem_statement": "Sonar - Mitigate/Audit synchronized class \"Stack\"\nSee https://sonarcloud.io/project/issues?id=corona-warn-app_cwa-server&issues=AXI3CJu7vPFV4POpyUFA&open=AXI3CJu7vPFV4POpyUFA\r\n\r\nStrongly consider using existing [data structure implementations.](https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/stack/ImmutableStack.html)\n",
        "hints_text": "",
        "created_at": "2020-05-27T23:46:21Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-272",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nUpdate signature algorithm to SHA-256 + ECDSA P-256\n## Feature description\r\nThe current CWA server implementation signs diagnosis key packages with the ``Ed25519`` algorithm. However, the current [Google/Apple spec](https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server) demands ``SHA-256`` hash with ``ECDSA P-256`` signature ([OID 1.2.840.10045.4.3.2](http://oid-info.com/get/1.2.840.10045.4.3.2))\n\n</issue>\n\n<code>\n[start of README.md]\n1 <h1 align=\"center\">\n2     Corona-Warn-App Server\n3 </h1>\n4 \n5 <p align=\"center\">\n6     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n9         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>    \n10         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n11     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n12 </p>\n13 \n14 <p align=\"center\">\n15   <a href=\"#development\">Development</a> \u2022\n16   <a href=\"#service-apis\">Service APIs</a> \u2022\n17   <a href=\"#documentation\">Documentation</a> \u2022\n18   <a href=\"#support-and-feedback\">Support</a> \u2022\n19   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n20   <a href=\"#contributors\">Contributors</a> \u2022\n21   <a href=\"#repositories\">Repositories</a> \u2022\n22   <a href=\"#licensing\">Licensing</a>\n23 </p>\n24 \n25 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n26 \n27 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n28 \n29 ## Architecture Overview\n30 \n31 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n32 a good starting point in how the backend services interact with other services, and what purpose\n33 they serve.\n34 \n35 ## Development\n36 \n37 After you've checked out this repository, you can run the application in one of the following ways:\n38 \n39 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n40   * Single components using the respective Dockerfile or\n41   * The full backend using the Docker Compose (which is considered the most convenient way)\n42 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n43   If you want to develop something in a single component, this approach is preferable.\n44 \n45 ### Docker-Based Deployment\n46 \n47 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n48 \n49 #### Running the Full CWA Backend Using Docker Compose\n50 \n51 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n52 \n53 Once the services are built, you can start the whole backend using ```docker-compose up```.\n54 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n55 \n56 The docker-compose contains the following services:\n57 \n58 Service       | Description | Endpoint and Default Credentials\n59 --------------|-------------|-----------\n60 submission    | The Corona-Warn-App submission service                                                      | http://localhost:8000 \n61 distribution  | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n62 postgres      | A [postgres] database installation                                                          | postgres:8001 <br> Username: postgres <br> Password: postgres\n63 pgadmin       | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | http://localhost:8002 <br> Username: user@domain.com <br> Password: password\n64 cloudserver   | [Zenko CloudServer] is a S3-compliant object store  | http://localhost:8003/ <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n65 \n66 ##### Known Limitation\n67 \n68 The docker-compose runs into a timing issue in some cases when the create-bucket target runs before the objectstore is available. The mitigation is easy: after running ```docker-compose up``` wait until all components are initialized and running. Afterwards, trigger the ```create-bucket``` service manually by running ```docker-compose run create-bucket```. If you want to trigger distribution runs, run ```docker-compose run distribution```. The timing issue will be fixed in a future release.\n69 \n70 #### Running Single CWA Services Using Docker\n71 \n72 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n73 \n74 To build and run the distribution service, run the following command:\n75 \n76 ```bash\n77 ./services/distribution/build_and_run.sh\n78 ```\n79 \n80 To build and run the submission service, run the following command:\n81 \n82 ```bash\n83 ./services/submission/build_and_run.sh\n84 ```\n85 \n86 The submission service is available on [localhost:8080](http://localhost:8080 ).\n87 \n88 ### Maven-Based Build\n89 \n90 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n91 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n92 \n93 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n94 * [Maven 3.6](https://maven.apache.org/)\n95 * [Postgres]\n96 * [Zenko CloudServer]\n97 \n98 #### Configure\n99 \n100 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n101 \n102 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.properties) and in the [distribution config](./services/distribution/src/main/resources/application.properties)\n103 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.properties)\n104 * Configure the certificate and private key for the distribution service, the paths need to be prefixed with `file:`\n105     * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n106     * `VAULT_FILESIGNING_CERT` should be the path to the certificate, example available in `<repo-root>/docker-compose-test-secrets/certificate.cert`\n107 \n108 #### Build\n109 \n110 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n111 \n112 #### Run\n113 \n114 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n115 \n116 If you want to start the submission service, for example, you start it as follows:\n117 \n118 ```bash\n119   cd services/submission/\n120   mvn spring-boot:run\n121 ```\n122 \n123 #### Debugging\n124 \n125 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n126 \n127 ```bash\n128 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n129 ```\n130 \n131 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n132 \n133 ## Service APIs\n134 \n135 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n136 \n137 Service      | OpenAPI Specification\n138 -------------|-------------\n139 Submission Service        | https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json\n140 Distribution Service      | https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json\n141 \n142 ## Documentation\n143 \n144 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n145 \n146 ## Support and Feedback\n147 \n148 The following channels are available for discussions, feedback, and support requests:\n149 \n150 | Type                     | Channel                                                |\n151 | ------------------------ | ------------------------------------------------------ |\n152 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n153 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n154 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n155 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n156 \n157 ## How to Contribute\n158 \n159 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n160 \n161 ## Contributors\n162 \n163 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n164 \n165 ## Repositories\n166 \n167 The following public repositories are currently available for the Corona-Warn-App:\n168 \n169 | Repository          | Description                                                           |\n170 | ------------------- | --------------------------------------------------------------------- |\n171 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n172 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n173 \n174 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n175 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n176 [Postgres]: https://www.postgresql.org/\n177 [HSQLDB]: http://hsqldb.org/\n178 [Zenko CloudServer]: https://github.com/scality/cloudserver\n179 \n180 ## Licensing\n181 \n182 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n183 \n184 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License. \n185 \n186 You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.\n187 \n188 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n189 \n[end of README.md]\n[start of docker-compose-test-secrets/certificate.crt]\n1 -----BEGIN CERTIFICATE-----\n2 MIHxMIGkAgFkMAUGAytlcDAkMSIwIAYDVQQDDBlFTkEgVGVzdCBSb290IENlcnRp\n3 ZmljYXRlMB4XDTIwMDQzMDE0MDQ1NVoXDTIxMDQzMDE0MDQ1NVowJjEkMCIGA1UE\n4 AwwbRU5BIFRlc3QgQ2xpZW50IENlcnRpZmljYXRlMCowBQYDK2VwAyEAKb/6ocYD\n5 5sIoiGUjHSCiHP3oAZxwtBicRxQVhqZhZIUwBQYDK2VwA0EAw6EUybzXxad6U39C\n6 d1AwMBQ8b2k0pgd2VeJHn46hr5uByJ/MB+fHkgj0SkFhVbfhffcjq23FQKu7lZ/Z\n7 HxakDA==\n8 -----END CERTIFICATE-----\n9 -----BEGIN CERTIFICATE-----\n10 MIIBAjCBtQIULaMo9wOjHWZrpxuH+sN3ZPeT9EUwBQYDK2VwMCQxIjAgBgNVBAMM\n11 GUVOQSBUZXN0IFJvb3QgQ2VydGlmaWNhdGUwHhcNMjAwNDMwMTQwNDU1WhcNMjEw\n12 NDMwMTQwNDU1WjAkMSIwIAYDVQQDDBlFTkEgVGVzdCBSb290IENlcnRpZmljYXRl\n13 MCowBQYDK2VwAyEADapVfRHr20spX2u6Wx8ImeoUZiJJU5cyG3zhqOl1pJAwBQYD\n14 K2VwA0EA9MRmDLKz60SiPAWtD6HDEZB7wCEC/vUm6rMZ9+VcEXQlBlGbiIabkX8C\n15 9pJ00fNzlbftmI8SiO/kjWSnwyCRBA==\n16 -----END CERTIFICATE-----\n17 \n[end of docker-compose-test-secrets/certificate.crt]\n[start of docker-compose-test-secrets/private.pem]\n1 -----BEGIN PRIVATE KEY-----\n2 MC4CAQAwBQYDK2VwBCIEICW8533MLMm66KvHObhk7Q/gUYAJ4h/+GoO/oe5e/CbU\n3 -----END PRIVATE KEY-----\n4 \n[end of docker-compose-test-secrets/private.pem]\n[start of scripts/generate_certificates.sh]\n1 #!/bin/bash\n2 \n3 # Generates a new self-signed X.509 root certificate and a client certificate. Only to be used for\n4 # testing purposes. This script requires openssl to be installed, see here:\n5 ## https://www.openssl.org/source/\n6 \n7 pushd \"$(dirname \"${BASH_SOURCE[0]}\")\" > /dev/null || exit\n8 \n9 rm -rf certificates\n10 mkdir certificates\n11 pushd certificates > /dev/null || exit\n12 \n13 # Generate a private key\n14 # $1 = OUT Private key file\n15 generate_private_key()\n16 {\n17   openssl genpkey                             \\\n18     -algorithm ED25519                        \\\n19     -out \"$1\"\n20 }\n21 \n22 # Generate certificate signing request\n23 # $1 = IN  New certificate private key\n24 # $2 = IN  \"Subject\" of the certificate\n25 # $3 = OUT Certificate signing request file\n26 generate_certificate_signing_request()\n27 {\n28   openssl req                                 \\\n29     -new                                      \\\n30     -key \"$1\"                                 \\\n31     -subj \"$2\"                                \\\n32     -out \"$3\"\n33 }\n34 \n35 # Self-sign a certificate request\n36 # $1 = IN  Certificate signing request file\n37 # $2 = IN  Certificate authority private key file\n38 # $3 = OUT New certificate file\n39 self_sign_certificate_request()\n40 {\n41   openssl x509                                \\\n42     -req                                      \\\n43     -days 365                                 \\\n44     -in \"$1\"                                  \\\n45     -signkey \"$2\"                             \\\n46     -out \"$3\"\n47 }\n48 \n49 # Sign a certificate request using a CA certificate + private key\n50 # $1 = IN  Certificate signing request file\n51 # $2 = IN  Certificate authority certificate file\n52 # $3 = IN  Certificate authority private key file\n53 # $4 = OUT New certificate file\n54 ca_sign_certificate_request()\n55 {\n56   openssl x509 \\\n57     -req \\\n58     -days 365                                 \\\n59     -set_serial 100 \\\n60     -in \"$1\" \\\n61     -CA \"$2\" \\\n62     -CAkey \"$3\" \\\n63     -out \"$4\"\n64 }\n65 \n66 # Self-signed root certificate\n67 mkdir root\n68 generate_private_key root/private.pem\n69 generate_certificate_signing_request root/private.pem '/CN=CWA Test Root Certificate' root/request.csr\n70 self_sign_certificate_request root/request.csr root/private.pem root/certificate.crt\n71 \n72 # Client certificate signed by root certificate\n73 mkdir client\n74 generate_private_key client/private.pem\n75 generate_certificate_signing_request client/private.pem '/CN=CWA Test Client Certificate' client/request.csr\n76 ca_sign_certificate_request client/request.csr root/certificate.crt root/private.pem client/certificate.crt\n77 \n78 # Concatenate the root certificate and the client certificate.\n79 # This way, we have the whole certificate chain in a single file.\n80 mkdir chain\n81 cat client/certificate.crt root/certificate.crt >> chain/certificate.crt\n82 \n83 # Final verification of the certificate chain\n84 openssl verify -CAfile root/certificate.crt chain/certificate.crt\n85 \n86 popd > /dev/null || exit\n87 popd > /dev/null || exit\n[end of scripts/generate_certificates.sh]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.component;\n21 \n22 import java.io.ByteArrayInputStream;\n23 import java.io.IOException;\n24 import java.io.InputStream;\n25 import java.io.InputStreamReader;\n26 import java.security.PrivateKey;\n27 import java.security.Security;\n28 import java.security.cert.Certificate;\n29 import java.security.cert.CertificateException;\n30 import java.security.cert.CertificateFactory;\n31 import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;\n32 import org.bouncycastle.jce.provider.BouncyCastleProvider;\n33 import org.bouncycastle.openssl.PEMParser;\n34 import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\n35 import org.slf4j.Logger;\n36 import org.slf4j.LoggerFactory;\n37 import org.springframework.beans.factory.annotation.Autowired;\n38 import org.springframework.beans.factory.annotation.Value;\n39 import org.springframework.core.io.Resource;\n40 import org.springframework.core.io.ResourceLoader;\n41 import org.springframework.stereotype.Component;\n42 \n43 /**\n44  * Wrapper component for a {@link CryptoProvider#getPrivateKey() private key} and a {@link\n45  * CryptoProvider#getCertificate()} certificate} from the application properties.\n46  */\n47 @Component\n48 public class CryptoProvider {\n49 \n50   private static final Logger logger = LoggerFactory.getLogger(CryptoProvider.class);\n51 \n52   @Value(\"${services.distribution.paths.privatekey}\")\n53   private String privateKeyPath;\n54 \n55   @Value(\"${services.distribution.paths.certificate}\")\n56   private String certificatePath;\n57 \n58   private final ResourceLoader resourceLoader;\n59 \n60   private PrivateKey privateKey;\n61   private Certificate certificate;\n62 \n63   /**\n64    * Creates a CryptoProvider, using {@link BouncyCastleProvider}.\n65    */\n66   @Autowired\n67   public CryptoProvider(ResourceLoader resourceLoader) {\n68     this.resourceLoader = resourceLoader;\n69     Security.addProvider(new BouncyCastleProvider());\n70   }\n71 \n72   private static PrivateKey getPrivateKeyFromStream(final InputStream privateKeyStream)\n73       throws IOException {\n74     PEMParser pemParser = new PEMParser(new InputStreamReader(privateKeyStream));\n75     PrivateKeyInfo privateKeyInfo = (PrivateKeyInfo) pemParser.readObject();\n76     return new JcaPEMKeyConverter().getPrivateKey(privateKeyInfo);\n77   }\n78 \n79   private static Certificate getCertificateFromStream(final InputStream certificateStream)\n80       throws IOException, CertificateException {\n81     return getCertificateFromBytes(certificateStream.readAllBytes());\n82   }\n83 \n84   private static Certificate getCertificateFromBytes(final byte[] bytes)\n85       throws CertificateException {\n86     CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X.509\");\n87     InputStream certificateByteStream = new ByteArrayInputStream(bytes);\n88     return certificateFactory.generateCertificate(certificateByteStream);\n89   }\n90 \n91   /**\n92    * Reads and returns the {@link PrivateKey} configured in the application properties.\n93    */\n94   public PrivateKey getPrivateKey() {\n95     if (privateKey == null) {\n96       Resource privateKeyResource = resourceLoader.getResource(privateKeyPath);\n97       try (InputStream privateKeyStream = privateKeyResource.getInputStream()) {\n98         privateKey = getPrivateKeyFromStream(privateKeyStream);\n99       } catch (IOException e) {\n100         logger.error(\"Failed to load private key from {}\", privateKeyPath, e);\n101         throw new RuntimeException(e);\n102       }\n103     }\n104     return privateKey;\n105   }\n106 \n107   /**\n108    * Reads and returns the {@link Certificate} configured in the application properties.\n109    */\n110   public Certificate getCertificate() {\n111     if (this.certificate == null) {\n112       Resource certResource = resourceLoader.getResource(certificatePath);\n113       try (InputStream certStream = certResource.getInputStream()) {\n114         this.certificate = getCertificateFromStream(certStream);\n115       } catch (IOException | CertificateException e) {\n116         logger.error(\"Failed to load certificate from {}\", certificatePath, e);\n117         throw new RuntimeException(e);\n118       }\n119     }\n120     return certificate;\n121   }\n122 }\n123 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/AbstractSigningDecorator.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.structure.archive.decorator.signing;\n21 \n22 import app.coronawarn.server.common.protocols.external.exposurenotification.SignatureInfo;\n23 import app.coronawarn.server.common.protocols.external.exposurenotification.TEKSignature;\n24 import app.coronawarn.server.common.protocols.external.exposurenotification.TEKSignatureList;\n25 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n26 import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n27 import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n28 import app.coronawarn.server.services.distribution.assembly.structure.archive.decorator.ArchiveDecorator;\n29 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n30 import com.google.protobuf.ByteString;\n31 import java.security.GeneralSecurityException;\n32 import java.security.Signature;\n33 import org.slf4j.Logger;\n34 import org.slf4j.LoggerFactory;\n35 \n36 public abstract class AbstractSigningDecorator<W extends Writable<W>> extends ArchiveDecorator<W> implements\n37     SigningDecorator<W> {\n38 \n39   private static final String SIGNATURE_FILE_NAME = \"export.sig\";\n40   private static final String SIGNATURE_ALGORITHM = \"Ed25519\";\n41   private static final String SECURITY_PROVIDER = \"BC\";\n42 \n43   private static final Logger logger = LoggerFactory.getLogger(AbstractSigningDecorator.class);\n44   protected final CryptoProvider cryptoProvider;\n45 \n46   public AbstractSigningDecorator(Archive<W> archive, CryptoProvider cryptoProvider) {\n47     super(archive);\n48     this.cryptoProvider = cryptoProvider;\n49   }\n50 \n51   @Override\n52   public void prepare(ImmutableStack<Object> indices) {\n53     super.prepare(indices);\n54     this.addWritable(this.getSignatureFile(SIGNATURE_FILE_NAME));\n55   }\n56 \n57   protected TEKSignatureList createTemporaryExposureKeySignatureList(CryptoProvider cryptoProvider) {\n58     return TEKSignatureList.newBuilder()\n59         .addSignatures(TEKSignature.newBuilder()\n60             .setSignatureInfo(getSignatureInfo())\n61             .setBatchNum(getBatchNum())\n62             .setBatchSize(getBatchSize())\n63             .setSignature(ByteString.copyFrom(createSignature(cryptoProvider)))\n64             .build())\n65         .build();\n66   }\n67 \n68   private byte[] createSignature(CryptoProvider cryptoProvider) {\n69     try {\n70       Signature payloadSignature = Signature.getInstance(SIGNATURE_ALGORITHM, SECURITY_PROVIDER);\n71       payloadSignature.initSign(cryptoProvider.getPrivateKey());\n72       payloadSignature.update(this.getBytesToSign());\n73       return payloadSignature.sign();\n74     } catch (GeneralSecurityException e) {\n75       logger.error(\"Failed to sign archive.\", e);\n76       throw new RuntimeException(e);\n77     }\n78   }\n79 \n80   /**\n81    * Returns the static {@link SignatureInfo} configured in the application properties. TODO Enter correct values.\n82    */\n83   public static SignatureInfo getSignatureInfo() {\n84     // TODO cwa-server#183 cwa-server#207 cwa-server#238\n85     return SignatureInfo.newBuilder()\n86         .setAppBundleId(\"de.rki.coronawarnapp\")\n87         .setAndroidPackage(\"de.rki.coronawarnapp\")\n88         .setVerificationKeyVersion(\"\")\n89         .setVerificationKeyId(\"\")\n90         .setSignatureAlgorithm(\"1.2.840.10045.4.3.2\")\n91         .build();\n92   }\n93 }\n94 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/AbstractSigningDecorator.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java\n@@ -43,7 +43,7 @@\n  */\n @Component\n public class CryptoProvider {\n \n-  private static final Logger logger = LoggerFactory.getLogger(CryptoProvider.class);\n+  private static final Logger logger = LoggerFactory.getLogger(CryptoProvider.class.getName());\n \n   @Value(\"${services.distribution.paths.privatekey}\")\n   private String privateKeyPath;\n@@ -70,7 +70,7 @@\n    */\n   public PrivateKey getPrivateKey() {\n     if (privateKey == null) {\n-      Resource privateKeyResource = resourceLoader.getResource(privateKeyPath);\n+      Resource privateKeyResource = resourceLoader.getResource(privateKeyPath.replace(\"private.pem\", \"private.key\"));\n       try (InputStream privateKeyStream = privateKeyResource.getInputStream()) {\n         privateKey = getPrivateKeyFromStream(privateKeyStream);\n       } catch (IOException e) {\n@@ -112,7 +112,7 @@\n    */\n   public Certificate getCertificate() {\n     if (this.certificate == null) {\n-      Resource certResource = resourceLoader.getResource(certificatePath);\n+      Resource certResource = resourceLoader.getResource(certificatePath.replace(\"certificate.crt\", \"certificate.pem\"));\n       try (InputStream certStream = certResource.getInputStream()) {\n         this.certificate = getCertificateFromStream(certStream);\n       } catch (IOException | CertificateException e) {\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java\n@@ -43,7 +43,7 @@\n  */\n @Component\n public class CryptoProvider {\n \n-  private static final Logger logger = LoggerFactory.getLogger(CryptoProvider.class);\n+  private static final Logger logger = LoggerFactory.getLogger(CryptoProvider.class.getName());\n \n   @Value(\"${services.distribution.paths.privatekey}\")\n   private String privateKeyPath;\n@@ -70,7 +70,7 @@\n    */\n   public PrivateKey getPrivateKey() {\n     if (privateKey == null) {\n-      Resource privateKeyResource = resourceLoader.getResource(privateKeyPath);\n+      Resource privateKeyResource = resourceLoader.getResource(privateKeyPath.replace(\"private.pem\", \"private.key\"));\n       try (InputStream privateKeyStream = privateKeyResource.getInputStream()) {\n         privateKey = getPrivateKeyFromStream(privateKeyStream);\n       } catch (IOException e) {\n@@ -112,7 +112,7 @@\n    */\n   public Certificate getCertificate() {\n     if (this.certificate == null) {\n-      Resource certResource = resourceLoader.getResource(certificatePath);\n+      Resource certResource = resourceLoader.getResource(certificatePath.replace(\"certificate.crt\", \"certificate.pem\"));\n       try (InputStream certStream = certResource.getInputStream()) {\n         this.certificate = getCertificateFromStream(certStream);\n       } catch (IOException | CertificateException e) {\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 272,
        "issue_numbers": [
            "205"
        ],
        "base_commit": "73b566ec755cc61fc4c08da274c133535adb6ae7",
        "patch": "diff --git a/docker-compose-test-secrets/certificate.crt b/docker-compose-test-secrets/certificate.crt\n--- a/docker-compose-test-secrets/certificate.crt\n+++ b/docker-compose-test-secrets/certificate.crt\n@@ -1,16 +1,18 @@\n -----BEGIN CERTIFICATE-----\n-MIHxMIGkAgFkMAUGAytlcDAkMSIwIAYDVQQDDBlFTkEgVGVzdCBSb290IENlcnRp\n-ZmljYXRlMB4XDTIwMDQzMDE0MDQ1NVoXDTIxMDQzMDE0MDQ1NVowJjEkMCIGA1UE\n-AwwbRU5BIFRlc3QgQ2xpZW50IENlcnRpZmljYXRlMCowBQYDK2VwAyEAKb/6ocYD\n-5sIoiGUjHSCiHP3oAZxwtBicRxQVhqZhZIUwBQYDK2VwA0EAw6EUybzXxad6U39C\n-d1AwMBQ8b2k0pgd2VeJHn46hr5uByJ/MB+fHkgj0SkFhVbfhffcjq23FQKu7lZ/Z\n-HxakDA==\n+MIIBMjCB2AIBZDAKBggqhkjOPQQDAjAkMSIwIAYDVQQDDBlDV0EgVGVzdCBSb290\n+IENlcnRpZmljYXRlMB4XDTIwMDUyMzExMzAzOFoXDTIxMDUyMzExMzAzOFowJjEk\n+MCIGA1UEAwwbQ1dBIFRlc3QgQ2xpZW50IENlcnRpZmljYXRlMFkwEwYHKoZIzj0C\n+AQYIKoZIzj0DAQcDQgAEYQJ+sReY1L8z851VFRpLu4PCusj/7Ruvi879KjrQJ12k\n+KKsfeRWytmrE65Jok1lsYqpFhRWcxG6VV5FX0yG+EjAKBggqhkjOPQQDAgNJADBG\n+AiEAwP/VKVIhOuiIczrPFg0o4ns39Wu1vBpIXu+/psI/3LECIQD0FAXo5chuUkQy\n+LeUtwsQaC8v2KA96ew3PfCoTilvU1Q==\n -----END CERTIFICATE-----\n -----BEGIN CERTIFICATE-----\n-MIIBAjCBtQIULaMo9wOjHWZrpxuH+sN3ZPeT9EUwBQYDK2VwMCQxIjAgBgNVBAMM\n-GUVOQSBUZXN0IFJvb3QgQ2VydGlmaWNhdGUwHhcNMjAwNDMwMTQwNDU1WhcNMjEw\n-NDMwMTQwNDU1WjAkMSIwIAYDVQQDDBlFTkEgVGVzdCBSb290IENlcnRpZmljYXRl\n-MCowBQYDK2VwAyEADapVfRHr20spX2u6Wx8ImeoUZiJJU5cyG3zhqOl1pJAwBQYD\n-K2VwA0EA9MRmDLKz60SiPAWtD6HDEZB7wCEC/vUm6rMZ9+VcEXQlBlGbiIabkX8C\n-9pJ00fNzlbftmI8SiO/kjWSnwyCRBA==\n+MIIBQzCB6QIUN7Z6IofaE0qtz2X1xz/IUDCUXd0wCgYIKoZIzj0EAwIwJDEiMCAG\n+A1UEAwwZQ1dBIFRlc3QgUm9vdCBDZXJ0aWZpY2F0ZTAeFw0yMDA1MjMxMTMwMzha\n+Fw0yMTA1MjMxMTMwMzhaMCQxIjAgBgNVBAMMGUNXQSBUZXN0IFJvb3QgQ2VydGlm\n+aWNhdGUwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATBH0/vPsD62wE9jk5JZZd+\n+Yf4WXZ3sKZUGbdqJssc4lxjyZJvpPLCirRQT6XWwhmBhoL8mRL5tpZ/93o+jzULe\n+MAoGCCqGSM49BAMCA0kAMEYCIQCNPEtoC1QtgnncZzV/rgIoO6tktCiAkybBhHMB\n+1SISZQIhAPguoBWCscYwNHtEgTDx2sQ8UZ79KvWvpHFlwDEyiHAv\n -----END CERTIFICATE-----\ndiff --git a/docker-compose-test-secrets/private.pem b/docker-compose-test-secrets/private.pem\n--- a/docker-compose-test-secrets/private.pem\n+++ b/docker-compose-test-secrets/private.pem\n@@ -1,3 +1,5 @@\n------BEGIN PRIVATE KEY-----\n-MC4CAQAwBQYDK2VwBCIEICW8533MLMm66KvHObhk7Q/gUYAJ4h/+GoO/oe5e/CbU\n------END PRIVATE KEY-----\n+-----BEGIN EC PRIVATE KEY-----\n+MHcCAQEEILQRQFlGcfeTAclubtjQ1rBjtmIOB/d7PITZyDe1r81/oAoGCCqGSM49\n+AwEHoUQDQgAEYQJ+sReY1L8z851VFRpLu4PCusj/7Ruvi879KjrQJ12kKKsfeRWy\n+tmrE65Jok1lsYqpFhRWcxG6VV5FX0yG+Eg==\n+-----END EC PRIVATE KEY-----\ndiff --git a/scripts/generate_certificates.sh b/scripts/generate_certificates.sh\n--- a/scripts/generate_certificates.sh\n+++ b/scripts/generate_certificates.sh\n@@ -14,8 +14,10 @@ pushd certificates > /dev/null || exit\n # $1 = OUT Private key file\n generate_private_key()\n {\n-  openssl genpkey                             \\\n-    -algorithm ED25519                        \\\n+  openssl ecparam                             \\\n+    -name prime256v1                          \\\n+    -genkey                                   \\\n+    -noout                                    \\\n     -out \"$1\"\n }\n \ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProvider.java\n@@ -23,13 +23,14 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n+import java.security.KeyPair;\n import java.security.PrivateKey;\n import java.security.Security;\n import java.security.cert.Certificate;\n import java.security.cert.CertificateException;\n import java.security.cert.CertificateFactory;\n-import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;\n import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.openssl.PEMKeyPair;\n import org.bouncycastle.openssl.PEMParser;\n import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\n import org.slf4j.Logger;\n@@ -69,11 +70,11 @@ public CryptoProvider(ResourceLoader resourceLoader) {\n     Security.addProvider(new BouncyCastleProvider());\n   }\n \n-  private static PrivateKey getPrivateKeyFromStream(final InputStream privateKeyStream)\n-      throws IOException {\n-    PEMParser pemParser = new PEMParser(new InputStreamReader(privateKeyStream));\n-    PrivateKeyInfo privateKeyInfo = (PrivateKeyInfo) pemParser.readObject();\n-    return new JcaPEMKeyConverter().getPrivateKey(privateKeyInfo);\n+  private static PrivateKey getPrivateKeyFromStream(final InputStream privateKeyStream) throws IOException {\n+    InputStreamReader privateKeyStreamReader = new InputStreamReader(privateKeyStream);\n+    Object parsed = new PEMParser(privateKeyStreamReader).readObject();\n+    KeyPair pair = new JcaPEMKeyConverter().getKeyPair((PEMKeyPair) parsed);\n+    return pair.getPrivate();\n   }\n \n   private static Certificate getCertificateFromStream(final InputStream certificateStream)\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/AbstractSigningDecorator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/AbstractSigningDecorator.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/AbstractSigningDecorator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/AbstractSigningDecorator.java\n@@ -37,7 +37,7 @@ public abstract class AbstractSigningDecorator<W extends Writable<W>> extends Ar\n     SigningDecorator<W> {\n \n   private static final String SIGNATURE_FILE_NAME = \"export.sig\";\n-  private static final String SIGNATURE_ALGORITHM = \"Ed25519\";\n+  private static final String SIGNATURE_ALGORITHM = \"SHA256withECDSA\";\n   private static final String SECURITY_PROVIDER = \"BC\";\n \n   private static final Logger logger = LoggerFactory.getLogger(AbstractSigningDecorator.class);\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProviderMasterFileTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProviderMasterFileTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProviderMasterFileTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProviderMasterFileTest.java\n@@ -21,15 +21,13 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ExposureConfigurationValidator;\n import app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidator;\n import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationResult;\n import org.junit.jupiter.api.Test;\n \n /**\n  * This test will verify that the provided risk score classification master file is syntactically correct and according\n- * to spec.\n- * There should never be any deployment when this test is failing.\n+ * to spec. There should never be any deployment when this test is failing.\n  */\n public class RiskScoreClassificationProviderMasterFileTest {\n \ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/SigningDecoratorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/SigningDecoratorTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/archive/decorator/signing/SigningDecoratorTest.java\n@@ -0,0 +1,135 @@\n+package app.coronawarn.server.services.distribution.assembly.structure.archive.decorator.signing;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.protocols.external.exposurenotification.SignatureInfo;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.TEKSignature;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.TEKSignatureList;\n+import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n+import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n+import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n+import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.file.File;\n+import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n+import java.io.IOException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.Signature;\n+import java.security.SignatureException;\n+import java.util.List;\n+import org.junit.Rule;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.rules.TemporaryFolder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {CryptoProvider.class},\n+    initializers = ConfigFileApplicationContextInitializer.class)\n+class SigningDecoratorTest {\n+\n+  @Autowired\n+  CryptoProvider cryptoProvider;\n+\n+  private File<WritableOnDisk> fileToSign;\n+  private TEKSignatureList signatureList;\n+\n+  @Rule\n+  private TemporaryFolder outputFolder = new TemporaryFolder();\n+\n+  @BeforeEach\n+  void setup() throws IOException {\n+    Archive<WritableOnDisk> archive = new ArchiveOnDisk(\"export.zip\");\n+    fileToSign = new FileOnDisk(\"export.bin\", \"123456\".getBytes());\n+    archive.addWritable(fileToSign);\n+\n+    SigningDecorator<WritableOnDisk> signingDecorator = new TestSigningDecorator(archive, cryptoProvider);\n+\n+    outputFolder.create();\n+    java.io.File outputDir = outputFolder.newFolder();\n+    Directory<WritableOnDisk> directory = new DirectoryOnDisk(outputDir);\n+    directory.addWritable(signingDecorator);\n+    directory.prepare(new ImmutableStack<>());\n+\n+    File<WritableOnDisk> signatureFile = archive.getWritables().stream()\n+        .filter(writable -> writable.getName().equals(\"export.sig\"))\n+        .map(writable -> (File<WritableOnDisk>) writable)\n+        .findFirst()\n+        .orElseThrow();\n+\n+    signatureList = TEKSignatureList.parseFrom(signatureFile.getBytes());\n+  }\n+\n+  @Test\n+  void checkSignatureFileStructure() {\n+\n+    assertThat(signatureList).isNotNull();\n+\n+    List<TEKSignature> signatures = signatureList.getSignaturesList();\n+    assertThat(signatures).hasSize(1);\n+\n+    TEKSignature signature = signatures.get(0);\n+    assertThat(signature.getSignatureInfo()).isNotNull();\n+    assertThat(signature.getBatchNum()).isEqualTo(1);\n+    assertThat(signature.getBatchSize()).isEqualTo(1);\n+    assertThat(signature.getSignature()).isNotEmpty();\n+  }\n+\n+  @Test\n+  void checkSignatureInfo() {\n+    SignatureInfo signatureInfo = signatureList.getSignaturesList().get(0).getSignatureInfo();\n+\n+    assertThat(signatureInfo.getAppBundleId()).isEqualTo(\"de.rki.coronawarnapp\");\n+    assertThat(signatureInfo.getAndroidPackage()).isEqualTo(\"de.rki.coronawarnapp\");\n+    assertThat(signatureInfo.getSignatureAlgorithm()).isEqualTo(\"1.2.840.10045.4.3.2\");\n+    assertThat(signatureInfo.getVerificationKeyId()).isEmpty();\n+    assertThat(signatureInfo.getVerificationKeyVersion()).isEmpty();\n+  }\n+\n+  @Test\n+  void checkSignature()\n+      throws NoSuchProviderException, NoSuchAlgorithmException, InvalidKeyException, SignatureException {\n+    byte[] fileBytes = fileToSign.getBytes();\n+    byte[] signatureBytes = signatureList.getSignaturesList().get(0).getSignature().toByteArray();\n+\n+    Signature payloadSignature = Signature.getInstance(\"SHA256withECDSA\", \"BC\");\n+    payloadSignature.initVerify(cryptoProvider.getCertificate());\n+    payloadSignature.update(fileBytes);\n+    assertThat(payloadSignature.verify(signatureBytes)).isTrue();\n+  }\n+\n+  private static class TestSigningDecorator extends SigningDecoratorOnDisk {\n+\n+    public TestSigningDecorator(Archive<WritableOnDisk> archive, CryptoProvider cryptoProvider) {\n+      super(archive, cryptoProvider);\n+    }\n+\n+    @Override\n+    public byte[] getBytesToSign() {\n+      return this.getWritables().stream()\n+          .filter(writable -> writable.getName().equals(\"export.bin\"))\n+          .map(writable -> (File<WritableOnDisk>) writable)\n+          .map(File::getBytes)\n+          .findFirst()\n+          .orElseThrow();\n+    }\n+\n+    @Override\n+    public int getBatchNum() {\n+      return 1;\n+    }\n+\n+    @Override\n+    public int getBatchSize() {\n+      return 1;\n+    }\n+  }\n+}\ndiff --git a/services/distribution/src/test/resources/certificates/chain/certificate.crt b/services/distribution/src/test/resources/certificates/chain/certificate.crt\n--- a/services/distribution/src/test/resources/certificates/chain/certificate.crt\n+++ b/services/distribution/src/test/resources/certificates/chain/certificate.crt\n@@ -1,16 +1,18 @@\n -----BEGIN CERTIFICATE-----\n-MIHxMIGkAgFkMAUGAytlcDAkMSIwIAYDVQQDDBlFTkEgVGVzdCBSb290IENlcnRp\n-ZmljYXRlMB4XDTIwMDQzMDE0MDQ1NVoXDTIxMDQzMDE0MDQ1NVowJjEkMCIGA1UE\n-AwwbRU5BIFRlc3QgQ2xpZW50IENlcnRpZmljYXRlMCowBQYDK2VwAyEAKb/6ocYD\n-5sIoiGUjHSCiHP3oAZxwtBicRxQVhqZhZIUwBQYDK2VwA0EAw6EUybzXxad6U39C\n-d1AwMBQ8b2k0pgd2VeJHn46hr5uByJ/MB+fHkgj0SkFhVbfhffcjq23FQKu7lZ/Z\n-HxakDA==\n+MIIBMjCB2AIBZDAKBggqhkjOPQQDAjAkMSIwIAYDVQQDDBlDV0EgVGVzdCBSb290\n+IENlcnRpZmljYXRlMB4XDTIwMDUyMzExMzAzOFoXDTIxMDUyMzExMzAzOFowJjEk\n+MCIGA1UEAwwbQ1dBIFRlc3QgQ2xpZW50IENlcnRpZmljYXRlMFkwEwYHKoZIzj0C\n+AQYIKoZIzj0DAQcDQgAEYQJ+sReY1L8z851VFRpLu4PCusj/7Ruvi879KjrQJ12k\n+KKsfeRWytmrE65Jok1lsYqpFhRWcxG6VV5FX0yG+EjAKBggqhkjOPQQDAgNJADBG\n+AiEAwP/VKVIhOuiIczrPFg0o4ns39Wu1vBpIXu+/psI/3LECIQD0FAXo5chuUkQy\n+LeUtwsQaC8v2KA96ew3PfCoTilvU1Q==\n -----END CERTIFICATE-----\n -----BEGIN CERTIFICATE-----\n-MIIBAjCBtQIULaMo9wOjHWZrpxuH+sN3ZPeT9EUwBQYDK2VwMCQxIjAgBgNVBAMM\n-GUVOQSBUZXN0IFJvb3QgQ2VydGlmaWNhdGUwHhcNMjAwNDMwMTQwNDU1WhcNMjEw\n-NDMwMTQwNDU1WjAkMSIwIAYDVQQDDBlFTkEgVGVzdCBSb290IENlcnRpZmljYXRl\n-MCowBQYDK2VwAyEADapVfRHr20spX2u6Wx8ImeoUZiJJU5cyG3zhqOl1pJAwBQYD\n-K2VwA0EA9MRmDLKz60SiPAWtD6HDEZB7wCEC/vUm6rMZ9+VcEXQlBlGbiIabkX8C\n-9pJ00fNzlbftmI8SiO/kjWSnwyCRBA==\n+MIIBQzCB6QIUN7Z6IofaE0qtz2X1xz/IUDCUXd0wCgYIKoZIzj0EAwIwJDEiMCAG\n+A1UEAwwZQ1dBIFRlc3QgUm9vdCBDZXJ0aWZpY2F0ZTAeFw0yMDA1MjMxMTMwMzha\n+Fw0yMTA1MjMxMTMwMzhaMCQxIjAgBgNVBAMMGUNXQSBUZXN0IFJvb3QgQ2VydGlm\n+aWNhdGUwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATBH0/vPsD62wE9jk5JZZd+\n+Yf4WXZ3sKZUGbdqJssc4lxjyZJvpPLCirRQT6XWwhmBhoL8mRL5tpZ/93o+jzULe\n+MAoGCCqGSM49BAMCA0kAMEYCIQCNPEtoC1QtgnncZzV/rgIoO6tktCiAkybBhHMB\n+1SISZQIhAPguoBWCscYwNHtEgTDx2sQ8UZ79KvWvpHFlwDEyiHAv\n -----END CERTIFICATE-----\ndiff --git a/services/distribution/src/test/resources/certificates/client/private.pem b/services/distribution/src/test/resources/certificates/client/private.pem\n--- a/services/distribution/src/test/resources/certificates/client/private.pem\n+++ b/services/distribution/src/test/resources/certificates/client/private.pem\n@@ -1,3 +1,5 @@\n------BEGIN PRIVATE KEY-----\n-MC4CAQAwBQYDK2VwBCIEICW8533MLMm66KvHObhk7Q/gUYAJ4h/+GoO/oe5e/CbU\n------END PRIVATE KEY-----\n+-----BEGIN EC PRIVATE KEY-----\n+MHcCAQEEILQRQFlGcfeTAclubtjQ1rBjtmIOB/d7PITZyDe1r81/oAoGCCqGSM49\n+AwEHoUQDQgAEYQJ+sReY1L8z851VFRpLu4PCusj/7Ruvi879KjrQJ12kKKsfeRWy\n+tmrE65Jok1lsYqpFhRWcxG6VV5FX0yG+Eg==\n+-----END EC PRIVATE KEY-----\n",
        "problem_statement": "Update signature algorithm to SHA-256 + ECDSA P-256\n## Feature description\r\nThe current CWA server implementation signs diagnosis key packages with the ``Ed25519`` algorithm. However, the current [Google/Apple spec](https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server) demands ``SHA-256`` hash with ``ECDSA P-256`` signature ([OID 1.2.840.10045.4.3.2](http://oid-info.com/get/1.2.840.10045.4.3.2))\n",
        "hints_text": "",
        "created_at": "2020-05-23T13:07:15Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-551",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nBatchCounter uses Double for counting\n## Describe the bug\r\n\r\nBatchCounter uses `double` for integer arithmetics, which is commonly discouraged.\r\n\r\n## Expected behaviour\r\n\r\nBatchCounter uses `int` for counting up to `batchSize`, since `batchSize` is also of type `int`.\r\nIt's faster.\r\nIn theory it's more accurate. (In practice there is no difference in this case since the maximum value that is representable in a double is larger than `Integer.MAX_VALUE`. But for `long` instead of `int`, there would be a difference.)\r\n\r\n## Possible Fix\r\n\r\n~~~java\r\nprivate int batch;\r\n~~~\r\n\r\nWhile here, `batch` should be renamed to `batchCount` to better express its actual meaning.\nBatchCounter is not thread-safe\n## Describe the bug\r\n\r\nWhen multiple threads call `BatchCounter.increment` at the same time, the resulting count is unspecified.\r\n\r\n## Expected behaviour\r\n\r\n`synchronized void increment`\r\n\r\n## Steps to reproduce the issue\r\n\r\nCall `BatchCounter` from several threads at the same time.\r\n\r\n## Possible Fix\r\n\r\nAdd `synchronized`.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/ARCHITECTURE.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env``` in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `localhost:8001` <br> `postgres:5432` (from containerized pgadmin) <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is `edc07f08-a1aa-11ea-bb37-0242ac130002`.\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 You can also use `docker-compose` to start Postgres and Zenko. If you do that, you have to\n101 set the following environment-variables when running the Spring project:\n102 \n103 For the distribution module:\n104 \n105 ```bash\n106 POSTGRESQL_SERVICE_PORT=8001\n107 VAULT_FILESIGNING_SECRET=</path/to/your/private_key>\n108 ```\n109 \n110 For the submission module:\n111 \n112 ```bash\n113 POSTGRESQL_SERVICE_PORT=8001\n114 ```\n115 \n116 #### Configure\n117 \n118 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n119 \n120 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n121 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n122 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n123   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n124 \n125 #### Build\n126 \n127 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n128 \n129 #### Run\n130 \n131 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n132 \n133 If you want to start the submission service, for example, you start it as follows:\n134 \n135 ```bash\n136   cd services/submission/\n137   mvn spring-boot:run\n138 ```\n139 \n140 #### Debugging\n141 \n142 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n143 \n144 ```bash\n145 mvn spring-boot:run -Dspring.profiles.active=dev\n146 ```\n147 \n148 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n149 \n150 ## Service APIs\n151 \n152 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n153 \n154 Service      | OpenAPI Specification\n155 -------------|-------------\n156 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n157 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n158 \n159 ## Spring Profiles\n160 \n161 ### Distribution\n162 \n163 Profile               | Effect\n164 ----------------------|-------------\n165 `dev`                 | Turns the log level to `DEBUG`.\n166 `cloud`               | Removes default values for the `datasource` and `objectstore` configurations.\n167 `demo`                | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n168 `testdata`            | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n169 `signature-dev`       | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that the non-productive/test public key will be used for client-side validation.\n170 `signature-prod`      | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp` so that the productive public key will be used for client-side validation.\n171 `ssl-client-postgres` | Enforces SSL with a pinned certificate for the connection to the postgres (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/services/distribution/src/main/resources/application-ssl-client-postgres.yaml)).\n172 \n173 ### Submission\n174 \n175 Profile                   | Effect\n176 --------------------------|-------------\n177 `dev`                     | Turns the log level to `DEBUG`.\n178 `cloud`                   | Removes default values for the `datasource` configuration.\n179 `ssl-server`              | Enables SSL for the submission endpoint (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/services/submission/src/main/resources/application-ssl-server.yaml)).\n180 `ssl-client-postgres`     | Enforces SSL with a pinned certificate for the connection to the postgres (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/services/submission/src/main/resources/application-ssl-client-postgres.yaml)).\n181 `ssl-client-verification` | Enforces SSL with a pinned certificate for the connection to the verification server (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/services/submission/src/main/resources/application-ssl-client-verification.yaml)).\n182 \n183 ## Documentation\n184 \n185 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n186 \n187 ## Support and Feedback\n188 \n189 The following channels are available for discussions, feedback, and support requests:\n190 \n191 | Type                     | Channel                                                |\n192 | ------------------------ | ------------------------------------------------------ |\n193 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n194 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n195 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n196 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n197 \n198 ## How to Contribute\n199 \n200 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n201 \n202 ## Contributors\n203 \n204 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n205 \n206 ## Repositories\n207 \n208 The following public repositories are currently available for the Corona-Warn-App:\n209 \n210 | Repository          | Description                                                           |\n211 | ------------------- | --------------------------------------------------------------------- |\n212 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n213 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n214 | [cwa-verification-server] | Backend implementation of the verification process|\n215 \n216 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n217 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n218 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n219 [Postgres]: https://www.postgresql.org/\n220 [HSQLDB]: http://hsqldb.org/\n221 [Zenko CloudServer]: https://github.com/scality/cloudserver\n222 \n223 ## Licensing\n224 \n225 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n226 \n227 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n228 \n229 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n230 \n231 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n232 \n[end of README.md]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.submission.config;\n22 \n23 import org.springframework.boot.context.properties.ConfigurationProperties;\n24 import org.springframework.stereotype.Component;\n25 \n26 @Component\n27 @ConfigurationProperties(prefix = \"services.submission\")\n28 public class SubmissionServiceConfig {\n29 \n30   // Exponential moving average of the last N real request durations (in ms), where\n31   // N = fakeDelayMovingAverageSamples.\n32   private Double initialFakeDelayMilliseconds;\n33   private Double fakeDelayMovingAverageSamples;\n34   private Integer retentionDays;\n35   private Payload payload;\n36   private Verification verification;\n37   private Monitoring monitoring;\n38 \n39   public Double getInitialFakeDelayMilliseconds() {\n40     return initialFakeDelayMilliseconds;\n41   }\n42 \n43   public void setInitialFakeDelayMilliseconds(Double initialFakeDelayMilliseconds) {\n44     this.initialFakeDelayMilliseconds = initialFakeDelayMilliseconds;\n45   }\n46 \n47   public Double getFakeDelayMovingAverageSamples() {\n48     return fakeDelayMovingAverageSamples;\n49   }\n50 \n51   public void setFakeDelayMovingAverageSamples(Double fakeDelayMovingAverageSamples) {\n52     this.fakeDelayMovingAverageSamples = fakeDelayMovingAverageSamples;\n53   }\n54 \n55   public Integer getRetentionDays() {\n56     return retentionDays;\n57   }\n58 \n59   public void setRetentionDays(Integer retentionDays) {\n60     this.retentionDays = retentionDays;\n61   }\n62 \n63   public Integer getMaxNumberOfKeys() {\n64     return payload.getMaxNumberOfKeys();\n65   }\n66 \n67   public void setPayload(Payload payload) {\n68     this.payload = payload;\n69   }\n70 \n71   private static class Payload {\n72 \n73     private Integer maxNumberOfKeys;\n74 \n75     public Integer getMaxNumberOfKeys() {\n76       return maxNumberOfKeys;\n77     }\n78 \n79     public void setMaxNumberOfKeys(Integer maxNumberOfKeys) {\n80       this.maxNumberOfKeys = maxNumberOfKeys;\n81     }\n82   }\n83 \n84   public String getVerificationBaseUrl() {\n85     return verification.getBaseUrl();\n86   }\n87 \n88   public void setVerification(Verification verification) {\n89     this.verification = verification;\n90   }\n91 \n92   public String getVerificationPath() {\n93     return verification.getPath();\n94   }\n95 \n96   private static class Verification {\n97     private String baseUrl;\n98 \n99     private String path;\n100 \n101     public String getBaseUrl() {\n102       return baseUrl;\n103     }\n104 \n105     public String getPath() {\n106       return path;\n107     }\n108 \n109     public void setBaseUrl(String baseUrl) {\n110       this.baseUrl = baseUrl;\n111     }\n112 \n113     public void setPath(String path) {\n114       this.path = path;\n115     }\n116   }\n117 \n118   private static class Monitoring {\n119     private Integer batchSize;\n120 \n121     public Integer getBatchSize() {\n122       return batchSize;\n123     }\n124 \n125     public void setBatchSize(Integer batchSize) {\n126       this.batchSize = batchSize;\n127     }\n128   }\n129 \n130   public Monitoring getMonitoring() {\n131     return monitoring;\n132   }\n133 \n134   public void setMonitoring(Monitoring monitoring) {\n135     this.monitoring = monitoring;\n136   }\n137 \n138   public Integer getMonitoringBatchSize() {\n139     return this.monitoring.getBatchSize();\n140   }\n141 \n142   public void setMonitoringBatchSize(Integer batchSize) {\n143     this.monitoring.setBatchSize(batchSize);\n144   }\n145 }\n146 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/BatchCounter.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.submission.monitoring;\n22 \n23 import io.micrometer.core.instrument.Counter;\n24 import io.micrometer.core.instrument.MeterRegistry;\n25 \n26 /**\n27  * Batch counter for counting requests for monitoring. Counts up in batches, given batch size. This way, single requests\n28  * cannot be traced to semantics of the counter by comparing time stamps.\n29  */\n30 public class BatchCounter {\n31 \n32   private static final String SUBMISSION_CONTROLLER_REQUESTS_COUNTER_NAME = \"submission_controller.requests\";\n33   private static final String SUBMISSION_CONTROLLER_REQUESTS_COUNTER_DESCRIPTION\n34       = \"Counts requests to the Submission Controller.\";\n35 \n36   private final int batchSize;\n37   private final Counter counter;\n38   private Double batch = 0.;\n39 \n40   BatchCounter(MeterRegistry meterRegistry, int batchSize, String type) {\n41     this.batchSize = batchSize;\n42     counter = Counter.builder(SUBMISSION_CONTROLLER_REQUESTS_COUNTER_NAME)\n43         .tag(\"type\", type)\n44         .description(SUBMISSION_CONTROLLER_REQUESTS_COUNTER_DESCRIPTION)\n45         .register(meterRegistry);\n46   }\n47 \n48   /**\n49    * Increments the {@link BatchCounter}. If the batch size is reached, it is provided to monitoring, else, the internal\n50    * counter is incremented.\n51    */\n52   public void increment() {\n53     if (batch < batchSize) {\n54       batch++;\n55     } else {\n56       counter.increment(batch);\n57       batch = 1.;\n58     }\n59   }\n60 }\n61 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/BatchCounter.java]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/SubmissionControllerMonitor.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.submission.monitoring;\n22 \n23 import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;\n24 import app.coronawarn.server.services.submission.controller.SubmissionController;\n25 import io.micrometer.core.instrument.Gauge;\n26 import io.micrometer.core.instrument.MeterRegistry;\n27 import org.springframework.boot.context.properties.ConfigurationProperties;\n28 import org.springframework.stereotype.Component;\n29 \n30 /**\n31  * Provides functionality for monitoring the application logic of the\n32  * {@link app.coronawarn.server.services.submission.controller.SubmissionController}.\n33  */\n34 @Component\n35 @ConfigurationProperties(prefix = \"services.submission.monitoring\")\n36 public class SubmissionControllerMonitor {\n37   private static final String SUBMISSION_CONTROLLER_CURRENT_FAKE_DELAY = \"submission_controller.fake_delay_seconds\";\n38 \n39   private final MeterRegistry meterRegistry;\n40 \n41   private final Integer batchSize;\n42   private BatchCounter requests;\n43   private BatchCounter realRequests;\n44   private BatchCounter fakeRequests;\n45   private BatchCounter invalidTanRequests;\n46 \n47   /**\n48    * Constructor for {@link SubmissionControllerMonitor}. Initializes all counters to 0 upon being called.\n49    *\n50    * @param meterRegistry the meterRegistry\n51    */\n52   protected SubmissionControllerMonitor(MeterRegistry meterRegistry, SubmissionServiceConfig submissionServiceConfig) {\n53     this.meterRegistry = meterRegistry;\n54     this.batchSize = submissionServiceConfig.getMonitoringBatchSize();\n55     initializeCounters();\n56   }\n57 \n58   /**\n59    * We count the following values.\n60    *  <ul>\n61    *    <li> All requests that come in to the {@link SubmissionController}.\n62    *    <li> As part of all, the number of requests that are not fake.\n63    *    <li> As part of all, the number of requests that are fake.\n64    *    <li> As part of all, the number of requests for that the TAN-validation failed.\n65    *  </ul>\n66    */\n67   private void initializeCounters() {\n68     requests = new BatchCounter(meterRegistry, batchSize, \"all\");\n69     realRequests = new BatchCounter(meterRegistry, batchSize, \"real\");\n70     fakeRequests = new BatchCounter(meterRegistry, batchSize, \"fake\");\n71     invalidTanRequests = new BatchCounter(meterRegistry, batchSize, \"invalidTan\");\n72   }\n73 \n74   /**\n75    * Initializes the gauges for the {@link SubmissionController} that is being monitored. Currently, only the delay time\n76    * of fake requests is measured.\n77    *\n78    * @param submissionController the submission controller for which the gauges shall be initialized\n79    */\n80   public void initializeGauges(SubmissionController submissionController) {\n81     Gauge.builder(SUBMISSION_CONTROLLER_CURRENT_FAKE_DELAY, submissionController,\n82         __ -> submissionController.getFakeDelayInSeconds())\n83         .description(\"The time that fake requests are delayed to make them indistinguishable from real requests.\")\n84         .register(meterRegistry);\n85   }\n86 \n87   public void incrementRequestCounter() {\n88     requests.increment();\n89   }\n90 \n91   public void incrementRealRequestCounter() {\n92     realRequests.increment();\n93   }\n94 \n95   public void incrementFakeRequestCounter() {\n96     fakeRequests.increment();\n97   }\n98 \n99   public void incrementInvalidTanRequestCounter() {\n100     invalidTanRequests.increment();\n101   }\n102 }\n103 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/SubmissionControllerMonitor.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Sure! Here is the patch file for the provided issue:\n\n```diff\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n@@ -27,7 +27,7 @@ public class SubmissionServiceConfig {\n   private Double initialFakeDelayMilliseconds;\n   private Double fakeDelayMovingAverageSamples;\n   private Integer retentionDays;\n-  private Payload payload;\n+  private int maxNumberOfKeys;\n   private Verification verification;\n   private Monitoring monitoring;\n \n@@ -67,7 +67,7 @@ public class SubmissionServiceConfig {\n   }\n \n   public Integer getMaxNumberOfKeys() {\n-    return payload.getMaxNumberOfKeys();\n+    return maxNumberOfKeys;\n   }\n \n   public void setPayload(Payload payload) {\n@@ -71,7 +71,7 @@ public class SubmissionServiceConfig {\n   }\n \n   private static class Payload {\n-    private Integer maxNumberOfKeys;\n+    private int maxNumberOfKeys;\n \n     public Integer getMaxNumberOfKeys() {\n       return maxNumberOfKeys;\n@@ -79,7 +79,7 @@ public class SubmissionServiceConfig {\n \n     public void setMaxNumberOfKeys(Integer maxNumberOfKeys) {\n       this.maxNumberOfKeys = maxNumberOfKeys;\n-    }\n+    } \n   }\n \n   public String getVerificationBaseUrl() {\n@@ -138,7 +138,7 @@ public class SubmissionServiceConfig {\n   }\n \n   public Integer getMonitoringBatchSize() {\n-    return this.monitoring.getBatchSize();\n+    return this.monitoring.getBatchSize();\n   }\n \n   public void setMonitoringBatchSize(Integer batchSize) {\n```\n\nPlease let me know if you need any further assistance.",
        "model_patch": "--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n@@ -27,7 +27,7 @@ public class SubmissionServiceConfig {\n   private Double initialFakeDelayMilliseconds;\n   private Double fakeDelayMovingAverageSamples;\n   private Integer retentionDays;\n-  private Payload payload;\n+  private int maxNumberOfKeys;\n   private Verification verification;\n   private Monitoring monitoring;\n \n@@ -67,7 +67,7 @@ public class SubmissionServiceConfig {\n   }\n \n   public Integer getMaxNumberOfKeys() {\n-    return payload.getMaxNumberOfKeys();\n+    return maxNumberOfKeys;\n   }\n \n   public void setPayload(Payload payload) {\n@@ -71,7 +71,7 @@ public class SubmissionServiceConfig {\n   }\n \n   private static class Payload {\n-    private Integer maxNumberOfKeys;\n+    private int maxNumberOfKeys;\n \n     public Integer getMaxNumberOfKeys() {\n       return maxNumberOfKeys;\n@@ -79,7 +79,7 @@ public class SubmissionServiceConfig {\n \n     public void setMaxNumberOfKeys(Integer maxNumberOfKeys) {\n       this.maxNumberOfKeys = maxNumberOfKeys;\n-    }\n+    } \n   }\n \n   public String getVerificationBaseUrl() {\n@@ -138,7 +138,7 @@ public class SubmissionServiceConfig {\n   }\n \n   public Integer getMonitoringBatchSize() {\n-    return this.monitoring.getBatchSize();\n+    return this.monitoring.getBatchSize();\n   }\n \n   public void setMonitoringBatchSize(Integer batchSize) {\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 551,
        "issue_numbers": [
            "548",
            "546"
        ],
        "base_commit": "39cf982dab39722accf5cbb2cc6f2c6ef15c8456",
        "patch": "diff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n@@ -116,13 +116,13 @@ public void setPath(String path) {\n   }\n \n   private static class Monitoring {\n-    private Integer batchSize;\n+    private Long batchSize;\n \n-    public Integer getBatchSize() {\n+    public Long getBatchSize() {\n       return batchSize;\n     }\n \n-    public void setBatchSize(Integer batchSize) {\n+    public void setBatchSize(Long batchSize) {\n       this.batchSize = batchSize;\n     }\n   }\n@@ -135,11 +135,11 @@ public void setMonitoring(Monitoring monitoring) {\n     this.monitoring = monitoring;\n   }\n \n-  public Integer getMonitoringBatchSize() {\n+  public Long getMonitoringBatchSize() {\n     return this.monitoring.getBatchSize();\n   }\n \n-  public void setMonitoringBatchSize(Integer batchSize) {\n+  public void setMonitoringBatchSize(Long batchSize) {\n     this.monitoring.setBatchSize(batchSize);\n   }\n }\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/BatchCounter.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/BatchCounter.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/BatchCounter.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/BatchCounter.java\n@@ -22,6 +22,7 @@\n \n import io.micrometer.core.instrument.Counter;\n import io.micrometer.core.instrument.MeterRegistry;\n+import java.util.concurrent.atomic.AtomicLong;\n \n /**\n  * Batch counter for counting requests for monitoring. Counts up in batches, given batch size. This way, single requests\n@@ -33,11 +34,11 @@ public class BatchCounter {\n   private static final String SUBMISSION_CONTROLLER_REQUESTS_COUNTER_DESCRIPTION\n       = \"Counts requests to the Submission Controller.\";\n \n-  private final int batchSize;\n+  private final long batchSize;\n   private final Counter counter;\n-  private Double batch = 0.;\n+  private final AtomicLong count = new AtomicLong(0L);\n \n-  BatchCounter(MeterRegistry meterRegistry, int batchSize, String type) {\n+  BatchCounter(MeterRegistry meterRegistry, long batchSize, String type) {\n     this.batchSize = batchSize;\n     counter = Counter.builder(SUBMISSION_CONTROLLER_REQUESTS_COUNTER_NAME)\n         .tag(\"type\", type)\n@@ -50,11 +51,8 @@ public class BatchCounter {\n    * counter is incremented.\n    */\n   public void increment() {\n-    if (batch < batchSize) {\n-      batch++;\n-    } else {\n-      counter.increment(batch);\n-      batch = 1.;\n+    if (0 == count.incrementAndGet() % batchSize) {\n+      counter.increment(batchSize);\n     }\n   }\n }\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/SubmissionControllerMonitor.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/SubmissionControllerMonitor.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/SubmissionControllerMonitor.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/monitoring/SubmissionControllerMonitor.java\n@@ -38,7 +38,7 @@ public class SubmissionControllerMonitor {\n \n   private final MeterRegistry meterRegistry;\n \n-  private final Integer batchSize;\n+  private final long batchSize;\n   private BatchCounter requests;\n   private BatchCounter realRequests;\n   private BatchCounter fakeRequests;\n",
        "test_patch": "diff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/monitoring/BatchCounterTest.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/monitoring/BatchCounterTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/monitoring/BatchCounterTest.java\n@@ -0,0 +1,64 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.submission.monitoring;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import io.micrometer.core.instrument.Counter;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.MeterRegistryMock;\n+import java.util.stream.LongStream;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+class BatchCounterTest {\n+\n+  private static final String COUNTER_TYPE = \"FooCounter\";\n+  private MeterRegistry meterRegistry;\n+  private Counter meterCounter;\n+\n+  @BeforeEach\n+  void setUpCounter() {\n+    meterCounter = mock(Counter.class);\n+    meterRegistry = spy(new MeterRegistryMock(meterCounter));\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(longs = {1L, 2L, 4L})\n+  void incrementSubmittedOnceIfBatchSizeReached(long batchSize) {\n+    BatchCounter batchCounter = new BatchCounter(meterRegistry, batchSize, COUNTER_TYPE);\n+    LongStream.range(0, batchSize).forEach(__ -> batchCounter.increment());\n+    verify(meterCounter, times(1)).increment(batchSize);\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(longs = {2L, 4L, 7L})\n+  void doesNotIncrementIfLesserThanBatchSize(long batchSize) {\n+    BatchCounter batchCounter = new BatchCounter(meterRegistry, batchSize, COUNTER_TYPE);\n+    LongStream.range(0, batchSize - 1).forEach(__ -> batchCounter.increment());\n+    verify(meterCounter, never()).increment(batchSize);\n+  }\n+}\ndiff --git a/services/submission/src/test/java/io/micrometer/core/instrument/MeterRegistryMock.java b/services/submission/src/test/java/io/micrometer/core/instrument/MeterRegistryMock.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/test/java/io/micrometer/core/instrument/MeterRegistryMock.java\n@@ -0,0 +1,40 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package io.micrometer.core.instrument;\n+\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+\n+/**\n+ * Used to get access to the {@link Counter} instance in BatchCounterTest.\n+ */\n+public class MeterRegistryMock extends SimpleMeterRegistry {\n+\n+  final Counter counter;\n+\n+  public MeterRegistryMock(Counter counter) {\n+    this.counter = counter;\n+  }\n+\n+  @Override\n+  Counter counter(Meter.Id id) {\n+    return counter;\n+  }\n+}\n",
        "problem_statement": "BatchCounter uses Double for counting\n## Describe the bug\r\n\r\nBatchCounter uses `double` for integer arithmetics, which is commonly discouraged.\r\n\r\n## Expected behaviour\r\n\r\nBatchCounter uses `int` for counting up to `batchSize`, since `batchSize` is also of type `int`.\r\nIt's faster.\r\nIn theory it's more accurate. (In practice there is no difference in this case since the maximum value that is representable in a double is larger than `Integer.MAX_VALUE`. But for `long` instead of `int`, there would be a difference.)\r\n\r\n## Possible Fix\r\n\r\n~~~java\r\nprivate int batch;\r\n~~~\r\n\r\nWhile here, `batch` should be renamed to `batchCount` to better express its actual meaning.\nBatchCounter is not thread-safe\n## Describe the bug\r\n\r\nWhen multiple threads call `BatchCounter.increment` at the same time, the resulting count is unspecified.\r\n\r\n## Expected behaviour\r\n\r\n`synchronized void increment`\r\n\r\n## Steps to reproduce the issue\r\n\r\nCall `BatchCounter` from several threads at the same time.\r\n\r\n## Possible Fix\r\n\r\nAdd `synchronized`.\n",
        "hints_text": "\n",
        "created_at": "2020-06-11T18:31:41Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-972",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\n[BSI][20201107] Denial-of-Service in Download Service\nRating: Informational\r\n\r\nDescription:\r\nThe download service component of the cwa-server backend can be forced into an endless loop by a malicious or faulty federation gateway server. When downloading new batches from the federation gateway server, the download service checks the nextBatchTag header of the federation gateway server\u2019s response. If this header is set, the download service will continue requesting a batch with this tag. It will not stop as long as the server includes this header. This can trap the download service in an endless loop.\r\nThis highly depends on the behavior and implementation of the federation gateway server. However, even a non-malicious, faulty implementation might trigger this issue. Additionally, the issue was sometimes hard to reproduce as the server first has to be forced to request new batches (which in some cases required setting the EFGS_ENABLE_DATE_BASED_DOWNLOAD configuration to true).\r\n\r\nAffected System:\r\ncwa-server (commit 4f3f460f580ea5d548dff0e3ceb739908c83d1a7)\r\n\r\nProof of Concept:\r\nThe following screenshots show the offending lines in the FederationBatchProcessor.java:\r\n\r\n<img width=\"846\" alt=\"Download Service DoS Offending Code\" src=\"https://user-images.githubusercontent.com/65443025/98435998-dcd5f900-20d7-11eb-9f5e-3fb7f449ca58.png\">\r\n\r\nThe following snippets show a minimalistic federation gateway server mock that returns invalid data but sets the nextBatchTag header on each response. The first request needs to fail (in this case implemented by sending an invalid HTTP request body) so that the batch tag is added to the list of unprocessed batches.\r\n<img width=\"775\" alt=\"snippet-1\" src=\"https://user-images.githubusercontent.com/65443025/98436046-5c63c800-20d8-11eb-843e-47e98b9c2ed7.png\">\r\n<img width=\"779\" alt=\"snippet-2\" src=\"https://user-images.githubusercontent.com/65443025/98436048-61c11280-20d8-11eb-9d77-43ebd770a556.png\">\r\n\r\n\r\nThe following screenshot shows the failing first request on the first run of the download service:\r\n<img width=\"824\" alt=\"Download Service DoS First Invalid Request\" src=\"https://user-images.githubusercontent.com/65443025/98436059-87e6b280-20d8-11eb-9ad0-7ceaaa557add.png\">\r\n\r\n\r\nThe next screenshot shows the log output of the download service when it is run again. It can be seen that the server will endlessly try to request a next batch.\r\n<img width=\"845\" alt=\"Download Service DoS Endless Loop Log\" src=\"https://user-images.githubusercontent.com/65443025/98436074-ab116200-20d8-11eb-8c3c-ac545d9c1b07.png\">\r\n\r\n\r\n\r\nRecommended Controls: \r\nThe while loop should be adapted so that it is not possible for it to continue forever. The received nextBatchTag header should be checked. If it is already contained in the list of unprocessed batches, it should not be added again. This does not protect against a malicious server that sends different batch tags on each request. Therefore, alternatively, a timeout value or a maximum number of retries could be introduced.\r\n\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13     <a href=\"https://api.reuse.software/badge/github.com/corona-warn-app/cwa-server\" title=\"REUSE Status\"><img src=\"https://api.reuse.software/badge/github.com/corona-warn-app/cwa-server\"></a>\n14 </p>\n15 \n16 <p align=\"center\">\n17   <a href=\"#development\">Development</a> \u2022\n18   <a href=\"#service-apis\">Service APIs</a> \u2022\n19   <a href=\"#documentation\">Documentation</a> \u2022\n20   <a href=\"#support-and-feedback\">Support</a> \u2022\n21   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n22   <a href=\"#contributors\">Contributors</a> \u2022\n23   <a href=\"#repositories\">Repositories</a> \u2022\n24   <a href=\"#licensing\">Licensing</a>\n25 </p>\n26 \n27 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App.\n28 \n29 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n30 \n31 ## Architecture Overview\n32 \n33 You can find the architecture overview [here](/docs/ARCHITECTURE.md), which will give you\n34 a good starting point in how the backend services interact with other services, and what purpose\n35 they serve.\n36 \n37 ## Development\n38 \n39 After you've checked out this repository, you can run the application in one of the following ways:\n40 \n41 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n42   * Single components using the respective Dockerfile or\n43   * The full backend using the Docker Compose (which is considered the most convenient way)\n44 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n45   If you want to develop something in a single component, this approach is preferable.\n46 \n47 ### Docker-Based Deployment\n48 \n49 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n50 \n51 #### Running the Full CWA Backend Using Docker Compose\n52 \n53 For your convenience, a full setup for local development and testing purposes, including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env``` in the root folder of the repository. If the endpoints are to be exposed to the network the default values in this file should be changed before docker-compose is run.\n54 \n55 Once the services are built, you can start the whole backend using ```docker-compose up```.\n56 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n57 \n58 The docker-compose contains the following services:\n59 \n60 Service           | Description | Endpoint and Default Credentials\n61 ------------------|-------------|-----------\n62 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n63 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n64 postgres          | A [postgres] database installation                                                          | `localhost:8001` <br> `postgres:5432` (from containerized pgadmin) <br> Username: postgres <br> Password: postgres\n65 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n66 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n67 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is `edc07f08-a1aa-11ea-bb37-0242ac130002`.\n68 \n69 ##### Known Limitation\n70 \n71 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n72 \n73 #### Running Single CWA Services Using Docker\n74 \n75 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n76 \n77 To build and run the distribution service, run the following command:\n78 \n79 ```bash\n80 ./services/distribution/build_and_run.sh\n81 ```\n82 \n83 To build and run the submission service, run the following command:\n84 \n85 ```bash\n86 ./services/submission/build_and_run.sh\n87 ```\n88 \n89 The submission service is available on [localhost:8080](http://localhost:8080 ).\n90 \n91 ### Maven-Based Build\n92 \n93 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n94 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n95 \n96 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n97 * [Maven 3.6](https://maven.apache.org/)\n98 * [Postgres]\n99 * [Zenko CloudServer]\n100 \n101 If you are already running a local Postgres, you need to create a database `cwa` and run the following setup scripts:\n102 \n103 * Create the different CWA roles first by executing [create-roles.sql](setup/create-roles.sql).\n104 * Create local database users for the specific roles by running [create-users.sql](./local-setup/create-users.sql).\n105 * It is recommended to also run [enable-test-data-docker-compose.sql](./local-setup/enable-test-data-docker-compose.sql)\n106 , which enables the test data generation profile. If you already had CWA running before and an existing `diagnosis-key`\n107 table on your database, you need to run [enable-test-data.sql](./local-setup/enable-test-data.sql) instead.\n108 \n109 You can also use `docker-compose` to start Postgres and Zenko. If you do that, you have to\n110 set the following environment-variables when running the Spring project:\n111 \n112 For the distribution module:\n113 \n114 ```bash\n115 POSTGRESQL_SERVICE_PORT=8001\n116 VAULT_FILESIGNING_SECRET=</path/to/your/private_key>\n117 SPRING_PROFILES_ACTIVE=signature-dev,disable-ssl-client-postgres\n118 ```\n119 \n120 For the submission module:\n121 \n122 ```bash\n123 POSTGRESQL_SERVICE_PORT=8001\n124 SPRING_PROFILES_ACTIVE=disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n125 ```\n126 \n127 #### Configure\n128 \n129 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n130 \n131 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n132 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n133 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n134   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n135 \n136 #### Build\n137 \n138 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n139 \n140 #### Run\n141 \n142 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n143 \n144 If you want to start the submission service, for example, you start it as follows:\n145 \n146 ```bash\n147   cd services/submission/\n148   mvn spring-boot:run\n149 ```\n150 \n151 #### Debugging\n152 \n153 To enable the `DEBUG` log level, you can run the application using the Spring `debug` profile.\n154 \n155 ```bash\n156 mvn spring-boot:run -Dspring.profiles.active=debug\n157 ```\n158 \n159 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n160 \n161 ## Service APIs\n162 \n163 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n164 \n165 Service                   | OpenAPI Specification\n166 --------------------------|-------------\n167 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n168 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n169 \n170 ## Spring Profiles\n171 \n172 ### Distribution\n173 \n174 See [Distribution Service - Spring Profiles](/docs/DISTRIBUTION.md#spring-profiles).\n175 \n176 ### Submission\n177 \n178 See [Submission Service - Spring Profiles](/docs/SUBMISSION.md#spring-profiles).\n179 \n180 ## Documentation\n181 \n182 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n183 \n184 The documentation for cwa-server can be found under the [/docs](./docs) folder.\n185 \n186 The JavaDoc documentation for cwa-server is hosted by Github Pages at [https://corona-warn-app.github.io/cwa-server](https://corona-warn-app.github.io/cwa-server).\n187 \n188 ## Support and Feedback\n189 \n190 The following channels are available for discussions, feedback, and support requests:\n191 \n192 | Type                     | Channel                                                |\n193 | ------------------------ | ------------------------------------------------------ |\n194 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n195 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n196 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n197 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n198 \n199 ## How to Contribute\n200 \n201 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n202 \n203 ## Contributors\n204 \n205 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n206 \n207 ## Repositories\n208 \n209 The following public repositories are currently available for the Corona-Warn-App:\n210 \n211 | Repository          | Description                                                           |\n212 | ------------------- | --------------------------------------------------------------------- |\n213 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n214 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n215 | [cwa-verification-server] | Backend implementation of the verification process|\n216 \n217 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n218 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n219 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n220 [Postgres]: https://www.postgresql.org/\n221 [HSQLDB]: http://hsqldb.org/\n222 [Zenko CloudServer]: https://github.com/scality/cloudserver\n223 \n[end of README.md]\n[start of services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java]\n1 package app.coronawarn.server.services.download;\n2 \n3 import static app.coronawarn.server.common.persistence.domain.FederationBatchStatus.ERROR;\n4 import static app.coronawarn.server.common.persistence.domain.FederationBatchStatus.ERROR_WONT_RETRY;\n5 import static app.coronawarn.server.common.persistence.domain.FederationBatchStatus.PROCESSED;\n6 import static app.coronawarn.server.common.persistence.domain.FederationBatchStatus.PROCESSED_WITH_ERROR;\n7 import static app.coronawarn.server.common.persistence.domain.FederationBatchStatus.UNPROCESSED;\n8 import static java.util.stream.Collectors.toList;\n9 \n10 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n11 import app.coronawarn.server.common.persistence.domain.FederationBatchInfo;\n12 import app.coronawarn.server.common.persistence.domain.FederationBatchStatus;\n13 import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;\n14 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n15 import app.coronawarn.server.common.persistence.service.FederationBatchInfoService;\n16 import app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKeyBatch;\n17 import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n18 import app.coronawarn.server.services.download.config.DownloadServiceConfig;\n19 import app.coronawarn.server.services.download.normalization.FederationKeyNormalizer;\n20 import app.coronawarn.server.services.download.validation.ValidFederationKeyFilter;\n21 import java.time.LocalDate;\n22 import java.time.Period;\n23 import java.time.ZoneOffset;\n24 import java.util.Deque;\n25 import java.util.LinkedList;\n26 import java.util.List;\n27 import java.util.Optional;\n28 import java.util.concurrent.atomic.AtomicBoolean;\n29 import org.slf4j.Logger;\n30 import org.slf4j.LoggerFactory;\n31 import org.springframework.stereotype.Component;\n32 \n33 /**\n34  * Responsible for downloading and storing batch information from the federation gateway.\n35  */\n36 @Component\n37 public class FederationBatchProcessor {\n38 \n39   private static final Logger logger = LoggerFactory.getLogger(FederationBatchProcessor.class);\n40   private final FederationBatchInfoService batchInfoService;\n41   private final DiagnosisKeyService diagnosisKeyService;\n42   private final FederationGatewayDownloadService federationGatewayDownloadService;\n43   private final DownloadServiceConfig config;\n44   private final ValidFederationKeyFilter validFederationKeyFilter;\n45 \n46   /**\n47    * Constructor.\n48    *\n49    * @param batchInfoService                 A {@link FederationBatchInfoService} for accessing diagnosis key batch\n50    *                                         information.\n51    * @param diagnosisKeyService              A {@link DiagnosisKeyService} for storing retrieved diagnosis keys.\n52    * @param federationGatewayDownloadService A {@link FederationGatewayDownloadService} for retrieving federation\n53    *                                         diagnosis key batches.\n54    * @param config                           A {@link DownloadServiceConfig} for retrieving federation configuration.\n55    * @param federationKeyValidator           A {@link ValidFederationKeyFilter} for validating keys in the downloaded\n56    *                                         batches\n57    */\n58   public FederationBatchProcessor(FederationBatchInfoService batchInfoService,\n59       DiagnosisKeyService diagnosisKeyService, FederationGatewayDownloadService federationGatewayDownloadService,\n60       DownloadServiceConfig config, ValidFederationKeyFilter federationKeyValidator) {\n61     this.batchInfoService = batchInfoService;\n62     this.diagnosisKeyService = diagnosisKeyService;\n63     this.federationGatewayDownloadService = federationGatewayDownloadService;\n64     this.config = config;\n65     this.validFederationKeyFilter = federationKeyValidator;\n66   }\n67 \n68   /**\n69    * Checks if the date-based download logic is enabled and prepares the FederationBatchInfo Repository accordingly. The\n70    * Federation Batch Info stores information about which batches have already been processed to not download them\n71    * again. If the date-based download is enabled, the entries for the specified date need to be removed. Stores the\n72    * first FederationBatchTag for the specified date as a starting point for further processing.\n73    */\n74   public void prepareDownload() throws FatalFederationGatewayException {\n75     if (config.getEfgsEnforceDateBasedDownload()) {\n76       LocalDate downloadDate = LocalDate.now(ZoneOffset.UTC)\n77           .minus(Period.ofDays(config.getEfgsEnforceDownloadOffsetDays()));\n78       batchInfoService.deleteForDate(downloadDate);\n79       saveFirstBatchInfoForDate(downloadDate);\n80     }\n81   }\n82 \n83   /**\n84    * Stores the batch info for the specified date. Its status is set to {@link FederationBatchStatus#UNPROCESSED}.\n85    *\n86    * @param date The date for which the first batch info is stored.\n87    */\n88   protected void saveFirstBatchInfoForDate(LocalDate date) throws FatalFederationGatewayException {\n89     try {\n90       logger.info(\"Triggering download of first batch for date {}.\", date);\n91       BatchDownloadResponse response = federationGatewayDownloadService.downloadBatch(date);\n92       batchInfoService.save(new FederationBatchInfo(response.getBatchTag(), date));\n93     } catch (BatchDownloadException e) {\n94       logger.error(\"Triggering download of first batch for date {} failed. Reason: {}.\", date, e.getMessage());\n95     } catch (FatalFederationGatewayException e) {\n96       throw e;\n97     } catch (Exception e) {\n98       logger.error(\"Triggering download of first batch for date {} failed.\", date, e);\n99     }\n100   }\n101 \n102   /**\n103    * Downloads and processes all batches from the federation gateway that have previously been\n104    * marked with the status value {@link FederationBatchStatus#ERROR}.\n105    */\n106   public void processErrorFederationBatches() {\n107     List<FederationBatchInfo> federationBatchInfoWithError = batchInfoService.findByStatus(ERROR);\n108     logger.info(\"{} error federation batches for reprocessing found.\", federationBatchInfoWithError.size());\n109     federationBatchInfoWithError.forEach(this::retryProcessingBatch);\n110   }\n111 \n112   private void retryProcessingBatch(FederationBatchInfo federationBatchInfo) {\n113     try {\n114       processBatchAndReturnNextBatchId(federationBatchInfo, ERROR_WONT_RETRY)\n115           .ifPresent(nextBatchTag ->\n116               batchInfoService.save(new FederationBatchInfo(nextBatchTag, federationBatchInfo.getDate())));\n117     } catch (Exception e) {\n118       logger.error(\"Failed to save next federation batch info for processing. Will not try again.\", e);\n119       batchInfoService.updateStatus(federationBatchInfo, ERROR_WONT_RETRY);\n120     }\n121   }\n122 \n123   /**\n124    * Downloads and processes all batches from the federation gateway that have previously been marked with status value\n125    * {@link FederationBatchStatus#UNPROCESSED}.\n126    */\n127   public void processUnprocessedFederationBatches() throws FatalFederationGatewayException {\n128     Deque<FederationBatchInfo> unprocessedBatches = new LinkedList<>(batchInfoService.findByStatus(UNPROCESSED));\n129     logger.info(\"{} unprocessed federation batches found.\", unprocessedBatches.size());\n130 \n131     while (!unprocessedBatches.isEmpty()) {\n132       FederationBatchInfo currentBatch = unprocessedBatches.remove();\n133       processBatchAndReturnNextBatchId(currentBatch, ERROR)\n134           .ifPresent(nextBatchTag -> {\n135             if (config.getEfgsEnforceDateBasedDownload()) {\n136               unprocessedBatches.add(new FederationBatchInfo(nextBatchTag, currentBatch.getDate()));\n137             }\n138           });\n139     }\n140   }\n141 \n142   private Optional<String> processBatchAndReturnNextBatchId(\n143       FederationBatchInfo batchInfo, FederationBatchStatus errorStatus) throws FatalFederationGatewayException {\n144     LocalDate date = batchInfo.getDate();\n145     String batchTag = batchInfo.getBatchTag();\n146     logger.info(\"Processing batch for date {} and batchTag {}.\", date, batchTag);\n147     try {\n148       BatchDownloadResponse response = federationGatewayDownloadService.downloadBatch(batchTag, date);\n149       AtomicBoolean batchContainsInvalidKeys = new AtomicBoolean(false);\n150       response.getDiagnosisKeyBatch().ifPresentOrElse(batch -> {\n151         logger.info(\"Downloaded {} keys for date {} and batchTag {}.\", batch.getKeysCount(), date, batchTag);\n152         List<DiagnosisKey> validDiagnosisKeys = extractValidDiagnosisKeysFromBatch(batch);\n153         int numOfInvalidKeys = batch.getKeysCount() - validDiagnosisKeys.size();\n154         if (numOfInvalidKeys > 0) {\n155           batchContainsInvalidKeys.set(true);\n156           logger.info(\"{} keys failed validation and were skipped.\", numOfInvalidKeys);\n157         }\n158         int insertedKeys = diagnosisKeyService.saveDiagnosisKeys(validDiagnosisKeys);\n159         logger.info(\"Successfully inserted {} keys for date {} and batchTag {}.\", insertedKeys, date, batchTag);\n160       }, () -> logger.info(\"Batch for date {} and batchTag {} did not contain any keys.\", date, batchTag));\n161       batchInfoService.updateStatus(batchInfo, batchContainsInvalidKeys.get() ? PROCESSED_WITH_ERROR : PROCESSED);\n162       return response.getNextBatchTag();\n163     } catch (BatchDownloadException e) {\n164       logger.error(\"Federation batch processing for date {} and batchTag {} failed. Status set to {}. Reason: {}.\",\n165           date, batchTag, errorStatus.name(), e.getMessage());\n166       batchInfoService.updateStatus(batchInfo, errorStatus);\n167       return Optional.empty();\n168     } catch (FatalFederationGatewayException e) {\n169       throw e;\n170     } catch (Exception e) {\n171       logger.error(\"Federation batch processing for date {} and batchTag {} failed. Status set to {}.\",\n172           date, batchTag, errorStatus.name(), e);\n173       batchInfoService.updateStatus(batchInfo, errorStatus);\n174       return Optional.empty();\n175     }\n176   }\n177 \n178   private List<DiagnosisKey> extractValidDiagnosisKeysFromBatch(DiagnosisKeyBatch diagnosisKeyBatch) {\n179     return diagnosisKeyBatch.getKeysList()\n180         .stream()\n181         .filter(validFederationKeyFilter::isValid)\n182         .map(this::convertFederationDiagnosisKeyToDiagnosisKey)\n183         .filter(Optional::isPresent)\n184         .map(Optional::get)\n185         .collect(toList());\n186   }\n187 \n188   private Optional<DiagnosisKey> convertFederationDiagnosisKeyToDiagnosisKey(\n189       app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKey diagnosisKey) {\n190     try {\n191       return Optional.of(DiagnosisKey.builder().fromFederationDiagnosisKey(diagnosisKey)\n192           .withReportType(ReportType.CONFIRMED_TEST)\n193           .withFieldNormalization(new FederationKeyNormalizer(config))\n194           .build());\n195     } catch (InvalidDiagnosisKeyException e) {\n196       logger.info(\"Building diagnosis key from federation diagnosis key failed. Reason: {}.\", e.getMessage());\n197       return Optional.empty();\n198     } catch (Exception e) {\n199       logger.info(\"Building diagnosis key from federation diagnosis key failed.\", e);\n200       return Optional.empty();\n201     }\n202   }\n203 }\n204 \n[end of services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java\n+++ b/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java\n@@ -148,7 +148,7 @@ public class FederationBatchProcessor {\n       AtomicBoolean batchContainsInvalidKeys = new AtomicBoolean(false);\n       response.getDiagnosisKeyBatch().ifPresentOrElse(batch -> {\n         logger.info(\"Downloaded {} keys for date {} and batchTag {}.\", batch.getKeysCount(), date, batchTag);\n-        List<DiagnosisKey> validDiagnosisKeys = extractValidDiagnosisKeysFromBatch(batch);\n+        List<DiagnosisKey> validDiagnosisKeys = extractValidDiagnosisKeysFromBatch(batch, date);\n         int numOfInvalidKeys = batch.getKeysCount() - validDiagnosisKeys.size();\n         if (numOfInvalidKeys > 0) {\n           batchContainsInvalidKeys.set(true);\n@@ -178,7 +178,7 @@ public class FederationBatchProcessor {\n   }\n \n   private List<DiagnosisKey> extractValidDiagnosisKeysFromBatch(DiagnosisKeyBatch diagnosisKeyBatch) {\n-    return diagnosisKeyBatch.getKeysList()\n+    return diagnosisKeyBatch.getKeysList().stream().filter(key -> key.getRollingPeriod() > 0)\n         .stream()\n         .filter(validFederationKeyFilter::isValid)\n         .map(this::convertFederationDiagnosisKeyToDiagnosisKey)\n@@ -188,7 +188,7 @@ public class FederationBatchProcessor {\n   private Optional<DiagnosisKey> convertFederationDiagnosisKeyToDiagnosisKey(\n       app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKey diagnosisKey) {\n     try {\n-      return Optional.of(DiagnosisKey.builder().fromFederationDiagnosisKey(diagnosisKey)\n+      return Optional.of(DiagnosisKey.builder().fromFederationDiagnosisKey(diagnosisKey).withRollingPeriod(144)\n           .withReportType(ReportType.CONFIRMED_TEST)\n           .withFieldNormalization(new FederationKeyNormalizer(config))\n           .build());\n</patch>",
        "model_patch": "\n--- a/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java\n+++ b/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java\n@@ -148,7 +148,7 @@ public class FederationBatchProcessor {\n       AtomicBoolean batchContainsInvalidKeys = new AtomicBoolean(false);\n       response.getDiagnosisKeyBatch().ifPresentOrElse(batch -> {\n         logger.info(\"Downloaded {} keys for date {} and batchTag {}.\", batch.getKeysCount(), date, batchTag);\n-        List<DiagnosisKey> validDiagnosisKeys = extractValidDiagnosisKeysFromBatch(batch);\n+        List<DiagnosisKey> validDiagnosisKeys = extractValidDiagnosisKeysFromBatch(batch, date);\n         int numOfInvalidKeys = batch.getKeysCount() - validDiagnosisKeys.size();\n         if (numOfInvalidKeys > 0) {\n           batchContainsInvalidKeys.set(true);\n@@ -178,7 +178,7 @@ public class FederationBatchProcessor {\n   }\n \n   private List<DiagnosisKey> extractValidDiagnosisKeysFromBatch(DiagnosisKeyBatch diagnosisKeyBatch) {\n-    return diagnosisKeyBatch.getKeysList()\n+    return diagnosisKeyBatch.getKeysList().stream().filter(key -> key.getRollingPeriod() > 0)\n         .stream()\n         .filter(validFederationKeyFilter::isValid)\n         .map(this::convertFederationDiagnosisKeyToDiagnosisKey)\n@@ -188,7 +188,7 @@ public class FederationBatchProcessor {\n   private Optional<DiagnosisKey> convertFederationDiagnosisKeyToDiagnosisKey(\n       app.coronawarn.server.common.protocols.external.exposurenotification.DiagnosisKey diagnosisKey) {\n     try {\n-      return Optional.of(DiagnosisKey.builder().fromFederationDiagnosisKey(diagnosisKey)\n+      return Optional.of(DiagnosisKey.builder().fromFederationDiagnosisKey(diagnosisKey).withRollingPeriod(144)\n           .withReportType(ReportType.CONFIRMED_TEST)\n           .withFieldNormalization(new FederationKeyNormalizer(config))\n           .build());\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 972,
        "issue_numbers": [
            "970"
        ],
        "base_commit": "e3f867a8005bd7f79c9eabe269d168fc01330484",
        "patch": "diff --git a/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java b/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java\n--- a/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java\n+++ b/services/download/src/main/java/app/coronawarn/server/services/download/FederationBatchProcessor.java\n@@ -22,9 +22,11 @@\n import java.time.Period;\n import java.time.ZoneOffset;\n import java.util.Deque;\n+import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -42,6 +44,12 @@ public class FederationBatchProcessor {\n   private final FederationGatewayDownloadService federationGatewayDownloadService;\n   private final DownloadServiceConfig config;\n   private final ValidFederationKeyFilter validFederationKeyFilter;\n+  \n+  // This is a potential memory-leak if there are very many batches\n+  // This is an intentional decision: \n+  // We'd rather run into a memory-leak if there are too many batches \n+  // than run into an endless loop if a batch-tag repeats\n+  private final Set<String> seenBatches;\n \n   /**\n    * Constructor.\n@@ -63,6 +71,7 @@ public FederationBatchProcessor(FederationBatchInfoService batchInfoService,\n     this.federationGatewayDownloadService = federationGatewayDownloadService;\n     this.config = config;\n     this.validFederationKeyFilter = federationKeyValidator;\n+    this.seenBatches = new HashSet<>();\n   }\n \n   /**\n@@ -129,16 +138,21 @@ public void processUnprocessedFederationBatches() throws FatalFederationGatewayE\n     logger.info(\"{} unprocessed federation batches found.\", unprocessedBatches.size());\n \n     while (!unprocessedBatches.isEmpty()) {\n-      FederationBatchInfo currentBatch = unprocessedBatches.remove();\n-      processBatchAndReturnNextBatchId(currentBatch, ERROR)\n+      FederationBatchInfo currentBatchInfo = unprocessedBatches.remove();\n+      seenBatches.add(currentBatchInfo.getBatchTag());\n+      processBatchAndReturnNextBatchId(currentBatchInfo, ERROR)\n           .ifPresent(nextBatchTag -> {\n-            if (config.getEfgsEnforceDateBasedDownload()) {\n-              unprocessedBatches.add(new FederationBatchInfo(nextBatchTag, currentBatch.getDate()));\n+            if (isEfgsEnforceDateBasedDownloadAndNotSeen(nextBatchTag)) {\n+              unprocessedBatches.add(new FederationBatchInfo(nextBatchTag, currentBatchInfo.getDate()));\n             }\n           });\n     }\n   }\n \n+  private boolean isEfgsEnforceDateBasedDownloadAndNotSeen(String batchTag) {\n+    return config.getEfgsEnforceDateBasedDownload() && !seenBatches.contains(batchTag);\n+  }\n+\n   private Optional<String> processBatchAndReturnNextBatchId(\n       FederationBatchInfo batchInfo, FederationBatchStatus errorStatus) throws FatalFederationGatewayException {\n     LocalDate date = batchInfo.getDate();\n",
        "test_patch": "diff --git a/services/download/src/test/java/app/coronawarn/server/services/download/FederationBatchProcessorTest.java b/services/download/src/test/java/app/coronawarn/server/services/download/FederationBatchProcessorTest.java\n--- a/services/download/src/test/java/app/coronawarn/server/services/download/FederationBatchProcessorTest.java\n+++ b/services/download/src/test/java/app/coronawarn/server/services/download/FederationBatchProcessorTest.java\n@@ -32,12 +32,14 @@\n import app.coronawarn.server.services.download.validation.ValidFederationKeyFilter;\n import com.google.protobuf.ByteString;\n import feign.FeignException;\n+import java.time.Duration;\n import java.time.LocalDate;\n import java.time.Period;\n import java.time.ZoneOffset;\n import java.util.List;\n import java.util.Optional;\n import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Nested;\n@@ -226,6 +228,23 @@ void testOneUnprocessedBatchFails() throws Exception {\n       Mockito.verify(batchInfoService, times(1)).updateStatus(any(FederationBatchInfo.class), eq(ERROR));\n       Mockito.verify(diagnosisKeyService, never()).saveDiagnosisKeys(any());\n     }\n+\n+    @Test\n+    void testNoInfiniteLoopSameBatchTag() throws FatalFederationGatewayException {\n+      config.setEfgsEnforceDateBasedDownload(true);\n+      FederationBatchInfo batchInfo = new FederationBatchInfo(batchTag1, date, UNPROCESSED);\n+      BatchDownloadResponse serverResponse = FederationBatchTestHelper\n+          .createBatchDownloadResponse(batchTag1, Optional.of(batchTag1));\n+\n+      when(batchInfoService.findByStatus(UNPROCESSED)).thenReturn(list(batchInfo));\n+      when(federationGatewayDownloadService.downloadBatch(batchTag1, date)).thenReturn(serverResponse);\n+\n+      Assertions\n+          .assertTimeoutPreemptively(Duration.ofSeconds(1), () -> batchProcessor.processUnprocessedFederationBatches());\n+      Mockito.verify(batchInfoService, times(1)).findByStatus(UNPROCESSED);\n+      Mockito.verify(federationGatewayDownloadService, times(1)).downloadBatch(batchTag1, date);\n+      Mockito.verify(batchInfoService, times(1)).updateStatus(batchInfo, PROCESSED);\n+    }\n   }\n \n   @Nested\n",
        "problem_statement": "[BSI][20201107] Denial-of-Service in Download Service\nRating: Informational\r\n\r\nDescription:\r\nThe download service component of the cwa-server backend can be forced into an endless loop by a malicious or faulty federation gateway server. When downloading new batches from the federation gateway server, the download service checks the nextBatchTag header of the federation gateway server\u2019s response. If this header is set, the download service will continue requesting a batch with this tag. It will not stop as long as the server includes this header. This can trap the download service in an endless loop.\r\nThis highly depends on the behavior and implementation of the federation gateway server. However, even a non-malicious, faulty implementation might trigger this issue. Additionally, the issue was sometimes hard to reproduce as the server first has to be forced to request new batches (which in some cases required setting the EFGS_ENABLE_DATE_BASED_DOWNLOAD configuration to true).\r\n\r\nAffected System:\r\ncwa-server (commit 4f3f460f580ea5d548dff0e3ceb739908c83d1a7)\r\n\r\nProof of Concept:\r\nThe following screenshots show the offending lines in the FederationBatchProcessor.java:\r\n\r\n<img width=\"846\" alt=\"Download Service DoS Offending Code\" src=\"https://user-images.githubusercontent.com/65443025/98435998-dcd5f900-20d7-11eb-9f5e-3fb7f449ca58.png\">\r\n\r\nThe following snippets show a minimalistic federation gateway server mock that returns invalid data but sets the nextBatchTag header on each response. The first request needs to fail (in this case implemented by sending an invalid HTTP request body) so that the batch tag is added to the list of unprocessed batches.\r\n<img width=\"775\" alt=\"snippet-1\" src=\"https://user-images.githubusercontent.com/65443025/98436046-5c63c800-20d8-11eb-843e-47e98b9c2ed7.png\">\r\n<img width=\"779\" alt=\"snippet-2\" src=\"https://user-images.githubusercontent.com/65443025/98436048-61c11280-20d8-11eb-9d77-43ebd770a556.png\">\r\n\r\n\r\nThe following screenshot shows the failing first request on the first run of the download service:\r\n<img width=\"824\" alt=\"Download Service DoS First Invalid Request\" src=\"https://user-images.githubusercontent.com/65443025/98436059-87e6b280-20d8-11eb-9ad0-7ceaaa557add.png\">\r\n\r\n\r\nThe next screenshot shows the log output of the download service when it is run again. It can be seen that the server will endlessly try to request a next batch.\r\n<img width=\"845\" alt=\"Download Service DoS Endless Loop Log\" src=\"https://user-images.githubusercontent.com/65443025/98436074-ab116200-20d8-11eb-8c3c-ac545d9c1b07.png\">\r\n\r\n\r\n\r\nRecommended Controls: \r\nThe while loop should be adapted so that it is not possible for it to continue forever. The received nextBatchTag header should be checked. If it is already contained in the list of unprocessed batches, it should not be added again. This does not protect against a malicious server that sends different batch tags on each request. Therefore, alternatively, a timeout value or a maximum number of retries could be introduced.\r\n\n",
        "hints_text": "",
        "created_at": "2020-11-09T15:39:20Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-422",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nApplication Config: Add new Parameter attenuationDurationThresholds\nAdd a new parameter to the application configuration, called \"attenuationDurationTresholds\". With the help of this parameter, we will be able to calculate the overall risk factor much better.\r\n\r\nDefault values are: X=50, Y=70. There will be call with the RKI today night in which the values might be adjusted.\r\n\r\n```yaml\r\nattenuation-duration-thresholds:\r\n  lower: 50\r\n  upper: 70\r\n```\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile          | Effect\n148 -----------------|-------------\n149 `dev`            | Turns the log level to `DEBUG`.\n150 `cloud`          | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`           | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n152 `testdata`       | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 `signature-dev`  | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n154 `signature-prod` | Provides production app package IDs for the signature info\n155 \n156 ### Submission\n157 \n158 Profile      | Effect\n159 -------------|-------------\n160 `dev`        | Turns the log level to `DEBUG`.\n161 `cloud`      | Removes default values for the `datasource` configuration.\n162 \n163 ## Documentation\n164 \n165 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n166 \n167 ## Support and Feedback\n168 \n169 The following channels are available for discussions, feedback, and support requests:\n170 \n171 | Type                     | Channel                                                |\n172 | ------------------------ | ------------------------------------------------------ |\n173 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n174 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n175 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n176 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n177 \n178 ## How to Contribute\n179 \n180 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n181 \n182 ## Contributors\n183 \n184 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n185 \n186 ## Repositories\n187 \n188 The following public repositories are currently available for the Corona-Warn-App:\n189 \n190 | Repository          | Description                                                           |\n191 | ------------------- | --------------------------------------------------------------------- |\n192 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n193 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n194 | [cwa-verification-server] | Backend implementation of the verification process|\n195 \n196 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n197 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n198 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n199 [Postgres]: https://www.postgresql.org/\n200 [HSQLDB]: http://hsqldb.org/\n201 [Zenko CloudServer]: https://github.com/scality/cloudserver\n202 \n203 ## Licensing\n204 \n205 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n206 \n207 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n208 \n209 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n210 \n211 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n212 \n[end of README.md]\n[start of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto]\n1 syntax = \"proto3\";\n2 package app.coronawarn.server.common.protocols.internal;\n3 option java_package = \"app.coronawarn.server.common.protocols.internal\";\n4 option java_multiple_files = true;\n5 import \"app/coronawarn/server/common/protocols/internal/risk_score_classification.proto\";\n6 import \"app/coronawarn/server/common/protocols/internal/risk_score_parameters.proto\";\n7 \n8 message ApplicationConfiguration {\n9 \n10   int32 minRiskScore = 1;\n11 \n12   app.coronawarn.server.common.protocols.internal.RiskScoreClassification riskScoreClasses = 2;\n13 \n14   app.coronawarn.server.common.protocols.internal.RiskScoreParameters exposureConfig = 3;\n15 }\n[end of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n22 \n23 import app.coronawarn.server.common.protocols.internal.ApplicationConfiguration;\n24 import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n25 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n26 \n27 /**\n28  * This validator validates a {@link ApplicationConfiguration}. It will re-use the {@link ConfigurationValidator} from\n29  * the sub-configurations of {@link RiskScoreParameters} and {@link RiskScoreClassification}.\n30  */\n31 public class ApplicationConfigurationValidator extends ConfigurationValidator {\n32 \n33   private final ApplicationConfiguration config;\n34 \n35   /**\n36    * Creates a new instance for the given {@link ApplicationConfiguration}.\n37    *\n38    * @param config the Application Configuration to validate.\n39    */\n40   public ApplicationConfigurationValidator(ApplicationConfiguration config) {\n41     this.config = config;\n42   }\n43 \n44   @Override\n45   public ValidationResult validate() {\n46     this.errors = new ValidationResult();\n47 \n48     validateMinRisk();\n49 \n50     ValidationResult exposureResult = new ExposureConfigurationValidator(config.getExposureConfig()).validate();\n51     ValidationResult riskScoreResult = new RiskScoreClassificationValidator(config.getRiskScoreClasses()).validate();\n52 \n53     return errors.with(exposureResult).with(riskScoreResult);\n54   }\n55 \n56   private void validateMinRisk() {\n57     int minLevel = this.config.getMinRiskScore();\n58 \n59     if (!RiskScoreValidator.isInBounds(minLevel)) {\n60       this.errors.add(new MinimumRiskLevelValidationError(minLevel));\n61     }\n62   }\n63 }\n64 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n22 \n23 /**\n24  * Definition of the spec according to Apple/Google:\n25  * https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration\n26  */\n27 public class ParameterSpec {\n28 \n29   private ParameterSpec() {\n30   }\n31 \n32   /**\n33    * The minimum weight value for mobile API.\n34    */\n35   public static final double WEIGHT_MIN = 0.001;\n36 \n37   /**\n38    * The maximum weight value for mobile API.\n39    */\n40   public static final int WEIGHT_MAX = 100;\n41 \n42   /**\n43    * Maximum number of allowed decimals.\n44    */\n45   public static final int WEIGHT_MAX_DECIMALS = 3;\n46 \n47   /**\n48    * The allowed minimum value for risk score.\n49    */\n50   public static final int RISK_SCORE_MIN = 0;\n51 \n52   /**\n53    * The allowed maximum value for a risk score.\n54    */\n55   public static final int RISK_SCORE_MAX = 4096;\n56 }\n57 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n22 \n23 import java.util.Objects;\n24 \n25 public class RiskScoreClassificationValidationError implements ValidationError {\n26 \n27   private final String errorSource;\n28 \n29   private final Object value;\n30 \n31   private final ErrorType reason;\n32 \n33   /**\n34    * Creates a {@link RiskScoreClassificationValidationError} that stores the specified validation error source,\n35    * erroneous value and a reason for the error to occur.\n36    *\n37    * @param errorSource A label that describes the property associated with this validation error.\n38    * @param value       The value that caused the validation error.\n39    * @param reason      A validation error specifier.\n40    */\n41   public RiskScoreClassificationValidationError(String errorSource, Object value, ErrorType reason) {\n42     this.errorSource = errorSource;\n43     this.value = value;\n44     this.reason = reason;\n45   }\n46 \n47   @Override\n48   public String toString() {\n49     return \"RiskScoreClassificationValidationError{\"\n50         + \"errorType=\" + reason\n51         + \", parameter='\" + errorSource + '\\''\n52         + \", givenValue=\" + value\n53         + '}';\n54   }\n55 \n56   @Override\n57   public boolean equals(Object o) {\n58     if (this == o) {\n59       return true;\n60     }\n61     if (o == null || getClass() != o.getClass()) {\n62       return false;\n63     }\n64     RiskScoreClassificationValidationError that = (RiskScoreClassificationValidationError) o;\n65     return Objects.equals(errorSource, that.errorSource)\n66         && Objects.equals(value, that.value)\n67         && Objects.equals(reason, that.reason);\n68   }\n69 \n70   @Override\n71   public int hashCode() {\n72     return Objects.hash(errorSource, value, reason);\n73   }\n74 \n75   public enum ErrorType {\n76     BLANK_LABEL,\n77     MIN_GREATER_THAN_MAX,\n78     VALUE_OUT_OF_BOUNDS,\n79     INVALID_URL,\n80     INVALID_PARTITIONING\n81   }\n82 }\n83 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n22 \n23 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.BLANK_LABEL;\n24 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_PARTITIONING;\n25 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_URL;\n26 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n27 import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n28 \n29 import app.coronawarn.server.common.protocols.internal.RiskScoreClass;\n30 import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n31 import java.net.MalformedURLException;\n32 import java.net.URL;\n33 \n34 /**\n35  * The RiskScoreClassificationValidator validates the values of an associated {@link RiskScoreClassification} instance.\n36  */\n37 public class RiskScoreClassificationValidator extends ConfigurationValidator {\n38 \n39   private final RiskScoreClassification riskScoreClassification;\n40 \n41   public RiskScoreClassificationValidator(RiskScoreClassification riskScoreClassification) {\n42     this.riskScoreClassification = riskScoreClassification;\n43   }\n44 \n45   /**\n46    * Performs a validation of the associated {@link RiskScoreClassification} instance and returns information about\n47    * validation failures.\n48    *\n49    * @return The ValidationResult instance, containing information about possible errors.\n50    */\n51   @Override\n52   public ValidationResult validate() {\n53     errors = new ValidationResult();\n54 \n55     validateValues();\n56     validateValueRangeCoverage();\n57 \n58     return errors;\n59   }\n60 \n61   private void validateValues() {\n62     for (RiskScoreClass riskScoreClass : riskScoreClassification.getRiskClassesList()) {\n63       int minRiskLevel = riskScoreClass.getMin();\n64       int maxRiskLevel = riskScoreClass.getMax();\n65 \n66       validateLabel(riskScoreClass.getLabel());\n67       validateRiskScoreValueBounds(minRiskLevel);\n68       validateRiskScoreValueBounds(maxRiskLevel);\n69       validateUrl(riskScoreClass.getUrl());\n70 \n71       if (minRiskLevel > maxRiskLevel) {\n72         errors.add(new RiskScoreClassificationValidationError(\n73             \"minRiskLevel, maxRiskLevel\", minRiskLevel + \", \" + maxRiskLevel, MIN_GREATER_THAN_MAX));\n74       }\n75     }\n76   }\n77 \n78   private void validateLabel(String label) {\n79     if (label.isBlank()) {\n80       errors.add(new RiskScoreClassificationValidationError(\"label\", label, BLANK_LABEL));\n81     }\n82   }\n83 \n84   private void validateRiskScoreValueBounds(int value) {\n85     if (!RiskScoreValidator.isInBounds(value)) {\n86       errors.add(new RiskScoreClassificationValidationError(\"minRiskLevel/maxRiskLevel\", value, VALUE_OUT_OF_BOUNDS));\n87     }\n88   }\n89 \n90   private void validateUrl(String url) {\n91     try {\n92       new URL(url.trim());\n93     } catch (MalformedURLException e) {\n94       errors.add(new RiskScoreClassificationValidationError(\"url\", url, INVALID_URL));\n95     }\n96   }\n97 \n98   private void validateValueRangeCoverage() {\n99     int partitionSum = riskScoreClassification.getRiskClassesList().stream()\n100         .mapToInt(riskScoreClass -> (riskScoreClass.getMax() - riskScoreClass.getMin() + 1))\n101         .sum();\n102 \n103     if (partitionSum != ParameterSpec.RISK_SCORE_MAX + 1) {\n104       errors.add(new RiskScoreClassificationValidationError(\"covered value range\", partitionSum, INVALID_PARTITIONING));\n105     }\n106   }\n107 }\n108 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java]\n[start of services/distribution/src/main/resources/master-config/app-config.yaml]\n1 #----------------------------------------------------------------------\n2 # This is the Corona Warn App master configuration file.\n3 # ----------------------------------------------------------------------\n4 #\n5 # This configuration file will be fetched by the mobile app in order to function.\n6 #\n7 # It currently provides settings for minimum risk score, score classes and exposure configuration.\n8 #\n9 # Change this file with caution!\n10 \n11 min-risk-score: 90\n12 risk-score-classes: !include risk-score-classification.yaml\n13 exposure-config: !include exposure-config.yaml\n[end of services/distribution/src/main/resources/master-config/app-config.yaml]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/main/resources/master-config/app-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/app-config.yaml\n@@ -11,6 +11,7 @@\n min-risk-score: 90\n risk-score-classes: !include risk-score-classification.yaml\n exposure-config: !include exposure-config.yaml\n+attenuation-duration-thresholds: !include attenuation-duration-thresholds.yaml\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/resources/master-config/app-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/app-config.yaml\n@@ -11,6 +11,7 @@\n min-risk-score: 90\n risk-score-classes: !include risk-score-classification.yaml\n exposure-config: !include exposure-config.yaml\n+attenuation-duration-thresholds: !include attenuation-duration-thresholds.yaml\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 422,
        "issue_numbers": [
            "414"
        ],
        "base_commit": "1032f0e5950d2d6fa064da7026825e3c25260c79",
        "patch": "diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto\n--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto\n+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/app_config.proto\n@@ -12,4 +12,11 @@ message ApplicationConfiguration {\n   app.coronawarn.server.common.protocols.internal.RiskScoreClassification riskScoreClasses = 2;\n \n   app.coronawarn.server.common.protocols.internal.RiskScoreParameters exposureConfig = 3;\n+\n+  AttenuationDurationThresholds attenuationDurationThresholds = 4;\n+}\n+\n+message AttenuationDurationThresholds {\n+  int32 lower = 1;\n+  int32 upper = 2;\n }\n\\ No newline at end of file\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidator.java\n@@ -20,6 +20,11 @@\n \n package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;\n+\n import app.coronawarn.server.common.protocols.internal.ApplicationConfiguration;\n import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n@@ -46,6 +51,7 @@ public ValidationResult validate() {\n     this.errors = new ValidationResult();\n \n     validateMinRisk();\n+    validateAttenuationDurationThresholds();\n \n     ValidationResult exposureResult = new ExposureConfigurationValidator(config.getExposureConfig()).validate();\n     ValidationResult riskScoreResult = new RiskScoreClassificationValidator(config.getRiskScoreClasses()).validate();\n@@ -60,4 +66,25 @@ private void validateMinRisk() {\n       this.errors.add(new MinimumRiskLevelValidationError(minLevel));\n     }\n   }\n+\n+  private void validateAttenuationDurationThresholds() {\n+    int lower = config.getAttenuationDurationThresholds().getLower();\n+    int upper = config.getAttenuationDurationThresholds().getUpper();\n+\n+    checkThresholdBound(\"lower\", lower);\n+    checkThresholdBound(\"upper\", upper);\n+\n+    if (lower > upper) {\n+      String parameters = \"attenuationDurationThreshold.lower, attenuationDurationThreshold.upper\";\n+      String values = lower + \", \" + upper;\n+      this.errors.add(new GeneralValidationError(parameters, values, MIN_GREATER_THAN_MAX));\n+    }\n+  }\n+\n+  private void checkThresholdBound(String boundLabel, int boundValue) {\n+    if (boundValue < ATTENUATION_DURATION_THRESHOLD_MIN || boundValue > ATTENUATION_DURATION_THRESHOLD_MAX) {\n+      this.errors.add(\n+          new GeneralValidationError(\"attenuationDurationThreshold.\" + boundLabel, boundValue, VALUE_OUT_OF_BOUNDS));\n+    }\n+  }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java\nsimilarity index 82%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/GeneralValidationError.java\n@@ -22,23 +22,21 @@\n \n import java.util.Objects;\n \n-public class RiskScoreClassificationValidationError implements ValidationError {\n+public class GeneralValidationError implements ValidationError {\n \n   private final String errorSource;\n-\n   private final Object value;\n-\n   private final ErrorType reason;\n \n   /**\n-   * Creates a {@link RiskScoreClassificationValidationError} that stores the specified validation error source,\n+   * Creates a {@link GeneralValidationError} that stores the specified validation error source,\n    * erroneous value and a reason for the error to occur.\n    *\n    * @param errorSource A label that describes the property associated with this validation error.\n    * @param value       The value that caused the validation error.\n    * @param reason      A validation error specifier.\n    */\n-  public RiskScoreClassificationValidationError(String errorSource, Object value, ErrorType reason) {\n+  public GeneralValidationError(String errorSource, Object value, ErrorType reason) {\n     this.errorSource = errorSource;\n     this.value = value;\n     this.reason = reason;\n@@ -46,7 +44,7 @@ public RiskScoreClassificationValidationError(String errorSource, Object value,\n \n   @Override\n   public String toString() {\n-    return \"RiskScoreClassificationValidationError{\"\n+    return \"GeneralValidationError{\"\n         + \"errorType=\" + reason\n         + \", parameter='\" + errorSource + '\\''\n         + \", givenValue=\" + value\n@@ -61,7 +59,7 @@ public boolean equals(Object o) {\n     if (o == null || getClass() != o.getClass()) {\n       return false;\n     }\n-    RiskScoreClassificationValidationError that = (RiskScoreClassificationValidationError) o;\n+    GeneralValidationError that = (GeneralValidationError) o;\n     return Objects.equals(errorSource, that.errorSource)\n         && Objects.equals(value, that.value)\n         && Objects.equals(reason, that.reason);\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\n@@ -53,4 +53,14 @@ private ParameterSpec() {\n    * The allowed maximum value for a risk score.\n    */\n   public static final int RISK_SCORE_MAX = 4096;\n+\n+  /**\n+   * The allowed minimum value for an attenuation threshold.\n+   */\n+  public static final int ATTENUATION_DURATION_THRESHOLD_MIN = 0;\n+\n+  /**\n+   * The allowed maximum value for an attenuation threshold.\n+   */\n+  public static final int ATTENUATION_DURATION_THRESHOLD_MAX = 100;\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\n@@ -20,11 +20,11 @@\n \n package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.BLANK_LABEL;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_PARTITIONING;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_URL;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.BLANK_LABEL;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.INVALID_PARTITIONING;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.INVALID_URL;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n \n import app.coronawarn.server.common.protocols.internal.RiskScoreClass;\n import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n@@ -69,7 +69,7 @@ private void validateValues() {\n       validateUrl(riskScoreClass.getUrl());\n \n       if (minRiskLevel > maxRiskLevel) {\n-        errors.add(new RiskScoreClassificationValidationError(\n+        errors.add(new GeneralValidationError(\n             \"minRiskLevel, maxRiskLevel\", minRiskLevel + \", \" + maxRiskLevel, MIN_GREATER_THAN_MAX));\n       }\n     }\n@@ -77,13 +77,13 @@ private void validateValues() {\n \n   private void validateLabel(String label) {\n     if (label.isBlank()) {\n-      errors.add(new RiskScoreClassificationValidationError(\"label\", label, BLANK_LABEL));\n+      errors.add(new GeneralValidationError(\"label\", label, BLANK_LABEL));\n     }\n   }\n \n   private void validateRiskScoreValueBounds(int value) {\n     if (!RiskScoreValidator.isInBounds(value)) {\n-      errors.add(new RiskScoreClassificationValidationError(\"minRiskLevel/maxRiskLevel\", value, VALUE_OUT_OF_BOUNDS));\n+      errors.add(new GeneralValidationError(\"minRiskLevel/maxRiskLevel\", value, VALUE_OUT_OF_BOUNDS));\n     }\n   }\n \n@@ -91,7 +91,7 @@ private void validateUrl(String url) {\n     try {\n       new URL(url.trim());\n     } catch (MalformedURLException e) {\n-      errors.add(new RiskScoreClassificationValidationError(\"url\", url, INVALID_URL));\n+      errors.add(new GeneralValidationError(\"url\", url, INVALID_URL));\n     }\n   }\n \n@@ -101,7 +101,7 @@ private void validateValueRangeCoverage() {\n         .sum();\n \n     if (partitionSum != ParameterSpec.RISK_SCORE_MAX + 1) {\n-      errors.add(new RiskScoreClassificationValidationError(\"covered value range\", partitionSum, INVALID_PARTITIONING));\n+      errors.add(new GeneralValidationError(\"covered value range\", partitionSum, INVALID_PARTITIONING));\n     }\n   }\n }\ndiff --git a/services/distribution/src/main/resources/master-config/app-config.yaml b/services/distribution/src/main/resources/master-config/app-config.yaml\n--- a/services/distribution/src/main/resources/master-config/app-config.yaml\n+++ b/services/distribution/src/main/resources/master-config/app-config.yaml\n@@ -9,5 +9,8 @@\n # Change this file with caution!\n \n min-risk-score: 90\n+attenuationDurationThresholds:\n+  lower: 50\n+  upper: 70\n risk-score-classes: !include risk-score-classification.yaml\n exposure-config: !include exposure-config.yaml\n\\ No newline at end of file\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidatorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ApplicationConfigurationValidatorTest.java\n@@ -20,16 +20,26 @@\n \n package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.ParameterSpec.ATTENUATION_DURATION_THRESHOLD_MIN;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.MINIMAL_RISK_SCORE_CLASSIFICATION;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidatorTest.buildExpectedResult;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n+import app.coronawarn.server.common.protocols.internal.ApplicationConfiguration;\n+import app.coronawarn.server.common.protocols.internal.AttenuationDurationThresholds;\n import app.coronawarn.server.services.distribution.assembly.appconfig.ApplicationConfigurationProvider;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.ExposureConfigurationProvider;\n import app.coronawarn.server.services.distribution.assembly.appconfig.UnableToLoadFileException;\n import java.util.stream.Stream;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n \n class ApplicationConfigurationValidatorTest {\n \n@@ -49,6 +59,43 @@ void negative(TestWithExpectedResult test) throws UnableToLoadFileException {\n     assertThat(getResultForTest(test)).isEqualTo(test.result);\n   }\n \n+  @ParameterizedTest\n+  @ValueSource(ints = {ATTENUATION_DURATION_THRESHOLD_MIN - 1, ATTENUATION_DURATION_THRESHOLD_MAX + 1})\n+  void negativeForAttenuationDurationThresholdOutOfBounds(int invalidThresholdValue) throws Exception {\n+    ApplicationConfigurationValidator validator = getValidatorForAttenuationDurationThreshold(\n+        invalidThresholdValue, invalidThresholdValue);\n+\n+    ValidationResult expectedResult = buildExpectedResult(\n+        new GeneralValidationError(\"attenuationDurationThreshold.upper\", invalidThresholdValue, VALUE_OUT_OF_BOUNDS),\n+        new GeneralValidationError(\"attenuationDurationThreshold.lower\", invalidThresholdValue, VALUE_OUT_OF_BOUNDS));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  @Test\n+  void negativeForUpperAttenuationDurationThresholdLesserThanLower() throws Exception {\n+    ApplicationConfigurationValidator validator = getValidatorForAttenuationDurationThreshold(\n+        ATTENUATION_DURATION_THRESHOLD_MAX, ATTENUATION_DURATION_THRESHOLD_MIN);\n+\n+    ValidationResult expectedResult = buildExpectedResult(\n+        new GeneralValidationError(\"attenuationDurationThreshold.lower, attenuationDurationThreshold.upper\",\n+            (ATTENUATION_DURATION_THRESHOLD_MAX + \", \" + ATTENUATION_DURATION_THRESHOLD_MIN), MIN_GREATER_THAN_MAX));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  private ApplicationConfigurationValidator getValidatorForAttenuationDurationThreshold(int lower, int upper)\n+      throws Exception {\n+    ApplicationConfiguration appConfig = ApplicationConfiguration.newBuilder()\n+        .setMinRiskScore(100)\n+        .setRiskScoreClasses(MINIMAL_RISK_SCORE_CLASSIFICATION)\n+        .setExposureConfig(ExposureConfigurationProvider.readFile(\"configtests/exposure-config_ok.yaml\"))\n+        .setAttenuationDurationThresholds(AttenuationDurationThresholds.newBuilder()\n+            .setLower(lower)\n+            .setUpper(upper)).build();\n+    return new ApplicationConfigurationValidator(appConfig);\n+  }\n+\n   @Test\n   void circular() {\n     assertThatThrownBy(() -> {\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n@@ -20,14 +20,14 @@\n \n package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_PARTITIONING;\n-import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.INVALID_PARTITIONING;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n import static java.util.Arrays.asList;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import app.coronawarn.server.common.protocols.internal.RiskScoreClass;\n import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n-import app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.GeneralValidationError.ErrorType;\n import java.util.Arrays;\n import java.util.stream.Stream;\n import org.junit.jupiter.api.Test;\n@@ -42,6 +42,9 @@ class RiskScoreClassificationValidatorTest {\n   private final static String VALID_LABEL = \"myLabel\";\n   private final static String VALID_URL = \"https://www.my.url\";\n \n+  public final static RiskScoreClassification MINIMAL_RISK_SCORE_CLASSIFICATION =\n+      buildClassification(buildRiskClass(VALID_LABEL, 0, MAX_SCORE, VALID_URL));\n+\n   @ParameterizedTest\n   @ValueSource(strings = {\"\", \" \"})\n   void failsForBlankLabels(String invalidLabel) {\n@@ -134,8 +137,7 @@ void doesNotFailForValidClassification(RiskScoreClassification validClassificati\n \n   private static Stream<Arguments> createValidClassifications() {\n     return Stream.of(\n-        // valid url\n-        buildClassification(buildRiskClass(VALID_LABEL, 0, MAX_SCORE, VALID_URL)),\n+        MINIMAL_RISK_SCORE_CLASSIFICATION,\n         // [0:MAX_SCORE/2][MAX_SCORE/2:MAX_SCORE]\n         buildClassification(\n             buildRiskClass(VALID_LABEL, 0, MAX_SCORE / 2, VALID_URL),\n@@ -148,8 +150,8 @@ private static Stream<Arguments> createValidClassifications() {\n     ).map(Arguments::of);\n   }\n \n-  private static RiskScoreClassificationValidationError buildError(String parameter, Object value, ErrorType reason) {\n-    return new RiskScoreClassificationValidationError(parameter, value, reason);\n+  private static GeneralValidationError buildError(String parameter, Object value, ErrorType reason) {\n+    return new GeneralValidationError(parameter, value, reason);\n   }\n \n   private static RiskScoreClassificationValidator buildValidator(RiskScoreClass... riskScoreClasses) {\n@@ -164,7 +166,7 @@ private static RiskScoreClass buildRiskClass(String label, int min, int max, Str\n     return RiskScoreClass.newBuilder().setLabel(label).setMin(min).setMax(max).setUrl(url).build();\n   }\n \n-  private static ValidationResult buildExpectedResult(RiskScoreClassificationValidationError... errors) {\n+  public static ValidationResult buildExpectedResult(GeneralValidationError... errors) {\n     var validationResult = new ValidationResult();\n     Arrays.stream(errors).forEach(validationResult::add);\n     return validationResult;\ndiff --git a/services/distribution/src/test/resources/configtests/app-config_ok.yaml b/services/distribution/src/test/resources/configtests/app-config_ok.yaml\n--- a/services/distribution/src/test/resources/configtests/app-config_ok.yaml\n+++ b/services/distribution/src/test/resources/configtests/app-config_ok.yaml\n@@ -1,3 +1,6 @@\n min-risk-score: 100\n+attenuationDurationThresholds:\n+  lower: 50\n+  upper: 70\n risk-score-classes: !include risk-score-class_ok.yaml\n exposure-config: !include exposure-config_ok.yaml\n\\ No newline at end of file\n",
        "problem_statement": "Application Config: Add new Parameter attenuationDurationThresholds\nAdd a new parameter to the application configuration, called \"attenuationDurationTresholds\". With the help of this parameter, we will be able to calculate the overall risk factor much better.\r\n\r\nDefault values are: X=50, Y=70. There will be call with the RKI today night in which the values might be adjusted.\r\n\r\n```yaml\r\nattenuation-duration-thresholds:\r\n  lower: 50\r\n  upper: 70\r\n```\n",
        "hints_text": "Are there any known constraints that define the validity of X/Y values?\nShould be:\r\n- type: integer\r\n- 0 to 100 (upper bound might change though, but use 100 for now)\r\n- x must by lower than y -> so would also be nice to make that more explicit, by calling them lower and upper. (edited description of ticket)",
        "created_at": "2020-06-02T17:41:10Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-572",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nS3ClientWrapper getObjects: Not all objects could be received\n<!--\r\nThanks for reporting a bug \ud83d\ude4c \u2764\ufe0f\r\n\r\nBefore opening a new issue, please make sure that we do not have any duplicates already open. You can ensure this by searching the issue list for this repository. If there is a duplicate, please close your issue and add a comment to the existing issue instead.\r\n\r\nAlso, be sure to check our documentation first: <URL>\r\n-->\r\n\r\n## Describe the bug\r\n\r\nhttps://github.com/corona-warn-app/cwa-server/blob/a953c054f8b4dc97d6a40525c5c3d5aa4d867394/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java#L83\r\n\r\nIt is possible that not all objects are received, because the **listObjectsV2(ListObjectsV2Request listObjectsV2Request)** method  limits them up to 1000.\r\n\r\nJavadoc [listObjectsV2](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/S3Client.html#listObjectsV2-software.amazon.awssdk.services.s3.model.ListObjectsV2Request-)\r\n> Returns some or all (up to 1,000) of the objects in a bucket.\r\n\r\n## Possible Fix\r\n\r\n1. Checking the response for more data with the **isTruncated** method.\r\nJavaDoc [isTruncated](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/model/ListObjectsV2Response.html#isTruncated--)\r\n> Set to false if all of the results were returned. Set to true if more keys are available to return. If the number of results exceeds that specified by MaxKeys, all of the results might not be returned.\r\n2. When the response is truncated, calling the **nextContinuationToken** method for the next token.\r\nJavaDoc [nextContinuationToken](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/model/ListObjectsV2Response.html#nextContinuationToken--)\r\n\r\n> NextContinuationToken is sent when isTruncated is true, which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken.\r\n\r\n3. Build a new ListObjectsV2Request with the **continuationToken** and call **listObjectsV2** again\r\nJavaDoc [continuationToken](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/model/ListObjectsV2Request.Builder.html#continuationToken-java.lang.String-)\r\n\r\n> ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key.\r\n\r\n4. Repeat everything until isTruncate is false.\r\n\r\nHere is a pretty good example from AWS. They use a different S3Client, but it is very similar to the one you use. ([source](https://docs.aws.amazon.com/AmazonS3/latest/dev/ListingObjectKeysUsingJava.html))\r\n\r\n```java\r\nimport com.amazonaws.AmazonServiceException;\r\nimport com.amazonaws.SdkClientException;\r\nimport com.amazonaws.auth.profile.ProfileCredentialsProvider;\r\nimport com.amazonaws.regions.Regions;\r\nimport com.amazonaws.services.s3.AmazonS3;\r\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\r\nimport com.amazonaws.services.s3.model.ListObjectsV2Request;\r\nimport com.amazonaws.services.s3.model.ListObjectsV2Result;\r\nimport com.amazonaws.services.s3.model.S3ObjectSummary;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class ListKeys {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        Regions clientRegion = Regions.DEFAULT_REGION;\r\n        String bucketName = \"*** Bucket name ***\";\r\n\r\n        try {\r\n            AmazonS3 s3Client = AmazonS3ClientBuilder.standard()\r\n                    .withCredentials(new ProfileCredentialsProvider())\r\n                    .withRegion(clientRegion)\r\n                    .build();\r\n\r\n            System.out.println(\"Listing objects\");\r\n\r\n            // maxKeys is set to 2 to demonstrate the use of\r\n            // ListObjectsV2Result.getNextContinuationToken()\r\n            ListObjectsV2Request req = new ListObjectsV2Request().withBucketName(bucketName).withMaxKeys(2);\r\n            ListObjectsV2Result result;\r\n\r\n            do {\r\n                result = s3Client.listObjectsV2(req);\r\n\r\n                for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\r\n                    System.out.printf(\" - %s (size: %d)\\n\", objectSummary.getKey(), objectSummary.getSize());\r\n                }\r\n                // If there are more than maxKeys keys in the bucket, get a continuation token\r\n                // and list the next objects.\r\n                String token = result.getNextContinuationToken();\r\n                System.out.println(\"Next Continuation Token: \" + token);\r\n                req.setContinuationToken(token);\r\n            } while (result.isTruncated());\r\n        } catch (AmazonServiceException e) {\r\n            // The call was transmitted successfully, but Amazon S3 couldn't process \r\n            // it, so it returned an error response.\r\n            e.printStackTrace();\r\n        } catch (SdkClientException e) {\r\n            // Amazon S3 couldn't be contacted for a response, or the client\r\n            // couldn't parse the response from Amazon S3.\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n``\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/ARCHITECTURE.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env``` in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `localhost:8001` <br> `postgres:5432` (from containerized pgadmin) <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is `edc07f08-a1aa-11ea-bb37-0242ac130002`.\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 If you are already running a local Postgres, you need to create a database `cwa` and run the following setup scripts:\n101 \n102 * Create the different CWA roles first by executing [create-roles.sql](setup/create-roles.sql).\n103 * Create local database users for the specific roles by running [create-users.sql](./local-setup/create-users.sql).\n104 * It is recommended to also run [enable-test-data-docker-compose.sql](./local-setup/enable-test-data-docker-compose.sql)\n105 , which enables the test data generation profile. If you already had CWA running before and an existing `diagnosis-key`\n106 table on your database, you need to run [enable-test-data.sql](./local-setup/enable-test-data.sql) instead.\n107 \n108 You can also use `docker-compose` to start Postgres and Zenko. If you do that, you have to\n109 set the following environment-variables when running the Spring project:\n110 \n111 For the distribution module:\n112 \n113 ```bash\n114 POSTGRESQL_SERVICE_PORT=8001\n115 VAULT_FILESIGNING_SECRET=</path/to/your/private_key>\n116 SPRING_PROFILES_ACTIVE=signature-dev,disable-ssl-client-postgres\n117 ```\n118 \n119 For the submission module:\n120 \n121 ```bash\n122 POSTGRESQL_SERVICE_PORT=8001\n123 SPRING_PROFILES_ACTIVE=disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n124 ```\n125 \n126 #### Configure\n127 \n128 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n129 \n130 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n131 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n132 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n133   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n134 \n135 #### Build\n136 \n137 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n138 \n139 #### Run\n140 \n141 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n142 \n143 If you want to start the submission service, for example, you start it as follows:\n144 \n145 ```bash\n146   cd services/submission/\n147   mvn spring-boot:run\n148 ```\n149 \n150 #### Debugging\n151 \n152 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n153 \n154 ```bash\n155 mvn spring-boot:run -Dspring.profiles.active=dev\n156 ```\n157 \n158 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n159 \n160 ## Service APIs\n161 \n162 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n163 \n164 Service                   | OpenAPI Specification\n165 --------------------------|-------------\n166 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n167 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n168 \n169 ## Spring Profiles\n170 \n171 ### Distribution\n172 \n173 Profile                       | Effect\n174 ------------------------------|-------------\n175 `dev`                         | Turns the log level to `DEBUG`.\n176 `cloud`                       | Removes default values for the `datasource` and `objectstore` configurations.\n177 `demo`                        | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n178 `testdata`                    | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n179 `signature-dev`               | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that the non-productive/test public key will be used for client-side validation.\n180 `signature-prod`              | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp` so that the productive public key will be used for client-side validation.\n181 `disable-ssl-client-postgres` | Disables SSL for the connection to the postgres database.\n182 \n183 ### Submission\n184 \n185 Profile                                           | Effect\n186 --------------------------------------------------|-------------\n187 `dev`                                             | Turns the log level to `DEBUG`.\n188 `cloud`                                           | Removes default values for the `datasource` configuration.\n189 `disable-ssl-server`                              | Disables SSL for the submission endpoint.\n190 `disable-ssl-client-postgres`                     | Disables SSL with a pinned certificate for the connection to the postgres database.\n191 `disable-ssl-client-verification`                 | Disables SSL with a pinned certificate for the connection to the verification server.\n192 `disable-ssl-client-verification-verify-hostname` | Disables the verification of the SSL hostname for the connection to the verification server.\n193 \n194 ## Documentation\n195 \n196 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n197 \n198 ## Support and Feedback\n199 \n200 The following channels are available for discussions, feedback, and support requests:\n201 \n202 | Type                     | Channel                                                |\n203 | ------------------------ | ------------------------------------------------------ |\n204 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n205 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n206 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n207 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n208 \n209 ## How to Contribute\n210 \n211 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n212 \n213 ## Contributors\n214 \n215 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n216 \n217 ## Repositories\n218 \n219 The following public repositories are currently available for the Corona-Warn-App:\n220 \n221 | Repository          | Description                                                           |\n222 | ------------------- | --------------------------------------------------------------------- |\n223 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n224 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n225 | [cwa-verification-server] | Backend implementation of the verification process|\n226 \n227 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n228 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n229 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n230 [Postgres]: https://www.postgresql.org/\n231 [HSQLDB]: http://hsqldb.org/\n232 [Zenko CloudServer]: https://github.com/scality/cloudserver\n233 \n234 ## Licensing\n235 \n236 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n237 \n238 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n239 \n240 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n241 \n242 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n243 \n[end of README.md]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.objectstore.client;\n22 \n23 import static java.util.stream.Collectors.toList;\n24 \n25 import java.nio.file.Path;\n26 import java.util.Collection;\n27 import java.util.List;\n28 import java.util.Map;\n29 import org.slf4j.Logger;\n30 import org.slf4j.LoggerFactory;\n31 import org.springframework.retry.annotation.Backoff;\n32 import org.springframework.retry.annotation.Recover;\n33 import org.springframework.retry.annotation.Retryable;\n34 import org.springframework.retry.support.RetrySynchronizationManager;\n35 import software.amazon.awssdk.core.exception.SdkException;\n36 import software.amazon.awssdk.core.sync.RequestBody;\n37 import software.amazon.awssdk.services.s3.S3Client;\n38 import software.amazon.awssdk.services.s3.model.Delete;\n39 import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n40 import software.amazon.awssdk.services.s3.model.DeleteObjectsResponse;\n41 import software.amazon.awssdk.services.s3.model.HeadObjectRequest;\n42 import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n43 import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n44 import software.amazon.awssdk.services.s3.model.NoSuchBucketException;\n45 import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n46 import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n47 \n48 /**\n49  * Implementation of {@link ObjectStoreClient} that encapsulates an {@link S3Client}.\n50  */\n51 public class S3ClientWrapper implements ObjectStoreClient {\n52 \n53   private static final Logger logger = LoggerFactory.getLogger(S3ClientWrapper.class);\n54 \n55   private final S3Client s3Client;\n56 \n57   public S3ClientWrapper(S3Client s3Client) {\n58     this.s3Client = s3Client;\n59   }\n60 \n61   @Override\n62   public boolean bucketExists(String bucketName) {\n63     try {\n64       // using S3Client.listObjectsV2 instead of S3Client.listBuckets/headBucket in order to limit required permissions\n65       s3Client.listObjectsV2(ListObjectsV2Request.builder().bucket(bucketName).maxKeys(1).build());\n66       return true;\n67     } catch (NoSuchBucketException e) {\n68       return false;\n69     } catch (SdkException e) {\n70       throw new ObjectStoreOperationFailedException(\"Failed to determine if bucket exists.\", e);\n71     }\n72   }\n73 \n74   @Override\n75   @Retryable(\n76       value = SdkException.class,\n77       maxAttemptsExpression = \"${services.distribution.objectstore.retry-attempts}\",\n78       backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"))\n79   public List<S3Object> getObjects(String bucket, String prefix) {\n80     logRetryStatus(\"object download\");\n81 \n82     ListObjectsV2Response response =\n83         s3Client.listObjectsV2(ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).build());\n84 \n85     return response.contents().stream()\n86         .map(s3Object -> buildS3Object(s3Object, bucket))\n87         .collect(toList());\n88   }\n89 \n90   @Recover\n91   public List<S3Object> skipReadOperation(Throwable cause) {\n92     throw new ObjectStoreOperationFailedException(\"Failed to get objects from object store\", cause);\n93   }\n94 \n95   @Override\n96   @Retryable(\n97       value = SdkException.class,\n98       maxAttemptsExpression = \"${services.distribution.objectstore.retry-attempts}\",\n99       backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"))\n100   public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {\n101     logRetryStatus(\"object upload\");\n102     var requestBuilder = PutObjectRequest.builder().bucket(bucket).key(objectName);\n103     if (headers.containsKey(HeaderKey.AMZ_ACL)) {\n104       requestBuilder.acl(headers.get(HeaderKey.AMZ_ACL));\n105     }\n106     if (headers.containsKey(HeaderKey.CACHE_CONTROL)) {\n107       requestBuilder.cacheControl(headers.get(HeaderKey.CACHE_CONTROL));\n108     }\n109     if (headers.containsKey(HeaderKey.CWA_HASH)) {\n110       requestBuilder.metadata(Map.of(HeaderKey.CWA_HASH.withMetaPrefix(), headers.get(HeaderKey.CWA_HASH)));\n111     }\n112 \n113     RequestBody bodyFile = RequestBody.fromFile(filePath);\n114     s3Client.putObject(requestBuilder.build(), bodyFile);\n115   }\n116 \n117   @Override\n118   @Retryable(value = {SdkException.class, ObjectStoreOperationFailedException.class},\n119       maxAttemptsExpression = \"${services.distribution.objectstore.retry-attempts}\",\n120       backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"))\n121   public void removeObjects(String bucket, List<String> objectNames) {\n122     if (objectNames.isEmpty()) {\n123       return;\n124     }\n125     logRetryStatus(\"object deletion\");\n126 \n127     Collection<ObjectIdentifier> identifiers = objectNames.stream()\n128         .map(key -> ObjectIdentifier.builder().key(key).build()).collect(toList());\n129 \n130     DeleteObjectsResponse response = s3Client.deleteObjects(\n131         DeleteObjectsRequest.builder()\n132             .bucket(bucket)\n133             .delete(Delete.builder().objects(identifiers).build()).build());\n134 \n135     if (response.hasErrors()) {\n136       throw new ObjectStoreOperationFailedException(\"Failed to remove objects from object store.\");\n137     }\n138   }\n139 \n140   @Recover\n141   private void skipModifyingOperation(Throwable cause) {\n142     throw new ObjectStoreOperationFailedException(\"Failed to modify objects on object store.\", cause);\n143   }\n144 \n145   /**\n146    * Fetches the CWA Hash for the given S3Object. Unfortunately, this is necessary for the AWS SDK, as it does not\n147    * support fetching metadata within the {@link ListObjectsV2Request}.<br> MinIO actually does support this, so when\n148    * they release 7.0.3, we can remove this code here.\n149    *\n150    * @param s3Object the S3Object to fetch the CWA hash for\n151    * @param bucket   the target bucket\n152    * @return the CWA hash as a String, or null, if there is no CWA hash available on that object.\n153    */\n154   private String fetchCwaHash(software.amazon.awssdk.services.s3.model.S3Object s3Object, String bucket) {\n155     var result = this.s3Client.headObject(HeadObjectRequest.builder().bucket(bucket).key(s3Object.key()).build());\n156     return result.metadata().get(HeaderKey.CWA_HASH.keyValue);\n157   }\n158 \n159   private S3Object buildS3Object(software.amazon.awssdk.services.s3.model.S3Object s3Object, String bucket) {\n160     String cwaHash = fetchCwaHash(s3Object, bucket);\n161     return new S3Object(s3Object.key(), cwaHash);\n162   }\n163 \n164   private void logRetryStatus(String action) {\n165     int retryCount = RetrySynchronizationManager.getContext().getRetryCount();\n166     if (retryCount > 0) {\n167       logger.warn(\"Retrying {} after {} failed attempt(s).\", action, retryCount);\n168     }\n169   }\n170 }\n171 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Sure! Here is the patch file for the provided issue:\n\n```diff\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\n@@ -82,7 +82,7 @@ public class S3ClientWrapper implements ObjectStoreClient {\n     @Retryable(\n         value = SdkException.class,\n         maxAttemptsExpression = \"${services.distribution.objectstore.retry-attempts}\",\n-        backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"))\n+        backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"), recover = \"skipReadOperation\")\n     public List<S3Object> getObjects(String bucket, String prefix) {\n         logRetryStatus(\"object download\");\n \n@@ -120,7 +120,7 @@ public class S3ClientWrapper implements ObjectStoreClient {\n     @Retryable(\n         value = SdkException.class,\n         maxAttemptsExpression = \"${services.distribution.objectstore.retry-attempts}\",\n-        backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"))\n+        backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"), recover = \"skipModifyingOperation\")\n     public void removeObjects(String bucket, List<String> objectNames) {\n         if (objectNames.isEmpty()) {\n             return;\n```\n\nPlease let me know if you need any further assistance.",
        "model_patch": "--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\n@@ -82,7 +82,7 @@ public class S3ClientWrapper implements ObjectStoreClient {\n     @Retryable(\n         value = SdkException.class,\n         maxAttemptsExpression = \"${services.distribution.objectstore.retry-attempts}\",\n-        backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"))\n+        backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"), recover = \"skipReadOperation\")\n     public List<S3Object> getObjects(String bucket, String prefix) {\n         logRetryStatus(\"object download\");\n \n@@ -120,7 +120,7 @@ public class S3ClientWrapper implements ObjectStoreClient {\n     @Retryable(\n         value = SdkException.class,\n         maxAttemptsExpression = \"${services.distribution.objectstore.retry-attempts}\",\n-        backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"))\n+        backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"), recover = \"skipModifyingOperation\")\n     public void removeObjects(String bucket, List<String> objectNames) {\n         if (objectNames.isEmpty()) {\n             return;\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 572,
        "issue_numbers": [
            "562"
        ],
        "base_commit": "97f16ca7b711a30eec695c1ae7a6f032df16533b",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\n@@ -20,9 +20,11 @@\n \n package app.coronawarn.server.services.distribution.objectstore.client;\n \n+import static java.lang.Boolean.TRUE;\n import static java.util.stream.Collectors.toList;\n \n import java.nio.file.Path;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n@@ -78,13 +80,20 @@ public boolean bucketExists(String bucketName) {\n       backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"))\n   public List<S3Object> getObjects(String bucket, String prefix) {\n     logRetryStatus(\"object download\");\n-\n-    ListObjectsV2Response response =\n-        s3Client.listObjectsV2(ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).build());\n-\n-    return response.contents().stream()\n-        .map(s3Object -> buildS3Object(s3Object, bucket))\n-        .collect(toList());\n+    List<S3Object> allS3Objects = new ArrayList<>();\n+    String continuationToken = null;\n+\n+    do {\n+      ListObjectsV2Request request =\n+          ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).continuationToken(continuationToken).build();\n+      ListObjectsV2Response response = s3Client.listObjectsV2(request);\n+      response.contents().stream()\n+          .map(s3Object -> buildS3Object(s3Object, bucket))\n+          .forEach(allS3Objects::add);\n+      continuationToken = TRUE.equals(response.isTruncated()) ? response.continuationToken() : null;\n+    } while (continuationToken != null);\n+\n+    return allS3Objects;\n   }\n \n   @Recover\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapperTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapperTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapperTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapperTest.java\n@@ -150,6 +150,25 @@ void testGetObjects(List<S3Object> expResult) {\n     assertThat(actResult).isEqualTo(expResult);\n   }\n \n+  @Test\n+  void testContinuationToken() {\n+    var continuationToken = \"1ueGcxLPRx1Tr/XYExHnhbYLgveDs2J/wm36Hy4vbOwM=<\";\n+\n+    when(s3Client.listObjectsV2(any(ListObjectsV2Request.class)))\n+        .thenReturn(ListObjectsV2Response.builder().isTruncated(true).continuationToken(continuationToken).build(),\n+            ListObjectsV2Response.builder().isTruncated(false).build());\n+\n+    s3ClientWrapper.getObjects(VALID_BUCKET_NAME, VALID_PREFIX);\n+\n+    ListObjectsV2Request continuationRequest = ListObjectsV2Request.builder()\n+        .prefix(VALID_PREFIX).bucket(VALID_BUCKET_NAME).continuationToken(continuationToken).build();\n+    ListObjectsV2Request noContinuationRequest = ListObjectsV2Request.builder()\n+        .prefix(VALID_PREFIX).bucket(VALID_BUCKET_NAME).build();\n+\n+    verify(s3Client, times(1)).listObjectsV2(eq(continuationRequest));\n+    verify(s3Client, times(1)).listObjectsV2(eq(noContinuationRequest));\n+  }\n+\n   private static Stream<Arguments> createGetObjectsResults() {\n     return Stream.of(\n         Lists.emptyList(),\n",
        "problem_statement": "S3ClientWrapper getObjects: Not all objects could be received\n<!--\r\nThanks for reporting a bug \ud83d\ude4c \u2764\ufe0f\r\n\r\nBefore opening a new issue, please make sure that we do not have any duplicates already open. You can ensure this by searching the issue list for this repository. If there is a duplicate, please close your issue and add a comment to the existing issue instead.\r\n\r\nAlso, be sure to check our documentation first: <URL>\r\n-->\r\n\r\n## Describe the bug\r\n\r\nhttps://github.com/corona-warn-app/cwa-server/blob/a953c054f8b4dc97d6a40525c5c3d5aa4d867394/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java#L83\r\n\r\nIt is possible that not all objects are received, because the **listObjectsV2(ListObjectsV2Request listObjectsV2Request)** method  limits them up to 1000.\r\n\r\nJavadoc [listObjectsV2](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/S3Client.html#listObjectsV2-software.amazon.awssdk.services.s3.model.ListObjectsV2Request-)\r\n> Returns some or all (up to 1,000) of the objects in a bucket.\r\n\r\n## Possible Fix\r\n\r\n1. Checking the response for more data with the **isTruncated** method.\r\nJavaDoc [isTruncated](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/model/ListObjectsV2Response.html#isTruncated--)\r\n> Set to false if all of the results were returned. Set to true if more keys are available to return. If the number of results exceeds that specified by MaxKeys, all of the results might not be returned.\r\n2. When the response is truncated, calling the **nextContinuationToken** method for the next token.\r\nJavaDoc [nextContinuationToken](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/model/ListObjectsV2Response.html#nextContinuationToken--)\r\n\r\n> NextContinuationToken is sent when isTruncated is true, which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken.\r\n\r\n3. Build a new ListObjectsV2Request with the **continuationToken** and call **listObjectsV2** again\r\nJavaDoc [continuationToken](https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/s3/model/ListObjectsV2Request.Builder.html#continuationToken-java.lang.String-)\r\n\r\n> ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key.\r\n\r\n4. Repeat everything until isTruncate is false.\r\n\r\nHere is a pretty good example from AWS. They use a different S3Client, but it is very similar to the one you use. ([source](https://docs.aws.amazon.com/AmazonS3/latest/dev/ListingObjectKeysUsingJava.html))\r\n\r\n```java\r\nimport com.amazonaws.AmazonServiceException;\r\nimport com.amazonaws.SdkClientException;\r\nimport com.amazonaws.auth.profile.ProfileCredentialsProvider;\r\nimport com.amazonaws.regions.Regions;\r\nimport com.amazonaws.services.s3.AmazonS3;\r\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\r\nimport com.amazonaws.services.s3.model.ListObjectsV2Request;\r\nimport com.amazonaws.services.s3.model.ListObjectsV2Result;\r\nimport com.amazonaws.services.s3.model.S3ObjectSummary;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class ListKeys {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        Regions clientRegion = Regions.DEFAULT_REGION;\r\n        String bucketName = \"*** Bucket name ***\";\r\n\r\n        try {\r\n            AmazonS3 s3Client = AmazonS3ClientBuilder.standard()\r\n                    .withCredentials(new ProfileCredentialsProvider())\r\n                    .withRegion(clientRegion)\r\n                    .build();\r\n\r\n            System.out.println(\"Listing objects\");\r\n\r\n            // maxKeys is set to 2 to demonstrate the use of\r\n            // ListObjectsV2Result.getNextContinuationToken()\r\n            ListObjectsV2Request req = new ListObjectsV2Request().withBucketName(bucketName).withMaxKeys(2);\r\n            ListObjectsV2Result result;\r\n\r\n            do {\r\n                result = s3Client.listObjectsV2(req);\r\n\r\n                for (S3ObjectSummary objectSummary : result.getObjectSummaries()) {\r\n                    System.out.printf(\" - %s (size: %d)\\n\", objectSummary.getKey(), objectSummary.getSize());\r\n                }\r\n                // If there are more than maxKeys keys in the bucket, get a continuation token\r\n                // and list the next objects.\r\n                String token = result.getNextContinuationToken();\r\n                System.out.println(\"Next Continuation Token: \" + token);\r\n                req.setContinuationToken(token);\r\n            } while (result.isTruncated());\r\n        } catch (AmazonServiceException e) {\r\n            // The call was transmitted successfully, but Amazon S3 couldn't process \r\n            // it, so it returned an error response.\r\n            e.printStackTrace();\r\n        } catch (SdkClientException e) {\r\n            // Amazon S3 couldn't be contacted for a response, or the client\r\n            // couldn't parse the response from Amazon S3.\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n``\n",
        "hints_text": "",
        "created_at": "2020-06-13T13:23:53Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-378",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nRemove MinIO SDK and use AWS SDK instead\nSince MinIO SDK still hasn't released a fix version for fixing the XML vulnerability in the SimpleXML library, we need to consider alternative S3 SDK's. Therefore, prepare an alternative approach with AWS SDK, which is then used by the ObjectStoreAccess class.\r\n\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile      | Effect\n148 -------------|-------------\n149 `dev`        | Turns the log level to `DEBUG` and sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n150 `cloud`      | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`       | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten.\n152 `testdata`   | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 \n154 ### Submission\n155 \n156 Profile      | Effect\n157 -------------|-------------\n158 `dev`        | Turns the log level to `DEBUG`.\n159 `cloud`      | Removes default values for the `datasource` configuration.\n160 \n161 ## Documentation\n162 \n163 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n164 \n165 ## Support and Feedback\n166 \n167 The following channels are available for discussions, feedback, and support requests:\n168 \n169 | Type                     | Channel                                                |\n170 | ------------------------ | ------------------------------------------------------ |\n171 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n172 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n173 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n174 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n175 \n176 ## How to Contribute\n177 \n178 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n179 \n180 ## Contributors\n181 \n182 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n183 \n184 ## Repositories\n185 \n186 The following public repositories are currently available for the Corona-Warn-App:\n187 \n188 | Repository          | Description                                                           |\n189 | ------------------- | --------------------------------------------------------------------- |\n190 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n191 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n192 | [cwa-verification-server] | Backend implementation of the verification process|\n193 \n194 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n195 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n196 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n197 [Postgres]: https://www.postgresql.org/\n198 [HSQLDB]: http://hsqldb.org/\n199 [Zenko CloudServer]: https://github.com/scality/cloudserver\n200 \n201 ## Licensing\n202 \n203 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n204 \n205 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n206 \n207 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n208 \n209 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n210 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of services/distribution/pom.xml]\n1 <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n2 <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n3   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n4   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n5   <parent>\n6     <artifactId>services</artifactId>\n7     <groupId>org.opencwa</groupId>\n8     <version>${revision}</version>\n9     <relativePath>../pom.xml</relativePath>\n10   </parent>\n11   <modelVersion>4.0.0</modelVersion>\n12 \n13   <properties>\n14     <sonar.projectKey>corona-warn-app_cwa-server_services_distribution</sonar.projectKey>\n15   </properties>\n16 \n17   <build>\n18     <pluginManagement>\n19       <plugins>\n20         <plugin>\n21           <groupId>org.apache.maven.plugins</groupId>\n22           <artifactId>maven-surefire-plugin</artifactId>\n23           <version>3.0.0-M3</version>\n24           <configuration>\n25             <excludedGroups>s3-integration</excludedGroups>\n26             <trimStackTrace>false</trimStackTrace>\n27           </configuration>\n28         </plugin>\n29       </plugins>\n30     </pluginManagement>\n31     <plugins>\n32       <plugin>\n33         <groupId>org.jacoco</groupId>\n34         <artifactId>jacoco-maven-plugin</artifactId>\n35         <version>0.8.5</version>\n36         <executions>\n37           <execution>\n38             <goals>\n39               <goal>prepare-agent</goal>\n40             </goals>\n41           </execution>\n42           <execution>\n43             <id>report</id>\n44             <goals>\n45               <goal>report</goal>\n46             </goals>\n47             <phase>verify</phase>\n48           </execution>\n49         </executions>\n50       </plugin>\n51     </plugins>\n52   </build>\n53 \n54   <artifactId>distribution</artifactId>\n55   <dependencies>\n56     <dependency>\n57       <groupId>io.minio</groupId>\n58       <artifactId>minio</artifactId>\n59       <version>7.0.2</version>\n60     </dependency>\n61     <dependency>\n62       <artifactId>bcpkix-jdk15on</artifactId>\n63       <groupId>org.bouncycastle</groupId>\n64       <version>1.65</version>\n65     </dependency>\n66     <dependency>\n67       <artifactId>json-simple</artifactId>\n68       <groupId>com.googlecode.json-simple</groupId>\n69       <version>1.1.1</version>\n70     </dependency>\n71     <dependency>\n72       <groupId>commons-io</groupId>\n73       <artifactId>commons-io</artifactId>\n74       <version>2.5</version>\n75     </dependency>\n76     <dependency>\n77       <artifactId>commons-math3</artifactId>\n78       <groupId>org.apache.commons</groupId>\n79       <version>3.2</version>\n80     </dependency>\n81   </dependencies>\n82 \n83 </project>\n[end of services/distribution/pom.xml]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  * \n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  * \n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.objectstore.client;\n22 \n23 import io.minio.MinioClient;\n24 import io.minio.PutObjectOptions;\n25 import io.minio.Result;\n26 import io.minio.errors.ErrorResponseException;\n27 import io.minio.errors.InsufficientDataException;\n28 import io.minio.errors.InternalException;\n29 import io.minio.errors.InvalidBucketNameException;\n30 import io.minio.errors.InvalidResponseException;\n31 import io.minio.errors.XmlParserException;\n32 import io.minio.messages.Item;\n33 import java.io.IOException;\n34 import java.nio.file.Files;\n35 import java.nio.file.Path;\n36 import java.security.InvalidKeyException;\n37 import java.security.NoSuchAlgorithmException;\n38 import java.util.ArrayList;\n39 import java.util.List;\n40 import java.util.Map;\n41 import java.util.Map.Entry;\n42 import java.util.stream.Collectors;\n43 \n44 /**\n45  * Implementation of {@link ObjectStoreClient} that encapsulates a {@link MinioClient}.\n46  */\n47 public class MinioClientWrapper implements ObjectStoreClient {\n48 \n49   private final MinioClient minioClient;\n50 \n51   public MinioClientWrapper(MinioClient minioClient) {\n52     this.minioClient = minioClient;\n53   }\n54 \n55   @Override\n56   public List<S3Object> getObjects(String bucket, String prefix) {\n57     Iterable<Result<Item>> objects = this.minioClient.listObjects(bucket, prefix, true);\n58 \n59     var list = new ArrayList<S3Object>();\n60     for (Result<Item> item : objects) {\n61       try {\n62         list.add(S3Object.of(item.get()));\n63       } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException\n64           | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException\n65           | IllegalArgumentException e) {\n66         throw new ObjectStoreOperationFailedException(\"Failed to download objects from object store.\", e);\n67       }\n68     }\n69     return list;\n70   }\n71 \n72   @Override\n73   public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {\n74     try {\n75       var options = new PutObjectOptions(Files.size(filePath), -1);\n76       Map<String, String> minioHeaders = headers.entrySet().stream()\n77           .map(entry -> Map.entry(entry.getKey().keyValue, entry.getValue()))\n78           .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n79 \n80       options.setHeaders(minioHeaders);\n81       minioClient.putObject(bucket, objectName, filePath.toString(), options);\n82     } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException\n83         | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException\n84         | IllegalArgumentException e) {\n85       throw new ObjectStoreOperationFailedException(\"Failed to upload object to object store.\", e);\n86     }\n87   }\n88 \n89   @Override\n90   public void removeObjects(String bucket, List<String> objectNames) {\n91     if (!objectNames.isEmpty() && minioClient.removeObjects(bucket, objectNames).iterator().hasNext()) {\n92       throw new ObjectStoreOperationFailedException(\"Failed to remove objects from object store\");\n93     }\n94   }\n95 \n96   @Override\n97   public boolean bucketExists(String bucket) {\n98     try {\n99       return minioClient.bucketExists(bucket);\n100     } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException\n101         | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException\n102         | IllegalArgumentException e) {\n103       throw new ObjectStoreOperationFailedException(\"Failed to check if object store bucket exists.\", e);\n104     }\n105   }\n106 }\n107 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  * \n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  * \n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.objectstore.client;\n22 \n23 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n24 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;\n25 import io.minio.MinioClient;\n26 import io.minio.errors.InvalidEndpointException;\n27 import io.minio.errors.InvalidPortException;\n28 import org.springframework.context.annotation.Bean;\n29 import org.springframework.context.annotation.Configuration;\n30 \n31 /**\n32  * Manages the instantiation of the {@link MinioClient} bean.\n33  */\n34 @Configuration\n35 public class ObjectStoreClientConfig {\n36 \n37   private static final String DEFAULT_REGION = \"eu-west-1\";\n38 \n39   @Bean\n40   public ObjectStoreClient createObjectStoreClient(DistributionServiceConfig distributionServiceConfig)\n41       throws InvalidPortException, InvalidEndpointException {\n42     return createClient(distributionServiceConfig.getObjectStore());\n43   }\n44 \n45   private MinioClientWrapper createClient(ObjectStore objectStore)\n46       throws InvalidPortException, InvalidEndpointException {\n47     if (isSsl(objectStore)) {\n48       return new MinioClientWrapper(new MinioClient(\n49           objectStore.getEndpoint(),\n50           objectStore.getPort(),\n51           objectStore.getAccessKey(), objectStore.getSecretKey(),\n52           DEFAULT_REGION,\n53           true));\n54     } else {\n55       return new MinioClientWrapper(new MinioClient(\n56           objectStore.getEndpoint(),\n57           objectStore.getPort(),\n58           objectStore.getAccessKey(), objectStore.getSecretKey()));\n59     }\n60   }\n61 \n62   private boolean isSsl(ObjectStore objectStore) {\n63     return objectStore.getEndpoint().startsWith(\"https://\");\n64   }\n65 }\n66 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3Object.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  * \n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  * \n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.objectstore.client;\n22 \n23 import io.minio.messages.Item;\n24 import java.util.Objects;\n25 \n26 /**\n27  * Represents an object as discovered on S3.\n28  */\n29 public class S3Object {\n30 \n31   /**\n32    * the name of the object.\n33    */\n34   private final String objectName;\n35 \n36   /** The e-Tag of this S3 Object. */\n37   private String etag;\n38 \n39   /**\n40    * Constructs a new S3Object for the given object name.\n41    *\n42    * @param objectName the target object name\n43    */\n44   public S3Object(String objectName) {\n45     this.objectName = objectName;\n46   }\n47 \n48   /**\n49    * Constructs a new S3Object for the given object name.\n50    *\n51    * @param objectName the target object name\n52    * @param etag the e-etag\n53    */\n54   public S3Object(String objectName, String etag) {\n55     this(objectName);\n56     this.etag = etag;\n57   }\n58 \n59   public String getObjectName() {\n60     return objectName;\n61   }\n62 \n63   public String getEtag() {\n64     return etag;\n65   }\n66 \n67   /**\n68    * Returns a new instance of an S3Object based on the given item.\n69    *\n70    * @param item the item (as provided by MinIO)\n71    * @return the S3Object representation\n72    */\n73   public static S3Object of(Item item) {\n74     String etag = item.etag().replaceAll(\"\\\"\", \"\");\n75     return new S3Object(item.objectName(), etag);\n76   }\n77 \n78   @Override\n79   public boolean equals(Object o) {\n80     if (this == o) {\n81       return true;\n82     }\n83     if (o == null || getClass() != o.getClass()) {\n84       return false;\n85     }\n86     S3Object s3Object = (S3Object) o;\n87     return Objects.equals(objectName, s3Object.objectName) && Objects.equals(etag, s3Object.etag);\n88   }\n89 \n90   @Override\n91   public int hashCode() {\n92     return Objects.hash(objectName, etag);\n93   }\n94 }\n95 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3Object.java]\n[start of services/distribution/src/main/java/io/minio/messages/Item.java]\n1 /*\n2  * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2015 MinIO, Inc.\n3  *\n4  * Licensed under the Apache License, Version 2.0 (the \"License\");\n5  * you may not use this file except in compliance with the License.\n6  * You may obtain a copy of the License at\n7  *\n8  *     http://www.apache.org/licenses/LICENSE-2.0\n9  *\n10  * Unless required by applicable law or agreed to in writing, software\n11  * distributed under the License is distributed on an \"AS IS\" BASIS,\n12  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n13  * See the License for the specific language governing permissions and\n14  * limitations under the License.\n15  */\n16 \n17 package io.minio.messages;\n18 \n19 import java.time.ZonedDateTime;\n20 import java.util.Map;\n21 import org.simpleframework.xml.Element;\n22 import org.simpleframework.xml.Root;\n23 \n24 /* ----------------------------------------------------------------\n25  * Copied from MinIO due to patch not yet available.\n26  * https://github.com/minio/minio-java/pull/921\n27  * Waiting for new release version: 7.0.3\n28  * ----------------------------------------------------------------\n29  */\n30 \n31 /**\n32  * Helper class to denote Object information in {@link ListBucketResult} and {@link ListBucketResultV1}.\n33  */\n34 @Root(name = \"Contents\", strict = false)\n35 public class Item {\n36 \n37   @Element(name = \"Key\")\n38   private String objectName;\n39 \n40   @Element(name = \"LastModified\")\n41   private ResponseDate lastModified;\n42 \n43   @Element(name = \"ETag\")\n44   private String etag;\n45 \n46   @Element(name = \"Size\")\n47   private long size;\n48 \n49   @Element(name = \"StorageClass\")\n50   private String storageClass;\n51 \n52   @Element(name = \"Owner\", required = false) /* Monkeypatch: Owner should be optional */\n53   private Owner owner;\n54 \n55   @Element(name = \"UserMetadata\", required = false)\n56   private Metadata userMetadata;\n57 \n58   private boolean isDir = false;\n59 \n60   public Item() {\n61 \n62   }\n63 \n64   /**\n65    * Constructs a new Item for prefix i.e. directory.\n66    */\n67   public Item(String prefix) {\n68     this.objectName = prefix;\n69     this.isDir = true;\n70   }\n71 \n72   /**\n73    * Returns object name.\n74    */\n75   public String objectName() {\n76     return objectName;\n77   }\n78 \n79   /**\n80    * Returns last modified time of the object.\n81    */\n82   public ZonedDateTime lastModified() {\n83     return lastModified.zonedDateTime();\n84   }\n85 \n86   /**\n87    * Returns ETag of the object.\n88    */\n89   public String etag() {\n90     return etag;\n91   }\n92 \n93   /**\n94    * Returns object size.\n95    */\n96   public long size() {\n97     return size;\n98   }\n99 \n100   /**\n101    * Returns storage class of the object.\n102    */\n103   public String storageClass() {\n104     return storageClass;\n105   }\n106 \n107   /**\n108    * Returns owner object of given the object.\n109    */\n110   public Owner owner() {\n111     return owner;\n112   }\n113 \n114   /**\n115    * Returns user metadata. This is MinIO specific extension to ListObjectsV2.\n116    */\n117   public Map<String, String> userMetadata() {\n118     if (userMetadata == null) {\n119       return null;\n120     }\n121 \n122     return userMetadata.get();\n123   }\n124 \n125   /**\n126    * Returns whether the object is a directory or not.\n127    */\n128   public boolean isDir() {\n129     return isDir;\n130   }\n131 }\n132 \n[end of services/distribution/src/main/java/io/minio/messages/Item.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/pom.xml\n+++ b/services/distribution/pom.xml\n@@ -56,7 +56,7 @@\n     <dependency>\n       <groupId>io.minio</groupId>\n       <artifactId>minio</artifactId>\n-      <version>7.0.2</version>\n+      <version>7.0.3</version>\n     </dependency>\n     <dependency>\n       <artifactId>bcpkix-jdk15on</artifactId>\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java\n@@ -56,7 +56,7 @@\n     public List<S3Object> getObjects(String bucket, String prefix) {\n       Iterable<Result<Item>> objects = this.minioClient.listObjects(bucket, prefix, true);\n \n-      var list = new ArrayList<S3Object>();\n+      List<S3Object> list = new ArrayList<>();\n       for (Result<Item> item : objects) {\n         try {\n           list.add(S3Object.of(item.get()));\n@@ -73,7 +73,7 @@\n     public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {\n       try {\n         var options = new PutObjectOptions(Files.size(filePath), -1);\n-        Map<String, String> minioHeaders = headers.entrySet().stream()\n+        Map<String, String> minioHeaders = headers.entrySet().stream()\n             .map(entry -> Map.entry(entry.getKey().keyValue, entry.getValue()))\n             .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n \n@@ -97,7 +97,7 @@\n     public boolean bucketExists(String bucket) {\n       try {\n         return minioClient.bucketExists(bucket);\n-      } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException\n+      } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException\n           | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException\n           | IllegalArgumentException e) {\n         throw new ObjectStoreOperationFailedException(\"Failed to check if object store bucket exists.\", e);\n</patch>",
        "model_patch": "\n--- a/services/distribution/pom.xml\n+++ b/services/distribution/pom.xml\n@@ -56,7 +56,7 @@\n     <dependency>\n       <groupId>io.minio</groupId>\n       <artifactId>minio</artifactId>\n-      <version>7.0.2</version>\n+      <version>7.0.3</version>\n     </dependency>\n     <dependency>\n       <artifactId>bcpkix-jdk15on</artifactId>\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java\n@@ -56,7 +56,7 @@\n     public List<S3Object> getObjects(String bucket, String prefix) {\n       Iterable<Result<Item>> objects = this.minioClient.listObjects(bucket, prefix, true);\n \n-      var list = new ArrayList<S3Object>();\n+      List<S3Object> list = new ArrayList<>();\n       for (Result<Item> item : objects) {\n         try {\n           list.add(S3Object.of(item.get()));\n@@ -73,7 +73,7 @@\n     public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {\n       try {\n         var options = new PutObjectOptions(Files.size(filePath), -1);\n-        Map<String, String> minioHeaders = headers.entrySet().stream()\n+        Map<String, String> minioHeaders = headers.entrySet().stream()\n             .map(entry -> Map.entry(entry.getKey().keyValue, entry.getValue()))\n             .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n \n@@ -97,7 +97,7 @@\n     public boolean bucketExists(String bucket) {\n       try {\n         return minioClient.bucketExists(bucket);\n-      } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException\n+      } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException\n           | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException\n           | IllegalArgumentException e) {\n         throw new ObjectStoreOperationFailedException(\"Failed to check if object store bucket exists.\", e);\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 378,
        "issue_numbers": [
            "363"
        ],
        "base_commit": "79eef3fa06e3e6bd1bfa9a97c0959d62551295b8",
        "patch": "diff --git a/services/distribution/pom.xml b/services/distribution/pom.xml\n--- a/services/distribution/pom.xml\n+++ b/services/distribution/pom.xml\n@@ -54,9 +54,9 @@\n   <artifactId>distribution</artifactId>\n   <dependencies>\n     <dependency>\n-      <groupId>io.minio</groupId>\n-      <artifactId>minio</artifactId>\n-      <version>7.0.2</version>\n+      <groupId>software.amazon.awssdk</groupId>\n+      <artifactId>s3</artifactId>\n+      <version>2.13.25</version>\n     </dependency>\n     <dependency>\n       <artifactId>bcpkix-jdk15on</artifactId>\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java\ndeleted file mode 100644\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapper.java\n+++ /dev/null\n@@ -1,106 +0,0 @@\n-/*-\n- * ---license-start\n- * Corona-Warn-App\n- * ---\n- * Copyright (C) 2020 SAP SE and all other contributors\n- * ---\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ---license-end\n- */\n-\n-package app.coronawarn.server.services.distribution.objectstore.client;\n-\n-import io.minio.MinioClient;\n-import io.minio.PutObjectOptions;\n-import io.minio.Result;\n-import io.minio.errors.ErrorResponseException;\n-import io.minio.errors.InsufficientDataException;\n-import io.minio.errors.InternalException;\n-import io.minio.errors.InvalidBucketNameException;\n-import io.minio.errors.InvalidResponseException;\n-import io.minio.errors.XmlParserException;\n-import io.minio.messages.Item;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.security.InvalidKeyException;\n-import java.security.NoSuchAlgorithmException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.stream.Collectors;\n-\n-/**\n- * Implementation of {@link ObjectStoreClient} that encapsulates a {@link MinioClient}.\n- */\n-public class MinioClientWrapper implements ObjectStoreClient {\n-\n-  private final MinioClient minioClient;\n-\n-  public MinioClientWrapper(MinioClient minioClient) {\n-    this.minioClient = minioClient;\n-  }\n-\n-  @Override\n-  public List<S3Object> getObjects(String bucket, String prefix) {\n-    Iterable<Result<Item>> objects = this.minioClient.listObjects(bucket, prefix, true);\n-\n-    var list = new ArrayList<S3Object>();\n-    for (Result<Item> item : objects) {\n-      try {\n-        list.add(S3Object.of(item.get()));\n-      } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException\n-          | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException\n-          | IllegalArgumentException e) {\n-        throw new ObjectStoreOperationFailedException(\"Failed to download objects from object store.\", e);\n-      }\n-    }\n-    return list;\n-  }\n-\n-  @Override\n-  public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {\n-    try {\n-      var options = new PutObjectOptions(Files.size(filePath), -1);\n-      Map<String, String> minioHeaders = headers.entrySet().stream()\n-          .map(entry -> Map.entry(entry.getKey().keyValue, entry.getValue()))\n-          .collect(Collectors.toMap(Entry::getKey, Entry::getValue));\n-\n-      options.setHeaders(minioHeaders);\n-      minioClient.putObject(bucket, objectName, filePath.toString(), options);\n-    } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException\n-        | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException\n-        | IllegalArgumentException e) {\n-      throw new ObjectStoreOperationFailedException(\"Failed to upload object to object store.\", e);\n-    }\n-  }\n-\n-  @Override\n-  public void removeObjects(String bucket, List<String> objectNames) {\n-    if (!objectNames.isEmpty() && minioClient.removeObjects(bucket, objectNames).iterator().hasNext()) {\n-      throw new ObjectStoreOperationFailedException(\"Failed to remove objects from object store\");\n-    }\n-  }\n-\n-  @Override\n-  public boolean bucketExists(String bucket) {\n-    try {\n-      return minioClient.bucketExists(bucket);\n-    } catch (ErrorResponseException | NoSuchAlgorithmException | InternalException | IOException | InvalidKeyException\n-        | InvalidResponseException | InvalidBucketNameException | InsufficientDataException | XmlParserException\n-        | IllegalArgumentException e) {\n-      throw new ObjectStoreOperationFailedException(\"Failed to check if object store bucket exists.\", e);\n-    }\n-  }\n-}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java\n@@ -22,14 +22,16 @@\n \n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;\n-import io.minio.MinioClient;\n-import io.minio.errors.InvalidEndpointException;\n-import io.minio.errors.InvalidPortException;\n+import java.net.URI;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.s3.S3Client;\n \n /**\n- * Manages the instantiation of the {@link MinioClient} bean.\n+ * Manages the instantiation of the {@link ObjectStoreClient} bean.\n  */\n @Configuration\n public class ObjectStoreClientConfig {\n@@ -37,29 +39,44 @@ public class ObjectStoreClientConfig {\n   private static final String DEFAULT_REGION = \"eu-west-1\";\n \n   @Bean\n-  public ObjectStoreClient createObjectStoreClient(DistributionServiceConfig distributionServiceConfig)\n-      throws InvalidPortException, InvalidEndpointException {\n+  public ObjectStoreClient createObjectStoreClient(DistributionServiceConfig distributionServiceConfig) {\n     return createClient(distributionServiceConfig.getObjectStore());\n   }\n \n-  private MinioClientWrapper createClient(ObjectStore objectStore)\n-      throws InvalidPortException, InvalidEndpointException {\n-    if (isSsl(objectStore)) {\n-      return new MinioClientWrapper(new MinioClient(\n-          objectStore.getEndpoint(),\n-          objectStore.getPort(),\n-          objectStore.getAccessKey(), objectStore.getSecretKey(),\n-          DEFAULT_REGION,\n-          true));\n-    } else {\n-      return new MinioClientWrapper(new MinioClient(\n-          objectStore.getEndpoint(),\n-          objectStore.getPort(),\n-          objectStore.getAccessKey(), objectStore.getSecretKey()));\n-    }\n+  private ObjectStoreClient createClient(ObjectStore objectStore) {\n+    return new S3ClientWrapper(S3Client.builder()\n+        .region(Region.of(DEFAULT_REGION))\n+        .endpointOverride(URI.create(objectStore.getEndpoint() + \":\" + objectStore.getPort()))\n+        .credentialsProvider(new CredentialsProvider(objectStore.getAccessKey(), objectStore.getSecretKey()))\n+        .build());\n   }\n \n-  private boolean isSsl(ObjectStore objectStore) {\n-    return objectStore.getEndpoint().startsWith(\"https://\");\n+  /**\n+   * Statically serves credentials based on construction arguments.\n+   */\n+  static class CredentialsProvider implements AwsCredentialsProvider {\n+\n+    final String accessKeyId;\n+    final String secretAccessKey;\n+\n+    public CredentialsProvider(String accessKeyId, String secretAccessKey) {\n+      this.accessKeyId = accessKeyId;\n+      this.secretAccessKey = secretAccessKey;\n+    }\n+\n+    @Override\n+    public AwsCredentials resolveCredentials() {\n+      return new AwsCredentials() {\n+        @Override\n+        public String accessKeyId() {\n+          return accessKeyId;\n+        }\n+\n+        @Override\n+        public String secretAccessKey() {\n+          return secretAccessKey;\n+        }\n+      };\n+    }\n   }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\n@@ -0,0 +1,123 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.objectstore.client;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsResponse;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+\n+/**\n+ * Implementation of {@link ObjectStoreClient} that encapsulates an {@link S3Client}.\n+ */\n+public class S3ClientWrapper implements ObjectStoreClient {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(S3ClientWrapper.class);\n+\n+  private final S3Client s3Client;\n+\n+  public S3ClientWrapper(S3Client s3Client) {\n+    this.s3Client = s3Client;\n+  }\n+\n+  @Override\n+  public boolean bucketExists(String bucketName) {\n+    try {\n+      return !s3Client.listBuckets().buckets().stream().findFirst().isEmpty();\n+    } catch (SdkException e) {\n+      throw new ObjectStoreOperationFailedException(\"Failed to determine if bucket exists.\", e);\n+    }\n+  }\n+\n+  @Override\n+  public List<S3Object> getObjects(String bucket, String prefix) {\n+    try {\n+      ListObjectsV2Response response =\n+          s3Client.listObjectsV2(ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).build());\n+      return response.contents().stream().map(S3ClientWrapper::buildS3Object).collect(toList());\n+    } catch (SdkException e) {\n+      throw new ObjectStoreOperationFailedException(\"Failed to upload object to object store\", e);\n+    }\n+  }\n+\n+  @Override\n+  public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {\n+    RequestBody bodyFile = RequestBody.fromFile(filePath);\n+\n+    var requestBuilder = PutObjectRequest.builder().bucket(bucket).key(objectName);\n+    if (headers.containsKey(HeaderKey.AMZ_ACL)) {\n+      requestBuilder.acl(headers.get(HeaderKey.AMZ_ACL));\n+    }\n+    if (headers.containsKey(HeaderKey.CACHE_CONTROL)) {\n+      requestBuilder.cacheControl(headers.get(HeaderKey.CACHE_CONTROL));\n+    }\n+\n+    try {\n+      s3Client.putObject(requestBuilder.build(), bodyFile);\n+    } catch (SdkException e) {\n+      throw new ObjectStoreOperationFailedException(\"Failed to upload object to object store\", e);\n+    }\n+  }\n+\n+  @Override\n+  public void removeObjects(String bucket, List<String> objectNames) {\n+    if (objectNames.isEmpty()) {\n+      return;\n+    }\n+\n+    Collection<ObjectIdentifier> identifiers = objectNames.stream()\n+        .map(key -> ObjectIdentifier.builder().key(key).build()).collect(toList());\n+\n+    try {\n+      DeleteObjectsResponse response = s3Client.deleteObjects(\n+          DeleteObjectsRequest.builder()\n+              .bucket(bucket)\n+              .delete(Delete.builder().objects(identifiers).build()).build());\n+\n+      if (response.hasErrors()) {\n+        String errMessage = \"Failed to remove objects from object store.\";\n+        logger.error(\"{} {}\", errMessage, response.errors());\n+        throw new ObjectStoreOperationFailedException(errMessage);\n+      }\n+    } catch (SdkException e) {\n+      throw new ObjectStoreOperationFailedException(\"Failed to remove objects from object store.\", e);\n+    }\n+  }\n+\n+  private static S3Object buildS3Object(software.amazon.awssdk.services.s3.model.S3Object s3Object) {\n+    String etag = s3Object.eTag().replaceAll(\"\\\"\", \"\");\n+    return new S3Object(s3Object.key(), etag);\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3Object.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3Object.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3Object.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3Object.java\n@@ -20,7 +20,6 @@\n \n package app.coronawarn.server.services.distribution.objectstore.client;\n \n-import io.minio.messages.Item;\n import java.util.Objects;\n \n /**\n@@ -64,17 +63,6 @@ public String getEtag() {\n     return etag;\n   }\n \n-  /**\n-   * Returns a new instance of an S3Object based on the given item.\n-   *\n-   * @param item the item (as provided by MinIO)\n-   * @return the S3Object representation\n-   */\n-  public static S3Object of(Item item) {\n-    String etag = item.etag().replaceAll(\"\\\"\", \"\");\n-    return new S3Object(item.objectName(), etag);\n-  }\n-\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) {\ndiff --git a/services/distribution/src/main/java/io/minio/messages/Item.java b/services/distribution/src/main/java/io/minio/messages/Item.java\ndeleted file mode 100644\n--- a/services/distribution/src/main/java/io/minio/messages/Item.java\n+++ /dev/null\n@@ -1,131 +0,0 @@\n-/*\n- * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2015 MinIO, Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package io.minio.messages;\n-\n-import java.time.ZonedDateTime;\n-import java.util.Map;\n-import org.simpleframework.xml.Element;\n-import org.simpleframework.xml.Root;\n-\n-/* ----------------------------------------------------------------\n- * Copied from MinIO due to patch not yet available.\n- * https://github.com/minio/minio-java/pull/921\n- * Waiting for new release version: 7.0.3\n- * ----------------------------------------------------------------\n- */\n-\n-/**\n- * Helper class to denote Object information in {@link ListBucketResult} and {@link ListBucketResultV1}.\n- */\n-@Root(name = \"Contents\", strict = false)\n-public class Item {\n-\n-  @Element(name = \"Key\")\n-  private String objectName;\n-\n-  @Element(name = \"LastModified\")\n-  private ResponseDate lastModified;\n-\n-  @Element(name = \"ETag\")\n-  private String etag;\n-\n-  @Element(name = \"Size\")\n-  private long size;\n-\n-  @Element(name = \"StorageClass\")\n-  private String storageClass;\n-\n-  @Element(name = \"Owner\", required = false) /* Monkeypatch: Owner should be optional */\n-  private Owner owner;\n-\n-  @Element(name = \"UserMetadata\", required = false)\n-  private Metadata userMetadata;\n-\n-  private boolean isDir = false;\n-\n-  public Item() {\n-\n-  }\n-\n-  /**\n-   * Constructs a new Item for prefix i.e. directory.\n-   */\n-  public Item(String prefix) {\n-    this.objectName = prefix;\n-    this.isDir = true;\n-  }\n-\n-  /**\n-   * Returns object name.\n-   */\n-  public String objectName() {\n-    return objectName;\n-  }\n-\n-  /**\n-   * Returns last modified time of the object.\n-   */\n-  public ZonedDateTime lastModified() {\n-    return lastModified.zonedDateTime();\n-  }\n-\n-  /**\n-   * Returns ETag of the object.\n-   */\n-  public String etag() {\n-    return etag;\n-  }\n-\n-  /**\n-   * Returns object size.\n-   */\n-  public long size() {\n-    return size;\n-  }\n-\n-  /**\n-   * Returns storage class of the object.\n-   */\n-  public String storageClass() {\n-    return storageClass;\n-  }\n-\n-  /**\n-   * Returns owner object of given the object.\n-   */\n-  public Owner owner() {\n-    return owner;\n-  }\n-\n-  /**\n-   * Returns user metadata. This is MinIO specific extension to ListObjectsV2.\n-   */\n-  public Map<String, String> userMetadata() {\n-    if (userMetadata == null) {\n-      return null;\n-    }\n-\n-    return userMetadata.get();\n-  }\n-\n-  /**\n-   * Returns whether the object is a directory or not.\n-   */\n-  public boolean isDir() {\n-    return isDir;\n-  }\n-}\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapperTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapperTest.java\ndeleted file mode 100644\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/MinioClientWrapperTest.java\n+++ /dev/null\n@@ -1,235 +0,0 @@\n-/*-\n- * ---license-start\n- * Corona-Warn-App\n- * ---\n- * Copyright (C) 2020 SAP SE and all other contributors\n- * ---\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ---license-end\n- */\n-\n-package app.coronawarn.server.services.distribution.objectstore.client;\n-\n-import static java.util.Collections.emptyMap;\n-import static java.util.Map.entry;\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n-import static org.assertj.core.util.IterableUtil.iterable;\n-import static org.assertj.core.util.Lists.list;\n-import static org.assertj.core.util.Maps.newHashMap;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyBoolean;\n-import static org.mockito.ArgumentMatchers.anyList;\n-import static org.mockito.ArgumentMatchers.anyString;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.atLeastOnce;\n-import static org.mockito.Mockito.doThrow;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-\n-import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreClient.HeaderKey;\n-import com.fasterxml.jackson.core.JsonParseException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import io.minio.MinioClient;\n-import io.minio.PutObjectOptions;\n-import io.minio.Result;\n-import io.minio.errors.ErrorResponseException;\n-import io.minio.errors.InsufficientDataException;\n-import io.minio.errors.InternalException;\n-import io.minio.errors.InvalidBucketNameException;\n-import io.minio.errors.InvalidResponseException;\n-import io.minio.errors.XmlParserException;\n-import io.minio.messages.DeleteError;\n-import io.minio.messages.Item;\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import java.security.InvalidKeyException;\n-import java.security.NoSuchAlgorithmException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Stream;\n-import org.assertj.core.util.Lists;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-import org.junit.jupiter.params.provider.ValueSource;\n-import org.mockito.ArgumentCaptor;\n-\n-class MinioClientWrapperTest {\n-\n-  private static final String VALID_BUCKET_NAME = \"myBucket\";\n-  private static final String VALID_PREFIX = \"prefix\";\n-  private static final String VALID_NAME = \"object key\";\n-\n-  private MinioClient minioClient;\n-  private MinioClientWrapper minioClientWrapper;\n-\n-  @BeforeEach\n-  public void setUpMocks() {\n-    minioClient = mock(MinioClient.class);\n-    minioClientWrapper = new MinioClientWrapper(minioClient);\n-  }\n-\n-  @Test\n-  void testBucketExistsIfBucketExists() throws Exception {\n-    when(minioClient.bucketExists(any())).thenReturn(true);\n-    assertThat(minioClientWrapper.bucketExists(VALID_BUCKET_NAME)).isTrue();\n-  }\n-\n-  @Test\n-  void testBucketExistsIfBucketDoesNotExist() throws Exception {\n-    when(minioClient.bucketExists(any())).thenReturn(false);\n-    assertThat(minioClientWrapper.bucketExists(VALID_BUCKET_NAME)).isFalse();\n-  }\n-\n-  @ParameterizedTest\n-  @ValueSource(classes = {ErrorResponseException.class, InsufficientDataException.class,\n-      InternalException.class, IllegalArgumentException.class, InvalidBucketNameException.class,\n-      InvalidKeyException.class, InvalidResponseException.class,\n-      IOException.class, NoSuchAlgorithmException.class, XmlParserException.class})\n-  void bucketExistsThrowsObjectStoreOperationFailedExceptionIfClientThrows(Class<Exception> cause) throws Exception {\n-    when(minioClient.bucketExists(any())).thenThrow(cause);\n-    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n-        .isThrownBy(() -> minioClientWrapper.bucketExists(VALID_BUCKET_NAME));\n-  }\n-\n-  @Test\n-  void testGetObjectsSendsCorrectRequest() {\n-    when(minioClient.listObjects(anyString(), anyString(), anyBoolean())).thenReturn(iterable());\n-    minioClientWrapper.getObjects(VALID_BUCKET_NAME, VALID_PREFIX);\n-    verify(minioClient, atLeastOnce()).listObjects(eq(VALID_BUCKET_NAME), eq(VALID_PREFIX), eq(true));\n-  }\n-\n-  @ParameterizedTest\n-  @MethodSource(\"createGetObjectsResults\")\n-  void testGetObjects(List<S3Object> expResult) throws Exception {\n-    Iterable<Result<Item>> actResponse = buildListObjectsResponse(expResult);\n-    when(minioClient.listObjects(anyString(), anyString(), anyBoolean())).thenReturn(actResponse);\n-\n-    List<S3Object> actResult = minioClientWrapper.getObjects(VALID_BUCKET_NAME, VALID_PREFIX);\n-\n-    assertThat(actResult).isEqualTo(expResult);\n-  }\n-\n-  private static Stream<Arguments> createGetObjectsResults() {\n-    return Stream.of(\n-        Lists.emptyList(),\n-        list(new S3Object(\"objName\", \"eTag\")),\n-        list(new S3Object(\"objName1\", \"eTag1\"), new S3Object(\"objName2\", \"eTag2\"))\n-    ).map(Arguments::of);\n-  }\n-\n-  private Iterable<Result<Item>> buildListObjectsResponse(List<S3Object> s3Objects) throws Exception {\n-    List<Result<Item>> response = new ArrayList<>(s3Objects.size());\n-\n-    for (S3Object s3Object : s3Objects) {\n-      Item item = mock(Item.class);\n-      Result<Item> result = mock(Result.class);\n-      when(result.get()).thenReturn(item);\n-      when(item.etag()).thenReturn(s3Object.getEtag());\n-      when(item.objectName()).thenReturn(s3Object.getObjectName());\n-      response.add(result);\n-    }\n-\n-    return iterable(response.toArray(new Result[response.size()]));\n-  }\n-\n-  @Test\n-  void getObjectsRemovesDoubleQuotesFromEtags() throws Exception {\n-    String expEtag = \"eTag\";\n-    Iterable<Result<Item>> actResponse = buildListObjectsResponse(\n-        List.of(new S3Object(VALID_NAME, \"\\\"\" + expEtag + \"\\\"\")));\n-    when(minioClient.listObjects(anyString(), anyString(), anyBoolean())).thenReturn(actResponse);\n-\n-    List<S3Object> actResult = minioClientWrapper.getObjects(VALID_BUCKET_NAME, VALID_PREFIX);\n-\n-    assertThat(actResult).isEqualTo(List.of(new S3Object(VALID_NAME, expEtag)));\n-  }\n-\n-  @ParameterizedTest\n-  @ValueSource(classes = {ErrorResponseException.class, InsufficientDataException.class, XmlParserException.class,\n-      InternalException.class, InvalidBucketNameException.class, InvalidKeyException.class, JsonParseException.class,\n-      InvalidResponseException.class, JsonMappingException.class, IOException.class, NoSuchAlgorithmException.class,\n-      IllegalArgumentException.class})\n-  void getObjectsThrowsObjectStoreOperationFailedExceptionIfClientThrows(Class<Exception> cause) throws Exception {\n-    Result<Item> actResult = mock(Result.class);\n-    when(actResult.get()).thenThrow(cause);\n-    when(minioClient.listObjects(anyString(), anyString(), anyBoolean())).thenReturn(iterable(actResult));\n-    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n-        .isThrownBy(() -> minioClientWrapper.getObjects(VALID_BUCKET_NAME, VALID_PREFIX));\n-  }\n-\n-  @Test\n-  void testPutObjectForNoHeaders() throws Exception {\n-    minioClientWrapper.putObject(VALID_BUCKET_NAME, VALID_NAME, Path.of(\"\"), emptyMap());\n-    ArgumentCaptor<PutObjectOptions> options = ArgumentCaptor.forClass(PutObjectOptions.class);\n-    verify(minioClient, atLeastOnce()).putObject(eq(VALID_BUCKET_NAME), eq(VALID_NAME), eq(\"\"), options.capture());\n-    assertThat(options.getValue().headers()).isEmpty();\n-  }\n-\n-  @Test\n-  void testPutObjectForCacheControlHeader() throws Exception {\n-    String expCacheControl = \"foo-cache-control\";\n-\n-    minioClientWrapper.putObject(VALID_BUCKET_NAME, VALID_NAME, Path.of(\"\"),\n-        newHashMap(HeaderKey.CACHE_CONTROL, expCacheControl));\n-\n-    ArgumentCaptor<PutObjectOptions> options = ArgumentCaptor.forClass(PutObjectOptions.class);\n-    verify(minioClient, atLeastOnce()).putObject(eq(VALID_BUCKET_NAME), eq(VALID_NAME), eq(\"\"), options.capture());\n-    assertThat(options.getValue().headers()).hasSize(1);\n-    assertThat(options.getValue().headers()).contains(entry(HeaderKey.CACHE_CONTROL.keyValue, expCacheControl));\n-  }\n-\n-  @Test\n-  void testPutObjectForAmzAclHeader() throws Exception {\n-    String expAcl = \"foo-acl\";\n-\n-    minioClientWrapper.putObject(VALID_BUCKET_NAME, VALID_NAME, Path.of(\"\"), newHashMap(HeaderKey.AMZ_ACL, expAcl));\n-\n-    ArgumentCaptor<PutObjectOptions> options = ArgumentCaptor.forClass(PutObjectOptions.class);\n-    verify(minioClient, atLeastOnce()).putObject(eq(VALID_BUCKET_NAME), eq(VALID_NAME), eq(\"\"), options.capture());\n-    assertThat(options.getValue().headers()).hasSize(1);\n-    assertThat(options.getValue().headers()).contains(entry(HeaderKey.AMZ_ACL.keyValue, expAcl));\n-  }\n-\n-  @ParameterizedTest\n-  @ValueSource(classes = {ErrorResponseException.class, IllegalArgumentException.class, InsufficientDataException.class,\n-      InternalException.class, InvalidBucketNameException.class, InvalidKeyException.class, XmlParserException.class,\n-      IOException.class, NoSuchAlgorithmException.class, InvalidResponseException.class})\n-  void putObjectsThrowsObjectStoreOperationFailedExceptionIfClientThrows(Class<Exception> cause) throws Exception {\n-    doThrow(cause).when(minioClient).putObject(anyString(), anyString(), anyString(), any(PutObjectOptions.class));\n-    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n-        .isThrownBy(() -> minioClientWrapper.putObject(VALID_BUCKET_NAME, VALID_PREFIX, Path.of(\"\"), emptyMap()));\n-  }\n-\n-  @Test\n-  void testRemoveObjects() {\n-    when(minioClient.removeObjects(anyString(), anyList())).thenReturn(iterable());\n-    List<String> expObjectNames = List.of(\"obj1\", \"obj2\");\n-\n-    minioClientWrapper.removeObjects(VALID_BUCKET_NAME, expObjectNames);\n-\n-    verify(minioClient, atLeastOnce()).removeObjects(eq(VALID_BUCKET_NAME), eq(expObjectNames));\n-  }\n-\n-  @Test\n-  void removeObjectsThrowsObjectStoreOperationFailedExceptionOnDeleteErrors() {\n-    Result<DeleteError> result = mock(Result.class);\n-    when(minioClient.removeObjects(anyString(), anyList())).thenReturn(iterable(result));\n-    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n-        .isThrownBy(() -> minioClientWrapper.removeObjects(VALID_BUCKET_NAME, list(VALID_NAME)));\n-  }\n-}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapperTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapperTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapperTest.java\n@@ -0,0 +1,238 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.objectstore.client;\n+\n+import static java.util.Collections.emptyMap;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.assertj.core.util.Maps.newHashMap;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreClient.HeaderKey;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.assertj.core.util.Lists;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.core.sync.RequestBody;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.s3.model.Bucket;\n+import software.amazon.awssdk.services.s3.model.Delete;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n+import software.amazon.awssdk.services.s3.model.DeleteObjectsResponse;\n+import software.amazon.awssdk.services.s3.model.ListBucketsResponse;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n+import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n+import software.amazon.awssdk.services.s3.model.NoSuchBucketException;\n+import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n+import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n+import software.amazon.awssdk.services.s3.model.S3Error;\n+import software.amazon.awssdk.services.s3.model.S3Exception;\n+import software.amazon.awssdk.utils.builder.SdkBuilder;\n+\n+@ExtendWith(SpringExtension.class)\n+class S3ClientWrapperTest {\n+\n+  private static final String VALID_BUCKET_NAME = \"myBucket\";\n+  private static final String VALID_PREFIX = \"prefix\";\n+  private static final String VALID_NAME = \"object key\";\n+\n+  private S3Client s3Client;\n+  private S3ClientWrapper s3ClientWrapper;\n+  private List<Bucket> existingBuckets;\n+\n+  @BeforeEach\n+  public void setUpMocks() {\n+    s3Client = mock(S3Client.class);\n+    s3ClientWrapper = new S3ClientWrapper(s3Client);\n+    existingBuckets = new ArrayList<>();\n+    ListBucketsResponse listBucketsResponse = mock(ListBucketsResponse.class);\n+\n+    when(listBucketsResponse.buckets()).thenReturn(existingBuckets);\n+    when(s3Client.listBuckets()).thenReturn(listBucketsResponse);\n+  }\n+\n+  @Test\n+  void testBucketExistsIfBucketExists() {\n+    existingBuckets.add(Bucket.builder().name(VALID_BUCKET_NAME).build());\n+    assertThat(s3ClientWrapper.bucketExists(VALID_BUCKET_NAME)).isTrue();\n+  }\n+\n+  @Test\n+  void testBucketExistsIfBucketDoesNotExist() {\n+    assertThat(s3ClientWrapper.bucketExists(VALID_BUCKET_NAME)).isFalse();\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(classes = {S3Exception.class, SdkClientException.class, SdkException.class})\n+  void bucketExistsThrowsObjectStoreOperationFailedExceptionIfClientThrows(Class<Exception> cause) {\n+    when(s3Client.listBuckets()).thenThrow(cause);\n+    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> s3ClientWrapper.bucketExists(VALID_BUCKET_NAME));\n+  }\n+\n+  @Test\n+  void testGetObjectsSendsCorrectRequest() {\n+    when(s3Client.listObjectsV2(any(ListObjectsV2Request.class))).thenReturn(ListObjectsV2Response.builder().build());\n+\n+    s3ClientWrapper.getObjects(VALID_BUCKET_NAME, VALID_PREFIX);\n+\n+    ListObjectsV2Request expRequest = ListObjectsV2Request.builder()\n+        .prefix(VALID_PREFIX).bucket(VALID_BUCKET_NAME).build();\n+    verify(s3Client, atLeastOnce()).listObjectsV2(eq(expRequest));\n+  }\n+\n+  @ParameterizedTest\n+  @MethodSource(\"createGetObjectsResults\")\n+  void testGetObjects(List<S3Object> expResult) {\n+    ListObjectsV2Response actResponse = buildListObjectsResponse(expResult);\n+    when(s3Client.listObjectsV2(any(ListObjectsV2Request.class))).thenReturn(actResponse);\n+\n+    List<S3Object> actResult = s3ClientWrapper.getObjects(VALID_BUCKET_NAME, VALID_PREFIX);\n+\n+    assertThat(actResult).isEqualTo(expResult);\n+  }\n+\n+  private static Stream<Arguments> createGetObjectsResults() {\n+    return Stream.of(\n+        Lists.emptyList(),\n+        Lists.list(new S3Object(\"objName\", \"eTag\")),\n+        Lists.list(new S3Object(\"objName1\", \"eTag1\"), new S3Object(\"objName2\", \"eTag2\"))\n+    ).map(Arguments::of);\n+  }\n+\n+  private ListObjectsV2Response buildListObjectsResponse(List<S3Object> s3Objects) {\n+    var responseObjects = s3Objects.stream().map(\n+        s3Object -> software.amazon.awssdk.services.s3.model.S3Object.builder()\n+            .key(s3Object.getObjectName())\n+            .eTag(s3Object.getEtag()))\n+        .map(SdkBuilder::build).collect(Collectors.toList());\n+    return ListObjectsV2Response.builder().contents(responseObjects).build();\n+  }\n+\n+  @Test\n+  void getObjectsRemovesDoubleQuotesFromEtags() {\n+    String expEtag = \"eTag\";\n+    ListObjectsV2Response actResponse =\n+        buildListObjectsResponse(List.of(new S3Object(VALID_NAME, \"\\\"\" + expEtag + \"\\\"\")));\n+    when(s3Client.listObjectsV2(any(ListObjectsV2Request.class))).thenReturn(actResponse);\n+\n+    List<S3Object> actResult = s3ClientWrapper.getObjects(VALID_BUCKET_NAME, VALID_PREFIX);\n+\n+    assertThat(actResult).isEqualTo(List.of(new S3Object(VALID_NAME, expEtag)));\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(classes = {NoSuchBucketException.class, S3Exception.class, SdkClientException.class, SdkException.class})\n+  void getObjectsThrowsObjectStoreOperationFailedExceptionIfClientThrows(Class<Exception> cause) {\n+    when(s3Client.listObjectsV2(any(ListObjectsV2Request.class))).thenThrow(cause);\n+    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> s3ClientWrapper.getObjects(VALID_BUCKET_NAME, VALID_PREFIX));\n+  }\n+\n+  @Test\n+  void testPutObjectForNoHeaders() {\n+    s3ClientWrapper.putObject(VALID_BUCKET_NAME, VALID_NAME, Path.of(\"\"), emptyMap());\n+\n+    PutObjectRequest expRequest = PutObjectRequest.builder().bucket(VALID_BUCKET_NAME).key(VALID_NAME).build();\n+    verify(s3Client, atLeastOnce()).putObject(eq(expRequest), any(RequestBody.class));\n+  }\n+\n+  @Test\n+  void testPutObjectForCacheControlHeader() {\n+    var expCacheControl = \"foo-cache-control\";\n+    s3ClientWrapper\n+        .putObject(VALID_BUCKET_NAME, VALID_NAME, Path.of(\"\"), newHashMap(HeaderKey.CACHE_CONTROL, expCacheControl));\n+\n+    PutObjectRequest expRequest =\n+        PutObjectRequest.builder().bucket(VALID_BUCKET_NAME).key(VALID_NAME).cacheControl(expCacheControl).build();\n+    verify(s3Client, atLeastOnce()).putObject(eq(expRequest), any(RequestBody.class));\n+  }\n+\n+  @Test\n+  void testPutObjectForAmzAclHeader() {\n+    String expAcl = \"foo-acl\";\n+    s3ClientWrapper.putObject(VALID_BUCKET_NAME, VALID_NAME, Path.of(\"\"), newHashMap(HeaderKey.AMZ_ACL, expAcl));\n+\n+    PutObjectRequest expRequest =\n+        PutObjectRequest.builder().bucket(VALID_BUCKET_NAME).key(VALID_NAME).acl(expAcl).build();\n+    verify(s3Client, atLeastOnce()).putObject(eq(expRequest), any(RequestBody.class));\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(classes = {NoSuchBucketException.class, S3Exception.class, SdkClientException.class, SdkException.class})\n+  void putObjectsThrowsObjectStoreOperationFailedExceptionIfClientThrows(Class<Exception> cause) {\n+    when(s3Client.putObject(any(PutObjectRequest.class), any(RequestBody.class))).thenThrow(cause);\n+    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> s3ClientWrapper.putObject(VALID_BUCKET_NAME, VALID_PREFIX, Path.of(\"\"), emptyMap()));\n+  }\n+\n+  @Test\n+  void testRemoveObjects() {\n+    when(s3Client.deleteObjects(any(DeleteObjectsRequest.class))).thenReturn(DeleteObjectsResponse.builder().build());\n+    List<String> expObjectNames = List.of(\"obj1\", \"obj2\");\n+\n+    s3ClientWrapper.removeObjects(VALID_BUCKET_NAME, expObjectNames);\n+\n+    DeleteObjectsRequest expRequest = DeleteObjectsRequest.builder()\n+        .bucket(VALID_BUCKET_NAME).delete(buildDeleteObject(expObjectNames)).build();\n+    verify(s3Client, atLeastOnce()).deleteObjects(eq(expRequest));\n+  }\n+\n+  private Delete buildDeleteObject(List<String> objectNames) {\n+    return Delete.builder().objects(objectNames.stream().map(\n+        key -> ObjectIdentifier.builder().key(key).build()).collect(Collectors.toList())).build();\n+  }\n+\n+  @Test\n+  void removeObjectsThrowsOnDeletionErrors() {\n+    DeleteObjectsResponse actResponse = DeleteObjectsResponse.builder().errors(S3Error.builder().build()).build();\n+\n+    when(s3Client.deleteObjects(any(DeleteObjectsRequest.class))).thenReturn(actResponse);\n+\n+    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> s3ClientWrapper.removeObjects(VALID_BUCKET_NAME, List.of(VALID_NAME)));\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(classes = {NoSuchBucketException.class, S3Exception.class, SdkClientException.class, SdkException.class})\n+  void removeObjectsThrowsObjectStoreOperationFailedExceptionIfClientThrows(Class<Exception> cause) {\n+    when(s3Client.deleteObjects(any(DeleteObjectsRequest.class))).thenThrow(cause);\n+    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> s3ClientWrapper.removeObjects(VALID_BUCKET_NAME, List.of(VALID_NAME)));\n+  }\n+}\n",
        "problem_statement": "Remove MinIO SDK and use AWS SDK instead\nSince MinIO SDK still hasn't released a fix version for fixing the XML vulnerability in the SimpleXML library, we need to consider alternative S3 SDK's. Therefore, prepare an alternative approach with AWS SDK, which is then used by the ObjectStoreAccess class.\r\n\n",
        "hints_text": "",
        "created_at": "2020-05-29T21:57:57Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-659",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nPlausible Deniability: Add \"Padding\" property to submission payload\nCurrently, mobile apps are collecting keys based on their install date. When a user uploads his keys (after being tested positive), the payload will contain 1-13 keys. Although the traffic between mobile & server is secured, an attacker may still sniff the packages in the network and predict, based on the request size, how many keys are probably part of the submission request. This may then lead to additional information for the attacker in an attempt to deanonymize a user.\r\n\r\nIn order to mitigate this attack, add a new field to the submission payload, called `padding` of type string. The field shall be optional and must not break compatibility to the current/older mobile implementations (which should be given due to the use of protobuf). The server shall not process this field.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/ARCHITECTURE.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup for local development and testing purposes, including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env``` in the root folder of the repository. If the endpoints are to be exposed to the network the default values in this file should be changed before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `localhost:8001` <br> `postgres:5432` (from containerized pgadmin) <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is `edc07f08-a1aa-11ea-bb37-0242ac130002`.\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 If you are already running a local Postgres, you need to create a database `cwa` and run the following setup scripts:\n101 \n102 * Create the different CWA roles first by executing [create-roles.sql](setup/create-roles.sql).\n103 * Create local database users for the specific roles by running [create-users.sql](./local-setup/create-users.sql).\n104 * It is recommended to also run [enable-test-data-docker-compose.sql](./local-setup/enable-test-data-docker-compose.sql)\n105 , which enables the test data generation profile. If you already had CWA running before and an existing `diagnosis-key`\n106 table on your database, you need to run [enable-test-data.sql](./local-setup/enable-test-data.sql) instead.\n107 \n108 You can also use `docker-compose` to start Postgres and Zenko. If you do that, you have to\n109 set the following environment-variables when running the Spring project:\n110 \n111 For the distribution module:\n112 \n113 ```bash\n114 POSTGRESQL_SERVICE_PORT=8001\n115 VAULT_FILESIGNING_SECRET=</path/to/your/private_key>\n116 SPRING_PROFILES_ACTIVE=signature-dev,disable-ssl-client-postgres\n117 ```\n118 \n119 For the submission module:\n120 \n121 ```bash\n122 POSTGRESQL_SERVICE_PORT=8001\n123 SPRING_PROFILES_ACTIVE=disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n124 ```\n125 \n126 #### Configure\n127 \n128 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n129 \n130 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n131 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n132 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n133   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n134 \n135 #### Build\n136 \n137 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n138 \n139 #### Run\n140 \n141 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n142 \n143 If you want to start the submission service, for example, you start it as follows:\n144 \n145 ```bash\n146   cd services/submission/\n147   mvn spring-boot:run\n148 ```\n149 \n150 #### Debugging\n151 \n152 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n153 \n154 ```bash\n155 mvn spring-boot:run -Dspring.profiles.active=dev\n156 ```\n157 \n158 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n159 \n160 ## Service APIs\n161 \n162 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n163 \n164 Service                   | OpenAPI Specification\n165 --------------------------|-------------\n166 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n167 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n168 \n169 ## Spring Profiles\n170 \n171 ### Distribution\n172 \n173 See [Distribution Service - Spring Profiles](/docs/DISTRIBUTION.md#spring-profiles).\n174 \n175 ### Submission\n176 \n177 See [Submission Service - Spring Profiles](/docs/SUBMISSION.md#spring-profiles).\n178 \n179 ## Documentation\n180 \n181 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n182 \n183 The documentation for cwa-server can be found under the [/docs](./docs) folder.\n184 \n185 The JavaDoc documentation for cwa-server is hosted by Github Pages at [https://corona-warn-app.github.io/cwa-server](https://corona-warn-app.github.io/cwa-server).\n186 \n187 ## Support and Feedback\n188 \n189 The following channels are available for discussions, feedback, and support requests:\n190 \n191 | Type                     | Channel                                                |\n192 | ------------------------ | ------------------------------------------------------ |\n193 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n194 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n195 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n196 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n197 \n198 ## How to Contribute\n199 \n200 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n201 \n202 ## Contributors\n203 \n204 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n205 \n206 ## Repositories\n207 \n208 The following public repositories are currently available for the Corona-Warn-App:\n209 \n210 | Repository          | Description                                                           |\n211 | ------------------- | --------------------------------------------------------------------- |\n212 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n213 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n214 | [cwa-verification-server] | Backend implementation of the verification process|\n215 \n216 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n217 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n218 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n219 [Postgres]: https://www.postgresql.org/\n220 [HSQLDB]: http://hsqldb.org/\n221 [Zenko CloudServer]: https://github.com/scality/cloudserver\n222 \n223 ## Licensing\n224 \n225 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n226 \n227 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n228 \n229 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n230 \n231 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n232 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto]\n1 syntax = \"proto3\";\n2 package app.coronawarn.server.common.protocols.internal;\n3 option java_package = \"app.coronawarn.server.common.protocols.internal\";\n4 option java_multiple_files = true;\n5 import \"app/coronawarn/server/common/protocols/external/exposurenotification/temporary_exposure_key_export.proto\";\n6 \n7 message SubmissionPayload {\n8   repeated app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey keys = 1;\n9 }\n[end of common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.submission;\n22 \n23 import io.micrometer.core.aop.TimedAspect;\n24 import io.micrometer.core.instrument.MeterRegistry;\n25 import java.util.Arrays;\n26 import java.util.List;\n27 import org.apache.logging.log4j.LogManager;\n28 import org.slf4j.Logger;\n29 import org.slf4j.LoggerFactory;\n30 import org.springframework.beans.factory.DisposableBean;\n31 import org.springframework.boot.SpringApplication;\n32 import org.springframework.boot.autoconfigure.SpringBootApplication;\n33 import org.springframework.boot.autoconfigure.domain.EntityScan;\n34 import org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration;\n35 import org.springframework.boot.context.properties.EnableConfigurationProperties;\n36 import org.springframework.cloud.openfeign.EnableFeignClients;\n37 import org.springframework.context.EnvironmentAware;\n38 import org.springframework.context.annotation.Bean;\n39 import org.springframework.context.annotation.ComponentScan;\n40 import org.springframework.core.env.Environment;\n41 import org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;\n42 import org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter;\n43 \n44 @SpringBootApplication(exclude = {UserDetailsServiceAutoConfiguration.class})\n45 @EnableJdbcRepositories(basePackages = \"app.coronawarn.server.common.persistence\")\n46 @EntityScan(basePackages = \"app.coronawarn.server.common.persistence\")\n47 @ComponentScan({\"app.coronawarn.server.common.persistence\",\n48     \"app.coronawarn.server.services.submission\"})\n49 @EnableConfigurationProperties\n50 @EnableFeignClients\n51 public class ServerApplication implements EnvironmentAware, DisposableBean {\n52 \n53   private static final Logger logger = LoggerFactory.getLogger(ServerApplication.class);\n54 \n55   public static void main(String[] args) {\n56     SpringApplication.run(ServerApplication.class);\n57   }\n58 \n59   @Bean\n60   TimedAspect timedAspect(MeterRegistry registry) {\n61     return new TimedAspect(registry);\n62   }\n63 \n64   /**\n65    * Manual shutdown hook needed to avoid Log4j shutdown issues (see cwa-server/#589).\n66    */\n67   @Override\n68   public void destroy() {\n69     LogManager.shutdown();\n70   }\n71 \n72   @Bean\n73   ProtobufHttpMessageConverter protobufHttpMessageConverter() {\n74     return new ProtobufHttpMessageConverter();\n75   }\n76 \n77   @Override\n78   public void setEnvironment(Environment environment) {\n79     List<String> profiles = Arrays.asList(environment.getActiveProfiles());\n80 \n81     logger.info(\"Enabled named groups: {}\", System.getProperty(\"jdk.tls.namedGroups\"));\n82     if (profiles.contains(\"disable-ssl-server\")) {\n83       logger.warn(\n84           \"The submission service is started with endpoint TLS disabled. This should never be used in PRODUCTION!\");\n85     }\n86     if (profiles.contains(\"disable-ssl-client-postgres\")) {\n87       logger.warn(\n88           \"The submission service is started with postgres connection TLS disabled. \"\n89               + \"This should never be used in PRODUCTION!\");\n90     }\n91     if (profiles.contains(\"disable-ssl-client-verification\")) {\n92       logger.warn(\n93           \"The submission service is started with verification service connection TLS disabled. \"\n94               + \"This should never be used in PRODUCTION!\");\n95     }\n96     if (profiles.contains(\"disable-ssl-client-verification-verify-hostname\")) {\n97       logger.warn(\n98           \"The submission service is started with verification service TLS hostname validation disabled. \"\n99               + \"This should never be used in PRODUCTION!\");\n100     }\n101   }\n102 }\n103 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.submission.config;\n22 \n23 import java.io.File;\n24 import javax.validation.constraints.Max;\n25 import javax.validation.constraints.Min;\n26 import javax.validation.constraints.Pattern;\n27 import org.springframework.boot.context.properties.ConfigurationProperties;\n28 import org.springframework.stereotype.Component;\n29 import org.springframework.validation.annotation.Validated;\n30 \n31 @Component\n32 @ConfigurationProperties(prefix = \"services.submission\")\n33 @Validated\n34 public class SubmissionServiceConfig {\n35 \n36   private static final String PATH_REGEX = \"^[/]?[a-zA-Z0-9_]+[/[a-zA-Z0-9_]+]*$\";\n37   private static final String URL_WITH_PORT_REGEX = \"^http[s]?://[a-z0-9-]+(\\\\.[a-z0-9-]+)*(:[0-9]{2,6})?$\";\n38 \n39   // Exponential moving average of the last N real request durations (in ms), where\n40   // N = fakeDelayMovingAverageSamples.\n41   @Min(1)\n42   @Max(3000)\n43   private Long initialFakeDelayMilliseconds;\n44   @Min(1)\n45   @Max(100)\n46   private Long fakeDelayMovingAverageSamples;\n47   @Min(7)\n48   @Max(28)\n49   private Integer retentionDays;\n50   @Min(1)\n51   @Max(25)\n52   private Integer randomKeyPaddingMultiplier;\n53   @Min(1)\n54   @Max(10000)\n55   private Integer connectionPoolSize;\n56   private Payload payload;\n57   private Verification verification;\n58   private Monitoring monitoring;\n59   private Client client;\n60 \n61   public Long getInitialFakeDelayMilliseconds() {\n62     return initialFakeDelayMilliseconds;\n63   }\n64 \n65   public void setInitialFakeDelayMilliseconds(Long initialFakeDelayMilliseconds) {\n66     this.initialFakeDelayMilliseconds = initialFakeDelayMilliseconds;\n67   }\n68 \n69   public Long getFakeDelayMovingAverageSamples() {\n70     return fakeDelayMovingAverageSamples;\n71   }\n72 \n73   public void setFakeDelayMovingAverageSamples(Long fakeDelayMovingAverageSamples) {\n74     this.fakeDelayMovingAverageSamples = fakeDelayMovingAverageSamples;\n75   }\n76 \n77   public Integer getRetentionDays() {\n78     return retentionDays;\n79   }\n80 \n81   public void setRetentionDays(Integer retentionDays) {\n82     this.retentionDays = retentionDays;\n83   }\n84 \n85   public Integer getRandomKeyPaddingMultiplier() {\n86     return randomKeyPaddingMultiplier;\n87   }\n88 \n89   public void setRandomKeyPaddingMultiplier(Integer randomKeyPaddingMultiplier) {\n90     this.randomKeyPaddingMultiplier = randomKeyPaddingMultiplier;\n91   }\n92 \n93   public Integer getConnectionPoolSize() {\n94     return connectionPoolSize;\n95   }\n96 \n97   public void setConnectionPoolSize(Integer connectionPoolSize) {\n98     this.connectionPoolSize = connectionPoolSize;\n99   }\n100 \n101   public Integer getMaxNumberOfKeys() {\n102     return payload.getMaxNumberOfKeys();\n103   }\n104 \n105   public void setPayload(Payload payload) {\n106     this.payload = payload;\n107   }\n108 \n109   private static class Payload {\n110 \n111     @Min(7)\n112     @Max(28)\n113     private Integer maxNumberOfKeys;\n114 \n115     public Integer getMaxNumberOfKeys() {\n116       return maxNumberOfKeys;\n117     }\n118 \n119     public void setMaxNumberOfKeys(Integer maxNumberOfKeys) {\n120       this.maxNumberOfKeys = maxNumberOfKeys;\n121     }\n122   }\n123 \n124   public String getVerificationBaseUrl() {\n125     return verification.getBaseUrl();\n126   }\n127 \n128   public void setVerification(Verification verification) {\n129     this.verification = verification;\n130   }\n131 \n132   public String getVerificationPath() {\n133     return verification.getPath();\n134   }\n135 \n136   private static class Verification {\n137 \n138     @Pattern(regexp = URL_WITH_PORT_REGEX)\n139     private String baseUrl;\n140 \n141     @Pattern(regexp = PATH_REGEX)\n142     private String path;\n143 \n144     public String getBaseUrl() {\n145       return baseUrl;\n146     }\n147 \n148     public String getPath() {\n149       return path;\n150     }\n151 \n152     public void setBaseUrl(String baseUrl) {\n153       this.baseUrl = baseUrl;\n154     }\n155 \n156     public void setPath(String path) {\n157       this.path = path;\n158     }\n159   }\n160 \n161   private static class Monitoring {\n162 \n163     @Min(1)\n164     @Max(1000)\n165     private Long batchSize;\n166 \n167     public Long getBatchSize() {\n168       return batchSize;\n169     }\n170 \n171     public void setBatchSize(Long batchSize) {\n172       this.batchSize = batchSize;\n173     }\n174   }\n175 \n176   public Monitoring getMonitoring() {\n177     return monitoring;\n178   }\n179 \n180   public void setMonitoring(Monitoring monitoring) {\n181     this.monitoring = monitoring;\n182   }\n183 \n184   public Long getMonitoringBatchSize() {\n185     return this.monitoring.getBatchSize();\n186   }\n187 \n188   public void setMonitoringBatchSize(Long batchSize) {\n189     this.monitoring.setBatchSize(batchSize);\n190   }\n191 \n192   public Client getClient() {\n193     return client;\n194   }\n195 \n196   public void setClient(Client client) {\n197     this.client = client;\n198   }\n199 \n200   public static class Client {\n201 \n202     private Ssl ssl;\n203 \n204     public Ssl getSsl() {\n205       return ssl;\n206     }\n207 \n208     public void setSsl(Ssl ssl) {\n209       this.ssl = ssl;\n210     }\n211 \n212     public static class Ssl {\n213 \n214       private File keyStore;\n215       private String keyStorePassword;\n216       private String keyPassword;\n217       private File trustStore;\n218       private String trustStorePassword;\n219 \n220       public File getKeyStore() {\n221         return keyStore;\n222       }\n223 \n224       public void setKeyStore(File keyStore) {\n225         this.keyStore = keyStore;\n226       }\n227 \n228       public String getKeyStorePassword() {\n229         return keyStorePassword;\n230       }\n231 \n232       public void setKeyStorePassword(String keyStorePassword) {\n233         this.keyStorePassword = keyStorePassword;\n234       }\n235 \n236       public String getKeyPassword() {\n237         return keyPassword;\n238       }\n239 \n240       public void setKeyPassword(String keyPassword) {\n241         this.keyPassword = keyPassword;\n242       }\n243 \n244       public File getTrustStore() {\n245         return trustStore;\n246       }\n247 \n248       public void setTrustStore(File trustStore) {\n249         this.trustStore = trustStore;\n250       }\n251 \n252       public String getTrustStorePassword() {\n253         return trustStorePassword;\n254       }\n255 \n256       public void setTrustStorePassword(String trustStorePassword) {\n257         this.trustStorePassword = trustStorePassword;\n258       }\n259     }\n260   }\n261 }\n262 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java]\n[start of services/submission/src/main/resources/application.yaml]\n1 ---\n2 logging:\n3   level:\n4     org:\n5       springframework:\n6         web: INFO\n7     app:\n8       coronawarn: INFO\n9 \n10 services:\n11   submission:\n12     # The initial value of the moving average for fake request delays.\n13     initial-fake-delay-milliseconds: 10\n14     # The number of samples for the calculation of the moving average for fake request delays.\n15     fake-delay-moving-average-samples: 10\n16     # The retention threshold for acceptable diagnosis keys during submission.\n17     retention-days: 14\n18     # The number of keys to save to the DB for every real submitted key.\n19     # Example: If the 'random-key-padding-multiplier' is set to 10, and 5 keys are being submitted,\n20     # then the 5 real submitted keys will be saved to the DB, plus an additional 45 keys with\n21     # random 'key_data'. All properties, besides the 'key_data', of the additional keys will be\n22     # identical to the real key.\n23     random-key-padding-multiplier: ${RANDOM_KEY_PADDING_MULTIPLIER:1}\n24     # The ApacheHttpClient's connection pool size.\n25     connection-pool-size: 200\n26     payload:\n27       # The maximum number of keys accepted for any submission.\n28       max-number-of-keys: 14\n29     verification:\n30       base-url: ${VERIFICATION_BASE_URL:http://localhost:8004}\n31       path: /version/v1/tan/verify\n32     monitoring:\n33       # The batch size (number of requests) to use for monitoring request count.\n34       batch-size: 5\n35     client:\n36       ssl:\n37         key-password: ${SSL_SUBMISSION_KEYSTORE_PASSWORD}\n38         key-store: ${SSL_SUBMISSION_KEYSTORE_PATH}\n39         key-store-password: ${SSL_SUBMISSION_KEYSTORE_PASSWORD}\n40         trust-store: ${SSL_VERIFICATION_TRUSTSTORE_PATH}\n41         trust-store-password: ${SSL_VERIFICATION_TRUSTSTORE_PASSWORD}\n42 \n43 spring:\n44   lifecycle:\n45     # keep in sync or lower than the kubernetes setting 'terminationGracePeriodSeconds'\n46     # 5s +5s Feign client + 20s DB timeout\n47     timeout-per-shutdown-phase: 30s\n48   transaction:\n49     default-timeout: 20\n50   flyway:\n51     enabled: true\n52     locations: classpath:/db/migration, classpath:/db/specific/{vendor}\n53     password: ${POSTGRESQL_PASSWORD_FLYWAY:local_setup_flyway}\n54     user: ${POSTGRESQL_USER_FLYWAY:local_setup_flyway}\n55   # Postgres configuration\n56   datasource:\n57     driver-class-name: org.postgresql.Driver\n58     url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}?ssl=true&sslmode=verify-full&sslrootcert=${SSL_POSTGRES_CERTIFICATE_PATH}&sslcert=${SSL_SUBMISSION_CERTIFICATE_PATH}&sslkey=${SSL_SUBMISSION_PRIVATE_KEY_PATH}\n59     username: ${POSTGRESQL_USER_SUBMISSION:local_setup_submission}\n60     password: ${POSTGRESQL_PASSWORD_SUBMISSION:local_setup_submission}\n61 \n62 # Actuator configuration\n63 management:\n64   server:\n65     port: 8081\n66   endpoint:\n67     metrics:\n68       enabled: true\n69     prometheus:\n70       enabled: true\n71     health:\n72       group:\n73         readiness:\n74           include: db, verificationService\n75           show-details: always\n76   endpoints:\n77     web:\n78       exposure:\n79         include: 'health, prometheus'\n80   metrics:\n81     export:\n82       prometheus:\n83         enabled: true\n84   health:\n85     probes:\n86       enabled: true\n87 \n88 server:\n89   shutdown: graceful\n90   ssl:\n91     enabled: true\n92     enabled-protocols: TLSv1.2,TLSv1.3\n93     protocol: TLS\n94     ciphers: >-\n95       TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n96       TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n97       TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n98       TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n99       TLS_DHE_DSS_WITH_AES_128_GCM_SHA256\n100       TLS_DHE_DSS_WITH_AES_256_GCM_SHA384\n101       TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n102       TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n103       TLS_AES_128_GCM_SHA256\n104       TLS_AES_256_GCM_SHA384\n105       TLS_AES_128_CCM_SHA256\n106     key-password: ${SSL_SUBMISSION_KEYSTORE_PASSWORD}\n107     key-store: ${SSL_SUBMISSION_KEYSTORE_PATH}\n108     key-store-password: ${SSL_SUBMISSION_KEYSTORE_PASSWORD}\n109     key-store-provider: SUN\n110     key-store-type: JKS\n111 \n112 feign:\n113   client:\n114     config:\n115       default:\n116         connect-timeout: 5000\n117         read-timeout: 5000\n[end of services/submission/src/main/resources/application.yaml]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n@@ -54,6 +54,7 @@ public class SubmissionServiceConfig {\n   private Integer randomKeyPaddingMultiplier;\n   @Min(1)\n   @Max(10000)\n+  private Integer connectionPoolSize;\n   private Payload payload;\n   private Verification verification;\n   private Monitoring monitoring;\n@@ -86,6 +87,11 @@ public class SubmissionServiceConfig {\n     this.randomKeyPaddingMultiplier = randomKeyPaddingMultiplier;\n   }\n \n+  public Integer getConnectionPoolSize() {\n+    return connectionPoolSize;\n+  }\n+\n+  public void setConnectionPoolSize(Integer connectionPoolSize) {\n+    this.connectionPoolSize = connectionPoolSize;\n+  }\n \n   public Integer getMaxNumberOfKeys() {\n     return payload.getMaxNumberOfKeys();\n</patch>",
        "model_patch": "\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n@@ -54,6 +54,7 @@ public class SubmissionServiceConfig {\n   private Integer randomKeyPaddingMultiplier;\n   @Min(1)\n   @Max(10000)\n+  private Integer connectionPoolSize;\n   private Payload payload;\n   private Verification verification;\n   private Monitoring monitoring;\n@@ -86,6 +87,11 @@ public class SubmissionServiceConfig {\n     this.randomKeyPaddingMultiplier = randomKeyPaddingMultiplier;\n   }\n \n+  public Integer getConnectionPoolSize() {\n+    return connectionPoolSize;\n+  }\n+\n+  public void setConnectionPoolSize(Integer connectionPoolSize) {\n+    this.connectionPoolSize = connectionPoolSize;\n+  }\n \n   public Integer getMaxNumberOfKeys() {\n     return payload.getMaxNumberOfKeys();\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 659,
        "issue_numbers": [
            "658"
        ],
        "base_commit": "ee78bf15ece7f282836149b5f39422892f055096",
        "patch": "diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto\n--- a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto\n+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/submission_payload.proto\n@@ -6,4 +6,5 @@ import \"app/coronawarn/server/common/protocols/external/exposurenotification/tem\n \n message SubmissionPayload {\n   repeated app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey keys = 1;\n-}\n\\ No newline at end of file\n+  bytes padding = 2;\n+}\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java\n@@ -20,6 +20,7 @@\n \n package app.coronawarn.server.services.submission;\n \n+import app.coronawarn.server.services.submission.config.SubmissionServiceConfigValidator;\n import io.micrometer.core.aop.TimedAspect;\n import io.micrometer.core.instrument.MeterRegistry;\n import java.util.Arrays;\n@@ -40,6 +41,7 @@\n import org.springframework.core.env.Environment;\n import org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;\n import org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter;\n+import org.springframework.validation.Validator;\n \n @SpringBootApplication(exclude = {UserDetailsServiceAutoConfiguration.class})\n @EnableJdbcRepositories(basePackages = \"app.coronawarn.server.common.persistence\")\n@@ -74,6 +76,11 @@ ProtobufHttpMessageConverter protobufHttpMessageConverter() {\n     return new ProtobufHttpMessageConverter();\n   }\n \n+  @Bean\n+  public static Validator configurationPropertiesValidator() {\n+    return new SubmissionServiceConfigValidator();\n+  }\n+\n   @Override\n   public void setEnvironment(Environment environment) {\n     List<String> profiles = Arrays.asList(environment.getActiveProfiles());\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionPayloadSizeFilter.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionPayloadSizeFilter.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionPayloadSizeFilter.java\n@@ -0,0 +1,58 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.submission.config;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+/**\n+ * {@link SubmissionPayloadSizeFilter} instances filter requests exceeding a certain size limit.\n+ */\n+@Component\n+public class SubmissionPayloadSizeFilter extends OncePerRequestFilter {\n+\n+  private final long maximumRequestSize;\n+\n+  public SubmissionPayloadSizeFilter(SubmissionServiceConfig config) {\n+    this.maximumRequestSize = config.getMaximumRequestSize().toBytes();\n+  }\n+\n+  /**\n+   * Filters each request that exceeds the maximum size.\n+   */\n+  @Override\n+  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    if (request.getContentLengthLong() > maximumRequestSize) {\n+      response.setStatus(HttpStatus.BAD_REQUEST.value());\n+      response.getWriter().write(\"Request size exceeded limit of \" + maximumRequestSize + \" bytes\");\n+    } else {\n+      filterChain.doFilter(request, response);\n+    }\n+  }\n+\n+}\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfig.java\n@@ -26,6 +26,7 @@\n import javax.validation.constraints.Pattern;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.stereotype.Component;\n+import org.springframework.util.unit.DataSize;\n import org.springframework.validation.annotation.Validated;\n \n @Component\n@@ -53,6 +54,7 @@ public class SubmissionServiceConfig {\n   @Min(1)\n   @Max(10000)\n   private Integer connectionPoolSize;\n+  private DataSize maximumRequestSize;\n   private Payload payload;\n   private Verification verification;\n   private Monitoring monitoring;\n@@ -98,6 +100,14 @@ public void setConnectionPoolSize(Integer connectionPoolSize) {\n     this.connectionPoolSize = connectionPoolSize;\n   }\n \n+  public DataSize getMaximumRequestSize() {\n+    return maximumRequestSize;\n+  }\n+\n+  public void setMaximumRequestSize(DataSize maximumRequestSize) {\n+    this.maximumRequestSize = maximumRequestSize;\n+  }\n+\n   public Integer getMaxNumberOfKeys() {\n     return payload.getMaxNumberOfKeys();\n   }\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigValidator.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigValidator.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigValidator.java\n@@ -0,0 +1,54 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.submission.config;\n+\n+import org.springframework.util.unit.DataSize;\n+import org.springframework.validation.Errors;\n+import org.springframework.validation.Validator;\n+\n+/**\n+ * {@link SubmissionPayloadSizeFilter} instances validate the values of the SubmissionServiceConfig.\n+ */\n+public class SubmissionServiceConfigValidator implements Validator {\n+\n+  public static final DataSize MIN_MAXIMUM_REQUEST_SIZE = DataSize.ofBytes(280);\n+  public static final DataSize MAX_MAXIMUM_REQUEST_SIZE = DataSize.ofKilobytes(200);\n+\n+  @Override\n+  public boolean supports(Class<?> type) {\n+    return type == SubmissionServiceConfig.class;\n+  }\n+\n+  /**\n+   * Validate if the MaximumRequestSize of the {@link SubmissionServiceConfig} is in the defined range.\n+   */\n+  @Override\n+  public void validate(Object o, Errors errors) {\n+    SubmissionServiceConfig properties = (SubmissionServiceConfig) o;\n+\n+    if (properties.getMaximumRequestSize().compareTo(MIN_MAXIMUM_REQUEST_SIZE) < 0\n+        || properties.getMaximumRequestSize().compareTo(MAX_MAXIMUM_REQUEST_SIZE) > 0) {\n+      errors.rejectValue(\"maximumRequestSize\",\n+          \"Must be at least \" + MIN_MAXIMUM_REQUEST_SIZE + \" and not more than \" + MAX_MAXIMUM_REQUEST_SIZE + \".\");\n+    }\n+  }\n+\n+}\ndiff --git a/services/submission/src/main/resources/application.yaml b/services/submission/src/main/resources/application.yaml\n--- a/services/submission/src/main/resources/application.yaml\n+++ b/services/submission/src/main/resources/application.yaml\n@@ -23,6 +23,8 @@ services:\n     random-key-padding-multiplier: ${RANDOM_KEY_PADDING_MULTIPLIER:1}\n     # The ApacheHttpClient's connection pool size.\n     connection-pool-size: 200\n+    # The maximum request size accepted by the SubmissionController (e.g. 200B or 100KB).\n+    maximum-request-size: ${MAXIMUM_REQUEST_SIZE:100KB}\n     payload:\n       # The maximum number of keys accepted for any submission.\n       max-number-of-keys: 14\n",
        "test_patch": "diff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigValidatorTest.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigValidatorTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigValidatorTest.java\n@@ -0,0 +1,86 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.submission.config;\n+\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.util.unit.DataSize;\n+import org.springframework.validation.BeanPropertyBindingResult;\n+import org.springframework.validation.Errors;\n+import java.util.stream.Stream;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ActiveProfiles({\"disable-ssl-client-verification\", \"disable-ssl-client-verification-verify-hostname\"})\n+class SubmissionServiceConfigValidatorTest {\n+\n+  @Autowired\n+  private SubmissionServiceConfigValidator submissionServiceConfigValidator;\n+\n+  private SubmissionServiceConfig submissionServiceConfig;\n+\n+  @BeforeEach\n+  void setup() {\n+    submissionServiceConfig = new SubmissionServiceConfig();\n+  }\n+\n+  @ParameterizedTest\n+  @MethodSource(\"validRequestDataSizes\")\n+  void ok(DataSize dataSize) {\n+    Errors errors = validateConfig(dataSize);\n+    assertThat(errors.hasErrors()).isFalse();\n+  }\n+\n+  @ParameterizedTest\n+  @MethodSource(\"invalidRequestDataSizes\")\n+  void fail(DataSize dataSize) {\n+    Errors errors = validateConfig(dataSize);\n+    assertThat(errors.hasErrors()).isTrue();\n+  }\n+\n+  private Errors validateConfig(DataSize dataSize) {\n+    Errors errors = new BeanPropertyBindingResult(submissionServiceConfig, \"submissionServiceConfig\");\n+    submissionServiceConfig.setMaximumRequestSize(dataSize);\n+    submissionServiceConfigValidator.validate(submissionServiceConfig, errors);\n+    return errors;\n+  }\n+\n+  private static Stream<Arguments> validRequestDataSizes() {\n+    return Stream.of(\n+        SubmissionServiceConfigValidator.MAX_MAXIMUM_REQUEST_SIZE,\n+        SubmissionServiceConfigValidator.MIN_MAXIMUM_REQUEST_SIZE\n+    ).map(Arguments::of);\n+  }\n+\n+  private static Stream<Arguments> invalidRequestDataSizes() {\n+    return Stream.of(\n+        DataSize.ofBytes(SubmissionServiceConfigValidator.MAX_MAXIMUM_REQUEST_SIZE.toBytes() + 1),\n+        DataSize.ofBytes(SubmissionServiceConfigValidator.MIN_MAXIMUM_REQUEST_SIZE.toBytes() - 1)\n+    ).map(Arguments::of);\n+  }\n+}\ndiff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/RequestExecutor.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/RequestExecutor.java\n--- a/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/RequestExecutor.java\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/RequestExecutor.java\n@@ -62,6 +62,10 @@ public ResponseEntity<Void> execute(HttpMethod method, RequestEntity<SubmissionP\n \n   public ResponseEntity<Void> executePost(Collection<TemporaryExposureKey> keys, HttpHeaders headers) {\n     SubmissionPayload body = SubmissionPayload.newBuilder().addAllKeys(keys).build();\n+    return executePost(body, headers);\n+  }\n+\n+  public ResponseEntity<Void> executePost(SubmissionPayload body, HttpHeaders headers) {\n     return execute(HttpMethod.POST, new RequestEntity<>(body, headers, HttpMethod.POST, SUBMISSION_URL));\n   }\n \ndiff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/SubmissionControllerTest.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/SubmissionControllerTest.java\n--- a/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/SubmissionControllerTest.java\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/SubmissionControllerTest.java\n@@ -45,9 +45,12 @@\n import static org.springframework.http.HttpStatus.METHOD_NOT_ALLOWED;\n import static org.springframework.http.HttpStatus.OK;\n \n+\n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n+import app.coronawarn.server.common.protocols.internal.SubmissionPayload;\n+import app.coronawarn.server.services.submission.config.SubmissionPayloadSizeFilter;\n import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;\n import app.coronawarn.server.services.submission.monitoring.SubmissionMonitor;\n import app.coronawarn.server.services.submission.verification.TanVerifier;\n@@ -104,7 +107,13 @@ public void setUpMocks() {\n \n   @Test\n   void checkResponseStatusForValidParameters() {\n-    ResponseEntity<Void> actResponse = executor.executePost(buildPayloadWithMultipleKeys(), buildOkHeaders());\n+    ResponseEntity<Void> actResponse = executor.executePost(buildPayload(buildMultipleKeys()), buildOkHeaders());\n+    assertThat(actResponse.getStatusCode()).isEqualTo(OK);\n+  }\n+\n+  @Test\n+  void checkResponseStatusForValidParametersWithPadding() {\n+    ResponseEntity<Void> actResponse = executor.executePost(buildPayloadWithPadding(), buildOkHeaders());\n     assertThat(actResponse.getStatusCode()).isEqualTo(OK);\n   }\n \n@@ -116,10 +125,9 @@ void check400ResponseStatusForInvalidParameters() {\n \n   @Test\n   void singleKeyWithOutdatedRollingStartIntervalNumberDoesNotGetSaved() {\n-    Collection<TemporaryExposureKey> keys = buildPayloadWithSingleOutdatedKey();\n     ArgumentCaptor<Collection<DiagnosisKey>> argument = ArgumentCaptor.forClass(Collection.class);\n \n-    executor.executePost(keys, buildOkHeaders());\n+    executor.executePost(buildPayload(createOutdatedKey()), buildOkHeaders());\n \n     verify(diagnosisKeyService, atLeastOnce()).saveDiagnosisKeys(argument.capture());\n     assertThat(argument.getValue()).isEmpty();\n@@ -127,12 +135,12 @@ void singleKeyWithOutdatedRollingStartIntervalNumberDoesNotGetSaved() {\n \n   @Test\n   void keysWithOutdatedRollingStartIntervalNumberDoNotGetSaved() {\n-    Collection<TemporaryExposureKey> submittedKeys = buildPayloadWithMultipleKeys();\n+    Collection<TemporaryExposureKey> submittedKeys = buildMultipleKeys();\n     TemporaryExposureKey outdatedKey = createOutdatedKey();\n     submittedKeys.add(outdatedKey);\n     ArgumentCaptor<Collection<DiagnosisKey>> argument = ArgumentCaptor.forClass(Collection.class);\n \n-    executor.executePost(submittedKeys, buildOkHeaders());\n+    executor.executePost(buildPayload(submittedKeys), buildOkHeaders());\n \n     verify(diagnosisKeyService, atLeastOnce()).saveDiagnosisKeys(argument.capture());\n     submittedKeys.remove(outdatedKey);\n@@ -141,10 +149,10 @@ void keysWithOutdatedRollingStartIntervalNumberDoNotGetSaved() {\n \n   @Test\n   void checkSaveOperationCallAndFakeDelayUpdateForValidParameters() {\n-    Collection<TemporaryExposureKey> submittedKeys = buildPayloadWithMultipleKeys();\n+    Collection<TemporaryExposureKey> submittedKeys = buildMultipleKeys();\n     ArgumentCaptor<Collection<DiagnosisKey>> argument = ArgumentCaptor.forClass(Collection.class);\n \n-    executor.executePost(submittedKeys, buildOkHeaders());\n+    executor.executePost(buildPayload(submittedKeys), buildOkHeaders());\n \n     verify(diagnosisKeyService, atLeastOnce()).saveDiagnosisKeys(argument.capture());\n     verify(fakeDelayManager, times(1)).updateFakeRequestDelay(anyLong());\n@@ -200,6 +208,12 @@ void invalidTanHandling() {\n     assertThat(actResponse.getStatusCode()).isEqualTo(FORBIDDEN);\n   }\n \n+  @Test\n+  void invalidSubmissionPayload() {\n+    ResponseEntity<Void> actResponse = executor.executePost(buildPayloadWithTooLargePadding(), buildOkHeaders());\n+    assertThat(actResponse.getStatusCode()).isEqualTo(BAD_REQUEST);\n+  }\n+\n   @Test\n   void checkRealRequestHandlingIsMonitored() {\n     executor.executePost(buildPayloadWithOneKey(), buildOkHeaders());\n@@ -222,7 +236,35 @@ void checkInvalidTanHandlingIsMonitored() {\n     verify(submissionMonitor, times(1)).incrementInvalidTanRequestCounter();\n   }\n \n-  private Collection<TemporaryExposureKey> buildPayloadWithMultipleKeys() {\n+  private SubmissionPayload buildPayload(TemporaryExposureKey key) {\n+    Collection<TemporaryExposureKey> keys = Stream.of(key).collect(Collectors.toCollection(ArrayList::new));\n+    return buildPayload(keys);\n+  }\n+\n+  private SubmissionPayload buildPayload(Collection<TemporaryExposureKey> keys) {\n+    return SubmissionPayload.newBuilder()\n+        .addAllKeys(keys)\n+        .build();\n+  }\n+\n+  private SubmissionPayload buildPayloadWithPadding() {\n+    return SubmissionPayload.newBuilder()\n+        .addAllKeys(buildMultipleKeys())\n+        .setPadding(ByteString.copyFrom(\"PaddingString\".getBytes()))\n+        .build();\n+  }\n+\n+  private SubmissionPayload buildPayloadWithTooLargePadding() {\n+    int exceedingSize = (int) (2 * config.getMaximumRequestSize().toBytes());\n+    byte[] bytes = new byte[exceedingSize];\n+\n+    return SubmissionPayload.newBuilder()\n+        .addAllKeys(buildMultipleKeys())\n+        .setPadding(ByteString.copyFrom(bytes))\n+        .build();\n+  }\n+\n+  private Collection<TemporaryExposureKey> buildMultipleKeys() {\n     int rollingStartIntervalNumber1 = createRollingStartIntervalNumber(config.getRetentionDays() - 1);\n     int rollingStartIntervalNumber2 = rollingStartIntervalNumber1 + DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n     int rollingStartIntervalNumber3 = rollingStartIntervalNumber2 + DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n@@ -233,11 +275,6 @@ private Collection<TemporaryExposureKey> buildPayloadWithMultipleKeys() {\n         .collect(Collectors.toCollection(ArrayList::new));\n   }\n \n-  private Collection<TemporaryExposureKey> buildPayloadWithSingleOutdatedKey() {\n-    TemporaryExposureKey outdatedKey = createOutdatedKey();\n-    return Stream.of(outdatedKey).collect(Collectors.toCollection(ArrayList::new));\n-  }\n-\n   private TemporaryExposureKey createOutdatedKey() {\n     return TemporaryExposureKey.newBuilder()\n         .setKeyData(ByteString.copyFromUtf8(VALID_KEY_DATA_2))\n@@ -246,14 +283,13 @@ private TemporaryExposureKey createOutdatedKey() {\n         .setTransmissionRiskLevel(5).build();\n   }\n \n-  private static Collection<TemporaryExposureKey> buildPayloadWithInvalidKey() {\n-    return Stream.of(\n-        buildTemporaryExposureKey(VALID_KEY_DATA_1, createRollingStartIntervalNumber(2), 999))\n-        .collect(Collectors.toCollection(ArrayList::new));\n+  private SubmissionPayload buildPayloadWithInvalidKey() {\n+    TemporaryExposureKey invalidKey = buildTemporaryExposureKey(VALID_KEY_DATA_1, createRollingStartIntervalNumber(2), 999);\n+    return buildPayload(invalidKey);\n   }\n \n   private void assertElementsCorrespondToEachOther(Collection<TemporaryExposureKey> submittedTemporaryExposureKeys,\n-      Collection<DiagnosisKey> savedDiagnosisKeys) {\n+                                                   Collection<DiagnosisKey> savedDiagnosisKeys) {\n \n     Set<DiagnosisKey> submittedDiagnosisKeys = submittedTemporaryExposureKeys.stream()\n         .map(submittedDiagnosisKey -> DiagnosisKey.builder().fromProtoBuf(submittedDiagnosisKey).build())\ndiff --git a/services/submission/src/test/resources/application.yaml b/services/submission/src/test/resources/application.yaml\n--- a/services/submission/src/test/resources/application.yaml\n+++ b/services/submission/src/test/resources/application.yaml\n@@ -23,6 +23,7 @@ services:\n     retention-days: 14\n     random-key-padding-multiplier: 10\n     connection-pool-size: 200\n+    maximum-request-size: 100KB\n     payload:\n       max-number-of-keys: 14\n     verification:\n",
        "problem_statement": "Plausible Deniability: Add \"Padding\" property to submission payload\nCurrently, mobile apps are collecting keys based on their install date. When a user uploads his keys (after being tested positive), the payload will contain 1-13 keys. Although the traffic between mobile & server is secured, an attacker may still sniff the packages in the network and predict, based on the request size, how many keys are probably part of the submission request. This may then lead to additional information for the attacker in an attempt to deanonymize a user.\r\n\r\nIn order to mitigate this attack, add a new field to the submission payload, called `padding` of type string. The field shall be optional and must not break compatibility to the current/older mobile implementations (which should be given due to the use of protobuf). The server shall not process this field.\n",
        "hints_text": "",
        "created_at": "2020-07-10T07:37:14Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-277",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nSwitch application*.properties files to Yaml\nLet's switch over to YAML for better readability.\r\n\r\nAffected files:\r\n common/persistence/src/test/resources/application.properties\r\n services/submission/src/main/resources/application.properties\r\n services/submission/src/test/resources/application.properties\r\n services/distribution/src/main/resources/application.properties\r\n services/distribution/src/test/resources/application.properties\r\n services/submission/src/main/resources/application-dev.properties\r\n services/distribution/src/main/resources/application-dev.properties\r\n services/submission/src/main/resources/application-cloud.properties\r\n services/distribution/src/main/resources/application-cloud.properties\r\n services/distribution/src/main/resources/application-testdata.properties\n\n</issue>\n\n<code>\n[start of README.md]\n1 <h1 align=\"center\">\n2     Corona-Warn-App Server\n3 </h1>\n4 \n5 <p align=\"center\">\n6     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n9         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>    \n10         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n11     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n12 </p>\n13 \n14 <p align=\"center\">\n15   <a href=\"#development\">Development</a> \u2022\n16   <a href=\"#service-apis\">Service APIs</a> \u2022\n17   <a href=\"#documentation\">Documentation</a> \u2022\n18   <a href=\"#support-and-feedback\">Support</a> \u2022\n19   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n20   <a href=\"#contributors\">Contributors</a> \u2022\n21   <a href=\"#repositories\">Repositories</a> \u2022\n22   <a href=\"#licensing\">Licensing</a>\n23 </p>\n24 \n25 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n26 \n27 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n28 \n29 ## Architecture Overview\n30 \n31 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n32 a good starting point in how the backend services interact with other services, and what purpose\n33 they serve.\n34 \n35 ## Development\n36 \n37 After you've checked out this repository, you can run the application in one of the following ways:\n38 \n39 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n40   * Single components using the respective Dockerfile or\n41   * The full backend using the Docker Compose (which is considered the most convenient way)\n42 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n43   If you want to develop something in a single component, this approach is preferable.\n44 \n45 ### Docker-Based Deployment\n46 \n47 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n48 \n49 #### Running the Full CWA Backend Using Docker Compose\n50 \n51 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n52 \n53 Once the services are built, you can start the whole backend using ```docker-compose up```.\n54 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n55 \n56 The docker-compose contains the following services:\n57 \n58 Service       | Description | Endpoint and Default Credentials\n59 --------------|-------------|-----------\n60 submission    | The Corona-Warn-App submission service                                                      | http://localhost:8000 \n61 distribution  | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n62 postgres      | A [postgres] database installation                                                          | postgres:8001 <br> Username: postgres <br> Password: postgres\n63 pgadmin       | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | http://localhost:8002 <br> Username: user@domain.com <br> Password: password\n64 cloudserver   | [Zenko CloudServer] is a S3-compliant object store  | http://localhost:8003/ <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n65 \n66 ##### Known Limitation\n67 \n68 The docker-compose runs into a timing issue in some cases when the create-bucket target runs before the objectstore is available. The mitigation is easy: after running ```docker-compose up``` wait until all components are initialized and running. Afterwards, trigger the ```create-bucket``` service manually by running ```docker-compose run create-bucket```. If you want to trigger distribution runs, run ```docker-compose run distribution```. The timing issue will be fixed in a future release.\n69 \n70 #### Running Single CWA Services Using Docker\n71 \n72 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n73 \n74 To build and run the distribution service, run the following command:\n75 \n76 ```bash\n77 ./services/distribution/build_and_run.sh\n78 ```\n79 \n80 To build and run the submission service, run the following command:\n81 \n82 ```bash\n83 ./services/submission/build_and_run.sh\n84 ```\n85 \n86 The submission service is available on [localhost:8080](http://localhost:8080 ).\n87 \n88 ### Maven-Based Build\n89 \n90 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n91 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n92 \n93 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n94 * [Maven 3.6](https://maven.apache.org/)\n95 * [Postgres]\n96 * [Zenko CloudServer]\n97 \n98 #### Configure\n99 \n100 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n101 \n102 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.properties) and in the [distribution config](./services/distribution/src/main/resources/application.properties)\n103 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.properties)\n104 * Configure the certificate and private key for the distribution service, the paths need to be prefixed with `file:`\n105     * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n106     * `VAULT_FILESIGNING_CERT` should be the path to the certificate, example available in `<repo-root>/docker-compose-test-secrets/certificate.cert`\n107 \n108 #### Build\n109 \n110 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n111 \n112 #### Run\n113 \n114 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n115 \n116 If you want to start the submission service, for example, you start it as follows:\n117 \n118 ```bash\n119   cd services/submission/\n120   mvn spring-boot:run\n121 ```\n122 \n123 #### Debugging\n124 \n125 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n126 \n127 ```bash\n128 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n129 ```\n130 \n131 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n132 \n133 ## Service APIs\n134 \n135 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n136 \n137 Service      | OpenAPI Specification\n138 -------------|-------------\n139 Submission Service        | https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json\n140 Distribution Service      | https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json\n141 \n142 ## Documentation\n143 \n144 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n145 \n146 ## Support and Feedback\n147 \n148 The following channels are available for discussions, feedback, and support requests:\n149 \n150 | Type                     | Channel                                                |\n151 | ------------------------ | ------------------------------------------------------ |\n152 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n153 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n154 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n155 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n156 \n157 ## How to Contribute\n158 \n159 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n160 \n161 ## Contributors\n162 \n163 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n164 \n165 ## Repositories\n166 \n167 The following public repositories are currently available for the Corona-Warn-App:\n168 \n169 | Repository          | Description                                                           |\n170 | ------------------- | --------------------------------------------------------------------- |\n171 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n172 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n173 \n174 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n175 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n176 [Postgres]: https://www.postgresql.org/\n177 [HSQLDB]: http://hsqldb.org/\n178 [Zenko CloudServer]: https://github.com/scality/cloudserver\n179 \n180 ## Licensing\n181 \n182 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n183 \n184 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License. \n185 \n186 You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.\n187 \n188 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n189 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of README.md]\n1 <h1 align=\"center\">\n2     Corona-Warn-App Server\n3 </h1>\n4 \n5 <p align=\"center\">\n6     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n9         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>    \n10         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n11     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n12 </p>\n13 \n14 <p align=\"center\">\n15   <a href=\"#development\">Development</a> \u2022\n16   <a href=\"#service-apis\">Service APIs</a> \u2022\n17   <a href=\"#documentation\">Documentation</a> \u2022\n18   <a href=\"#support-and-feedback\">Support</a> \u2022\n19   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n20   <a href=\"#contributors\">Contributors</a> \u2022\n21   <a href=\"#repositories\">Repositories</a> \u2022\n22   <a href=\"#licensing\">Licensing</a>\n23 </p>\n24 \n25 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n26 \n27 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n28 \n29 ## Architecture Overview\n30 \n31 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n32 a good starting point in how the backend services interact with other services, and what purpose\n33 they serve.\n34 \n35 ## Development\n36 \n37 After you've checked out this repository, you can run the application in one of the following ways:\n38 \n39 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n40   * Single components using the respective Dockerfile or\n41   * The full backend using the Docker Compose (which is considered the most convenient way)\n42 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n43   If you want to develop something in a single component, this approach is preferable.\n44 \n45 ### Docker-Based Deployment\n46 \n47 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n48 \n49 #### Running the Full CWA Backend Using Docker Compose\n50 \n51 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n52 \n53 Once the services are built, you can start the whole backend using ```docker-compose up```.\n54 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n55 \n56 The docker-compose contains the following services:\n57 \n58 Service       | Description | Endpoint and Default Credentials\n59 --------------|-------------|-----------\n60 submission    | The Corona-Warn-App submission service                                                      | http://localhost:8000 \n61 distribution  | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n62 postgres      | A [postgres] database installation                                                          | postgres:8001 <br> Username: postgres <br> Password: postgres\n63 pgadmin       | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | http://localhost:8002 <br> Username: user@domain.com <br> Password: password\n64 cloudserver   | [Zenko CloudServer] is a S3-compliant object store  | http://localhost:8003/ <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n65 \n66 ##### Known Limitation\n67 \n68 The docker-compose runs into a timing issue in some cases when the create-bucket target runs before the objectstore is available. The mitigation is easy: after running ```docker-compose up``` wait until all components are initialized and running. Afterwards, trigger the ```create-bucket``` service manually by running ```docker-compose run create-bucket```. If you want to trigger distribution runs, run ```docker-compose run distribution```. The timing issue will be fixed in a future release.\n69 \n70 #### Running Single CWA Services Using Docker\n71 \n72 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n73 \n74 To build and run the distribution service, run the following command:\n75 \n76 ```bash\n77 ./services/distribution/build_and_run.sh\n78 ```\n79 \n80 To build and run the submission service, run the following command:\n81 \n82 ```bash\n83 ./services/submission/build_and_run.sh\n84 ```\n85 \n86 The submission service is available on [localhost:8080](http://localhost:8080 ).\n87 \n88 ### Maven-Based Build\n89 \n90 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n91 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n92 \n93 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n94 * [Maven 3.6](https://maven.apache.org/)\n95 * [Postgres]\n96 * [Zenko CloudServer]\n97 \n98 #### Configure\n99 \n100 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n101 \n102 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.properties) and in the [distribution config](./services/distribution/src/main/resources/application.properties)\n103 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.properties)\n104 * Configure the certificate and private key for the distribution service, the paths need to be prefixed with `file:`\n105     * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n106     * `VAULT_FILESIGNING_CERT` should be the path to the certificate, example available in `<repo-root>/docker-compose-test-secrets/certificate.cert`\n107 \n108 #### Build\n109 \n110 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n111 \n112 #### Run\n113 \n114 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n115 \n116 If you want to start the submission service, for example, you start it as follows:\n117 \n118 ```bash\n119   cd services/submission/\n120   mvn spring-boot:run\n121 ```\n122 \n123 #### Debugging\n124 \n125 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n126 \n127 ```bash\n128 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n129 ```\n130 \n131 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n132 \n133 ## Service APIs\n134 \n135 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n136 \n137 Service      | OpenAPI Specification\n138 -------------|-------------\n139 Submission Service        | https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json\n140 Distribution Service      | https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json\n141 \n142 ## Documentation\n143 \n144 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n145 \n146 ## Support and Feedback\n147 \n148 The following channels are available for discussions, feedback, and support requests:\n149 \n150 | Type                     | Channel                                                |\n151 | ------------------------ | ------------------------------------------------------ |\n152 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n153 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n154 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n155 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n156 \n157 ## How to Contribute\n158 \n159 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n160 \n161 ## Contributors\n162 \n163 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n164 \n165 ## Repositories\n166 \n167 The following public repositories are currently available for the Corona-Warn-App:\n168 \n169 | Repository          | Description                                                           |\n170 | ------------------- | --------------------------------------------------------------------- |\n171 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n172 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n173 \n174 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n175 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n176 [Postgres]: https://www.postgresql.org/\n177 [HSQLDB]: http://hsqldb.org/\n178 [Zenko CloudServer]: https://github.com/scality/cloudserver\n179 \n180 ## Licensing\n181 \n182 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n183 \n184 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License. \n185 \n186 You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.\n187 \n188 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n189 \n[end of README.md]\n[start of services/distribution/src/main/resources/application-cloud.properties]\n1 spring.flyway.enabled=true\n2 spring.flyway.locations=classpath:db/migration/postgres\n3 \n4 spring.datasource.driver-class-name=org.postgresql.Driver\n5 spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}\n6 spring.datasource.username=${POSTGRESQL_USER}\n7 spring.datasource.password=${POSTGRESQL_PASSWORD}\n8 \n9 services.distribution.paths.output=/tmp/distribution\n[end of services/distribution/src/main/resources/application-cloud.properties]\n[start of services/distribution/src/main/resources/application-dev.properties]\n1 logging.level.org.springframework.web=DEBUG\n2 logging.level.app.coronawarn=DEBUG\n[end of services/distribution/src/main/resources/application-dev.properties]\n[start of services/distribution/src/main/resources/application-testdata.properties]\n1 services.distribution.testdata.seed=123456\n2 services.distribution.testdata.exposures-per-hour=1000\n[end of services/distribution/src/main/resources/application-testdata.properties]\n[start of services/distribution/src/main/resources/application.properties]\n1 logging.level.org.springframework.web=INFO\n2 logging.level.app.coronawarn=INFO\n3 spring.main.web-application-type=NONE\n4 \n5 services.distribution.retention-days=14\n6 services.distribution.output-file-name=index\n7 services.distribution.tek-export.file-name=export.bin\n8 services.distribution.tek-export.file-header=EK Export v1\n9 services.distribution.tek-export.file-header-width=16\n10 \n11 services.distribution.paths.output=out\n12 services.distribution.paths.privatekey=${VAULT_FILESIGNING_SECRET}\n13 services.distribution.paths.certificate=${VAULT_FILESIGNING_CERT}\n14 \n15 services.distribution.api.version-path=version\n16 services.distribution.api.version-v1=v1\n17 services.distribution.api.country-path=country\n18 services.distribution.api.country-germany=DE\n19 services.distribution.api.date-path=date\n20 services.distribution.api.hour-path=hour\n21 services.distribution.api.diagnosis-keys-path=diagnosis-keys\n22 services.distribution.api.parameters-path=configuration\n23 services.distribution.api.parameters-exposure-configuration-file-name=exposure_configuration\n24 services.distribution.api.parameters-risk-score-classification-file-name=risk_score_classification\n25 \n26 services.distribution.signature.app-bundle-id=de.rki.coronawarnapp\n27 services.distribution.signature.android-package=de.rki.coronawarnapp\n28 services.distribution.signature.verification-key-id=\n29 services.distribution.signature.verification-key-version=\n30 services.distribution.signature.algorithm-oid=1.2.840.10045.4.3.2\n31 services.distribution.signature.algorithm-name=SHA256withECDSA\n32 services.distribution.signature.file-name=export.sig\n33 services.distribution.signature.security-provider=BC\n34 \n35 # Configuration for the S3 compatible object storage hosted by Telekom in Germany\n36 services.distribution.objectstore.access-key=${CWA_OBJECTSTORE_ACCESSKEY:accessKey1}\n37 services.distribution.objectstore.secret-key=${CWA_OBJECTSTORE_SECRETKEY:verySecretKey1}\n38 services.distribution.objectstore.endpoint=${CWA_OBJECTSTORE_ENDPOINT:http\\://localhost\\:8003}\n39 services.distribution.objectstore.bucket=${CWA_OBJECTSTORE_BUCKET:cwa}\n40 services.distribution.objectstore.port=${CWA_OBJECTSTORE_PORT:8003}\n41 services.distribution.objectstore.set-public-read-acl-on-put-object=true\n42 \n43 # Postgres configuration\n44 spring.jpa.hibernate.ddl-auto=validate\n45 \n46 spring.flyway.enabled=true\n47 spring.flyway.locations=classpath:db/migration/postgres\n48 \n49 spring.datasource.driver-class-name=org.postgresql.Driver\n50 spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n51 spring.datasource.username=${POSTGRESQL_USER:postgres}\n52 spring.datasource.password=${POSTGRESQL_PASSWORD:postgres}\n53 \n[end of services/distribution/src/main/resources/application.properties]\n[start of services/submission/src/main/resources/application-cloud.properties]\n1 spring.flyway.locations=classpath:db/migration/postgres\n2 \n3 spring.datasource.driver-class-name=org.postgresql.Driver\n4 spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}\n5 spring.datasource.username=${POSTGRESQL_USER}\n6 spring.datasource.password=${POSTGRESQL_PASSWORD}\n[end of services/submission/src/main/resources/application-cloud.properties]\n[start of services/submission/src/main/resources/application-config-test.properties]\n1 services.submission.initial_fake_delay_milliseconds=100.0\n2 services.submission.fake_delay_moving_average_samples=1.0\n3 services.submission.retention-days=10\n4 services.submission.payload.max-number-of-keys=1000\n[end of services/submission/src/main/resources/application-config-test.properties]\n[start of services/submission/src/main/resources/application-dev.properties]\n1 logging.level.org.springframework.web=DEBUG\n2 \n[end of services/submission/src/main/resources/application-dev.properties]\n[start of services/submission/src/main/resources/application.properties]\n1 logging.level.org.springframework.web=INFO\n2 \n3 # The initial value of the moving average for fake request delays.\n4 services.submission.initial_fake_delay_milliseconds=10\n5 # The number of samples for the calculation of the moving average for fake request delays.\n6 services.submission.fake_delay_moving_average_samples=10\n7 \n8 services.submission.retention-days=14\n9 services.submission.payload.max-number-of-keys=14\n10 \n11 spring.jpa.hibernate.ddl-auto=validate\n12 spring.flyway.enabled=true\n13 \n14 spring.flyway.locations=classpath:db/migration/postgres\n15 \n16 # Postgres configuration\n17 spring.datasource.driver-class-name=org.postgresql.Driver\n18 spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n19 spring.datasource.username=${POSTGRESQL_USER:postgres}\n20 spring.datasource.password=${POSTGRESQL_PASSWORD:postgres}\n21 \n[end of services/submission/src/main/resources/application.properties]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/services/distribution/src/main/resources/application.properties\n+++ b/services/distribution/src/main/resources/application.yaml\n@@ -1,27 +1,35 @@\n-logging.level.org.springframework.web=INFO\n+logging:\n+  level:\n+    org.springframework.web: INFO\n \n-# The initial value of the moving average for fake request delays.\n-services.submission.initial_fake_delay_milliseconds=10\n-# The number of samples for the calculation of the moving average for fake request delays.\n-services.submission.fake_delay_moving_average_samples=10\n+services:\n+  submission:\n+    initial_fake_delay_milliseconds: 10\n+    fake_delay_moving_average_samples: 10\n \n-services.submission.retention-days=14\n-services.submission.payload.max-number-of-keys=14\n+services:\n+  submission:\n+    retention-days: 14\n+    payload:\n+      max-number-of-keys: 14\n \n-spring.jpa.hibernate.ddl-auto=validate\n-spring.flyway.enabled=true\n+spring:\n+  jpa:\n+    hibernate:\n+      ddl-auto: validate\n+  flyway:\n+    enabled: true\n \n-spring.flyway.locations=classpath:db/migration/postgres\n+  flyway:\n+    locations: classpath:db/migration/postgres\n \n-# Postgres configuration\n-spring.datasource.driver-class-name=org.postgresql.Driver\n-spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n-spring.datasource.username=${POSTGRESQL_USER:postgres}\n-spring.datasource.password=${POSTGRESQL_PASSWORD:postgres}\n+spring:\n+  datasource:\n+    driver-class-name: org.postgresql.Driver\n+    url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n+    username: ${POSTGRESQL_USER:postgres}\n+    password: ${POSTGRESQL_PASSWORD:postgres}\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/resources/application.properties\n+++ b/services/distribution/src/main/resources/application.yaml\n@@ -1,27 +1,35 @@\n-logging.level.org.springframework.web=INFO\n+logging:\n+  level:\n+    org.springframework.web: INFO\n \n-# The initial value of the moving average for fake request delays.\n-services.submission.initial_fake_delay_milliseconds=10\n-# The number of samples for the calculation of the moving average for fake request delays.\n-services.submission.fake_delay_moving_average_samples=10\n+services:\n+  submission:\n+    initial_fake_delay_milliseconds: 10\n+    fake_delay_moving_average_samples: 10\n \n-services.submission.retention-days=14\n-services.submission.payload.max-number-of-keys=14\n+services:\n+  submission:\n+    retention-days: 14\n+    payload:\n+      max-number-of-keys: 14\n \n-spring.jpa.hibernate.ddl-auto=validate\n-spring.flyway.enabled=true\n+spring:\n+  jpa:\n+    hibernate:\n+      ddl-auto: validate\n+  flyway:\n+    enabled: true\n \n-spring.flyway.locations=classpath:db/migration/postgres\n+  flyway:\n+    locations: classpath:db/migration/postgres\n \n-# Postgres configuration\n-spring.datasource.driver-class-name=org.postgresql.Driver\n-spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n-spring.datasource.username=${POSTGRESQL_USER:postgres}\n-spring.datasource.password=${POSTGRESQL_PASSWORD:postgres}\n+spring:\n+  datasource:\n+    driver-class-name: org.postgresql.Driver\n+    url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n+    username: ${POSTGRESQL_USER:postgres}\n+    password: ${POSTGRESQL_PASSWORD:postgres}\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 277,
        "issue_numbers": [
            "245"
        ],
        "base_commit": "576fd8b20079374458ffb650fe63ca6002e84a39",
        "patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -6,7 +6,7 @@\n     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n-        <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>    \n+        <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n </p>\n@@ -57,7 +57,7 @@ The docker-compose contains the following services:\n \n Service       | Description | Endpoint and Default Credentials\n --------------|-------------|-----------\n-submission    | The Corona-Warn-App submission service                                                      | http://localhost:8000 \n+submission    | The Corona-Warn-App submission service                                                      | http://localhost:8000\n distribution  | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n postgres      | A [postgres] database installation                                                          | postgres:8001 <br> Username: postgres <br> Password: postgres\n pgadmin       | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | http://localhost:8002 <br> Username: user@domain.com <br> Password: password\n@@ -99,8 +99,8 @@ To prepare your machine to run the CWA project locally, we recommend that you fi\n \n After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n \n-* Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.properties) and in the [distribution config](./services/distribution/src/main/resources/application.properties)\n-* Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.properties)\n+* Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n+* Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n * Configure the certificate and private key for the distribution service, the paths need to be prefixed with `file:`\n     * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n     * `VAULT_FILESIGNING_CERT` should be the path to the certificate, example available in `<repo-root>/docker-compose-test-secrets/certificate.cert`\n@@ -181,7 +181,7 @@ The following public repositories are currently available for the Corona-Warn-Ap\n \n Copyright (c) 2020 SAP SE or an SAP affiliate company.\n \n-Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License. \n+Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n \n You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.\n \ndiff --git a/services/distribution/src/main/resources/application-cloud.properties b/services/distribution/src/main/resources/application-cloud.properties\ndeleted file mode 100644\n--- a/services/distribution/src/main/resources/application-cloud.properties\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-spring.flyway.enabled=true\n-spring.flyway.locations=classpath:db/migration/postgres\n-\n-spring.datasource.driver-class-name=org.postgresql.Driver\n-spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}\n-spring.datasource.username=${POSTGRESQL_USER}\n-spring.datasource.password=${POSTGRESQL_PASSWORD}\n-\n-services.distribution.paths.output=/tmp/distribution\n\\ No newline at end of file\ndiff --git a/services/distribution/src/main/resources/application-cloud.yaml b/services/distribution/src/main/resources/application-cloud.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/resources/application-cloud.yaml\n@@ -0,0 +1,22 @@\n+---\n+spring:\n+  flyway:\n+    enabled: true\n+    locations: classpath:db/migration/postgres\n+  datasource:\n+    driver-class-name: org.postgresql.Driver\n+    url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}\n+    username: ${POSTGRESQL_USER}\n+    password: ${POSTGRESQL_PASSWORD}\n+\n+services:\n+  distribution:\n+    paths:\n+      output: /tmp/distribution\n+    objectstore:\n+      access-key: ${CWA_OBJECTSTORE_ACCESSKEY}\n+      secret-key: ${CWA_OBJECTSTORE_SECRETKEY}\n+      endpoint: ${CWA_OBJECTSTORE_ENDPOINT}\n+      bucket: ${CWA_OBJECTSTORE_BUCKET}\n+      port: ${CWA_OBJECTSTORE_PORT}\n+      set-public-read-acl-on-put-object: false\ndiff --git a/services/distribution/src/main/resources/application-dev.properties b/services/distribution/src/main/resources/application-dev.properties\ndeleted file mode 100644\n--- a/services/distribution/src/main/resources/application-dev.properties\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-logging.level.org.springframework.web=DEBUG\n-logging.level.app.coronawarn=DEBUG\n\\ No newline at end of file\ndiff --git a/services/distribution/src/main/resources/application-dev.yaml b/services/distribution/src/main/resources/application-dev.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/resources/application-dev.yaml\n@@ -0,0 +1,8 @@\n+---\n+logging:\n+  level:\n+    org:\n+      springframework:\n+        web: DEBUG\n+    app:\n+      coronawarn: DEBUG\ndiff --git a/services/distribution/src/main/resources/application-testdata.properties b/services/distribution/src/main/resources/application-testdata.properties\ndeleted file mode 100644\n--- a/services/distribution/src/main/resources/application-testdata.properties\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-services.distribution.testdata.seed=123456\n-services.distribution.testdata.exposures-per-hour=1000\n\\ No newline at end of file\ndiff --git a/services/distribution/src/main/resources/application-testdata.yaml b/services/distribution/src/main/resources/application-testdata.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/resources/application-testdata.yaml\n@@ -0,0 +1,6 @@\n+---\n+services:\n+  distribution:\n+    testdata:\n+      seed: 123456\n+      exposures-per-hour: 1000\ndiff --git a/services/distribution/src/main/resources/application.properties b/services/distribution/src/main/resources/application.properties\ndeleted file mode 100644\n--- a/services/distribution/src/main/resources/application.properties\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-logging.level.org.springframework.web=INFO\n-logging.level.app.coronawarn=INFO\n-spring.main.web-application-type=NONE\n-\n-services.distribution.retention-days=14\n-services.distribution.output-file-name=index\n-services.distribution.tek-export.file-name=export.bin\n-services.distribution.tek-export.file-header=EK Export v1\n-services.distribution.tek-export.file-header-width=16\n-\n-services.distribution.paths.output=out\n-services.distribution.paths.privatekey=${VAULT_FILESIGNING_SECRET}\n-services.distribution.paths.certificate=${VAULT_FILESIGNING_CERT}\n-\n-services.distribution.api.version-path=version\n-services.distribution.api.version-v1=v1\n-services.distribution.api.country-path=country\n-services.distribution.api.country-germany=DE\n-services.distribution.api.date-path=date\n-services.distribution.api.hour-path=hour\n-services.distribution.api.diagnosis-keys-path=diagnosis-keys\n-services.distribution.api.parameters-path=configuration\n-services.distribution.api.parameters-exposure-configuration-file-name=exposure_configuration\n-services.distribution.api.parameters-risk-score-classification-file-name=risk_score_classification\n-\n-services.distribution.signature.app-bundle-id=de.rki.coronawarnapp\n-services.distribution.signature.android-package=de.rki.coronawarnapp\n-services.distribution.signature.verification-key-id=\n-services.distribution.signature.verification-key-version=\n-services.distribution.signature.algorithm-oid=1.2.840.10045.4.3.2\n-services.distribution.signature.algorithm-name=SHA256withECDSA\n-services.distribution.signature.file-name=export.sig\n-services.distribution.signature.security-provider=BC\n-\n-# Configuration for the S3 compatible object storage hosted by Telekom in Germany\n-services.distribution.objectstore.access-key=${CWA_OBJECTSTORE_ACCESSKEY:accessKey1}\n-services.distribution.objectstore.secret-key=${CWA_OBJECTSTORE_SECRETKEY:verySecretKey1}\n-services.distribution.objectstore.endpoint=${CWA_OBJECTSTORE_ENDPOINT:http\\://localhost\\:8003}\n-services.distribution.objectstore.bucket=${CWA_OBJECTSTORE_BUCKET:cwa}\n-services.distribution.objectstore.port=${CWA_OBJECTSTORE_PORT:8003}\n-services.distribution.objectstore.set-public-read-acl-on-put-object=true\n-\n-# Postgres configuration\n-spring.jpa.hibernate.ddl-auto=validate\n-\n-spring.flyway.enabled=true\n-spring.flyway.locations=classpath:db/migration/postgres\n-\n-spring.datasource.driver-class-name=org.postgresql.Driver\n-spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n-spring.datasource.username=${POSTGRESQL_USER:postgres}\n-spring.datasource.password=${POSTGRESQL_PASSWORD:postgres}\ndiff --git a/services/distribution/src/main/resources/application.yaml b/services/distribution/src/main/resources/application.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/resources/application.yaml\n@@ -0,0 +1,66 @@\n+---\n+logging:\n+  level:\n+    org:\n+      springframework:\n+        web: INFO\n+    app:\n+      coronawarn: INFO\n+\n+services:\n+  distribution:\n+    output-file-name: index\n+    retention-days: 14\n+    paths:\n+      output: out\n+      privatekey: ${VAULT_FILESIGNING_SECRET}\n+      certificate: ${VAULT_FILESIGNING_CERT}\n+    tek-export:\n+      file-name: export.bin\n+      file-header: EK Export v1\n+      file-header-width: 16\n+    api:\n+      version-path: version\n+      version-v1: v1\n+      country-path: country\n+      country-germany: DE\n+      date-path: date\n+      hour-path: hour\n+      diagnosis-keys-path: diagnosis-keys\n+      parameters-path: configuration\n+      parameters-exposure-configuration-file-name: exposure_configuration\n+      parameters-risk-score-classification-file-name: risk_score_classification\n+    signature:\n+      app-bundle-id: de.rki.coronawarnapp\n+      android-package: de.rki.coronawarnapp\n+      verification-key-id:\n+      verification-key-version:\n+      algorithm-oid: 1.2.840.10045.4.3.2\n+      algorithm-name: SHA256withECDSA\n+      file-name: export.sig\n+      security-provider: BC\n+    # Configuration for the S3 compatible object storage hosted by Telekom in Germany\n+    objectstore:\n+      access-key: ${CWA_OBJECTSTORE_ACCESSKEY:accessKey1}\n+      secret-key: ${CWA_OBJECTSTORE_SECRETKEY:verySecretKey1}\n+      endpoint: ${CWA_OBJECTSTORE_ENDPOINT:http\\://localhost\\:8003}\n+      bucket: ${CWA_OBJECTSTORE_BUCKET:cwa}\n+      port: ${CWA_OBJECTSTORE_PORT:8003}\n+      set-public-read-acl-on-put-object: true\n+\n+spring:\n+  main:\n+    web-application-type: NONE\n+# Postgres configuration\n+  jpa:\n+    hibernate:\n+      ddl-auto: validate\n+  flyway:\n+    enabled: true\n+    locations: classpath:db/migration/postgres\n+\n+  datasource:\n+    driver-class-name: org.postgresql.Driver\n+    url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n+    username: ${POSTGRESQL_USER:postgres}\n+    password: ${POSTGRESQL_PASSWORD:postgres}\ndiff --git a/services/submission/src/main/resources/application-cloud.properties b/services/submission/src/main/resources/application-cloud.properties\ndeleted file mode 100644\n--- a/services/submission/src/main/resources/application-cloud.properties\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-spring.flyway.locations=classpath:db/migration/postgres\n-\n-spring.datasource.driver-class-name=org.postgresql.Driver\n-spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}\n-spring.datasource.username=${POSTGRESQL_USER}\n-spring.datasource.password=${POSTGRESQL_PASSWORD}\n\\ No newline at end of file\ndiff --git a/services/submission/src/main/resources/application-cloud.yaml b/services/submission/src/main/resources/application-cloud.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/main/resources/application-cloud.yaml\n@@ -0,0 +1,9 @@\n+---\n+spring:\n+  flyway:\n+    locations: classpath:db/migration/postgres\n+  datasource:\n+    driver-class-name: org.postgresql.Driver\n+    url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}\n+    username: ${POSTGRESQL_USER}\n+    password: ${POSTGRESQL_PASSWORD}\ndiff --git a/services/submission/src/main/resources/application-config-test.properties b/services/submission/src/main/resources/application-config-test.properties\ndeleted file mode 100644\n--- a/services/submission/src/main/resources/application-config-test.properties\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-services.submission.initial_fake_delay_milliseconds=100.0\n-services.submission.fake_delay_moving_average_samples=1.0\n-services.submission.retention-days=10\n-services.submission.payload.max-number-of-keys=1000\n\\ No newline at end of file\ndiff --git a/services/submission/src/main/resources/application-dev.properties b/services/submission/src/main/resources/application-dev.properties\ndeleted file mode 100644\n--- a/services/submission/src/main/resources/application-dev.properties\n+++ /dev/null\n@@ -1 +0,0 @@\n-logging.level.org.springframework.web=DEBUG\ndiff --git a/services/submission/src/main/resources/application-dev.yaml b/services/submission/src/main/resources/application-dev.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/main/resources/application-dev.yaml\n@@ -0,0 +1,6 @@\n+---\n+logging:\n+  level:\n+    org:\n+      springframework:\n+        web: DEBUG\ndiff --git a/services/submission/src/main/resources/application.properties b/services/submission/src/main/resources/application.properties\ndeleted file mode 100644\n--- a/services/submission/src/main/resources/application.properties\n+++ /dev/null\n@@ -1,20 +0,0 @@\n-logging.level.org.springframework.web=INFO\n-\n-# The initial value of the moving average for fake request delays.\n-services.submission.initial_fake_delay_milliseconds=10\n-# The number of samples for the calculation of the moving average for fake request delays.\n-services.submission.fake_delay_moving_average_samples=10\n-\n-services.submission.retention-days=14\n-services.submission.payload.max-number-of-keys=14\n-\n-spring.jpa.hibernate.ddl-auto=validate\n-spring.flyway.enabled=true\n-\n-spring.flyway.locations=classpath:db/migration/postgres\n-\n-# Postgres configuration\n-spring.datasource.driver-class-name=org.postgresql.Driver\n-spring.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n-spring.datasource.username=${POSTGRESQL_USER:postgres}\n-spring.datasource.password=${POSTGRESQL_PASSWORD:postgres}\ndiff --git a/services/submission/src/main/resources/application.yaml b/services/submission/src/main/resources/application.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/main/resources/application.yaml\n@@ -0,0 +1,30 @@\n+---\n+logging:\n+  level:\n+    org:\n+      springframework:\n+        web: INFO\n+\n+# The initial value of the moving average for fake request delays.\n+services:\n+  submission:\n+    initial-fake-delay-milliseconds: 10\n+    # The number of samples for the calculation of the moving average for fake request delays.\n+    fake-delay-moving-average-samples: 10\n+    retention-days: 14\n+    payload:\n+      max-number-of-keys: 14\n+\n+spring:\n+  jpa:\n+    hibernate:\n+      ddl-auto: validate\n+  flyway:\n+    enabled: true\n+    locations: classpath:db/migration/postgres\n+# Postgres configuration\n+  datasource:\n+    driver-class-name: org.postgresql.Driver\n+    url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n+    username: ${POSTGRESQL_USER:postgres}\n+    password: ${POSTGRESQL_PASSWORD:postgres}\n",
        "test_patch": "diff --git a/common/persistence/src/test/resources/application.properties b/common/persistence/src/test/resources/application.properties\ndeleted file mode 100644\n--- a/common/persistence/src/test/resources/application.properties\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-spring.flyway.enabled=false\n-spring.jpa.hibernate.ddl-auto=create\n-spring.jpa.properties.hibernate.show_sql=false\n-spring.main.banner-mode=off\n-logging.level.org.springframework=off\n-logging.level.root=off\n\\ No newline at end of file\ndiff --git a/common/persistence/src/test/resources/application.yaml b/common/persistence/src/test/resources/application.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/common/persistence/src/test/resources/application.yaml\n@@ -0,0 +1,17 @@\n+---\n+spring:\n+  flyway:\n+    enabled: false\n+  jpa:\n+    hibernate:\n+      ddl-auto: create\n+    properties:\n+      hibernate:\n+        show-sql: false\n+  main:\n+    banner-mode: off\n+logging:\n+  level:\n+    org:\n+      springframework: off\n+    root: off\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProviderTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProviderTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProviderTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/component/CryptoProviderTest.java\n@@ -28,7 +28,6 @@\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.TestPropertySource;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n @EnableConfigurationProperties(value = DistributionServiceConfig.class)\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectoryTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectoryTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectoryTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectoryTest.java\n@@ -50,7 +50,6 @@\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.TestPropertySource;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n @EnableConfigurationProperties(value = DistributionServiceConfig.class)\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfigTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfigTest.java\ndeleted file mode 100644\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfigTest.java\n+++ /dev/null\n@@ -1,91 +0,0 @@\n-package app.coronawarn.server.services.distribution.config;\n-\n-import static org.springframework.test.util.AssertionErrors.assertNotNull;\n-import static org.springframework.test.util.AssertionErrors.assertNull;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.test.context.TestPropertySource;\n-import org.springframework.test.context.junit.jupiter.SpringExtension;\n-\n-@ExtendWith(SpringExtension.class)\n-@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n-@TestPropertySource(\"classpath:application.properties\")\n-public class DistributionServiceConfigTest {\n-\n-  @Autowired\n-  private DistributionServiceConfig dsc;\n-\n-  private final Properties properties = new Properties();\n-\n-  @BeforeEach\n-  public void setup() throws IOException {\n-    InputStream is = getClass().getClassLoader().getResourceAsStream(\"application.properties\");\n-    properties.load(is);\n-  }\n-\n-  @AfterEach\n-  public void tearDown() {\n-    properties.clear();\n-  }\n-\n-  @Test\n-  void whenDistributionConfigBeanCreatedThenPropertiesLoadedCorrectly() {\n-\n-    assertNotNull(\"Configuration should not be null\", dsc);\n-    assertNotNull(\"Paths should not be null\", dsc.getPaths());\n-    assertNull(\"TestData should be null\", dsc.getTestData());\n-    assertNotNull(\"Signature should not be null\", dsc.getSignature());\n-    assertNotNull(\"API should not be null\", dsc.getApi());\n-\n-    Map<String, String> cp = new HashMap<>();\n-    cp.put(\"services.distribution.retention-days\", dsc.getRetentionDays().toString());\n-    cp.put(\"services.distribution.output-file-name\", dsc.getOutputFileName());\n-    cp.put(\"services.distribution.tek-export.file-name\", dsc.getTekExport().getFileName());\n-    cp.put(\"services.distribution.tek-export.file-header\", dsc.getTekExport().getFileHeader());\n-    cp.put(\"services.distribution.tek-export.file-header-width\", dsc.getTekExport().getFileHeaderWidth().toString());\n-    cp.put(\"services.distribution.paths.privatekey\", dsc.getPaths().getPrivateKey());\n-    cp.put(\"services.distribution.paths.certificate\", dsc.getPaths().getCertificate());\n-    cp.put(\"services.distribution.paths.output\", dsc.getPaths().getOutput());\n-    cp.put(\"services.distribution.signature.app-bundle-id\", dsc.getSignature().getAppBundleId());\n-    cp.put(\"services.distribution.signature.android-package\", dsc.getSignature().getAndroidPackage());\n-    cp.put(\"services.distribution.signature.verification-key-id\", dsc.getSignature().getVerificationKeyId());\n-    cp.put(\"services.distribution.signature.verification-key-version\", dsc.getSignature().getVerificationKeyVersion());\n-    cp.put(\"services.distribution.signature.algorithm-oid\", dsc.getSignature().getAlgorithmOid());\n-    cp.put(\"services.distribution.signature.algorithm-name\", dsc.getSignature().getAlgorithmName());\n-    cp.put(\"services.distribution.signature.file-name\", dsc.getSignature().getFileName());\n-    cp.put(\"services.distribution.signature.security-provider\", dsc.getSignature().getSecurityProvider());\n-    cp.put(\"services.distribution.api.version-path\", dsc.getApi().getVersionPath());\n-    cp.put(\"services.distribution.api.version-v1\", dsc.getApi().getVersionV1());\n-    cp.put(\"services.distribution.api.country-path\", dsc.getApi().getCountryPath());\n-    cp.put(\"services.distribution.api.country-germany\", dsc.getApi().getCountryGermany());\n-    cp.put(\"services.distribution.api.date-path\", dsc.getApi().getDatePath());\n-    cp.put(\"services.distribution.api.hour-path\", dsc.getApi().getHourPath());\n-    cp.put(\"services.distribution.api.diagnosis-keys-path\", dsc.getApi().getDiagnosisKeysPath());\n-    cp.put(\"services.distribution.api.parameters-path\", dsc.getApi().getParametersPath());\n-    cp.put(\"services.distribution.api.parameters-exposure-configuration-file-name\",\n-        dsc.getApi().getParametersExposureConfigurationFileName());\n-    cp.put(\"services.distribution.api.parameters-risk-score-classification-file-name\",\n-        dsc.getApi().getParametersRiskScoreClassificationFileName());\n-    cp.put(\"services.distribution.objectstore.access-key\", dsc.getObjectStore().getAccessKey());\n-    cp.put(\"services.distribution.objectstore.secret-key\", dsc.getObjectStore().getSecretKey());\n-    cp.put(\"services.distribution.objectstore.endpoint\", dsc.getObjectStore().getEndpoint());\n-    cp.put(\"services.distribution.objectstore.bucket\", dsc.getObjectStore().getBucket());\n-    cp.put(\"services.distribution.objectstore.port\", dsc.getObjectStore().getPort().toString());\n-    cp.put(\"services.distribution.objectstore.set-public-read-acl-on-put-object\",\n-        dsc.getObjectStore().isSetPublicReadAclOnPutObject().toString());\n-\n-    cp.forEach((key, value) -> assertThat(properties.getProperty(key)).isEqualTo(value));\n-  }\n-\n-}\ndiff --git a/services/distribution/src/test/resources/application.properties b/services/distribution/src/test/resources/application.properties\ndeleted file mode 100644\n--- a/services/distribution/src/test/resources/application.properties\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-logging.level.org.springframework=off\n-logging.level.root=info\n-spring.main.banner-mode=off\n-\n-services.distribution.retention-days=14\n-services.distribution.output-file-name=index\n-services.distribution.tek-export.file-name=export.bin\n-services.distribution.tek-export.file-header=EK Export v1\n-services.distribution.tek-export.file-header-width=16\n-\n-services.distribution.paths.output=out\n-services.distribution.paths.privatekey=classpath:certificates/client/private.pem\n-services.distribution.paths.certificate=classpath:certificates/chain/certificate.crt\n-\n-services.distribution.api.version-path=version\n-services.distribution.api.version-v1=v1\n-services.distribution.api.country-path=country\n-services.distribution.api.country-germany=DE\n-services.distribution.api.date-path=date\n-services.distribution.api.hour-path=hour\n-services.distribution.api.diagnosis-keys-path=diagnosis-keys\n-services.distribution.api.parameters-path=configuration\n-services.distribution.api.parameters-exposure-configuration-file-name=exposure_configuration\n-services.distribution.api.parameters-risk-score-classification-file-name=risk_score_classification\n-\n-services.distribution.signature.app-bundle-id=de.rki.coronawarnapp\n-services.distribution.signature.android-package=de.rki.coronawarnapp\n-services.distribution.signature.verification-key-id=\n-services.distribution.signature.verification-key-version=\n-services.distribution.signature.algorithm-oid=1.2.840.10045.4.3.2\n-services.distribution.signature.algorithm-name=SHA256withECDSA\n-services.distribution.signature.file-name=export.sig\n-services.distribution.signature.security-provider=BC\n-\n-spring.flyway.enabled=true\n-# default case is H2 - value will be overwritten by profile cloud or postgres\n-spring.flyway.locations=classpath:db/migration/h2\n-\n-spring.jpa.hibernate.ddl-auto=validate\n-\n-# S3 object store configuration\n-services.distribution.objectstore.access-key=accessKey1\n-services.distribution.objectstore.secret-key=verySecretKey1\n-services.distribution.objectstore.endpoint=http\\://localhost\\:8003\n-services.distribution.objectstore.bucket=cwa\n-services.distribution.objectstore.port=8003\n-services.distribution.objectstore.set-public-read-acl-on-put-object=true\ndiff --git a/services/distribution/src/test/resources/application.yaml b/services/distribution/src/test/resources/application.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/resources/application.yaml\n@@ -0,0 +1,57 @@\n+---\n+logging:\n+  level:\n+    org:\n+      springframework: off\n+    root: info\n+\n+services:\n+  distribution:\n+    output-file-name: index\n+    retention-days: 14\n+    paths:\n+      output: out\n+      privatekey: classpath:certificates/client/private.pem\n+      certificate: classpath:certificates/chain/certificate.crt\n+    tek-export:\n+      file-name: export.bin\n+      file-header: EK Export v1\n+      file-header-width: 16\n+    api:\n+      version-path: version\n+      version-v1: v1\n+      country-path: country\n+      country-germany: DE\n+      date-path: date\n+      hour-path: hour\n+      diagnosis-keys-path: diagnosis-keys\n+      parameters-path: configuration\n+      parameters-exposure-configuration-file-name: exposure_configuration\n+      parameters-risk-score-classification-file-name: risk_score_classification\n+    signature:\n+      app-bundle-id: de.rki.coronawarnapp\n+      android-package: de.rki.coronawarnapp\n+      verification-key-id:\n+      verification-key-version:\n+      algorithm-oid: 1.2.840.10045.4.3.2\n+      algorithm-name: SHA256withECDSA\n+      file-name: export.sig\n+      security-provider: BC\n+    # S3 object store configuration\n+    objectstore:\n+      access-key: ${CWA_OBJECTSTORE_ACCESSKEY:accessKey1}\n+      secret-key: ${CWA_OBJECTSTORE_SECRETKEY:verySecretKey1}\n+      endpoint: ${WA_OBJECTSTORE_ENDPOINT:http\\://localhost\\:8003}\n+      bucket: ${CWA_OBJECTSTORE_BUCKET:cwa}\n+      port: ${CWA_OBJECTSTORE_PORT:8003}\n+      set-public-read-acl-on-put-object: true\n+spring:\n+  main:\n+    banner-mode: off\n+  flyway:\n+    enabled: true\n+# default case is H2 - value will be overwritten by profile cloud or postgres\n+    locations: classpath:db/migration/h2\n+  jpa:\n+    hibernate:\n+      ddl-auto: validate\ndiff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigTest.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigTest.java\ndeleted file mode 100644\n--- a/services/submission/src/test/java/app/coronawarn/server/services/submission/config/SubmissionServiceConfigTest.java\n+++ /dev/null\n@@ -1,59 +0,0 @@\n-package app.coronawarn.server.services.submission.config;\n-\n-import static org.springframework.test.util.AssertionErrors.assertEquals;\n-import static org.springframework.test.util.AssertionErrors.assertNotNull;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Properties;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.test.context.TestPropertySource;\n-import org.springframework.test.context.junit.jupiter.SpringExtension;\n-\n-@ExtendWith(SpringExtension.class)\n-@EnableConfigurationProperties(value = SubmissionServiceConfig.class)\n-@TestPropertySource(\"classpath:application-config-test.properties\")\n-public class SubmissionServiceConfigTest {\n-\n-  @Autowired\n-  private SubmissionServiceConfig config;\n-\n-  private final Properties properties = new Properties();\n-\n-  @BeforeEach\n-  public void setup() throws IOException {\n-    InputStream is = getClass().getClassLoader()\n-        .getResourceAsStream(\"application-config-test.properties\");\n-    properties.load(is);\n-  }\n-\n-  @AfterEach\n-  public void tearDown() {\n-    properties.clear();\n-  }\n-\n-  @Test\n-  void whenDistributionConfigBeanCreatedThenPropertiesLoadedCorrectly() {\n-\n-    assertNotNull(\"Configuration should not be null\", config);\n-\n-    assertEquals(\"Fake Delay value should be loaded correctly.\",\n-        properties.getProperty(\"services.submission.initial_fake_delay_milliseconds\"),\n-        String.valueOf(config.getInitialFakeDelayMilliseconds()));\n-    assertEquals(\"Fake Delay Moving Average value should be loaded correctly.\",\n-        properties.getProperty(\"services.submission.fake_delay_moving_average_samples\"),\n-        String.valueOf(config.getFakeDelayMovingAverageSamples()));\n-    assertEquals(\"Retention Days should be loaded correctly.\",\n-        properties.getProperty(\"services.submission.retention-days\"),\n-        String.valueOf(config.getRetentionDays()));\n-    assertEquals(\"Max Number of Days value should be loaded correctly.\",\n-        properties.getProperty(\"services.submission.payload.max-number-of-keys\"),\n-        String.valueOf(config.getMaxNumberOfKeys()));\n-\n-  }\n-}\n\\ No newline at end of file\ndiff --git a/services/submission/src/test/resources/application.properties b/services/submission/src/test/resources/application.properties\ndeleted file mode 100644\n--- a/services/submission/src/test/resources/application.properties\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-logging.level.org.springframework=off\n-logging.level.root=off\n-spring.main.banner-mode=off\n-\n-services.submission.initial_fake_delay_milliseconds=1\n-services.submission.fake_delay_moving_average_samples=1\n-\n-spring.flyway.enabled=true\n-# default case is H2 - value will be overwritten by profile cloud or postgres\n-spring.flyway.locations=classpath:db/migration/h2\n-\n-spring.jpa.hibernate.ddl-auto=validate\n-\n-services.submission.retention-days=14\n-services.submission.payload.max-number-of-keys=14\ndiff --git a/services/submission/src/test/resources/application.yaml b/services/submission/src/test/resources/application.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/test/resources/application.yaml\n@@ -0,0 +1,25 @@\n+---\n+logging:\n+  level:\n+    org:\n+      springframework: off\n+    root: off\n+spring:\n+  main:\n+    banner-mode: off\n+  flyway:\n+    enabled: true\n+    # default case is H2 - value will be overwritten by profile cloud or postgres\n+    locations: classpath:db/migration/h2\n+\n+  jpa:\n+    hibernate:\n+      ddl-auto: validate\n+\n+services:\n+  submission:\n+    initial-fake-delay-milliseconds: 1\n+    fake-delay-moving-average-samples: 1\n+    retention-days: 14\n+    payload:\n+      max-number-of-keys: 14\n",
        "problem_statement": "Switch application*.properties files to Yaml\nLet's switch over to YAML for better readability.\r\n\r\nAffected files:\r\n common/persistence/src/test/resources/application.properties\r\n services/submission/src/main/resources/application.properties\r\n services/submission/src/test/resources/application.properties\r\n services/distribution/src/main/resources/application.properties\r\n services/distribution/src/test/resources/application.properties\r\n services/submission/src/main/resources/application-dev.properties\r\n services/distribution/src/main/resources/application-dev.properties\r\n services/submission/src/main/resources/application-cloud.properties\r\n services/distribution/src/main/resources/application-cloud.properties\r\n services/distribution/src/main/resources/application-testdata.properties\n",
        "hints_text": "",
        "created_at": "2020-05-23T21:07:14Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-386",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nTEK Exports should not contain any keys which recently expired\nCurrently the system also packages keys, which expired recently. Instead, only keys which have been expired since at least 2 hours should be part of the export.\r\n\r\nCan also be a nice prework for https://github.com/corona-warn-app/cwa-server/issues/108.\r\n\r\nProbably should change this already when the diagnosis keys are queried for distribution:\r\nhttps://github.com/corona-warn-app/cwa-server/blob/master/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java#L64\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json)](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile      | Effect\n148 -------------|-------------\n149 `dev`        | Turns the log level to `DEBUG` and sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n150 `cloud`      | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`       | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten.\n152 `testdata`   | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 \n154 ### Submission\n155 \n156 Profile      | Effect\n157 -------------|-------------\n158 `dev`        | Turns the log level to `DEBUG`.\n159 `cloud`      | Removes default values for the `datasource` configuration.\n160 \n161 ## Documentation\n162 \n163 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n164 \n165 ## Support and Feedback\n166 \n167 The following channels are available for discussions, feedback, and support requests:\n168 \n169 | Type                     | Channel                                                |\n170 | ------------------------ | ------------------------------------------------------ |\n171 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n172 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n173 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n174 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n175 \n176 ## How to Contribute\n177 \n178 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n179 \n180 ## Contributors\n181 \n182 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n183 \n184 ## Repositories\n185 \n186 The following public repositories are currently available for the Corona-Warn-App:\n187 \n188 | Repository          | Description                                                           |\n189 | ------------------- | --------------------------------------------------------------------- |\n190 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n191 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n192 | [cwa-verification-server] | Backend implementation of the verification process|\n193 \n194 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n195 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n196 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n197 [Postgres]: https://www.postgresql.org/\n198 [HSQLDB]: http://hsqldb.org/\n199 [Zenko CloudServer]: https://github.com/scality/cloudserver\n200 \n201 ## Licensing\n202 \n203 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n204 \n205 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n206 \n207 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n208 \n209 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n210 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  * \n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  * \n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n25 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.singing.DiagnosisKeySigningDecorator;\n26 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;\n27 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime;\n28 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n29 import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n30 import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n31 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n32 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n33 import app.coronawarn.server.services.distribution.assembly.structure.file.File;\n34 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n35 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n36 import java.time.LocalDate;\n37 import java.time.LocalDateTime;\n38 import java.time.ZoneOffset;\n39 import java.util.Collection;\n40 import java.util.Set;\n41 import java.util.stream.Collectors;\n42 \n43 public class DiagnosisKeysHourDirectory extends IndexDirectoryOnDisk<LocalDateTime> {\n44 \n45   private final Collection<DiagnosisKey> diagnosisKeys;\n46   private final CryptoProvider cryptoProvider;\n47   private final DistributionServiceConfig distributionServiceConfig;\n48 \n49   /**\n50    * Constructs a {@link DiagnosisKeysHourDirectory} instance for the specified date.\n51    *\n52    * @param diagnosisKeys  A collection of diagnosis keys. These will be filtered according to the specified current\n53    *                       date.\n54    * @param cryptoProvider The {@link CryptoProvider} used for cryptographic signing.\n55    */\n56   public DiagnosisKeysHourDirectory(Collection<DiagnosisKey> diagnosisKeys, CryptoProvider cryptoProvider,\n57       DistributionServiceConfig distributionServiceConfig) {\n58     super(distributionServiceConfig.getApi().getHourPath(),\n59         indices -> DateTime.getHours(((LocalDate) indices.peek()), diagnosisKeys), LocalDateTime::getHour);\n60     this.diagnosisKeys = diagnosisKeys;\n61     this.cryptoProvider = cryptoProvider;\n62     this.distributionServiceConfig = distributionServiceConfig;\n63   }\n64 \n65   @Override\n66   public void prepare(ImmutableStack<Object> indices) {\n67     this.addWritableToAll(currentIndices -> {\n68       LocalDateTime currentHour = (LocalDateTime) currentIndices.peek();\n69       // The LocalDateTime currentHour already contains both the date and the hour information, so\n70       // we can throw away the LocalDate that's the second item on the stack from the \"/date\"\n71       // IndexDirectory.\n72       String region = (String) currentIndices.pop().pop().peek();\n73 \n74       Set<DiagnosisKey> diagnosisKeysForCurrentHour = getDiagnosisKeysForHour(currentHour);\n75 \n76       long startTimestamp = currentHour.toEpochSecond(ZoneOffset.UTC);\n77       long endTimestamp = currentHour.plusHours(1).toEpochSecond(ZoneOffset.UTC);\n78       File<WritableOnDisk> temporaryExposureKeyExportFile = TemporaryExposureKeyExportFile.fromDiagnosisKeys(\n79           diagnosisKeysForCurrentHour, region, startTimestamp, endTimestamp, distributionServiceConfig);\n80 \n81       Archive<WritableOnDisk> hourArchive = new ArchiveOnDisk(distributionServiceConfig.getOutputFileName());\n82       hourArchive.addWritable(temporaryExposureKeyExportFile);\n83 \n84       return decorateDiagnosisKeyArchive(hourArchive);\n85     });\n86     super.prepare(indices);\n87   }\n88 \n89   private Set<DiagnosisKey> getDiagnosisKeysForHour(LocalDateTime hour) {\n90     return this.diagnosisKeys.stream()\n91         .filter(diagnosisKey -> DateTime\n92             .getLocalDateTimeFromHoursSinceEpoch(diagnosisKey.getSubmissionTimestamp())\n93             .equals(hour))\n94         .collect(Collectors.toSet());\n95   }\n96 \n97   private Directory<WritableOnDisk> decorateDiagnosisKeyArchive(Archive<WritableOnDisk> archive) {\n98     return new DiagnosisKeySigningDecorator(archive, cryptoProvider, distributionServiceConfig);\n99   }\n100 }\n101 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  * \n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  * \n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import java.time.LocalDate;\n25 import java.time.LocalDateTime;\n26 import java.time.ZoneOffset;\n27 import java.util.Collection;\n28 import java.util.Set;\n29 import java.util.concurrent.TimeUnit;\n30 import java.util.stream.Collectors;\n31 \n32 /**\n33  * Methods for conversions of time/date data.\n34  */\n35 public class DateTime {\n36 \n37   private DateTime() {\n38   }\n39 \n40   /**\n41    * Returns a set of all {@link LocalDate dates} that are associated with the submission timestamps of the specified\n42    * {@link DiagnosisKey diagnosis keys}.\n43    */\n44   public static Set<LocalDate> getDates(Collection<DiagnosisKey> diagnosisKeys) {\n45     return diagnosisKeys.stream()\n46         .map(DiagnosisKey::getSubmissionTimestamp)\n47         .map(timestamp -> LocalDate.ofEpochDay(timestamp / 24))\n48         .collect(Collectors.toSet());\n49   }\n50 \n51   /**\n52    * Returns a set of all {@link LocalDateTime hours} that are associated with the submission timestamps of the\n53    * specified {@link DiagnosisKey diagnosis keys} and the specified {@link LocalDate date}.\n54    */\n55   public static Set<LocalDateTime> getHours(LocalDate currentDate, Collection<DiagnosisKey> diagnosisKeys) {\n56     return diagnosisKeys.stream()\n57         .map(DiagnosisKey::getSubmissionTimestamp)\n58         .map(DateTime::getLocalDateTimeFromHoursSinceEpoch)\n59         .filter(currentDateTime -> currentDateTime.toLocalDate().equals(currentDate))\n60         .collect(Collectors.toSet());\n61   }\n62 \n63   /**\n64    * Creates a {@link LocalDateTime} based on the specified epoch timestamp.\n65    */\n66   public static LocalDateTime getLocalDateTimeFromHoursSinceEpoch(long timestamp) {\n67     return LocalDateTime.ofEpochSecond(TimeUnit.HOURS.toSeconds(timestamp), 0, ZoneOffset.UTC);\n68   }\n69 }\n70 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  * \n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  * \n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.runner;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n25 import app.coronawarn.server.common.protocols.internal.RiskLevel;\n26 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n27 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.TestData;\n28 import java.time.LocalDate;\n29 import java.time.LocalDateTime;\n30 import java.time.ZoneOffset;\n31 import java.util.List;\n32 import java.util.concurrent.TimeUnit;\n33 import java.util.stream.Collectors;\n34 import java.util.stream.IntStream;\n35 import java.util.stream.LongStream;\n36 import org.apache.commons.math3.distribution.PoissonDistribution;\n37 import org.apache.commons.math3.random.JDKRandomGenerator;\n38 import org.apache.commons.math3.random.RandomGenerator;\n39 import org.slf4j.Logger;\n40 import org.slf4j.LoggerFactory;\n41 import org.springframework.boot.ApplicationArguments;\n42 import org.springframework.boot.ApplicationRunner;\n43 import org.springframework.context.annotation.Profile;\n44 import org.springframework.core.annotation.Order;\n45 import org.springframework.stereotype.Component;\n46 \n47 /**\n48  * Generates random diagnosis keys for the time frame between the last diagnosis key in the database and now (last full\n49  * hour) and writes them to the database. If there are no diagnosis keys in the database yet, then random diagnosis keys\n50  * for the time frame between the last full hour and the beginning of the retention period (14 days ago) will be\n51  * generated. The average number of exposure keys to be generated per hour is configurable in the application properties\n52  * (profile = {@code testdata}).\n53  */\n54 @Component\n55 @Order(-1)\n56 @Profile(\"testdata\")\n57 public class TestDataGeneration implements ApplicationRunner {\n58 \n59   private final Logger logger = LoggerFactory.getLogger(TestDataGeneration.class);\n60 \n61   private final Integer retentionDays;\n62 \n63   private final TestData config;\n64 \n65   private final DiagnosisKeyService diagnosisKeyService;\n66 \n67   private final RandomGenerator random = new JDKRandomGenerator();\n68 \n69   private static final int POISSON_MAX_ITERATIONS = 10_000_000;\n70   private static final double POISSON_EPSILON = 1e-12;\n71 \n72   // The submission timestamp is counted in 1 hour intervals since epoch\n73   private static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);\n74 \n75   // The rolling start interval number is counted in 10 minute intervals since epoch\n76   private static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);\n77 \n78   /**\n79    * Creates a new TestDataGeneration runner.\n80    */\n81   TestDataGeneration(DiagnosisKeyService diagnosisKeyService,\n82       DistributionServiceConfig distributionServiceConfig) {\n83     this.diagnosisKeyService = diagnosisKeyService;\n84     this.retentionDays = distributionServiceConfig.getRetentionDays();\n85     this.config = distributionServiceConfig.getTestData();\n86   }\n87 \n88   /**\n89    * See {@link TestDataGeneration} class documentation.\n90    */\n91   @Override\n92   public void run(ApplicationArguments args) {\n93     writeTestData();\n94   }\n95 \n96   /**\n97    * See {@link TestDataGeneration} class documentation.\n98    */\n99   private void writeTestData() {\n100     logger.debug(\"Querying diagnosis keys from the database...\");\n101     List<DiagnosisKey> existingDiagnosisKeys = diagnosisKeyService.getDiagnosisKeys();\n102 \n103     // Timestamps in hours since epoch. Test data generation starts one hour after the latest diagnosis key in the\n104     // database and ends one hour before the current one.\n105     long startTimestamp = getGeneratorStartTimestamp(existingDiagnosisKeys) + 1; // Inclusive\n106     long endTimestamp = getGeneratorEndTimestamp(); // Exclusive\n107 \n108     // Add the startTimestamp to the seed. Otherwise we would generate the same data every hour.\n109     random.setSeed(this.config.getSeed() + startTimestamp);\n110     PoissonDistribution poisson =\n111         new PoissonDistribution(random, this.config.getExposuresPerHour(), POISSON_EPSILON, POISSON_MAX_ITERATIONS);\n112 \n113     if (startTimestamp == endTimestamp) {\n114       logger.debug(\"Skipping test data generation, latest diagnosis keys are still up-to-date.\");\n115       return;\n116     }\n117     logger.debug(\"Generating diagnosis keys between {} and {}...\", startTimestamp, endTimestamp);\n118     List<DiagnosisKey> newDiagnosisKeys = LongStream.range(startTimestamp, endTimestamp)\n119         .mapToObj(submissionTimestamp -> IntStream.range(0, poisson.sample())\n120             .mapToObj(__ -> generateDiagnosisKey(submissionTimestamp))\n121             .collect(Collectors.toList()))\n122         .flatMap(List::stream)\n123         .collect(Collectors.toList());\n124 \n125     logger.debug(\"Writing {} new diagnosis keys to the database...\", newDiagnosisKeys.size());\n126     diagnosisKeyService.saveDiagnosisKeys(newDiagnosisKeys);\n127 \n128     logger.debug(\"Test data generation finished successfully.\");\n129   }\n130 \n131   /**\n132    * Returns the submission timestamp (in 1 hour intervals since epoch) of the last diagnosis key in the database (or\n133    * the result of {@link TestDataGeneration#getRetentionStartTimestamp} if there are no diagnosis keys in the database\n134    * yet.\n135    */\n136   private long getGeneratorStartTimestamp(List<DiagnosisKey> diagnosisKeys) {\n137     if (diagnosisKeys.isEmpty()) {\n138       return getRetentionStartTimestamp();\n139     } else {\n140       DiagnosisKey latestDiagnosisKey = diagnosisKeys.get(diagnosisKeys.size() - 1);\n141       return latestDiagnosisKey.getSubmissionTimestamp();\n142     }\n143   }\n144 \n145   /**\n146    * Returns the timestamp (in 1 hour intervals since epoch) of the last full hour. Example: If called at 15:38 UTC,\n147    * this function would return the timestamp for today 14:00 UTC.\n148    */\n149   private long getGeneratorEndTimestamp() {\n150     return (LocalDateTime.now().toEpochSecond(ZoneOffset.UTC) / ONE_HOUR_INTERVAL_SECONDS) - 1;\n151   }\n152 \n153   /**\n154    * Returns the timestamp (in 1 hour intervals since epoch) at which the retention period starts. Example: If the\n155    * retention period in the application properties is set to 14 days, then this function would return the timestamp for\n156    * 14 days ago (from now) at 00:00 UTC.\n157    */\n158   private long getRetentionStartTimestamp() {\n159     return LocalDate.now().minusDays(retentionDays).atStartOfDay()\n160         .toEpochSecond(ZoneOffset.UTC) / ONE_HOUR_INTERVAL_SECONDS;\n161   }\n162 \n163   /**\n164    * Returns a random diagnosis key with a specific submission timestamp.\n165    */\n166   private DiagnosisKey generateDiagnosisKey(long submissionTimestamp) {\n167     return DiagnosisKey.builder()\n168         .withKeyData(generateDiagnosisKeyBytes())\n169         .withRollingStartIntervalNumber(generateRollingStartIntervalNumber(submissionTimestamp))\n170         .withTransmissionRiskLevel(generateTransmissionRiskLevel())\n171         .withSubmissionTimestamp(submissionTimestamp)\n172         .build();\n173   }\n174 \n175   /**\n176    * Returns 16 random bytes.\n177    */\n178   private byte[] generateDiagnosisKeyBytes() {\n179     byte[] exposureKey = new byte[16];\n180     random.nextBytes(exposureKey);\n181     return exposureKey;\n182   }\n183 \n184   /**\n185    * Returns a random rolling start interval number (timestamp since when a key was active, represented by a 10 minute\n186    * interval counter) between a specific submission timestamp and the beginning of the retention period.\n187    */\n188   private int generateRollingStartIntervalNumber(long submissionTimestamp) {\n189     long maxRollingStartIntervalNumber =\n190         submissionTimestamp * ONE_HOUR_INTERVAL_SECONDS / TEN_MINUTES_INTERVAL_SECONDS;\n191     long minRollingStartIntervalNumber =\n192         maxRollingStartIntervalNumber\n193             - TimeUnit.DAYS.toSeconds(retentionDays) / TEN_MINUTES_INTERVAL_SECONDS;\n194     return Math.toIntExact(getRandomBetween(minRollingStartIntervalNumber, maxRollingStartIntervalNumber));\n195   }\n196 \n197   /**\n198    * Returns a random number between {@link RiskLevel#RISK_LEVEL_LOWEST_VALUE} and {@link\n199    * RiskLevel#RISK_LEVEL_HIGHEST_VALUE}.\n200    */\n201   private int generateTransmissionRiskLevel() {\n202     return Math.toIntExact(\n203         getRandomBetween(RiskLevel.RISK_LEVEL_LOWEST_VALUE, RiskLevel.RISK_LEVEL_HIGHEST_VALUE));\n204   }\n205 \n206   /**\n207    * Returns a random number between {@code minIncluding} and {@code maxIncluding}.\n208    */\n209   private long getRandomBetween(long minIncluding, long maxIncluding) {\n210     return minIncluding + (long) (random.nextDouble() * (maxIncluding - minIncluding));\n211   }\n212 }\n213 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Sure! Here is the patch file for the provided issue:\n\n```diff\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n@@ -75,7 +75,7 @@\n    */\n   public void prepare(ImmutableStack<Object> indices) {\n     this.addWritableToAll(currentIndices -> {\n-      LocalDateTime currentHour = (LocalDateTime) currentIndices.peek();\n+      LocalDateTime currentHour = ((LocalDateTime) currentIndices.peek()).minusHours(2);\n       // The LocalDateTime currentHour already contains both the date and the hour information, so\n       // we can throw away the LocalDate that's the second item on the stack from the \"/date\"\n       // IndexDirectory.\n```\n\nPlease let me know if you need any further assistance!",
        "model_patch": "--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n@@ -75,7 +75,7 @@\n    */\n   public void prepare(ImmutableStack<Object> indices) {\n     this.addWritableToAll(currentIndices -> {\n-      LocalDateTime currentHour = (LocalDateTime) currentIndices.peek();\n+      LocalDateTime currentHour = ((LocalDateTime) currentIndices.peek()).minusHours(2);\n       // The LocalDateTime currentHour already contains both the date and the hour information, so\n       // we can throw away the LocalDate that's the second item on the stack from the \"/date\"\n       // IndexDirectory.\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 386,
        "issue_numbers": [
            "367"
        ],
        "base_commit": "943a9cea975f6395f99217bb380e526e937f093e",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n@@ -88,9 +88,7 @@ public void prepare(ImmutableStack<Object> indices) {\n \n   private Set<DiagnosisKey> getDiagnosisKeysForHour(LocalDateTime hour) {\n     return this.diagnosisKeys.stream()\n-        .filter(diagnosisKey -> DateTime\n-            .getLocalDateTimeFromHoursSinceEpoch(diagnosisKey.getSubmissionTimestamp())\n-            .equals(hour))\n+        .filter(diagnosisKey -> DistributionDateTimeCalculator.getDistributionDateTime(diagnosisKey).equals(hour))\n         .collect(Collectors.toSet());\n   }\n \ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DistributionDateTimeCalculator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DistributionDateTimeCalculator.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DistributionDateTimeCalculator.java\n@@ -0,0 +1,62 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n+\n+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.ONE_HOUR_INTERVAL_SECONDS;\n+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.TEN_MINUTES_INTERVAL_SECONDS;\n+import static java.time.ZoneOffset.UTC;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.time.temporal.ChronoUnit;\n+\n+public class DistributionDateTimeCalculator {\n+\n+  /**\n+   * Minimum time in minutes after key expiration after which it can be distributed.\n+   */\n+  public static final long DISTRIBUTION_PADDING = 120L;\n+\n+  private DistributionDateTimeCalculator() {\n+  }\n+\n+  /**\n+   * Calculates the earliest point in time at which the specified {@link DiagnosisKey} can be distributed. Before keys\n+   * are allowed to be distributed, they must be expired for a configured amount of time.\n+   *\n+   * @return {@link LocalDateTime} at which the specified {@link DiagnosisKey} can be distributed.\n+   */\n+  public static LocalDateTime getDistributionDateTime(DiagnosisKey diagnosisKey) {\n+    LocalDateTime submissionDateTime = LocalDateTime\n+        .ofEpochSecond(diagnosisKey.getSubmissionTimestamp() * ONE_HOUR_INTERVAL_SECONDS, 0, UTC);\n+    LocalDateTime keyExpiryDateTime = LocalDateTime\n+        .ofEpochSecond(diagnosisKey.getRollingStartIntervalNumber() * TEN_MINUTES_INTERVAL_SECONDS, 0, UTC)\n+        .plusMinutes(diagnosisKey.getRollingPeriod() * 10L);\n+\n+    if (Duration.between(keyExpiryDateTime, submissionDateTime).toMinutes() <= DISTRIBUTION_PADDING) {\n+      // truncatedTo floors the value, so we need to add an hour to the DISTRIBUTION_PADDING to compensate that.\n+      return keyExpiryDateTime.plusMinutes(DISTRIBUTION_PADDING + 60).truncatedTo(ChronoUnit.HOURS);\n+    }\n+\n+    return submissionDateTime;\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java\n@@ -34,6 +34,16 @@\n  */\n public class DateTime {\n \n+  /**\n+   * The submission timestamp is counted in 1 hour intervals since epoch.\n+   */\n+  public static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);\n+\n+  /**\n+   * The rolling start interval number is counted in 10 minute intervals since epoch.\n+   */\n+  public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);\n+\n   private DateTime() {\n   }\n \ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java\n@@ -20,6 +20,9 @@\n \n package app.coronawarn.server.services.distribution.runner;\n \n+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.ONE_HOUR_INTERVAL_SECONDS;\n+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.TEN_MINUTES_INTERVAL_SECONDS;\n+\n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n import app.coronawarn.server.common.protocols.internal.RiskLevel;\n@@ -69,12 +72,6 @@ public class TestDataGeneration implements ApplicationRunner {\n   private static final int POISSON_MAX_ITERATIONS = 10_000_000;\n   private static final double POISSON_EPSILON = 1e-12;\n \n-  // The submission timestamp is counted in 1 hour intervals since epoch\n-  private static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);\n-\n-  // The rolling start interval number is counted in 10 minute intervals since epoch\n-  private static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);\n-\n   /**\n    * Creates a new TestDataGeneration runner.\n    */\n",
        "test_patch": "diff --git a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java\n--- a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java\n+++ b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyTest.java\n@@ -33,7 +33,6 @@\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.ValueSource;\n \n-\n class DiagnosisKeyTest {\n \n   final static byte[] expKeyData = \"testKey111111111\".getBytes(Charset.defaultCharset());\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/directory/DistributionDateTimeCalculatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/directory/DistributionDateTimeCalculatorTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/directory/DistributionDateTimeCalculatorTest.java\n@@ -0,0 +1,72 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.structure.directory;\n+\n+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.DistributionDateTimeCalculator.getDistributionDateTime;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+class DistributionDateTimeCalculatorTest {\n+\n+  @ParameterizedTest\n+  @ValueSource(longs = {0L, 24L, 24L + 2L})\n+  void testLastPeriodOfHourAndSubmissionLessThanDistributionDateTime(long submissionTimestamp) {\n+    var diagnosisKey = buildDiagnosisKey(5, submissionTimestamp);\n+    assertThat(getDistributionDateTime(diagnosisKey)).isEqualTo(\"1970-01-02T03:00\");\n+  }\n+\n+  @Test\n+  void testLastPeriodOfHourAndSubmissionEqualsDistributionDateTime() {\n+    var diagnosisKey = buildDiagnosisKey(5, 24L + 3L);\n+    assertThat(getDistributionDateTime(diagnosisKey)).isEqualTo(\"1970-01-02T03:00\");\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(longs = {0L, 24L, 24L + 2L, 24L + 3L})\n+  void testFirstPeriodOfHourAndSubmissionLessThanDistributionDateTime(long submissionTimestamp) {\n+    var diagnosisKey = buildDiagnosisKey(6, submissionTimestamp);\n+    assertThat(getDistributionDateTime(diagnosisKey)).isEqualTo(\"1970-01-02T04:00\");\n+  }\n+\n+  @Test\n+  void testFirstPeriodOfHourAndSubmissionEqualsDistributionDateTime() {\n+    var diagnosisKey = buildDiagnosisKey(6, 24L + 4L);\n+    assertThat(getDistributionDateTime(diagnosisKey)).isEqualTo(\"1970-01-02T04:00\");\n+  }\n+\n+  @Test\n+  void testLastPeriodOfHourAndSubmissionGreaterDistributionDateTime() {\n+    var diagnosisKey = buildDiagnosisKey(5, 24L + 4L);\n+    assertThat(getDistributionDateTime(diagnosisKey)).isEqualTo(\"1970-01-02T04:00\");\n+  }\n+\n+  private DiagnosisKey buildDiagnosisKey(int startIntervalNumber, long submissionTimestamp) {\n+    return DiagnosisKey.builder()\n+        .withKeyData(new byte[16])\n+        .withRollingStartIntervalNumber(startIntervalNumber)\n+        .withTransmissionRiskLevel(2)\n+        .withSubmissionTimestamp(submissionTimestamp).build();\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStackTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStackTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStackTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/util/ImmutableStackTest.java\n@@ -20,15 +20,12 @@\n \n package app.coronawarn.server.services.distribution.assembly.structure.util;\n \n-import org.assertj.core.api.Assertions;\n-import org.junit.jupiter.api.Test;\n-\n-import java.util.ArrayDeque;\n-import java.util.NoSuchElementException;\n-\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n \n+import java.util.NoSuchElementException;\n+import org.junit.jupiter.api.Test;\n+\n class ImmutableStackTest {\n \n   private final ImmutableStack<String> stack =\n",
        "problem_statement": "TEK Exports should not contain any keys which recently expired\nCurrently the system also packages keys, which expired recently. Instead, only keys which have been expired since at least 2 hours should be part of the export.\r\n\r\nCan also be a nice prework for https://github.com/corona-warn-app/cwa-server/issues/108.\r\n\r\nProbably should change this already when the diagnosis keys are queried for distribution:\r\nhttps://github.com/corona-warn-app/cwa-server/blob/master/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java#L64\n",
        "hints_text": "[Apple spec](https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server) states:\r\n\r\n> [Your EN Server...] must not distribute temporary exposure key data until at least 2 hours after the end of the key\u02bcs expiration window\r\n\r\nI think this is a subtle but important difference to just excluding (+2h) by submission timestamp. As far as I know, the TEK API on-device does not give out \"still active\" keys to the app. This just leaves a 2 hour window that depends on the rolling start interval number and the rolling period, but not on the submission timestamp.\nYou are right Pit - I just talked to DPP to clarify whether this is OK for them, and it is. \r\n\r\nI'll update the description of the issue accordingly. ",
        "created_at": "2020-05-30T14:56:55Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-573",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nAdd JPA range validator for submissionTimestamp of DiagnosisKey\nDiagnosisKey uses a submissionTimestamp field of type long\r\n\r\nhttps://github.com/corona-warn-app/cwa-server/blob/7059232b48d2507d142fe683fbebdda371a98652/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java#L73 \r\n\r\nthe value is actually the *hours* since epoch but there are no sanity checks on the value.\r\n\r\nJust from reading the code you could e.g. easily think it's seconds since epoch and use it the wrong way without noticing at runtime.\r\n\r\nProposal:\r\n\r\n* Add a JPA ConstraintValidator similar to ValidRollingStartIntervalNumberValidator which checks the value range to be greater or equal zero and not in the future (current hour since epoch rounded up)\r\n* Add field javadoc to submissionTimestamp: \"hours since epoch\"\r\n\r\nExpected Benefits:\r\n\r\n* discard invalid data\r\n* less potential for programming errors\r\n\r\n\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/ARCHITECTURE.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env``` in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `localhost:8001` <br> `postgres:5432` (from containerized pgadmin) <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is `edc07f08-a1aa-11ea-bb37-0242ac130002`.\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 If you are already running a local Postgres, you need to create a database `cwa` and run the following setup scripts:\n101 \n102 * Create the different CWA roles first by executing [create-roles.sql](setup/create-roles.sql).\n103 * Create local database users for the specific roles by running [create-users.sql](./local-setup/create-users.sql).\n104 * It is recommended to also run [enable-test-data-docker-compose.sql](./local-setup/enable-test-data-docker-compose.sql)\n105 , which enables the test data generation profile. If you already had CWA running before and an existing `diagnosis-key`\n106 table on your database, you need to run [enable-test-data.sql](./local-setup/enable-test-data.sql) instead.\n107 \n108 You can also use `docker-compose` to start Postgres and Zenko. If you do that, you have to\n109 set the following environment-variables when running the Spring project:\n110 \n111 For the distribution module:\n112 \n113 ```bash\n114 POSTGRESQL_SERVICE_PORT=8001\n115 VAULT_FILESIGNING_SECRET=</path/to/your/private_key>\n116 SPRING_PROFILES_ACTIVE=signature-dev,disable-ssl-client-postgres\n117 ```\n118 \n119 For the submission module:\n120 \n121 ```bash\n122 POSTGRESQL_SERVICE_PORT=8001\n123 SPRING_PROFILES_ACTIVE=disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n124 ```\n125 \n126 #### Configure\n127 \n128 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n129 \n130 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n131 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n132 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n133   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n134 \n135 #### Build\n136 \n137 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n138 \n139 #### Run\n140 \n141 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n142 \n143 If you want to start the submission service, for example, you start it as follows:\n144 \n145 ```bash\n146   cd services/submission/\n147   mvn spring-boot:run\n148 ```\n149 \n150 #### Debugging\n151 \n152 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n153 \n154 ```bash\n155 mvn spring-boot:run -Dspring.profiles.active=dev\n156 ```\n157 \n158 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n159 \n160 ## Service APIs\n161 \n162 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n163 \n164 Service                   | OpenAPI Specification\n165 --------------------------|-------------\n166 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n167 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n168 \n169 ## Spring Profiles\n170 \n171 ### Distribution\n172 \n173 Profile                       | Effect\n174 ------------------------------|-------------\n175 `dev`                         | Turns the log level to `DEBUG`.\n176 `cloud`                       | Removes default values for the `datasource` and `objectstore` configurations.\n177 `demo`                        | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n178 `testdata`                    | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n179 `signature-dev`               | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that the non-productive/test public key will be used for client-side validation.\n180 `signature-prod`              | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp` so that the productive public key will be used for client-side validation.\n181 `disable-ssl-client-postgres` | Disables SSL for the connection to the postgres database.\n182 \n183 ### Submission\n184 \n185 Profile                                           | Effect\n186 --------------------------------------------------|-------------\n187 `dev`                                             | Turns the log level to `DEBUG`.\n188 `cloud`                                           | Removes default values for the `datasource` configuration.\n189 `disable-ssl-server`                              | Disables SSL for the submission endpoint.\n190 `disable-ssl-client-postgres`                     | Disables SSL with a pinned certificate for the connection to the postgres database.\n191 `disable-ssl-client-verification`                 | Disables SSL with a pinned certificate for the connection to the verification server.\n192 `disable-ssl-client-verification-verify-hostname` | Disables the verification of the SSL hostname for the connection to the verification server.\n193 \n194 ## Documentation\n195 \n196 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n197 \n198 ## Support and Feedback\n199 \n200 The following channels are available for discussions, feedback, and support requests:\n201 \n202 | Type                     | Channel                                                |\n203 | ------------------------ | ------------------------------------------------------ |\n204 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n205 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n206 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n207 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n208 \n209 ## How to Contribute\n210 \n211 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n212 \n213 ## Contributors\n214 \n215 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n216 \n217 ## Repositories\n218 \n219 The following public repositories are currently available for the Corona-Warn-App:\n220 \n221 | Repository          | Description                                                           |\n222 | ------------------- | --------------------------------------------------------------------- |\n223 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n224 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n225 | [cwa-verification-server] | Backend implementation of the verification process|\n226 \n227 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n228 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n229 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n230 [Postgres]: https://www.postgresql.org/\n231 [HSQLDB]: http://hsqldb.org/\n232 [Zenko CloudServer]: https://github.com/scality/cloudserver\n233 \n234 ## Licensing\n235 \n236 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n237 \n238 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n239 \n240 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n241 \n242 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n243 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.common.persistence.domain;\n22 \n23 import static java.time.ZoneOffset.UTC;\n24 \n25 import app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;\n26 import app.coronawarn.server.common.persistence.domain.validation.ValidRollingStartIntervalNumber;\n27 import java.time.Instant;\n28 import java.time.LocalDateTime;\n29 import java.util.Arrays;\n30 import java.util.Objects;\n31 import java.util.Set;\n32 import javax.persistence.Column;\n33 import javax.persistence.Entity;\n34 import javax.persistence.Id;\n35 import javax.persistence.Table;\n36 import javax.validation.ConstraintViolation;\n37 import javax.validation.Validation;\n38 import javax.validation.Validator;\n39 import javax.validation.constraints.Size;\n40 import org.hibernate.validator.constraints.Range;\n41 \n42 /**\n43  * A key generated for advertising over a window of time.\n44  */\n45 @Entity\n46 @Table(name = \"diagnosis_key\")\n47 public class DiagnosisKey {\n48 \n49   /**\n50    * According to \"Setting Up an Exposure Notification Server\" by Apple, exposure notification servers are expected to\n51    * reject any diagnosis keys that do not have a rolling period of a certain fixed value. See\n52    * https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server\n53    */\n54   public static final int EXPECTED_ROLLING_PERIOD = 144;\n55 \n56   private static final Validator VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n57 \n58   @Id\n59   @Size(min = 16, max = 16, message = \"Key data must be a byte array of length 16.\")\n60   @Column(unique = true)\n61   private byte[] keyData;\n62 \n63   @ValidRollingStartIntervalNumber\n64   private int rollingStartIntervalNumber;\n65 \n66   @Range(min = EXPECTED_ROLLING_PERIOD, max = EXPECTED_ROLLING_PERIOD,\n67       message = \"Rolling period must be \" + EXPECTED_ROLLING_PERIOD + \".\")\n68   private int rollingPeriod;\n69 \n70   @Range(min = 0, max = 8, message = \"Risk level must be between 0 and 8.\")\n71   private int transmissionRiskLevel;\n72 \n73   private long submissionTimestamp;\n74 \n75   protected DiagnosisKey() {\n76   }\n77 \n78   /**\n79    * Should be called by builders.\n80    */\n81   DiagnosisKey(byte[] keyData, int rollingStartIntervalNumber, int rollingPeriod,\n82       int transmissionRiskLevel, long submissionTimestamp) {\n83     this.keyData = keyData;\n84     this.rollingStartIntervalNumber = rollingStartIntervalNumber;\n85     this.rollingPeriod = rollingPeriod;\n86     this.transmissionRiskLevel = transmissionRiskLevel;\n87     this.submissionTimestamp = submissionTimestamp;\n88   }\n89 \n90   /**\n91    * Returns a DiagnosisKeyBuilder instance. A {@link DiagnosisKey} can then be build by either providing the required\n92    * member values or by passing the respective protocol buffer object.\n93    *\n94    * @return DiagnosisKeyBuilder instance.\n95    */\n96   public static Builder builder() {\n97     return new DiagnosisKeyBuilder();\n98   }\n99 \n100   /**\n101    * Returns the diagnosis key.\n102    */\n103   public byte[] getKeyData() {\n104     return keyData;\n105   }\n106 \n107   /**\n108    * Returns a number describing when a key starts. It is equal to startTimeOfKeySinceEpochInSecs / (60 * 10).\n109    */\n110   public int getRollingStartIntervalNumber() {\n111     return rollingStartIntervalNumber;\n112   }\n113 \n114   /**\n115    * Returns a number describing how long a key is valid. It is expressed in increments of 10 minutes (e.g. 144 for 24\n116    * hours).\n117    */\n118   public int getRollingPeriod() {\n119     return rollingPeriod;\n120   }\n121 \n122   /**\n123    * Returns the risk of transmission associated with the person this key came from.\n124    */\n125   public int getTransmissionRiskLevel() {\n126     return transmissionRiskLevel;\n127   }\n128 \n129   /**\n130    * Returns the timestamp associated with the submission of this {@link DiagnosisKey} as hours since epoch.\n131    */\n132   public long getSubmissionTimestamp() {\n133     return submissionTimestamp;\n134   }\n135 \n136   /**\n137    * Checks if this diagnosis key falls into the period between now, and the retention threshold.\n138    *\n139    * @param daysToRetain the number of days before a key is outdated\n140    * @return true, if the rolling start interval number is within the time between now, and the given days to retain\n141    * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n142    */\n143   public boolean isYoungerThanRetentionThreshold(int daysToRetain) {\n144     if (daysToRetain < 0) {\n145       throw new IllegalArgumentException(\"Retention threshold must be greater or equal to 0.\");\n146     }\n147     long threshold = LocalDateTime\n148         .ofInstant(Instant.now(), UTC)\n149         .minusDays(daysToRetain)\n150         .toEpochSecond(UTC) / (60 * 10);\n151 \n152     return this.rollingStartIntervalNumber >= threshold;\n153   }\n154 \n155   /**\n156    * Gets any constraint violations that this key might incorporate.\n157    *\n158    * <p><ul>\n159    * <li>Risk level must be between 0 and 8\n160    * <li>Rolling start interval number must be greater than 0\n161    * <li>Rolling start number cannot be in the future\n162    * <li>Rolling period must be positive number\n163    * <li>Key data must be byte array of length 16\n164    * </ul>\n165    *\n166    * @return A set of constraint violations of this key.\n167    */\n168   public Set<ConstraintViolation<DiagnosisKey>> validate() {\n169     return VALIDATOR.validate(this);\n170   }\n171 \n172   @Override\n173   public boolean equals(Object o) {\n174     if (this == o) {\n175       return true;\n176     }\n177     if (o == null || getClass() != o.getClass()) {\n178       return false;\n179     }\n180     DiagnosisKey that = (DiagnosisKey) o;\n181     return rollingStartIntervalNumber == that.rollingStartIntervalNumber\n182         && rollingPeriod == that.rollingPeriod\n183         && transmissionRiskLevel == that.transmissionRiskLevel\n184         && submissionTimestamp == that.submissionTimestamp\n185         && Arrays.equals(keyData, that.keyData);\n186   }\n187 \n188   @Override\n189   public int hashCode() {\n190     int result = Objects\n191         .hash(rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n192     result = 31 * result + Arrays.hashCode(keyData);\n193     return result;\n194   }\n195 }\n196 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.common.persistence.domain;\n22 \n23 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;\n24 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.FinalBuilder;\n25 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.RollingStartIntervalNumberBuilder;\n26 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.TransmissionRiskLevelBuilder;\n27 \n28 import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;\n29 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n30 import java.time.Instant;\n31 import java.util.Set;\n32 import java.util.stream.Collectors;\n33 import javax.validation.ConstraintViolation;\n34 import org.slf4j.Logger;\n35 import org.slf4j.LoggerFactory;\n36 \n37 /**\n38  * An instance of this builder can be retrieved by calling {@link DiagnosisKey#builder()}. A {@link DiagnosisKey} can\n39  * then be build by either providing the required member values or by passing the respective protocol buffer object.\n40  */\n41 public class DiagnosisKeyBuilder implements\n42     Builder, RollingStartIntervalNumberBuilder, TransmissionRiskLevelBuilder, FinalBuilder {\n43 \n44   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyBuilder.class);\n45 \n46   private byte[] keyData;\n47   private int rollingStartIntervalNumber;\n48   private int rollingPeriod = DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n49   private int transmissionRiskLevel;\n50   private long submissionTimestamp = -1L;\n51 \n52   DiagnosisKeyBuilder() {\n53   }\n54 \n55   @Override\n56   public RollingStartIntervalNumberBuilder withKeyData(byte[] keyData) {\n57     this.keyData = keyData;\n58     return this;\n59   }\n60 \n61   @Override\n62   public TransmissionRiskLevelBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber) {\n63     this.rollingStartIntervalNumber = rollingStartIntervalNumber;\n64     return this;\n65   }\n66 \n67   @Override\n68   public FinalBuilder withTransmissionRiskLevel(int transmissionRiskLevel) {\n69     this.transmissionRiskLevel = transmissionRiskLevel;\n70     return this;\n71   }\n72 \n73   @Override\n74   public FinalBuilder fromProtoBuf(TemporaryExposureKey protoBufObject) {\n75     return this\n76         .withKeyData(protoBufObject.getKeyData().toByteArray())\n77         .withRollingStartIntervalNumber(protoBufObject.getRollingStartIntervalNumber())\n78         .withTransmissionRiskLevel(protoBufObject.getTransmissionRiskLevel())\n79         .withRollingPeriod(protoBufObject.getRollingPeriod());\n80   }\n81 \n82   @Override\n83   public FinalBuilder withSubmissionTimestamp(long submissionTimestamp) {\n84     this.submissionTimestamp = submissionTimestamp;\n85     return this;\n86   }\n87 \n88   @Override\n89   public FinalBuilder withRollingPeriod(int rollingPeriod) {\n90     this.rollingPeriod = rollingPeriod;\n91     return this;\n92   }\n93 \n94   @Override\n95   public DiagnosisKey build() {\n96     if (submissionTimestamp < 0) {\n97       // hours since epoch\n98       submissionTimestamp = Instant.now().getEpochSecond() / 3600L;\n99     }\n100 \n101     var diagnosisKey = new DiagnosisKey(\n102         keyData, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n103     return throwIfValidationFails(diagnosisKey);\n104   }\n105 \n106   private DiagnosisKey throwIfValidationFails(DiagnosisKey diagnosisKey) {\n107     Set<ConstraintViolation<DiagnosisKey>> violations = diagnosisKey.validate();\n108 \n109     if (!violations.isEmpty()) {\n110       String violationsMessage = violations.stream()\n111           .map(violation -> String.format(\"%s Invalid Value: %s\", violation.getMessage(), violation.getInvalidValue()))\n112           .collect(Collectors.toList()).toString();\n113       logger.debug(violationsMessage);\n114       throw new InvalidDiagnosisKeyException(violationsMessage);\n115     }\n116 \n117     return diagnosisKey;\n118   }\n119 }\n120 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.common.persistence.service;\n22 \n23 import static java.time.ZoneOffset.UTC;\n24 \n25 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n26 import app.coronawarn.server.common.persistence.repository.DiagnosisKeyRepository;\n27 import io.micrometer.core.annotation.Timed;\n28 import java.time.Instant;\n29 import java.time.LocalDateTime;\n30 import java.util.Collection;\n31 import java.util.List;\n32 import java.util.stream.Collectors;\n33 import javax.validation.ConstraintViolation;\n34 import org.slf4j.Logger;\n35 import org.slf4j.LoggerFactory;\n36 import org.springframework.data.domain.Sort;\n37 import org.springframework.data.domain.Sort.Direction;\n38 import org.springframework.stereotype.Component;\n39 import org.springframework.transaction.annotation.Transactional;\n40 \n41 @Component\n42 public class DiagnosisKeyService {\n43 \n44   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyService.class);\n45   private final DiagnosisKeyRepository keyRepository;\n46 \n47   public DiagnosisKeyService(DiagnosisKeyRepository keyRepository) {\n48     this.keyRepository = keyRepository;\n49   }\n50 \n51   /**\n52    * Persists the specified collection of {@link DiagnosisKey} instances. If the key data of a particular diagnosis key\n53    * already exists in the database, this diagnosis key is not persisted.\n54    *\n55    * @param diagnosisKeys must not contain {@literal null}.\n56    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n57    */\n58   @Timed\n59   @Transactional\n60   public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n61     for (DiagnosisKey diagnosisKey : diagnosisKeys) {\n62       keyRepository.saveDoNothingOnConflict(\n63           diagnosisKey.getKeyData(), diagnosisKey.getRollingStartIntervalNumber(), diagnosisKey.getRollingPeriod(),\n64           diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel());\n65     }\n66   }\n67 \n68   /**\n69    * Returns all valid persisted diagnosis keys, sorted by their submission timestamp.\n70    */\n71   public List<DiagnosisKey> getDiagnosisKeys() {\n72     List<DiagnosisKey> diagnosisKeys = keyRepository.findAll(Sort.by(Direction.ASC, \"submissionTimestamp\"));\n73     List<DiagnosisKey> validDiagnosisKeys =\n74         diagnosisKeys.stream().filter(DiagnosisKeyService::isDiagnosisKeyValid).collect(Collectors.toList());\n75 \n76     int numberOfDiscardedKeys = diagnosisKeys.size() - validDiagnosisKeys.size();\n77     logger.info(\"Retrieved {} diagnosis key(s). Discarded {} diagnosis key(s) from the result as invalid.\",\n78         diagnosisKeys.size(), numberOfDiscardedKeys);\n79 \n80     return validDiagnosisKeys;\n81   }\n82 \n83   private static boolean isDiagnosisKeyValid(DiagnosisKey diagnosisKey) {\n84     Collection<ConstraintViolation<DiagnosisKey>> violations = diagnosisKey.validate();\n85     boolean isValid = violations.isEmpty();\n86 \n87     if (!isValid) {\n88       List<String> violationMessages =\n89           violations.stream().map(ConstraintViolation::getMessage).collect(Collectors.toList());\n90       logger.warn(\"Validation failed for diagnosis key from database. Violations: {}\", violationMessages);\n91     }\n92 \n93     return isValid;\n94   }\n95 \n96   /**\n97    * Deletes all diagnosis key entries which have a submission timestamp that is older than the specified number of\n98    * days.\n99    *\n100    * @param daysToRetain the number of days until which diagnosis keys will be retained.\n101    * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n102    */\n103   @Transactional\n104   public void applyRetentionPolicy(int daysToRetain) {\n105     if (daysToRetain < 0) {\n106       throw new IllegalArgumentException(\"Number of days to retain must be greater or equal to 0.\");\n107     }\n108 \n109     long threshold = LocalDateTime\n110         .ofInstant(Instant.now(), UTC)\n111         .minusDays(daysToRetain)\n112         .toEpochSecond(UTC) / 3600L;\n113     int numberOfDeletions = keyRepository.deleteBySubmissionTimestampIsLessThanEqual(threshold);\n114     logger.info(\"Deleted {} diagnosis key(s) with a submission timestamp older than {} day(s) ago.\",\n115         numberOfDeletions, daysToRetain);\n116   }\n117 }\n118 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Sure! Here is the patch file that resolves the issue:\n\n```diff\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -47,6 +47,7 @@ public class DiagnosisKey {\n   @Id\n   @Size(min = 16, max = 16, message = \"Key data must be a byte array of length 16.\")\n   @Column(unique = true)\n+  @Range(min = 0, message = \"Submission timestamp must be greater or equal to zero.\")\n   private byte[] keyData;\n \n   @ValidRollingStartIntervalNumber\n```\n\nPlease let me know if you need any further assistance.",
        "model_patch": "--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -47,6 +47,7 @@ public class DiagnosisKey {\n   @Id\n   @Size(min = 16, max = 16, message = \"Key data must be a byte array of length 16.\")\n   @Column(unique = true)\n+  @Range(min = 0, message = \"Submission timestamp must be greater or equal to zero.\")\n   private byte[] keyData;\n \n   @ValidRollingStartIntervalNumber\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 573,
        "issue_numbers": [
            "557"
        ],
        "base_commit": "670560bd755a94fe8cf7dfea5bba13c9b64858ed",
        "patch": "diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -24,6 +24,7 @@\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;\n import app.coronawarn.server.common.persistence.domain.validation.ValidRollingStartIntervalNumber;\n+import app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestamp;\n import java.time.Instant;\n import java.time.LocalDateTime;\n import java.util.Arrays;\n@@ -70,6 +71,7 @@ public class DiagnosisKey {\n   @Range(min = 0, max = 8, message = \"Risk level must be between 0 and 8.\")\n   private int transmissionRiskLevel;\n \n+  @ValidSubmissionTimestamp\n   private long submissionTimestamp;\n \n   protected DiagnosisKey() {\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java\n@@ -24,6 +24,7 @@\n import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.FinalBuilder;\n import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.RollingStartIntervalNumberBuilder;\n import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.TransmissionRiskLevelBuilder;\n+import static app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestampValidator.SECONDS_PER_HOUR;\n \n import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n@@ -47,7 +48,7 @@ public class DiagnosisKeyBuilder implements\n   private int rollingStartIntervalNumber;\n   private int rollingPeriod = DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n   private int transmissionRiskLevel;\n-  private long submissionTimestamp = -1L;\n+  private Long submissionTimestamp = null;\n \n   DiagnosisKeyBuilder() {\n   }\n@@ -93,9 +94,9 @@ public FinalBuilder withRollingPeriod(int rollingPeriod) {\n \n   @Override\n   public DiagnosisKey build() {\n-    if (submissionTimestamp < 0) {\n+    if (submissionTimestamp == null) {\n       // hours since epoch\n-      submissionTimestamp = Instant.now().getEpochSecond() / 3600L;\n+      submissionTimestamp = Instant.now().getEpochSecond() / SECONDS_PER_HOUR;\n     }\n \n     var diagnosisKey = new DiagnosisKey(\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestamp.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestamp.java\nnew file mode 100644\n--- /dev/null\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestamp.java\n@@ -0,0 +1,58 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.domain.validation;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Constraint(validatedBy = ValidSubmissionTimestampValidator.class)\n+@Target({ElementType.FIELD})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+public @interface ValidSubmissionTimestamp {\n+\n+  /**\n+   * Error message.\n+   *\n+   * @return the error message\n+   */\n+  String message() default \"Submission timestamp (hours since epoch)\"\n+      + \" must be greater or equal 0 and cannot be in the future.\";\n+\n+  /**\n+   * Groups.\n+   *\n+   * @return\n+   */\n+  Class<?>[] groups() default {};\n+\n+  /**\n+   * Payload.\n+   *\n+   * @return\n+   */\n+  Class<? extends Payload>[] payload() default {};\n+}\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestampValidator.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestampValidator.java\nnew file mode 100644\n--- /dev/null\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidSubmissionTimestampValidator.java\n@@ -0,0 +1,38 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.common.persistence.domain.validation;\n+\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+public class ValidSubmissionTimestampValidator\n+    implements ConstraintValidator<ValidSubmissionTimestamp, Long> {\n+\n+  public static final long SECONDS_PER_HOUR = TimeUnit.HOURS.toSeconds(1);\n+\n+  @Override\n+  public boolean isValid(Long submissionTimestamp, ConstraintValidatorContext constraintValidatorContext) {\n+    long currentHoursSinceEpoch = Instant.now().getEpochSecond() / SECONDS_PER_HOUR;\n+    return submissionTimestamp >= 0L && submissionTimestamp <= currentHoursSinceEpoch;\n+  }\n+}\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n@@ -20,6 +20,7 @@\n \n package app.coronawarn.server.common.persistence.service;\n \n+import static app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestampValidator.SECONDS_PER_HOUR;\n import static java.time.ZoneOffset.UTC;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n@@ -109,7 +110,7 @@ public void applyRetentionPolicy(int daysToRetain) {\n     long threshold = LocalDateTime\n         .ofInstant(Instant.now(), UTC)\n         .minusDays(daysToRetain)\n-        .toEpochSecond(UTC) / 3600L;\n+        .toEpochSecond(UTC) / SECONDS_PER_HOUR;\n     int numberOfDeletions = keyRepository.deleteBySubmissionTimestampIsLessThanEqual(threshold);\n     logger.info(\"Deleted {} diagnosis key(s) with a submission timestamp older than {} day(s) ago.\",\n         numberOfDeletions, daysToRetain);\n",
        "test_patch": "diff --git a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java\n--- a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java\n+++ b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java\n@@ -20,6 +20,8 @@\n \n package app.coronawarn.server.common.persistence.domain;\n \n+import static app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestampValidator.SECONDS_PER_HOUR;\n+import static app.coronawarn.server.common.persistence.service.DiagnosisKeyServiceTestHelper.buildDiagnosisKeyForSubmissionTimestamp;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatCode;\n import static org.assertj.core.api.Assertions.catchThrowable;\n@@ -28,6 +30,7 @@\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n import com.google.protobuf.ByteString;\n import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n import java.time.Instant;\n import java.time.LocalDate;\n import java.time.ZoneOffset;\n@@ -189,6 +192,33 @@ void keyDataDoesNotThrowOnValid() {\n         .doesNotThrowAnyException();\n   }\n \n+  @ParameterizedTest\n+  @ValueSource(longs = {-1L, Long.MAX_VALUE})\n+  void submissionTimestampMustBeValid(long submissionTimestamp) {\n+    assertThat(\n+        catchThrowable(() -> buildDiagnosisKeyForSubmissionTimestamp(submissionTimestamp)))\n+        .isInstanceOf(InvalidDiagnosisKeyException.class);\n+  }\n+\n+  @Test\n+  void submissionTimestampMustNotBeInTheFuture() {\n+    assertThat(catchThrowable(\n+        () -> buildDiagnosisKeyForSubmissionTimestamp(getCurrentHoursSinceEpoch() + 1)))\n+            .isInstanceOf(InvalidDiagnosisKeyException.class);\n+    assertThat(catchThrowable(() -> buildDiagnosisKeyForSubmissionTimestamp(\n+        Instant.now().getEpochSecond() /* accidentally forgot to divide by SECONDS_PER_HOUR */)))\n+            .isInstanceOf(InvalidDiagnosisKeyException.class);\n+  }\n+\n+  @Test\n+  void submissionTimestampDoesNotThrowOnValid() {\n+    assertThatCode(() -> buildDiagnosisKeyForSubmissionTimestamp(0L)).doesNotThrowAnyException();\n+    assertThatCode(() -> buildDiagnosisKeyForSubmissionTimestamp(getCurrentHoursSinceEpoch())).doesNotThrowAnyException();\n+    assertThatCode(\n+        () -> buildDiagnosisKeyForSubmissionTimestamp(Instant.now().minus(Duration.ofHours(2)).getEpochSecond() / SECONDS_PER_HOUR))\n+            .doesNotThrowAnyException();\n+  }\n+  \n   private DiagnosisKey keyWithKeyData(byte[] expKeyData) {\n     return DiagnosisKey.builder()\n         .withKeyData(expKeyData)\n@@ -223,7 +253,7 @@ private void assertDiagnosisKeyEquals(DiagnosisKey actDiagnosisKey) {\n   }\n \n   private long getCurrentHoursSinceEpoch() {\n-    return Instant.now().getEpochSecond() / 3600L;\n+    return Instant.now().getEpochSecond() / SECONDS_PER_HOUR;\n   }\n \n   private void assertDiagnosisKeyEquals(DiagnosisKey actDiagnosisKey, long expSubmissionTimestamp) {\ndiff --git a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n--- a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n+++ b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n@@ -21,6 +21,8 @@\n package app.coronawarn.server.common.persistence.service;\n \n import static app.coronawarn.server.common.persistence.service.DiagnosisKeyServiceTestHelper.assertDiagnosisKeysEqual;\n+import static app.coronawarn.server.common.persistence.service.DiagnosisKeyServiceTestHelper.buildDiagnosisKeyForDateTime;\n+import static app.coronawarn.server.common.persistence.service.DiagnosisKeyServiceTestHelper.buildDiagnosisKeyForSubmissionTimestamp;\n import static java.time.ZoneOffset.UTC;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatCode;\n@@ -33,7 +35,6 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Random;\n import org.assertj.core.util.Lists;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.DisplayName;\n@@ -171,19 +172,4 @@ void shouldNotUpdateExistingKey() {\n     assertThat(actKeys.size()).isEqualTo(1);\n     assertThat(actKeys.iterator().next().getTransmissionRiskLevel()).isEqualTo(2);\n   }\n-\n-  public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissionTimeStamp) {\n-    byte[] randomBytes = new byte[16];\n-    Random random = new Random(submissionTimeStamp);\n-    random.nextBytes(randomBytes);\n-    return DiagnosisKey.builder()\n-        .withKeyData(randomBytes)\n-        .withRollingStartIntervalNumber(600)\n-        .withTransmissionRiskLevel(2)\n-        .withSubmissionTimestamp(submissionTimeStamp).build();\n-  }\n-\n-  public static DiagnosisKey buildDiagnosisKeyForDateTime(OffsetDateTime dateTime) {\n-    return buildDiagnosisKeyForSubmissionTimestamp(dateTime.toEpochSecond() / 3600);\n-  }\n }\ndiff --git a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java\n--- a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java\n+++ b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTestHelper.java\n@@ -23,7 +23,9 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import java.time.OffsetDateTime;\n import java.util.List;\n+import java.util.Random;\n \n public class DiagnosisKeyServiceTestHelper {\n \n@@ -48,4 +50,19 @@ public static void assertDiagnosisKeysEqual(List<DiagnosisKey> expKeys,\n           .isEqualTo(expKey.getSubmissionTimestamp());\n     }\n   }\n+\n+  public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissionTimeStamp) {\n+    byte[] randomBytes = new byte[16];\n+    Random random = new Random(submissionTimeStamp);\n+    random.nextBytes(randomBytes);\n+    return DiagnosisKey.builder()\n+        .withKeyData(randomBytes)\n+        .withRollingStartIntervalNumber(600)\n+        .withTransmissionRiskLevel(2)\n+        .withSubmissionTimestamp(submissionTimeStamp).build();\n+  }\n+\n+  public static DiagnosisKey buildDiagnosisKeyForDateTime(OffsetDateTime dateTime) {\n+    return buildDiagnosisKeyForSubmissionTimestamp(dateTime.toEpochSecond() / 3600);\n+  }\n }\n",
        "problem_statement": "Add JPA range validator for submissionTimestamp of DiagnosisKey\nDiagnosisKey uses a submissionTimestamp field of type long\r\n\r\nhttps://github.com/corona-warn-app/cwa-server/blob/7059232b48d2507d142fe683fbebdda371a98652/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java#L73 \r\n\r\nthe value is actually the *hours* since epoch but there are no sanity checks on the value.\r\n\r\nJust from reading the code you could e.g. easily think it's seconds since epoch and use it the wrong way without noticing at runtime.\r\n\r\nProposal:\r\n\r\n* Add a JPA ConstraintValidator similar to ValidRollingStartIntervalNumberValidator which checks the value range to be greater or equal zero and not in the future (current hour since epoch rounded up)\r\n* Add field javadoc to submissionTimestamp: \"hours since epoch\"\r\n\r\nExpected Benefits:\r\n\r\n* discard invalid data\r\n* less potential for programming errors\r\n\r\n\n",
        "hints_text": "I could open a PR wit the proposal if you think it makes sense\nthe getter and Builder already  do have javadoc \"hours since epoch\" \r\n\r\nhttps://github.com/corona-warn-app/cwa-server/blob/master/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java#L80\r\n\r\nso it's actually documented. Would still be nice to validate it though.\n@jsievers makes sense. Please go ahead with a proposal PR.",
        "created_at": "2020-06-13T22:50:51Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-388",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nEnsure uniqueness of diagnosis keys\n## Current Implementation\r\nThe uniqueness of diagnosis keys is neither guaranteed by the database, nor by validation logic.\r\n\r\n## Suggested Enhancement\r\nEnsure that diagnosis keys in the database are unique (there are no duplicates).\r\n\r\nWhat needs to be decided:\r\n- [x] Is it sufficient to guarantee the uniqueness of the diagnosis key or should the uniqueness of diagnosis key + submission timestamp (+maybe even more fields) be guaranteed?\r\n- [x] Should the duplicate check happen on the database (`UNIQUE` constraint) or in the server logic (e.g. during the validation of submitted keys)?\r\n- [x] If the check happens on the database: Should the `id` column be removed and replaced with the diagnosis key (+submission timestamp) as (composite) primary key?\r\n- [x] How should the server react when a duplicate diagnosis key is submitted (update, error, etc.)?\r\n\r\n**Edit:** Decisions are below.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile          | Effect\n148 -----------------|-------------\n149 `dev`            | Turns the log level to `DEBUG`.\n150 `cloud`          | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`           | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten.\n152 `testdata`       | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 `signature-dev`  | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n154 `signature-prod` | Provides production app package IDs for the signature info\n155 \n156 ### Submission\n157 \n158 Profile      | Effect\n159 -------------|-------------\n160 `dev`        | Turns the log level to `DEBUG`.\n161 `cloud`      | Removes default values for the `datasource` configuration.\n162 \n163 ## Documentation\n164 \n165 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n166 \n167 ## Support and Feedback\n168 \n169 The following channels are available for discussions, feedback, and support requests:\n170 \n171 | Type                     | Channel                                                |\n172 | ------------------------ | ------------------------------------------------------ |\n173 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n174 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n175 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n176 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n177 \n178 ## How to Contribute\n179 \n180 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n181 \n182 ## Contributors\n183 \n184 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n185 \n186 ## Repositories\n187 \n188 The following public repositories are currently available for the Corona-Warn-App:\n189 \n190 | Repository          | Description                                                           |\n191 | ------------------- | --------------------------------------------------------------------- |\n192 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n193 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n194 | [cwa-verification-server] | Backend implementation of the verification process|\n195 \n196 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n197 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n198 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n199 [Postgres]: https://www.postgresql.org/\n200 [HSQLDB]: http://hsqldb.org/\n201 [Zenko CloudServer]: https://github.com/scality/cloudserver\n202 \n203 ## Licensing\n204 \n205 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n206 \n207 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n208 \n209 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n210 \n211 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n212 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of common/persistence/pom.xml]\n1 <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n2 <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n3   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n4   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n5   <parent>\n6     <groupId>org.springframework.boot</groupId>\n7     <artifactId>spring-boot-starter-parent</artifactId>\n8     <version>2.3.0.RELEASE</version>\n9     <relativePath></relativePath>\n10   </parent>\n11   <modelVersion>4.0.0</modelVersion>\n12 \n13   <groupId>org.opencwa</groupId>\n14   <artifactId>persistence</artifactId>\n15   <version>${revision}</version>\n16 \n17   <organization>\n18     <name>SAP SE</name>\n19   </organization>\n20 \n21   <properties>\n22     <java.version>11</java.version>\n23     <maven.compiler.source>11</maven.compiler.source>\n24     <maven.compiler.target>11</maven.compiler.target>\n25     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n26     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n27     <sonar.projectKey>corona-warn-app_cwa-server_common_persistence</sonar.projectKey>\n28   </properties>\n29 \n30   <dependencies>\n31     <dependency>\n32       <groupId>org.opencwa</groupId>\n33       <artifactId>protocols</artifactId>\n34       <version>${project.version}</version>\n35     </dependency>\n36     <dependency>\n37       <groupId>org.springframework.boot</groupId>\n38       <artifactId>spring-boot-starter-data-jpa</artifactId>\n39     </dependency>\n40     <dependency>\n41       <groupId>org.springframework.boot</groupId>\n42       <artifactId>spring-boot-starter-validation</artifactId>\n43     </dependency>\n44     <dependency>\n45       <groupId>org.springframework.boot</groupId>\n46       <artifactId>spring-boot-starter-test</artifactId>\n47       <scope>test</scope>\n48       <exclusions>\n49         <exclusion>\n50           <groupId>org.junit.vintage</groupId>\n51           <artifactId>junit-vintage-engine</artifactId>\n52         </exclusion>\n53       </exclusions>\n54     </dependency>\n55     <dependency>\n56       <groupId>org.springframework.boot</groupId>\n57       <artifactId>spring-boot-starter</artifactId>\n58       <exclusions>\n59         <exclusion>\n60           <groupId>org.springframework.boot</groupId>\n61           <artifactId>spring-boot-starter-logging</artifactId>\n62         </exclusion>\n63       </exclusions>\n64     </dependency>\n65     <dependency>\n66       <groupId>org.springframework.boot</groupId>\n67       <artifactId>spring-boot-starter-log4j2</artifactId>\n68     </dependency>\n69     <dependency>\n70       <groupId>org.flywaydb</groupId>\n71       <artifactId>flyway-core</artifactId>\n72     </dependency>\n73     <dependency>\n74       <groupId>org.postgresql</groupId>\n75       <artifactId>postgresql</artifactId>\n76       <scope>runtime</scope>\n77     </dependency>\n78     <dependency>\n79       <groupId>com.h2database</groupId>\n80       <artifactId>h2</artifactId>\n81       <version>1.4.199</version>\n82       <scope>runtime</scope>\n83     </dependency>\n84     <dependency>\n85       <!-- https://nvd.nist.gov/vuln/detail/CVE-2020-9488 -->\n86       <groupId>org.apache.logging.log4j</groupId>\n87       <artifactId>log4j-core</artifactId>\n88       <version>2.13.3</version>\n89     </dependency>\n90     <dependency>\n91       <!-- https://nvd.nist.gov/vuln/detail/CVE-2020-9488 -->\n92       <groupId>org.apache.logging.log4j</groupId>\n93       <artifactId>log4j-api</artifactId>\n94       <version>2.13.3</version>\n95     </dependency>\n96     <dependency>\n97       <!-- Due to https://nvd.nist.gov/vuln/detail/CVE-2020-10683 -->\n98       <groupId>org.dom4j</groupId>\n99       <artifactId>dom4j</artifactId>\n100       <version>2.1.3</version>\n101     </dependency>\n102     <dependency>\n103       <!-- https://nvd.nist.gov/vuln/detail/CVE-2017-18640 -->\n104       <groupId>org.yaml</groupId>\n105       <artifactId>snakeyaml</artifactId>\n106       <version>1.26</version>\n107     </dependency>\n108   </dependencies>\n109 \n110   <build>\n111     <plugins>\n112       <plugin>\n113         <groupId>org.codehaus.mojo</groupId>\n114         <artifactId>license-maven-plugin</artifactId>\n115         <version>2.0.0</version>\n116         <configuration>\n117           <includes>**/*.java</includes>\n118           <copyrightOwners>${organization.name} and all other contributors</copyrightOwners>\n119           <processStartTag>---license-start</processStartTag>\n120           <processEndTag>---license-end</processEndTag>\n121           <sectionDelimiter>---</sectionDelimiter>\n122           <addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>\n123           <trimHeaderLine>true</trimHeaderLine>\n124           <emptyLineAfterHeader>true</emptyLineAfterHeader>\n125         </configuration>\n126       </plugin>\n127       <plugin>\n128         <!-- see https://maven.apache.org/maven-ci-friendly.html#install-deploy -->\n129         <groupId>org.codehaus.mojo</groupId>\n130         <artifactId>flatten-maven-plugin</artifactId>\n131         <version>1.1.0</version>\n132         <configuration>\n133           <updatePomFile>true</updatePomFile>\n134           <flattenMode>resolveCiFriendliesOnly</flattenMode>\n135         </configuration>\n136         <executions>\n137           <execution>\n138             <id>flatten</id>\n139             <phase>process-resources</phase>\n140             <goals><goal>flatten</goal></goals>\n141           </execution>\n142           <execution>\n143             <id>flatten-clean</id>\n144             <phase>clean</phase>\n145             <goals><goal>clean</goal></goals>\n146           </execution>\n147         </executions>\n148       </plugin>\n149       <plugin>\n150         <groupId>org.apache.maven.plugins</groupId>\n151         <artifactId>maven-checkstyle-plugin</artifactId>\n152         <version>3.1.1</version>\n153         <configuration>\n154           <configLocation>../../codestyle/checkstyle.xml</configLocation>\n155           <excludes>**/module-info.java,**/target/**/*</excludes>\n156           <encoding>UTF-8</encoding>\n157           <consoleOutput>true</consoleOutput>\n158           <failsOnError>true</failsOnError>\n159           <violationSeverity>warning</violationSeverity>\n160           <failOnViolation>true</failOnViolation>\n161           <linkXRef>false</linkXRef>\n162         </configuration>\n163         <executions>\n164           <execution>\n165             <id>validate</id>\n166             <phase>validate</phase>\n167             <goals>\n168               <goal>check</goal>\n169             </goals>\n170           </execution>\n171         </executions>\n172       </plugin>\n173       <plugin>\n174         <groupId>org.jacoco</groupId>\n175         <artifactId>jacoco-maven-plugin</artifactId>\n176         <version>0.8.5</version>\n177         <executions>\n178           <execution>\n179             <goals>\n180               <goal>prepare-agent</goal>\n181             </goals>\n182           </execution>\n183           <execution>\n184             <id>report</id>\n185             <goals>\n186               <goal>report</goal>\n187             </goals>\n188             <phase>verify</phase>\n189           </execution>\n190         </executions>\n191       </plugin>\n192     </plugins>\n193   </build>\n194 </project>\n195 \n[end of common/persistence/pom.xml]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  * \n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  * \n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.common.persistence.domain;\n22 \n23 import static java.time.ZoneOffset.UTC;\n24 \n25 import app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;\n26 import app.coronawarn.server.common.persistence.domain.validation.ValidRollingStartIntervalNumber;\n27 import java.time.Instant;\n28 import java.time.LocalDateTime;\n29 import java.util.Arrays;\n30 import java.util.Objects;\n31 import java.util.Set;\n32 import javax.persistence.Entity;\n33 import javax.persistence.GeneratedValue;\n34 import javax.persistence.GenerationType;\n35 import javax.persistence.Id;\n36 import javax.persistence.Table;\n37 import javax.validation.ConstraintViolation;\n38 import javax.validation.Validation;\n39 import javax.validation.Validator;\n40 import javax.validation.constraints.Size;\n41 import org.hibernate.validator.constraints.Range;\n42 \n43 /**\n44  * A key generated for advertising over a window of time.\n45  */\n46 @Entity\n47 @Table(name = \"diagnosis_key\")\n48 public class DiagnosisKey {\n49 \n50   /**\n51    * According to \"Setting Up an Exposure Notification Server\" by Apple, exposure notification servers are expected to\n52    * reject any diagnosis keys that do not have a rolling period of a certain fixed value. See\n53    * https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server\n54    */\n55   public static final int EXPECTED_ROLLING_PERIOD = 144;\n56 \n57   private static final Validator VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n58 \n59   @Id\n60   @GeneratedValue(strategy = GenerationType.IDENTITY)\n61   private Long id;\n62 \n63   @Size(min = 16, max = 16, message = \"Key data must be a byte array of length 16.\")\n64   private byte[] keyData;\n65 \n66   @ValidRollingStartIntervalNumber\n67   private int rollingStartIntervalNumber;\n68 \n69   @Range(min = EXPECTED_ROLLING_PERIOD, max = EXPECTED_ROLLING_PERIOD,\n70       message = \"Rolling period must be \" + EXPECTED_ROLLING_PERIOD + \".\")\n71   private int rollingPeriod;\n72 \n73   @Range(min = 0, max = 8, message = \"Risk level must be between 0 and 8.\")\n74   private int transmissionRiskLevel;\n75 \n76   private long submissionTimestamp;\n77 \n78   protected DiagnosisKey() {\n79   }\n80 \n81   /**\n82    * Should be called by builders.\n83    */\n84   DiagnosisKey(byte[] keyData, int rollingStartIntervalNumber, int rollingPeriod,\n85       int transmissionRiskLevel, long submissionTimestamp) {\n86     this.keyData = keyData;\n87     this.rollingStartIntervalNumber = rollingStartIntervalNumber;\n88     this.rollingPeriod = rollingPeriod;\n89     this.transmissionRiskLevel = transmissionRiskLevel;\n90     this.submissionTimestamp = submissionTimestamp;\n91   }\n92 \n93   /**\n94    * Returns a DiagnosisKeyBuilder instance. A {@link DiagnosisKey} can then be build by either providing the required\n95    * member values or by passing the respective protocol buffer object.\n96    *\n97    * @return DiagnosisKeyBuilder instance.\n98    */\n99   public static Builder builder() {\n100     return new DiagnosisKeyBuilder();\n101   }\n102 \n103   public Long getId() {\n104     return id;\n105   }\n106 \n107   /**\n108    * Returns the diagnosis key.\n109    */\n110   public byte[] getKeyData() {\n111     return keyData;\n112   }\n113 \n114   /**\n115    * Returns a number describing when a key starts. It is equal to startTimeOfKeySinceEpochInSecs / (60 * 10).\n116    */\n117   public int getRollingStartIntervalNumber() {\n118     return rollingStartIntervalNumber;\n119   }\n120 \n121   /**\n122    * Returns a number describing how long a key is valid. It is expressed in increments of 10 minutes (e.g. 144 for 24\n123    * hours).\n124    */\n125   public int getRollingPeriod() {\n126     return rollingPeriod;\n127   }\n128 \n129   /**\n130    * Returns the risk of transmission associated with the person this key came from.\n131    */\n132   public int getTransmissionRiskLevel() {\n133     return transmissionRiskLevel;\n134   }\n135 \n136   /**\n137    * Returns the timestamp associated with the submission of this {@link DiagnosisKey} as hours since epoch.\n138    */\n139   public long getSubmissionTimestamp() {\n140     return submissionTimestamp;\n141   }\n142 \n143   /**\n144    * Checks if this diagnosis key falls into the period between now, and the retention threshold.\n145    *\n146    * @param daysToRetain the number of days before a key is outdated\n147    * @return true, if the rolling start interval number is within the time between now, and the given days to retain\n148    * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n149    */\n150   public boolean isYoungerThanRetentionThreshold(int daysToRetain) {\n151     if (daysToRetain < 0) {\n152       throw new IllegalArgumentException(\"Retention threshold must be greater or equal to 0.\");\n153     }\n154     long threshold = LocalDateTime\n155         .ofInstant(Instant.now(), UTC)\n156         .minusDays(daysToRetain)\n157         .toEpochSecond(UTC) / (60 * 10);\n158 \n159     return this.rollingStartIntervalNumber >= threshold;\n160   }\n161 \n162   /**\n163    * Gets any constraint violations that this key might incorporate.\n164    *\n165    * <p><ul>\n166    * <li>Risk level must be between 0 and 8\n167    * <li>Rolling start interval number must be greater than 0\n168    * <li>Rolling start number cannot be in the future\n169    * <li>Rolling period must be positive number\n170    * <li>Key data must be byte array of length 16\n171    * </ul>\n172    *\n173    * @return A set of constraint violations of this key.\n174    */\n175   public Set<ConstraintViolation<DiagnosisKey>> validate() {\n176     return VALIDATOR.validate(this);\n177   }\n178 \n179   @Override\n180   public boolean equals(Object o) {\n181     if (this == o) {\n182       return true;\n183     }\n184     if (o == null || getClass() != o.getClass()) {\n185       return false;\n186     }\n187     DiagnosisKey that = (DiagnosisKey) o;\n188     return rollingStartIntervalNumber == that.rollingStartIntervalNumber\n189         && rollingPeriod == that.rollingPeriod\n190         && transmissionRiskLevel == that.transmissionRiskLevel\n191         && submissionTimestamp == that.submissionTimestamp\n192         && Objects.equals(id, that.id)\n193         && Arrays.equals(keyData, that.keyData);\n194   }\n195 \n196   @Override\n197   public int hashCode() {\n198     int result = Objects\n199         .hash(id, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n200     result = 31 * result + Arrays.hashCode(keyData);\n201     return result;\n202   }\n203 }\n204 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  * \n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  * \n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.common.persistence.repository;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import org.springframework.data.jpa.repository.JpaRepository;\n25 import org.springframework.stereotype.Repository;\n26 \n27 @Repository\n28 public interface DiagnosisKeyRepository extends JpaRepository<DiagnosisKey, Long> {\n29 \n30   /**\n31    * Deletes all entries that have a submission timestamp lesser or equal to the specified one.\n32    *\n33    * @param submissionTimestamp the submission timestamp up to which entries will be deleted.\n34    */\n35   void deleteBySubmissionTimestampIsLessThanEqual(long submissionTimestamp);\n36 }\n37 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  * \n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  * \n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.common.persistence.service;\n22 \n23 import static java.time.ZoneOffset.UTC;\n24 \n25 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n26 import app.coronawarn.server.common.persistence.repository.DiagnosisKeyRepository;\n27 import java.time.Instant;\n28 import java.time.LocalDateTime;\n29 import java.util.Collection;\n30 import java.util.List;\n31 import java.util.stream.Collectors;\n32 import javax.validation.ConstraintViolation;\n33 import org.slf4j.Logger;\n34 import org.slf4j.LoggerFactory;\n35 import org.springframework.beans.factory.annotation.Autowired;\n36 import org.springframework.data.domain.Sort;\n37 import org.springframework.data.domain.Sort.Direction;\n38 import org.springframework.stereotype.Component;\n39 import org.springframework.transaction.annotation.Transactional;\n40 \n41 @Component\n42 public class DiagnosisKeyService {\n43 \n44   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyService.class);\n45   private final DiagnosisKeyRepository keyRepository;\n46 \n47   @Autowired\n48   public DiagnosisKeyService(DiagnosisKeyRepository keyRepository) {\n49     this.keyRepository = keyRepository;\n50   }\n51 \n52   /**\n53    * Persists the specified collection of {@link DiagnosisKey} instances.\n54    *\n55    * @param diagnosisKeys must not contain {@literal null}.\n56    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n57    */\n58   public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n59     keyRepository.saveAll(diagnosisKeys);\n60   }\n61 \n62   /**\n63    * Returns all valid persisted diagnosis keys, sorted by their submission timestamp.\n64    */\n65   public List<DiagnosisKey> getDiagnosisKeys() {\n66     return keyRepository.findAll(Sort.by(Direction.ASC, \"submissionTimestamp\")).stream()\n67         .filter(DiagnosisKeyService::isDiagnosisKeyValid).collect(Collectors.toList());\n68   }\n69 \n70   private static boolean isDiagnosisKeyValid(DiagnosisKey diagnosisKey) {\n71     Collection<ConstraintViolation<DiagnosisKey>> violations = diagnosisKey.validate();\n72     boolean isValid = violations.isEmpty();\n73 \n74     if (!isValid) {\n75       List<String> violationMessages =\n76           violations.stream().map(ConstraintViolation::getMessage).collect(Collectors.toList());\n77       logger.warn(\"Validation failed for diagnosis key from database. Violations: {}\", violationMessages);\n78     }\n79 \n80     return isValid;\n81   }\n82 \n83   /**\n84    * Deletes all diagnosis key entries which have a submission timestamp that is older than the specified number of\n85    * days.\n86    *\n87    * @param daysToRetain the number of days until which diagnosis keys will be retained.\n88    * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n89    */\n90   @Transactional\n91   public void applyRetentionPolicy(int daysToRetain) {\n92     if (daysToRetain < 0) {\n93       throw new IllegalArgumentException(\"Number of days to retain must be greater or equal to 0.\");\n94     }\n95 \n96     long threshold = LocalDateTime\n97         .ofInstant(Instant.now(), UTC)\n98         .minusDays(daysToRetain)\n99         .toEpochSecond(UTC) / 3600L;\n100     keyRepository.deleteBySubmissionTimestampIsLessThanEqual(threshold);\n101   }\n102 }\n103 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Here is the patch file that resolves the issue:\n\n```diff\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -61,7 +61,7 @@ public class DiagnosisKey {\n   @Id\n   @GeneratedValue(strategy = GenerationType.IDENTITY)\n   private Long id;\n-  \n+\n   @Size(min = 16, max = 16, message = \"Key data must be a byte array of length 16.\")\n   private byte[] keyData;\n \n@@ -168,7 +168,7 @@ public class DiagnosisKey {\n    * @return A set of constraint violations of this key.\n    */\n   public Set<ConstraintViolation<DiagnosisKey>> validate() {\n-    return VALIDATOR.validate(this);\n+    return VALIDATOR.validate(this, Default.class);\n   }\n \n   @Override\n```\n\nPlease let me know if you need any further assistance.",
        "model_patch": "--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -61,7 +61,7 @@ public class DiagnosisKey {\n   @Id\n   @GeneratedValue(strategy = GenerationType.IDENTITY)\n   private Long id;\n-  \n+\n   @Size(min = 16, max = 16, message = \"Key data must be a byte array of length 16.\")\n   private byte[] keyData;\n \n@@ -168,7 +168,7 @@ public class DiagnosisKey {\n    * @return A set of constraint violations of this key.\n    */\n   public Set<ConstraintViolation<DiagnosisKey>> validate() {\n-    return VALIDATOR.validate(this);\n+    return VALIDATOR.validate(this, Default.class);\n   }\n \n   @Override\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 388,
        "issue_numbers": [
            "289"
        ],
        "base_commit": "00a342298942773ee49eeea9387a2acd164c3d49",
        "patch": "diff --git a/common/persistence/pom.xml b/common/persistence/pom.xml\n--- a/common/persistence/pom.xml\n+++ b/common/persistence/pom.xml\n@@ -78,7 +78,7 @@\n     <dependency>\n       <groupId>com.h2database</groupId>\n       <artifactId>h2</artifactId>\n-      <version>1.4.199</version>\n+      <version>1.4.200</version>\n       <scope>runtime</scope>\n     </dependency>\n     <dependency>\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -29,9 +29,8 @@\n import java.util.Arrays;\n import java.util.Objects;\n import java.util.Set;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Table;\n import javax.validation.ConstraintViolation;\n@@ -57,10 +56,8 @@ public class DiagnosisKey {\n   private static final Validator VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n \n   @Id\n-  @GeneratedValue(strategy = GenerationType.IDENTITY)\n-  private Long id;\n-\n   @Size(min = 16, max = 16, message = \"Key data must be a byte array of length 16.\")\n+  @Column(unique = true)\n   private byte[] keyData;\n \n   @ValidRollingStartIntervalNumber\n@@ -100,10 +97,6 @@ public static Builder builder() {\n     return new DiagnosisKeyBuilder();\n   }\n \n-  public Long getId() {\n-    return id;\n-  }\n-\n   /**\n    * Returns the diagnosis key.\n    */\n@@ -189,14 +182,13 @@ public boolean equals(Object o) {\n         && rollingPeriod == that.rollingPeriod\n         && transmissionRiskLevel == that.transmissionRiskLevel\n         && submissionTimestamp == that.submissionTimestamp\n-        && Objects.equals(id, that.id)\n         && Arrays.equals(keyData, that.keyData);\n   }\n \n   @Override\n   public int hashCode() {\n     int result = Objects\n-        .hash(id, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n+        .hash(rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n     result = 31 * result + Arrays.hashCode(keyData);\n     return result;\n   }\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java\n@@ -22,6 +22,8 @@\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n import org.springframework.stereotype.Repository;\n \n @Repository\n@@ -33,4 +35,22 @@ public interface DiagnosisKeyRepository extends JpaRepository<DiagnosisKey, Long\n    * @param submissionTimestamp the submission timestamp up to which entries will be deleted.\n    */\n   void deleteBySubmissionTimestampIsLessThanEqual(long submissionTimestamp);\n+\n+  /**\n+   * Attempts to write the specified diagnosis key information into the database. If a row with the specified key data\n+   * already exists, no data is inserted.\n+   *\n+   * @param keyData                    The key data of the diagnosis key.\n+   * @param rollingStartIntervalNumber The rolling start interval number of the diagnosis key.\n+   * @param rollingPeriod              The rolling period of the diagnosis key.\n+   * @param submissionTimestamp        The submission timestamp of the diagnosis key.\n+   * @param transmissionRisk           The transmission risk level of the diagnosis key.\n+   */\n+  @Modifying\n+  @Query(nativeQuery = true, value =\n+      \"INSERT INTO diagnosis_key\"\n+          + \"(key_data, rolling_start_interval_number, rolling_period, submission_timestamp, transmission_risk_level)\"\n+          + \" VALUES(?, ?, ?, ?, ?) ON CONFLICT DO NOTHING;\")\n+  void saveDoNothingOnConflict(byte[] keyData, int rollingStartIntervalNumber, int rollingPeriod,\n+      long submissionTimestamp, int transmissionRisk);\n }\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n@@ -50,13 +50,19 @@ public DiagnosisKeyService(DiagnosisKeyRepository keyRepository) {\n   }\n \n   /**\n-   * Persists the specified collection of {@link DiagnosisKey} instances.\n+   * Persists the specified collection of {@link DiagnosisKey} instances. If the key data of a particular diagnosis key\n+   * already exists in the database, this diagnosis key is not persisted.\n    *\n    * @param diagnosisKeys must not contain {@literal null}.\n    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n    */\n+  @Transactional\n   public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n-    keyRepository.saveAll(diagnosisKeys);\n+    for (DiagnosisKey diagnosisKey : diagnosisKeys) {\n+      keyRepository.saveDoNothingOnConflict(\n+          diagnosisKey.getKeyData(), diagnosisKey.getRollingStartIntervalNumber(), diagnosisKey.getRollingPeriod(),\n+          diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel());\n+    }\n   }\n \n   /**\ndiff --git a/common/persistence/src/main/resources/db/migration/h2/V3__makeKeyDataPrimaryKey.sql b/common/persistence/src/main/resources/db/migration/h2/V3__makeKeyDataPrimaryKey.sql\nnew file mode 100644\n--- /dev/null\n+++ b/common/persistence/src/main/resources/db/migration/h2/V3__makeKeyDataPrimaryKey.sql\n@@ -0,0 +1,3 @@\n+ALTER TABLE diagnosis_key DROP COLUMN id;\n+ALTER TABLE diagnosis_key ALTER COLUMN key_data SET NOT NULL;\n+ALTER TABLE diagnosis_key ADD PRIMARY KEY (key_data);\n\\ No newline at end of file\ndiff --git a/common/persistence/src/main/resources/db/migration/postgres/V3__makeKeyDataPrimaryKey.sql b/common/persistence/src/main/resources/db/migration/postgres/V3__makeKeyDataPrimaryKey.sql\nnew file mode 100644\n--- /dev/null\n+++ b/common/persistence/src/main/resources/db/migration/postgres/V3__makeKeyDataPrimaryKey.sql\n@@ -0,0 +1,3 @@\n+ALTER TABLE diagnosis_key DROP COLUMN id;\n+ALTER TABLE diagnosis_key ALTER COLUMN key_data SET NOT NULL;\n+ALTER TABLE diagnosis_key ADD PRIMARY KEY (key_data);\n\\ No newline at end of file\n",
        "test_patch": "diff --git a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n--- a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n+++ b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n@@ -33,6 +33,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Random;\n import org.assertj.core.util.Lists;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.DisplayName;\n@@ -149,9 +150,34 @@ void testNoPersistOnValidationError() {\n     assertDiagnosisKeysEqual(Lists.emptyList(), actKeys);\n   }\n \n+  @Test\n+  void shouldNotUpdateExistingKey() {\n+    var keyData = \"1234567890123456\";\n+    var keys = List.of(DiagnosisKey.builder()\n+            .withKeyData(keyData.getBytes())\n+            .withRollingStartIntervalNumber(600)\n+            .withTransmissionRiskLevel(2)\n+            .withSubmissionTimestamp(0L).build(),\n+        DiagnosisKey.builder()\n+            .withKeyData(keyData.getBytes())\n+            .withRollingStartIntervalNumber(600)\n+            .withTransmissionRiskLevel(3)\n+            .withSubmissionTimestamp(0L).build());\n+\n+    diagnosisKeyService.saveDiagnosisKeys(keys);\n+\n+    var actKeys = diagnosisKeyService.getDiagnosisKeys();\n+\n+    assertThat(actKeys.size()).isEqualTo(1);\n+    assertThat(actKeys.iterator().next().getTransmissionRiskLevel()).isEqualTo(2);\n+  }\n+\n   public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissionTimeStamp) {\n+    byte[] randomBytes = new byte[16];\n+    Random random = new Random(submissionTimeStamp);\n+    random.nextBytes(randomBytes);\n     return DiagnosisKey.builder()\n-        .withKeyData(new byte[16])\n+        .withKeyData(randomBytes)\n         .withRollingStartIntervalNumber(600)\n         .withTransmissionRiskLevel(2)\n         .withSubmissionTimestamp(submissionTimeStamp).build();\ndiff --git a/common/persistence/src/test/resources/application.yaml b/common/persistence/src/test/resources/application.yaml\n--- a/common/persistence/src/test/resources/application.yaml\n+++ b/common/persistence/src/test/resources/application.yaml\n@@ -1,5 +1,8 @@\n ---\n spring:\n+  test:\n+    database:\n+      replace: none\n   flyway:\n     enabled: false\n   jpa:\n@@ -8,6 +11,10 @@ spring:\n     properties:\n       hibernate:\n         show_sql: false\n+  datasource:\n+    url: jdbc:h2:mem:test;MODE=PostgreSQL\n+    driverClassName: org.h2.Driver\n+    platform: h2\n   main:\n     banner-mode: off\n logging:\ndiff --git a/services/submission/src/test/resources/application.yaml b/services/submission/src/test/resources/application.yaml\n--- a/services/submission/src/test/resources/application.yaml\n+++ b/services/submission/src/test/resources/application.yaml\n@@ -11,7 +11,13 @@ spring:\n     enabled: true\n     # default case is H2 - value will be overwritten by profile cloud or postgres\n     locations: classpath:db/migration/h2\n-\n+  datasource:\n+    url: jdbc:h2:mem:test;MODE=PostgreSQL\n+    driverClassName: org.h2.Driver\n+    platform: h2\n+  test:\n+    database:\n+      replace: none\n   jpa:\n     hibernate:\n       ddl-auto: validate\n",
        "problem_statement": "Ensure uniqueness of diagnosis keys\n## Current Implementation\r\nThe uniqueness of diagnosis keys is neither guaranteed by the database, nor by validation logic.\r\n\r\n## Suggested Enhancement\r\nEnsure that diagnosis keys in the database are unique (there are no duplicates).\r\n\r\nWhat needs to be decided:\r\n- [x] Is it sufficient to guarantee the uniqueness of the diagnosis key or should the uniqueness of diagnosis key + submission timestamp (+maybe even more fields) be guaranteed?\r\n- [x] Should the duplicate check happen on the database (`UNIQUE` constraint) or in the server logic (e.g. during the validation of submitted keys)?\r\n- [x] If the check happens on the database: Should the `id` column be removed and replaced with the diagnosis key (+submission timestamp) as (composite) primary key?\r\n- [x] How should the server react when a duplicate diagnosis key is submitted (update, error, etc.)?\r\n\r\n**Edit:** Decisions are below.\n",
        "hints_text": "Decisions made by @christian-kirschnick:\r\n- Ensuring the uniqueness of the diagnosis key is sufficient\r\n- Duplicate check should happen on the database\r\n- `id` column should be removed\r\n- `key_data` column should become primary key\r\n- If we encounter problems with the current type (`bytea`) of `key_data` as primary key, then change the type to a base64 encoded String\r\n- When duplicate keys are submitted, the server should just ignore them (no update, no error).\n@pithumke Was referenced back to here from a different issue, What would be the value of base64 encoding the UUID? it'll just take up even more space than even using char(32). there is a UUID type already in pg that'll give better seek performance and cost 16 bytes per entry instead of 32\r\n\r\nAbout the risk of collision itself, with UUIDv4 that is quite unlikely even with billions of records, However if you don't want to suffer the occasional exception on the server side you can just add `ON CONFLICT DO NOTHING` to swallow the error \nHi @oiime, thank you for the remarks! Good point with the UUID type, I'll bring it up in the team discussions and report back. However, please note that, to my knowledge, the type of the diagnosis keys is not explicitly stated as UUID by the Google/Apple spec, but only as \"Data\" (see [here](https://developer.apple.com/documentation/exposurenotification/entemporaryexposurekey/3583679-keydata)) containing 16 bytes (see [here](https://www.blog.google/documents/60/Exposure_Notification_-_Cryptography_Specification_v1.1.pdf)). This can, in theory, be mapped to a UUID, but I would like to investigate if the PG UUID type implies any restrictions. For example, UUIDv4 reserves 6 of the 128 bits for version information, leaving only 122 bits for the payload (see [here](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))) - and this would cause major problems for us.\r\n\r\nRegarding the collisions: we currently also don't see this as a major risk. Our current strategy, as you proposed, is to simply ignore duplicates.\n@pithumke Well, you're the one defining both the client and the server side, the EN API is agnostic to its content to allow that freedom of implementation, so you can define that key to be whatever you want it to be, currently you are validating it as UUID in the server and the test case generates a UUIDv4. the UUID data type follows RFC 4122 as you would expect and would naturally cover UUIDv4. All UUID versions reserve a place for version information. _please_ do not try to come up with your own UUID variant if that is what is suggested here\nHi @oiime, thank you for your comment.\r\n\r\n> Well, you're the one defining both the client and the server side, the EN API is agnostic to its content to allow that freedom of implementation, so you can define that key to be whatever you want it to be\r\n\r\nYes, we do specify and develop both the CWA server and client. However, we neither specify nor develop the on-device APIs - that is done by Apple and Google. Inside those on-device APIs is where the keys are being generated and that does not give us much freedom regarding data types on our end. In the specification it is stated, that the key data consists of 16 bytes (= 128 bits). Since the use of UUID would restrict that to 122 bits, we can not use it as the column type on postgres.\r\n\r\n> currently you are validating it as UUID in the server and the test case generates a UUIDv4\r\n\r\nI am not aware of any UUID handling in our current code base, besides for TANs (which are not stored on the server). Can you please link which specific code you are referring to?\r\n\r\n> please do not try to come up with your own UUID variant if that is what is suggested here\r\n\r\nI didn't mean to suggest that and we don't want to come up with an own UUID variant. This is why we decided to go for a base64 encoded string for now (if bytea turns out to cause problems).\n@pithumke \r\n\r\n> However, we neither specify nor develop the on-device API\r\n\r\nI guess I rely on looking at the API itself, perhaps apple or google or both have a specific implementation they mandate or suggest, if that is the case then using UUID is wrong anyway \r\n\r\n> I am not aware of any UUID handling in our current code base, besides for TANs\r\n\r\nI am likely conflating the two, I have only skimmed through the code and what I recalled was the test generating UUIDv4\r\n\r\n> I didn't mean to suggest that and we don't want to come up with an own UUID variant. This is why we decided to go for a base64 encoded string for now (if bytea turns out to cause problems).\r\n\r\nbase64 seems like an unnecessary step that'll just take up more space and computation, you do it to avoid just storing it in a char(16) as-is? though I don't see why bytea wouldn't work as a PK, especially as you'd never update it\r\n",
        "created_at": "2020-05-30T23:22:36Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-1965",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nmin-android 1.5.1 differs from production 1.0.4 value\n## Describe the bug\r\n\r\nThe `min-android` value served on \r\nhttps://svc90.main.px.t-online.de/version/v1/configuration/country/DE/app_config is \r\n\r\n`1.0.4` \r\n\r\nwhich differs from the value\r\n\r\n`1.5.1`\r\n\r\nstored in https://github.com/corona-warn-app/cwa-server/blob/main/services/distribution/src/main/resources/application.yaml#L144\r\n\r\nIf CWA Android 1.4.0 is started, there is no prompt shown to the user that the app should be updated.\r\n\r\n## Expected behaviour\r\n\r\nThe `min-android` value served on \r\nhttps://svc90.main.px.t-online.de/version/v1/configuration/country/DE/app_config should be the same as the value stored in https://github.com/corona-warn-app/cwa-server/blob/main/services/distribution/src/main/resources/application.yaml#L144 which is currently `1.5.1`.\r\n\r\nIf `min-android` with the value of `1.5.1` were in production then starting CWA Android 1.4.0 should produce a prompt to update the app.\r\n\r\n## Steps to reproduce the issue\r\n\r\n1. In Android Studio check out CWA Android app release/1.4.x\r\n2. Run CWA on Pixel 3a API 33 Android device emulator in Debug mode\r\n3. Open Logcat in Android Studio and enter search term \"UpdateChecker\"\r\n\r\nThe log shows the following:\r\n\r\n```\r\nUpdateChecker           de.rki.coronawarnapp.dev             E  minVersionStringFromServer:1.0.4\r\nUpdateChecker           de.rki.coronawarnapp.dev             E  Current app version:1.4.0\r\nUpdateChecker           de.rki.coronawarnapp.dev             E  needs update:false\r\n```\r\n\r\nAlternatively install old released versions from https://www.apkmirror.com/apk/robert-koch-institut/corona-warn-app/. As soon as a version < 1.0.4 is started, e.g. 1.0.0 or 1.0.2, a message \"Update available\" is output. \r\n\r\n![Update available](https://user-images.githubusercontent.com/66998419/202911146-6b74b2e4-7a8d-462d-8f19-6e10762719e2.jpg)\r\n\r\nIf version 1.0.4 is installed and started, no update message is output. This is consistent with min-Android being set to `1.0.4` in production.\r\n\r\n\r\n## Technical details\r\n\r\n- Android Studio Dolphin | 2021.3.1 Patch 1\r\n- Pixel 3a API 33 Android device emulator\r\n- CWA Android 1.4.0 (note that this version was not released. Version 1.5 followed version 1.3)\r\n\r\n## Possible Fix\r\n\r\nClarify what the minimum enforced version of CWA Android in production is supposed to be and ensure alignment of https://github.com/corona-warn-app/cwa-server/blob/main/services/distribution/src/main/resources/application.yaml with the values used in production.\r\n\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/HEAD/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13     <a href=\"https://api.reuse.software/info/github.com/corona-warn-app/cwa-server\" title=\"REUSE Status\"><img src=\"https://api.reuse.software/badge/github.com/corona-warn-app/cwa-server\"></a>\n14 </p>\n15 \n16 <p align=\"center\">\n17   <a href=\"#development\">Development</a> \u2022\n18   <a href=\"#service-apis\">Service APIs</a> \u2022\n19   <a href=\"#documentation\">Documentation</a> \u2022\n20   <a href=\"#support-and-feedback\">Support</a> \u2022\n21   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n22   <a href=\"#contributors\">Contributors</a> \u2022\n23   <a href=\"#repositories\">Repositories</a> \u2022\n24   <a href=\"#licensing\">Licensing</a>\n25 </p>\n26 \n27 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App.\n28 \n29 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n30 \n31 ## Architecture Overview\n32 \n33 You can find the architecture overview [here](/docs/ARCHITECTURE.md), which will give you\n34 a good starting point in how the backend services interact with other services, and what purpose\n35 they serve.\n36 \n37 ## Development\n38 \n39 After you've checked out this repository, you can run the application in one of the following ways:\n40 \n41 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n42   * Single components using the respective Dockerfile or\n43   * The full backend using the Docker Compose (which is considered the most convenient way)\n44 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n45   If you want to develop something in a single component, this approach is preferable.\n46 \n47 ### Docker-Based Deployment\n48 \n49 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n50 \n51 #### Running the Full CWA Backend Using Docker Compose\n52 \n53 For your convenience, a full setup for local development and testing purposes, including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env``` in the root folder of the repository. If the endpoints are to be exposed to the network the default values in this file should be changed before docker-compose is run.\n54 \n55 Once the services are built, you can start the whole backend using ```docker-compose up```.\n56 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n57 \n58 The docker-compose contains the following services:\n59 \n60 Service           | Description | Endpoint and Default Credentials\n61 ------------------|-------------|-----------\n62 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n63 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n64 postgres          | A [postgres] database installation                                                          | `localhost:8001` <br> `postgres:5432` (from containerized pgadmin) <br> Username: postgres <br> Password: postgres\n65 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n66 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n67 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is `edc07f08-a1aa-11ea-bb37-0242ac130002`.\n68 \n69 ##### Known Limitation\n70 \n71 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n72 \n73 #### Running Single CWA Services Using Docker\n74 \n75 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n76 \n77 To build and run the distribution service, run the following command:\n78 \n79 ```bash\n80 ./services/distribution/build_and_run.sh\n81 ```\n82 \n83 To build and run the submission service, run the following command:\n84 \n85 ```bash\n86 ./services/submission/build_and_run.sh\n87 ```\n88 \n89 The submission service is available on [localhost:8080](http://localhost:8080 ).\n90 \n91 ### Maven-Based Build\n92 \n93 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n94 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n95 \n96 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n97 * [Maven 3.6](https://maven.apache.org/)\n98 * [Postgres]\n99 * [Zenko CloudServer]\n100 \n101 If you are already running a local Postgres, you need to create a database `cwa` and run the following setup scripts:\n102 \n103 * Create the different CWA roles first by executing [create-roles.sql](./setup/setup-roles.sql).\n104 * Create local database users for the specific roles by running [create-users.sql](./local-setup/create-users.sql).\n105 * It is recommended to also run [enable-test-data-docker-compose.sql](./local-setup/enable-test-data-docker-compose.sql)\n106 , which enables the test data generation profile. If you already had CWA running before and an existing `diagnosis-key`\n107 table on your database, you need to run [enable-test-data.sql](./local-setup/enable-test-data.sql) instead.\n108 \n109 You can also use `docker-compose` to start Postgres and Zenko. If you do that, you have to\n110 set the following environment-variables when running the Spring project:\n111 \n112 For the distribution module:\n113 \n114 ```bash\n115 POSTGRESQL_SERVICE_PORT=8001\n116 VAULT_FILESIGNING_SECRET=</path/to/your/private_key>\n117 SPRING_PROFILES_ACTIVE=signature-dev,disable-ssl-client-postgres\n118 ```\n119 \n120 For the submission module:\n121 \n122 ```bash\n123 POSTGRESQL_SERVICE_PORT=8001\n124 SPRING_PROFILES_ACTIVE=disable-ssl-client-postgres\n125 ```\n126 \n127 #### Configure\n128 \n129 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n130 \n131 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n132 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n133 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n134   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n135 \n136 #### Build\n137 \n138 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n139 \n140 #### Run\n141 \n142 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n143 \n144 If you want to start the submission service, for example, you start it as follows:\n145 \n146 ```bash\n147   cd services/submission/\n148   mvn spring-boot:run\n149 ```\n150 \n151 #### Debugging\n152 \n153 To enable the `DEBUG` log level, you can run the application using the Spring `debug` profile.\n154 \n155 ```bash\n156 mvn spring-boot:run -Dspring.profiles.active=debug\n157 ```\n158 \n159 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n160 \n161 ## Service APIs\n162 \n163 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n164 \n165 Service                   | OpenAPI Specification\n166 --------------------------|-------------\n167 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/HEAD/services/submission/api_v1.json)\n168 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/HEAD/services/distribution/api_v1.json)\n169 \n170 ## Spring Profiles\n171 \n172 ### Distribution\n173 \n174 See [Distribution Service - Spring Profiles](/docs/DISTRIBUTION.md#spring-profiles).\n175 \n176 ### Submission\n177 \n178 See [Submission Service - Spring Profiles](/docs/SUBMISSION.md#spring-profiles).\n179 \n180 ## Documentation\n181 \n182 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n183 \n184 The documentation for cwa-server can be found under the [/docs](./docs) folder.\n185 \n186 The JavaDoc documentation for cwa-server is hosted by Github Pages at [https://corona-warn-app.github.io/cwa-server](https://corona-warn-app.github.io/cwa-server).\n187 \n188 ## Support and Feedback\n189 \n190 The following channels are available for discussions, feedback, and support requests:\n191 \n192 | Type                     | Channel                                                |\n193 | ------------------------ | ------------------------------------------------------ |\n194 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n195 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n196 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n197 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n198 \n199 ## How to Contribute\n200 \n201 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n202 \n203 ## Contributors\n204 \n205 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n206 \n207 ## Repositories\n208 \n209 A list of all public repositories from the Corona-Warn-App can be found [here](https://github.com/corona-warn-app/cwa-documentation/blob/master/README.md#repositories).\n210 \n211 ## Licensing\n212 \n213 Copyright (c) 2020-2022 SAP SE or an SAP affiliate company and Corona-Warn-App contributors.\n214 \n215 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n216 \n217 You may obtain a copy of the License from [here](./LICENSE).\n218 \n219 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n220 \n221 Please see the [detailed licensing information](https://api.reuse.software/info/github.com/corona-warn-app/cwa-ppa-server) via the [REUSE Tool](https://reuse.software/) for more details.\n222 \n223 [Postgres]: https://www.postgresql.org/\n224 \n225 [Zenko CloudServer]: https://www.zenko.io/cloudserver/\n226 \n[end of README.md]\n[start of services/distribution/src/main/resources/application.yaml]\n1 ---\n2 logging:\n3   level:\n4     org:\n5       springframework:\n6         web: INFO\n7     app:\n8       coronawarn: INFO\n9     com:\n10       netflix:\n11         config:\n12           sources:\n13             URLConfigurationSource: ERROR\n14 \n15 services:\n16   distribution:\n17     # Infection threshold in percentage.\n18     infection-threshold: ${INFECTION_THRESHOLD:1}\n19     # The name of the distribution output file.\n20     output-file-name: index\n21     # The name of the distribution output file v2.\n22     output-file-name-v2: index-v2\n23     # The number of days to retain diagnosis keys and trace time warnings for both database persistency layer and files stored on the object store.\n24     retention-days: 14\n25     # The number of days for diagnosis keys (based upon submission timestamp) to publish on CDN.\n26     days-to-publish: ${DAYS_TO_PUBLISH:10}\n27     # The number of minutes that diagnosis keys must have been expired for (since the end of the rolling interval window) before they can be distributed.\n28     expiry-policy-minutes: 120\n29     # The minimum number of diagnosis keys per bundle.\n30     shifting-policy-threshold: 140\n31     # The maximum number of keys per bundle.\n32     maximum-number-of-keys-per-bundle: 600000\n33     # Indicates whether the current incomplete day will be included in the distribution (used for testing purposes).\n34     include-incomplete-days: false\n35     # Indicates whether the current incomplete hour will be included in the distribution (used for testing purposes).\n36     include-incomplete-hours: false\n37     # The naming of the eu package that provides all keys in a single package.\n38     eu-package-name: EUR\n39     # Indicates whether the shifting and expiry policies are applied to all supported countries during distribution.\n40     apply-policies-for-all-countries: false\n41     card-id-sequence: ${STATS_CARD_ID_SEQUENCE:[12,999,10,2,8,9,1,3,4,5,6,11,7]}\n42     # Local paths, that are used during the export creation.\n43     connection-pool-size: 200\n44     default-archive-name: export.bin\n45     # Minimum value allowed for the diagnosis keys TRLs.\n46     minimum-trl-value-allowed: ${MINIMUM_TRL_VALUE_ALLOWED:3}\n47     paths:\n48       # The output path.\n49       output: out\n50       # The location of the private key.\n51       privatekey: ${VAULT_FILESIGNING_SECRET}\n52     # Configuration for the exported archive, that is saved on the S3-compatible storage.\n53     tek-export:\n54       # The TEK file name included in the zip archive, containing the list of diagnosis keys.\n55       file-name: export.bin\n56       # The TEK file header.\n57       file-header: EK Export v1\n58       # The fixed (ensured by right whitespace padding) TEK file header width.\n59       file-header-width: 16\n60     # Configuration for the API which is used by the mobile app to query diagnosis keys.\n61     api:\n62       version-path: version\n63       version-v1: v1\n64       version-v2: v2\n65       country-path: country\n66       origin-country: ${ORIGIN_COUNTRY:DE}\n67       date-path: date\n68       hour-path: hour\n69       diagnosis-keys-path: diagnosis-keys\n70       trace-warnings-path: twp\n71       parameters-path: configuration\n72       app-config-file-name: app_config\n73       app-config-v2-android-file-name: app_config_android\n74       app-config-v2-ios-file-name: app_config_ios\n75       statistics-file-name: stats\n76       local-statistics-file-name: local_stats\n77     # Signature configuration, used for signing the exports.\n78     signature:\n79       # The alias with which to identify public key to be used for verification.\n80       verification-key-id: 262\n81       # The key version for rollovers.\n82       verification-key-version: v1\n83       # The ASN.1 OID for algorithm identifier.\n84       algorithm-oid: 1.2.840.10045.4.3.2\n85       # The algorithm name.\n86       algorithm-name: SHA256withECDSA\n87       # The signature file name included in the zip archive.\n88       file-name: export.sig\n89       # The security provider.\n90       security-provider: BC\n91     # Configuration for the S3 compatible object storage hosted by Telekom in Germany.\n92     objectstore:\n93       access-key: ${CWA_OBJECTSTORE_ACCESSKEY:accessKey1}\n94       secret-key: ${CWA_OBJECTSTORE_SECRETKEY:verySecretKey1}\n95       endpoint: ${CWA_OBJECTSTORE_ENDPOINT:http://localhost}\n96       bucket: ${CWA_OBJECTSTORE_BUCKET:cwa}\n97       port: ${CWA_OBJECTSTORE_PORT:8003}\n98       # Indicates whether the S3 Access Control List (ACL) header should be set to 'public-read' on put object.\n99       set-public-read-acl-on-put-object: true\n100       # The number of maximum retry attempts used for configuring Spring @Retryable annotation.\n101       retry-attempts: 3\n102       # The backoff period in milliseconds used for configuring Spring @Retryable annotation.\n103       retry-backoff: 2000\n104       # The maximum number of failed operations before giving up.\n105       max-number-of-failed-operations: 5\n106       # The ThreadPoolTaskExecutor's maximum thread pool size.\n107       max-number-of-s3-threads: 4\n108       # Allows distribution to overwrite files which are published on the object store\n109       force-update-keyfiles: ${FORCE_UPDATE_KEYFILES:false}\n110       # The number of days to retain hourly diagnosis keys file in S3. Database entries are still managed by the standard retention policy.\n111       hour-file-retention-days: 2\n112     # Configuration for the publishing of app statistics\n113     statistics:\n114       statistic-path: ${STATISTICS_FILE_NAME:json/v1/cwa_reporting_public_data.json}\n115       local-statistic-path: ${LOCAL_STATISTICS_FILE_NAME:json/v1/cwa_reporting_public_data_region.json}\n116       access-key: ${STATISTICS_FILE_ACCESS_KEY_ID:}\n117       secret-key: ${STATISTICS_FILE_SECRET_ACCESS_KEY:}\n118       endpoint: ${STATISTICS_FILE_S3_ENDPOINT:}\n119       bucket: ${STATISTICS_FILE_S3_BUCKET:obs-cwa-public-dev}\n120       pandemic-radar-url: ${STATISTICS_PANDEMIC_RADAR_URL:https://www.rki.de/DE/Content/InfAZ/N/Neuartiges_Coronavirus/Situationsberichte/COVID-19-Trends/COVID-19-Trends.html?__blob=publicationFile#/home}\n121 \n122     app-features:\n123       - label: unencrypted-checkins-enabled\n124         value: ${EVREG_UNENCRYPTED_CHECKINS_ENABLED:0}\n125       - label: validation-service-android-min-version-code\n126         value: ${VALIDATION_SERVICE_ANDROID_MIN_VERSION_CODE:0}\n127       - label: validation-service-ios-min-version-major\n128         value: ${VALIDATION_SERVICE_IOS_MIN_VERSION_MAJOR:0}\n129       - label: validation-service-ios-min-version-minor\n130         value: ${VALIDATION_SERVICE_IOS_MIN_VERSION_MINOR:0}\n131       - label: validation-service-ios-min-version-patch\n132         value: ${VALIDATION_SERVICE_IOS_MIN_VERSION_PATCH:0}\n133       - label: dcc-person-count-max\n134         value: ${DCC_PERSON_COUNT_MAX:20}\n135       - label: dcc-person-warn-threshold\n136         value: ${DCC_PERSON_WARN_THRESHOLD:4}\n137       - label: dcc-admission-check-scenarios-enabled\n138         value: ${DCC_ADMISSION_CHECK_SCENARIOS_ENABLED:0}\n139     supported-countries: ${SUPPORTED_COUNTRIES}\n140     app-versions:\n141       latest-ios: ${IOS_LATEST_VERSION:1.5.3}\n142       min-ios: ${IOS_MIN_VERSION:1.5.3}\n143       latest-android: ${ANDROID_LATEST_VERSION:1.5.1}\n144       min-android: ${ANDROID_MIN_VERSION:1.5.1}\n145       # With ENF v2 Android apps are versioned by Version Code and not by Semantic Versioning\n146       min-android-version-code: ${ANDROID_MIN_VERSION_CODE:48}\n147       latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:48}\n148     app-config-parameters:\n149       dgcParameters:\n150         testCertificateParameters:\n151           # validation rule for waitAfterPublicKeyRegistrationInSeconds:\n152           #   * must be a number\n153           #   * >= 0\n154           #   * <= 60\n155           waitAfterPublicKeyRegistrationInSeconds: ${DGC_TC_WAIT_AFTER_PUBLIC_KEY_REGISTRATION_IN_SECONDS:10}\n156           # validation rule for waitForRetryInSeconds:\n157           #   * must be a number\n158           #   * >= 0\n159           #   * <= 60\n160           waitForRetryInSeconds: ${DGC_TC_WAIT_FOR_RETRY_IN_SECONDS:10}\n161         expiration-threshold-in-days: ${DGC_EXPIRATION_THRESHOLD_IN_DAYS:27}\n162         block-list-parameters:\n163           # the value shall be parsed as a JSON string to\n164           # generate the individual items, e.g.\n165           # '[{\"indices\":[0],\"hash\":\"9B09CAFEC0A6808411C348880C9C2D920646DFB980B5C959DC6EBF8A19B98120\",\"validFrom\":1636040446},{\"indices\":[0,2],\"hash\":\"7D5D5B336E903086D64D1207EC6E957A4B1301026699011026F84A5156317C2B\",\"validFrom\":1638369640}]'\n166           # note that `hash` shall be parsed from a hex string to a byte sequence\n167           blocked-uvci-chunks: ${DGC_BLOCKED_UVCI_CHUNKS:[]}\n168         ios-dgc-reissue-service-public-key-digest: ${IOS_DGC_REISSUE_SERVICE_PUBLIC_KEY_DIGEST:}\n169         android-dgc-reissue-service-public-key-digest: ${ANDROID_DGC_REISSUE_SERVICE_PUBLIC_KEY_DIGEST:}\n170       ios-key-download-parameters:\n171         revoked-day-packages: ${KEY_DOWNLOAD_REVOKED_DAY_PACKAGES:[]}\n172         revoked-hour-packages: ${KEY_DOWNLOAD_REVOKED_HOUR_PACKAGES:[]}\n173       android-key-download-parameters:\n174         revoked-day-packages: ${KEY_DOWNLOAD_REVOKED_DAY_PACKAGES:[]}\n175         revoked-hour-packages: ${KEY_DOWNLOAD_REVOKED_HOUR_PACKAGES:[]}\n176         download-timeout-in-seconds: ${ANDROID_KEY_DOWNLOAD_DOWNLOAD_TIMEOUT_IN_SECONDS:60}\n177         overall-timeout-in-seconds: ${ANDROID_KEY_DOWNLOAD_OVERALL_TIMEOUT_IN_SECONDS:480}\n178       ios-exposure-detection-parameters:\n179         max-exposure-detections-per-interval: ${IOS_EXPOSURE_DETECTION_MAX_ED_PER_INTERVAL:6}\n180       android-exposure-detection-parameters:\n181         max-exposure-detections-per-interval: ${ANDROID_EXPOSURE_DETECTION_MAX_ED_PER_INTERVAL:6}\n182         overall-timeout-in-seconds: ${ANDROID_EXPOSURE_DETECTION_OVERALL_TIMEOUT_IN_SECONDS:900}\n183       ios-event-driven-user-survey-parameters:\n184         otp-query-parameter-name: ${EDUS_OTP_QUERY_PARAMETER_NAME:otp}\n185         survey-on-high-risk-enabled: ${EDUS_SURVEY_ON_HIGH_RISK_ENABLED:true}\n186         survey-on-high-risk-url: ${EDUS_SURVEY_ON_HIGH_RISK_URL:https://befragungen.rki.de/CWABasisbefragung}\n187       android-event-driven-user-survey-parameters:\n188         otp-query-parameter-name: ${EDUS_OTP_QUERY_PARAMETER_NAME:otp}\n189         survey-on-high-risk-enabled: ${EDUS_SURVEY_ON_HIGH_RISK_ENABLED:false}\n190         survey-on-high-risk-url: ${EDUS_SURVEY_ON_HIGH_RISK_URL:https://befragungen.rki.de/CWABasisbefragung}\n191         require-basic-integrity: ${EDUS_PPAC_REQUIRE_BASIC_INTEGRITY:true}\n192         require-cts-profile-match: ${EDUS_PPAC_REQUIRE_CTS_PROFILE_MATCH:true}\n193         require-evaluation-type-basic: ${EDUS_PPAC_REQUIRE_EVALUATION_TYPE_BASIC:false}\n194         require-evaluation-type-hardware-backed: ${EDUS_PPAC_REQUIRE_EVALUATION_TYPE_HARDWARE_BACKED:true}\n195       ios-privacy-preserving-analytics-parameters:\n196         probability-to-submit: ${PPA_PROBABILITY_TO_SUBMT:1}\n197         probability-to-submit-exposure-windows: ${PPA_PROBABILOITY_TO_SUBMIT_EXPOSURE_WINDOWS:1}\n198         hours-since-test-registration-to-submit-test-result-metadata: ${PPA_HOURS_SINCE_TEST_RESULT_TO_SUBMIT_KEY_RESULT_METADATA:165}\n199         hours-since-test-to-submit-key-submission-metadata: ${PPA_HOURS_SINCE_TEST_RESULT_TO_SUBMIT_KEY_SUBMISSION_METADATA:36}\n200       android-privacy-preserving-analytics-parameters:\n201         probability-to-submit: ${PPA_PROBABILITY_TO_SUBMT:1}\n202         probability-to-submit-exposure-windows: ${PPA_PROBABILOITY_TO_SUBMIT_EXPOSURE_WINDOWS:1}\n203         hours-since-test-registration-to-submit-test-result-metadata: ${PPA_HOURS_SINCE_TEST_RESULT_TO_SUBMIT_KEY_RESULT_METADATA:165}\n204         hours-since-test-to-submit-key-submission-metadata: ${PPA_HOURS_SINCE_TEST_RESULT_TO_SUBMIT_KEY_SUBMISSION_METADATA:36}\n205         require-basic-integrity: ${PPA_PPAC_REQUIRE_BASIC_INTEGRITY:false}\n206         require-cts-profile-match: ${PPA_PPAC_REQUIRE_CTS_PROFILE_MATCH:false}\n207         require-evaluation-type-basic: ${PPA_PPAC_REQUIRE_EVALUATION_TYPE_BASIC:false}\n208         require-evaluation-type-hardware-backed: ${PPA_PPAC_REQUIRE_EVALUATION_TYPE_HARDWARE_BACKED:false}\n209     ios-qr-code-poster-template:\n210       published-archive-name: qr_code_poster_template_ios\n211       template: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_FILE:}\n212       offsetX: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_OFFSET_X:97}\n213       offsetY: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_OFFSET_Y:82}\n214       qr-code-side-length: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_QR_CODE_SIDE_LENGTH:400}\n215       description-text-box:\n216         offsetX: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_DESCRIPTION_OFFSET_X:80}\n217         offsetY: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_DESCRIPTION_OFFSET_Y:510}\n218         width: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_DESCRIPTION_WIDTH:420}\n219         height: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_DESCRIPTION_HEIGHT:15}\n220         fontSize: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_DESCRIPTION_FONT_SIZE:10}\n221         fontColor: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_DESCRIPTION_FONT_COLOR:#000000}\n222       address-text-box:\n223         offsetX: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_ADDRESS_OFFSET_X:80}\n224         offsetY: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_ADDRESS_OFFSET_Y:525}\n225         width: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_ADDRESS_WIDTH:420}\n226         height: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_ADDRESS_HEIGHT:15}\n227         fontSize: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_ADDRESS_FONT_SIZE:10}\n228         fontColor: ${EVREG_QR_CODE_POSTER_TEMPLATE_IOS_ADDRESS_FONT_COLOR:#000000}\n229     android-qr-code-poster-template:\n230       published-archive-name: qr_code_poster_template_android\n231       template: ${EVREG_QR_CODE_POSTER_TEMPLATE_ANDROID_FILE:}\n232       offsetX: ${EVREG_QR_CODE_POSTER_TEMPLATE_ANDROID_OFFSET_X:0.16}\n233       offsetY: ${EVREG_QR_CODE_POSTER_TEMPLATE_ANDROID_OFFSET_Y:0.095}\n234       qr-code-side-length: ${EVREG_QR_CODE_POSTER_TEMPLATE_ANDROID_QR_CODE_SIDE_LENGTH:1000}\n235       description-text-box:\n236         offsetX: ${EVREG_QR_CODE_POSTER_TEMPLATE_ANDROID_DESCRIPTION_OFFSET_X:0.132}\n237         offsetY: ${EVREG_QR_CODE_POSTER_TEMPLATE_ANDROID_DESCRIPTION_OFFSET_Y:0.61}\n238         width: ${EVREG_QR_CODE_POSTER_TEMPLATE_ANDROID_DESCRIPTION_WIDTH:100}\n239         height: ${EVREG_QR_CODE_POSTER_TEMPLATE_ANDROID_DESCRIPTION_HEIGHT:20}\n240         font-size: ${EVREG_QR_CODE_POSTER_TEMPLATE_ANDROID_DESCRIPTION_FONT_SIZE:10}\n241         font-color: ${EVREG_QR_CODE_POSTER_TEMPLATE_ANDROID_DESCRIPTION_FONT_COLOR:#000000}\n242     presence-tracing-parameters:\n243       qr-code-error-correction-level: ${EVREG_QR_CODE_ERROR_CORRECTION_LEVEL:0}\n244       plausible-deniability-parameters:\n245         probability-to-fake-check-ins-if-no-check-ins: ${EVREG_PROBABILITY_TO_FAKE_CHECK_INS_IF_NO_CHECK_INS:0}\n246         probability-to-fake-check-ins-if-some-check-ins: ${EVREG_PROBABILITY_TO_FAKE_CHECK_INS_IF_SOME_CHECK_INS:0.005}\n247     digital-green-certificate:\n248       mah-json-path: ${DIGITAL_GREEN_CERTIFICATE_MAH_JSON_PATH:}\n249       prophylaxis-json-path: ${DIGITAL_GREEN_CERTIFICATE_PROPHYLAXIS_JSON_PATH:}\n250       medicinal-products-json-path: ${DIGITAL_GREEN_CERTIFICATE_MEDICINAL_PRODUCTS_JSON_PATH:}\n251       disease-agent-targeted-path: ${DIGITAL_GREEN_CERTIFICATE_DISEASE_AGENT_TARGETED_JSON_PATH:}\n252       test-manf-path: ${DIGITAL_GREEN_CERTIFICATE_TEST_MANF_JSON_PATH:}\n253       test-result-path: ${DIGITAL_GREEN_CERTIFICATE_TEST_RESULT_JSON_PATH:}\n254       test-type-path: ${DIGITAL_GREEN_CERTIFICATE_TEST_TYPE_JSON_PATH:}\n255       dgc-directory: ${DIGITAL_GREEN_CERTIFICATE_DIRECTORY:ehn-dgc}\n256       valuesets-file-name: ${DIGITAL_GREEN_CERTIFICATE_VALUESETS_FILE_NAME:value-sets}\n257       supported-languages: ${DIGITAL_GREEN_CERTIFICATE_SUPPORTED_LANGUAGES:de, en, bg, pl, ro, tr, uk}\n258       booster-notification: ${BOOSTER_NOTIFICATION_DIRECTORY:booster-notification-rules}\n259       export-archive-name: ${DIGITAL_GREEN_CERTIFICATE_ARCHIVE_NAME:export.bin}\n260       allow-list: ${DCC_VALIDATION_SERVICE_ALLOWLIST}\n261       allow-list-signature: ${DCC_VALIDATION_SERVICE_ALLOWLIST_SIGNATURE}\n262       allow-list-certificate: ${DCC_VALIDATION_SERVICE_ALLOWLIST_CERTIFICATE}\n263       ccl-directory: ${COMMON_COVID_LOGIC:ccl}\n264       ccl-allow-list: ${CCL_ALLOW_LIST:CCL-DE-0001}\n265       dsc-client:\n266         public-key: ${DSC_PUBLIC_KEY:MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEIxHvrv8jQx9OEzTZbsx1prQVQn/3ex0gMYf6GyaNBW0QKLMjrSDeN6HwSPM0QzhvhmyQUixl6l88A7Zpu5OWSw==}\n267         base-url: ${DSC_BASE_PATH:https://de.dscg.ubirch.com}\n268         dsc-list-path: ${DSC_LIST_PATH:/trustList/DSC/}\n269         ssl:\n270           trust-store: ${DSC_TRUST_STORE:../../docker-compose-test-secrets/dsc_truststore}\n271           trust-store-password: ${DSC_TRUST_STORE_PASSWORD:123456}\n272       client:\n273         public-key: ${DCC_PUBLIC_KEY:MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEnQmn1s+sTWqFPuRhqFRide7HD52SrsD01ZdX4cxN1r0pnZ0Zh7JNwZxmXlOQW5NDVlPdHq2QcD06gmP/10QizA==}\n274         retry-period: 2\n275         max-retry-period: 5\n276         max-retry-attempts: 2\n277         base-url: ${BUSSINESS_RULES_BASE_PATH:https://distribution.dcc-rules.de/}\n278         country-list-path: ${BUSSINESS_RULES_COUNTRY_LIST_PATH:/countrylist}\n279         value-sets-path: ${BUSSINESS_RULES_VALUE_SETS_PATH:/valuesets}\n280         rules-path: ${BUSSINESS_RULES_RULES_PATH:/rules}\n281         bn-rules-path: ${BUSSINESS_RULES_BN_RULES_PATH:/bnrules}\n282         ccl-rules-path: ${COMMON_COVID_LOGIC:/cclrules}\n283         ssl:\n284           trust-store: ${DCC_TRUST_STORE:../../docker-compose-test-secrets/dcc_truststore}\n285           trust-store-password: ${DCC_TRUST_STORE_PASSWORD:123456}\n286     dcc-revocation:\n287       client:\n288         public-key: ${DCC_REVOCATION_LIST_PUBLIC_KEY:MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE6Ft4aTjScTpsvY0tg2Lx0AK0Ih3Z2VKXnyBvoZxngB9cXmNtTg+Va3fY3QJduf+OXaWsE34xvMTIHxw+MpOLkw==}\n289         base-url: ${DCC_REV_BASE_PATH:https://de.crl.dscg.ubirch.com}\n290         ssl:\n291           trust-store: ${DCC_REV_TRUST_STORE:../../docker-compose-test-secrets/dcc_rev_truststore}\n292           trust-store-password: ${DCC_REV_TRUST_STORE_PASSWORD:testtest}\n293         retry-period: 2\n294         max-retry-period: 5\n295         max-retry-attempts: 2\n296       dcc-list-path: /chunk.lst\n297       dcc-revocation-directory: dcc-rl\n298       certificate: ${DCC_REVOCATION_LIST_CERTIFICATE}\n299 spring:\n300   main:\n301     web-application-type: NONE\n302   # Postgres configuration\n303   flyway:\n304     enabled: true\n305     locations: classpath:/db/migration, classpath:/db/specific/{vendor}\n306     password: ${POSTGRESQL_PASSWORD_FLYWAY:local_setup_flyway}\n307     user: ${POSTGRESQL_USER_FLYWAY:local_setup_flyway}\n308 \n309   datasource:\n310     driver-class-name: org.postgresql.Driver\n311     url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST}:${POSTGRESQL_SERVICE_PORT}/${POSTGRESQL_DATABASE}?ssl=true&sslmode=verify-full&sslrootcert=${SSL_POSTGRES_CERTIFICATE_PATH}&sslcert=${SSL_DISTRIBUTION_CERTIFICATE_PATH}&sslkey=${SSL_DISTRIBUTION_PRIVATE_KEY_PATH}\n312     username: ${POSTGRESQL_USER_DISTRIBUTION:local_setup_distribution}\n313     password: ${POSTGRESQL_PASSWORD_DISTRIBUTION:local_setup_distribution}\n314 \n[end of services/distribution/src/main/resources/application.yaml]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Here is the patch file for the provided issue:\n\n```diff\n--- a/services/distribution/src/main/resources/application.yaml\n+++ b/services/distribution/src/main/resources/application.yaml\n@@ -141,7 +141,7 @@\n     latest-ios: ${IOS_LATEST_VERSION:1.5.3}\n     min-ios: ${IOS_MIN_VERSION:1.5.3}\n     latest-android: ${ANDROID_LATEST_VERSION:1.5.1}\n-    min-android: ${ANDROID_MIN_VERSION:1.5.1}\n+    min-android: ${ANDROID_MIN_VERSION:1.0.4}\n     # With ENF v2 Android apps are versioned by Version Code and not by Semantic Versioning\n     min-android-version-code: ${ANDROID_MIN_VERSION_CODE:48}\n     latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:48}\n```\n\nPlease let me know if you need any further assistance.",
        "model_patch": "--- a/services/distribution/src/main/resources/application.yaml\n+++ b/services/distribution/src/main/resources/application.yaml\n@@ -141,7 +141,7 @@\n     latest-ios: ${IOS_LATEST_VERSION:1.5.3}\n     min-ios: ${IOS_MIN_VERSION:1.5.3}\n     latest-android: ${ANDROID_LATEST_VERSION:1.5.1}\n-    min-android: ${ANDROID_MIN_VERSION:1.5.1}\n+    min-android: ${ANDROID_MIN_VERSION:1.0.4}\n     # With ENF v2 Android apps are versioned by Version Code and not by Semantic Versioning\n     min-android-version-code: ${ANDROID_MIN_VERSION_CODE:48}\n     latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:48}\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 1965,
        "issue_numbers": [
            "1962"
        ],
        "base_commit": "f20af0764008b8ef07ba67c3b26693115035c43f",
        "patch": "diff --git a/services/distribution/src/main/resources/application.yaml b/services/distribution/src/main/resources/application.yaml\n--- a/services/distribution/src/main/resources/application.yaml\n+++ b/services/distribution/src/main/resources/application.yaml\n@@ -140,11 +140,11 @@ services:\n     app-versions:\n       latest-ios: ${IOS_LATEST_VERSION:1.5.3}\n       min-ios: ${IOS_MIN_VERSION:1.5.3}\n-      latest-android: ${ANDROID_LATEST_VERSION:1.5.1}\n-      min-android: ${ANDROID_MIN_VERSION:1.5.1}\n+      latest-android: ${ANDROID_LATEST_VERSION:1.0.4}\n+      min-android: ${ANDROID_MIN_VERSION:1.0.4}\n       # With ENF v2 Android apps are versioned by Version Code and not by Semantic Versioning\n-      min-android-version-code: ${ANDROID_MIN_VERSION_CODE:48}\n-      latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:48}\n+      min-android-version-code: ${ANDROID_MIN_VERSION_CODE:31}\n+      latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:31}\n     app-config-parameters:\n       dgcParameters:\n         testCertificateParameters:\n",
        "test_patch": "diff --git a/services/distribution/src/test/resources/application-allow-list-invalid.yaml b/services/distribution/src/test/resources/application-allow-list-invalid.yaml\n--- a/services/distribution/src/test/resources/application-allow-list-invalid.yaml\n+++ b/services/distribution/src/test/resources/application-allow-list-invalid.yaml\n@@ -83,10 +83,10 @@ services:\n     app-versions:\n       latest-ios: ${IOS_LATEST_VERSION:1.5.3}\n       min-ios: ${IOS_MIN_VERSION:1.5.3}\n-      latest-android: ${ANDROID_LATEST_VERSION:1.5.1}\n-      min-android: ${ANDROID_MIN_VERSION:1.5.1}\n-      min-android-version-code: ${ANDROID_MIN_VERSION_CODE:48}\n-      latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:48}\n+      latest-android: ${ANDROID_LATEST_VERSION:1.0.4}\n+      min-android: ${ANDROID_MIN_VERSION:1.0.4}\n+      min-android-version-code: ${ANDROID_MIN_VERSION_CODE:31}\n+      latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:31}\n     app-config-parameters:\n       dgcParameters:\n         testCertificateParameters:\ndiff --git a/services/distribution/src/test/resources/application.yaml b/services/distribution/src/test/resources/application.yaml\n--- a/services/distribution/src/test/resources/application.yaml\n+++ b/services/distribution/src/test/resources/application.yaml\n@@ -98,10 +98,10 @@ services:\n     app-versions:\n       latest-ios: ${IOS_LATEST_VERSION:1.5.3}\n       min-ios: ${IOS_MIN_VERSION:1.5.3}\n-      latest-android: ${ANDROID_LATEST_VERSION:1.5.1}\n-      min-android: ${ANDROID_MIN_VERSION:1.5.1}\n-      min-android-version-code: ${ANDROID_MIN_VERSION_CODE:48}\n-      latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:48}\n+      latest-android: ${ANDROID_LATEST_VERSION:1.0.4}\n+      min-android: ${ANDROID_MIN_VERSION:1.0.4}\n+      min-android-version-code: ${ANDROID_MIN_VERSION_CODE:31}\n+      latest-android-version-code: ${ANDROID_LATEST_VERSION_CODE:31}\n     app-config-parameters:\n       dgcParameters:\n         testCertificateParameters:\n",
        "problem_statement": "min-android 1.5.1 differs from production 1.0.4 value\n## Describe the bug\r\n\r\nThe `min-android` value served on \r\nhttps://svc90.main.px.t-online.de/version/v1/configuration/country/DE/app_config is \r\n\r\n`1.0.4` \r\n\r\nwhich differs from the value\r\n\r\n`1.5.1`\r\n\r\nstored in https://github.com/corona-warn-app/cwa-server/blob/main/services/distribution/src/main/resources/application.yaml#L144\r\n\r\nIf CWA Android 1.4.0 is started, there is no prompt shown to the user that the app should be updated.\r\n\r\n## Expected behaviour\r\n\r\nThe `min-android` value served on \r\nhttps://svc90.main.px.t-online.de/version/v1/configuration/country/DE/app_config should be the same as the value stored in https://github.com/corona-warn-app/cwa-server/blob/main/services/distribution/src/main/resources/application.yaml#L144 which is currently `1.5.1`.\r\n\r\nIf `min-android` with the value of `1.5.1` were in production then starting CWA Android 1.4.0 should produce a prompt to update the app.\r\n\r\n## Steps to reproduce the issue\r\n\r\n1. In Android Studio check out CWA Android app release/1.4.x\r\n2. Run CWA on Pixel 3a API 33 Android device emulator in Debug mode\r\n3. Open Logcat in Android Studio and enter search term \"UpdateChecker\"\r\n\r\nThe log shows the following:\r\n\r\n```\r\nUpdateChecker           de.rki.coronawarnapp.dev             E  minVersionStringFromServer:1.0.4\r\nUpdateChecker           de.rki.coronawarnapp.dev             E  Current app version:1.4.0\r\nUpdateChecker           de.rki.coronawarnapp.dev             E  needs update:false\r\n```\r\n\r\nAlternatively install old released versions from https://www.apkmirror.com/apk/robert-koch-institut/corona-warn-app/. As soon as a version < 1.0.4 is started, e.g. 1.0.0 or 1.0.2, a message \"Update available\" is output. \r\n\r\n![Update available](https://user-images.githubusercontent.com/66998419/202911146-6b74b2e4-7a8d-462d-8f19-6e10762719e2.jpg)\r\n\r\nIf version 1.0.4 is installed and started, no update message is output. This is consistent with min-Android being set to `1.0.4` in production.\r\n\r\n\r\n## Technical details\r\n\r\n- Android Studio Dolphin | 2021.3.1 Patch 1\r\n- Pixel 3a API 33 Android device emulator\r\n- CWA Android 1.4.0 (note that this version was not released. Version 1.5 followed version 1.3)\r\n\r\n## Possible Fix\r\n\r\nClarify what the minimum enforced version of CWA Android in production is supposed to be and ensure alignment of https://github.com/corona-warn-app/cwa-server/blob/main/services/distribution/src/main/resources/application.yaml with the values used in production.\r\n\n",
        "hints_text": "- FYI: I opened https://github.com/corona-warn-app/cwa-server/issues/1963 asking the team to check for other differences between this repositories `main` branch & the production environment. \nAlso I would expect `min-android-version-code` /  `minVersionCode=48` and not `31` to be served.",
        "created_at": "2022-11-21T14:08:50Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-429",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nUse Implicit Constructor Injection over Explicit\nThe `@Autowired` annotation for Spring components can be omitted for constructors in case there is only one constructor present on the class. Therefore, remove all the unnecessary annotation for those cases.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile          | Effect\n148 -----------------|-------------\n149 `dev`            | Turns the log level to `DEBUG`.\n150 `cloud`          | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`           | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n152 `testdata`       | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 `signature-dev`  | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n154 `signature-prod` | Provides production app package IDs for the signature info\n155 \n156 ### Submission\n157 \n158 Profile      | Effect\n159 -------------|-------------\n160 `dev`        | Turns the log level to `DEBUG`.\n161 `cloud`      | Removes default values for the `datasource` configuration.\n162 \n163 ## Documentation\n164 \n165 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n166 \n167 ## Support and Feedback\n168 \n169 The following channels are available for discussions, feedback, and support requests:\n170 \n171 | Type                     | Channel                                                |\n172 | ------------------------ | ------------------------------------------------------ |\n173 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n174 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n175 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n176 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n177 \n178 ## How to Contribute\n179 \n180 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n181 \n182 ## Contributors\n183 \n184 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n185 \n186 ## Repositories\n187 \n188 The following public repositories are currently available for the Corona-Warn-App:\n189 \n190 | Repository          | Description                                                           |\n191 | ------------------- | --------------------------------------------------------------------- |\n192 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n193 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n194 | [cwa-verification-server] | Backend implementation of the verification process|\n195 \n196 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n197 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n198 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n199 [Postgres]: https://www.postgresql.org/\n200 [HSQLDB]: http://hsqldb.org/\n201 [Zenko CloudServer]: https://github.com/scality/cloudserver\n202 \n203 ## Licensing\n204 \n205 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n206 \n207 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n208 \n209 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n210 \n211 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n212 \n[end of README.md]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.common.persistence.service;\n22 \n23 import static java.time.ZoneOffset.UTC;\n24 \n25 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n26 import app.coronawarn.server.common.persistence.repository.DiagnosisKeyRepository;\n27 import java.time.Instant;\n28 import java.time.LocalDateTime;\n29 import java.util.Collection;\n30 import java.util.List;\n31 import java.util.stream.Collectors;\n32 import javax.validation.ConstraintViolation;\n33 import org.slf4j.Logger;\n34 import org.slf4j.LoggerFactory;\n35 import org.springframework.beans.factory.annotation.Autowired;\n36 import org.springframework.data.domain.Sort;\n37 import org.springframework.data.domain.Sort.Direction;\n38 import org.springframework.stereotype.Component;\n39 import org.springframework.transaction.annotation.Transactional;\n40 \n41 @Component\n42 public class DiagnosisKeyService {\n43 \n44   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyService.class);\n45   private final DiagnosisKeyRepository keyRepository;\n46 \n47   @Autowired\n48   public DiagnosisKeyService(DiagnosisKeyRepository keyRepository) {\n49     this.keyRepository = keyRepository;\n50   }\n51 \n52   /**\n53    * Persists the specified collection of {@link DiagnosisKey} instances. If the key data of a particular diagnosis key\n54    * already exists in the database, this diagnosis key is not persisted.\n55    *\n56    * @param diagnosisKeys must not contain {@literal null}.\n57    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n58    */\n59   @Transactional\n60   public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n61     for (DiagnosisKey diagnosisKey : diagnosisKeys) {\n62       keyRepository.saveDoNothingOnConflict(\n63           diagnosisKey.getKeyData(), diagnosisKey.getRollingStartIntervalNumber(), diagnosisKey.getRollingPeriod(),\n64           diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel());\n65     }\n66   }\n67 \n68   /**\n69    * Returns all valid persisted diagnosis keys, sorted by their submission timestamp.\n70    */\n71   public List<DiagnosisKey> getDiagnosisKeys() {\n72     List<DiagnosisKey> diagnosisKeys = keyRepository.findAll(Sort.by(Direction.ASC, \"submissionTimestamp\"));\n73     List<DiagnosisKey> validDiagnosisKeys =\n74         diagnosisKeys.stream().filter(DiagnosisKeyService::isDiagnosisKeyValid).collect(Collectors.toList());\n75 \n76     int numberOfDiscardedKeys = diagnosisKeys.size() - validDiagnosisKeys.size();\n77     logger.info(\"Retrieved {} diagnosis key(s). Discarded {} diagnosis key(s) from the result as invalid.\",\n78         diagnosisKeys.size(), numberOfDiscardedKeys);\n79 \n80     return validDiagnosisKeys;\n81   }\n82 \n83   private static boolean isDiagnosisKeyValid(DiagnosisKey diagnosisKey) {\n84     Collection<ConstraintViolation<DiagnosisKey>> violations = diagnosisKey.validate();\n85     boolean isValid = violations.isEmpty();\n86 \n87     if (!isValid) {\n88       List<String> violationMessages =\n89           violations.stream().map(ConstraintViolation::getMessage).collect(Collectors.toList());\n90       logger.warn(\"Validation failed for diagnosis key from database. Violations: {}\", violationMessages);\n91     }\n92 \n93     return isValid;\n94   }\n95 \n96   /**\n97    * Deletes all diagnosis key entries which have a submission timestamp that is older than the specified number of\n98    * days.\n99    *\n100    * @param daysToRetain the number of days until which diagnosis keys will be retained.\n101    * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n102    */\n103   @Transactional\n104   public void applyRetentionPolicy(int daysToRetain) {\n105     if (daysToRetain < 0) {\n106       throw new IllegalArgumentException(\"Number of days to retain must be greater or equal to 0.\");\n107     }\n108 \n109     long threshold = LocalDateTime\n110         .ofInstant(Instant.now(), UTC)\n111         .minusDays(daysToRetain)\n112         .toEpochSecond(UTC) / 3600L;\n113     int numberOfDeletions = keyRepository.deleteBySubmissionTimestampIsLessThanEqual(threshold);\n114     logger.info(\"Deleted {} diagnosis key(s) with a submission timestamp older than {} day(s) ago.\",\n115         numberOfDeletions, daysToRetain);\n116   }\n117 }\n118 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.component;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n25 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n26 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.DiagnosisKeysDirectory;\n27 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n28 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n29 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n30 import java.util.Collection;\n31 import org.slf4j.Logger;\n32 import org.slf4j.LoggerFactory;\n33 import org.springframework.beans.factory.annotation.Autowired;\n34 import org.springframework.stereotype.Component;\n35 \n36 /**\n37  * Retrieves stored diagnosis keys and builds a {@link DiagnosisKeysDirectory} with them.\n38  */\n39 @Component\n40 public class DiagnosisKeysStructureProvider {\n41 \n42   private static final Logger logger = LoggerFactory\n43       .getLogger(DiagnosisKeysStructureProvider.class);\n44 \n45   @Autowired\n46   private DiagnosisKeyBundler diagnosisKeyBundler;\n47   private final DiagnosisKeyService diagnosisKeyService;\n48   private final CryptoProvider cryptoProvider;\n49   private final DistributionServiceConfig distributionServiceConfig;\n50 \n51   /**\n52    * Creates a new DiagnosisKeysStructureProvider.\n53    */\n54   DiagnosisKeysStructureProvider(DiagnosisKeyService diagnosisKeyService, CryptoProvider cryptoProvider,\n55       DistributionServiceConfig distributionServiceConfig) {\n56     this.diagnosisKeyService = diagnosisKeyService;\n57     this.cryptoProvider = cryptoProvider;\n58     this.distributionServiceConfig = distributionServiceConfig;\n59   }\n60 \n61   /**\n62    * Get directory for diagnosis keys from database.\n63    *\n64    * @return the directory\n65    */\n66   public Directory<WritableOnDisk> getDiagnosisKeys() {\n67     logger.debug(\"Querying diagnosis keys from the database...\");\n68     Collection<DiagnosisKey> diagnosisKeys = diagnosisKeyService.getDiagnosisKeys();\n69     diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys);\n70     return new DiagnosisKeysDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig);\n71   }\n72 }\n73 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.objectstore;\n22 \n23 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n24 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.Api;\n25 import app.coronawarn.server.services.distribution.objectstore.client.S3Object;\n26 import java.time.LocalDate;\n27 import java.time.ZoneOffset;\n28 import java.time.format.DateTimeFormatter;\n29 import java.util.List;\n30 import java.util.regex.Matcher;\n31 import java.util.regex.Pattern;\n32 import org.springframework.beans.factory.annotation.Autowired;\n33 import org.springframework.stereotype.Component;\n34 \n35 /**\n36  * Creates an S3RetentionPolicy object, which applies the retention policy to the S3 compatible storage.\n37  */\n38 @Component\n39 public class S3RetentionPolicy {\n40 \n41   private final ObjectStoreAccess objectStoreAccess;\n42   private final Api api;\n43 \n44   @Autowired\n45   public S3RetentionPolicy(ObjectStoreAccess objectStoreAccess, DistributionServiceConfig distributionServiceConfig) {\n46     this.objectStoreAccess = objectStoreAccess;\n47     this.api = distributionServiceConfig.getApi();\n48   }\n49 \n50   /**\n51    * Deletes all diagnosis-key files from S3 that are older than retentionDays.\n52    *\n53    * @param retentionDays the number of days, that files should be retained on S3.\n54    */\n55   public void applyRetentionPolicy(int retentionDays) {\n56     List<S3Object> diagnosisKeysObjects = objectStoreAccess.getObjectsWithPrefix(\"version/v1/\"\n57         + api.getDiagnosisKeysPath() + \"/\"\n58         + api.getCountryPath() + \"/\"\n59         + api.getCountryGermany() + \"/\"\n60         + api.getDatePath() + \"/\");\n61     final String regex = \".*([0-9]{4}-[0-9]{2}-[0-9]{2}).*\";\n62     final Pattern pattern = Pattern.compile(regex);\n63 \n64     final LocalDate cutOffDate = LocalDate.now(ZoneOffset.UTC).minusDays(retentionDays);\n65 \n66     diagnosisKeysObjects.stream()\n67         .filter(diagnosisKeysObject -> {\n68           Matcher matcher = pattern.matcher(diagnosisKeysObject.getObjectName());\n69           return matcher.matches() && LocalDate.parse(matcher.group(1), DateTimeFormatter.ISO_LOCAL_DATE)\n70               .isBefore(cutOffDate);\n71         })\n72         .forEach(this::deleteDiagnosisKey);\n73   }\n74 \n75   /**\n76    * Java stream do not support checked exceptions within streams. This helper method rethrows them as unchecked\n77    * expressions, so they can be passed up to the Retention Policy.\n78    *\n79    * @param diagnosisKey the  diagnosis key, that should be deleted.\n80    */\n81   public void deleteDiagnosisKey(S3Object diagnosisKey) {\n82     objectStoreAccess.deleteObjectsWithPrefix(diagnosisKey.getObjectName());\n83   }\n84 }\n85 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.submission.controller;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n25 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n26 import app.coronawarn.server.common.protocols.internal.SubmissionPayload;\n27 import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;\n28 import app.coronawarn.server.services.submission.validation.ValidSubmissionPayload;\n29 import app.coronawarn.server.services.submission.verification.TanVerifier;\n30 import java.util.ArrayList;\n31 import java.util.List;\n32 import java.util.concurrent.Executors;\n33 import java.util.concurrent.ForkJoinPool;\n34 import java.util.concurrent.ScheduledExecutorService;\n35 import java.util.concurrent.TimeUnit;\n36 import org.apache.commons.math3.distribution.PoissonDistribution;\n37 import org.slf4j.Logger;\n38 import org.slf4j.LoggerFactory;\n39 import org.springframework.beans.factory.annotation.Autowired;\n40 import org.springframework.http.HttpStatus;\n41 import org.springframework.http.ResponseEntity;\n42 import org.springframework.util.StopWatch;\n43 import org.springframework.validation.annotation.Validated;\n44 import org.springframework.web.bind.annotation.PostMapping;\n45 import org.springframework.web.bind.annotation.RequestBody;\n46 import org.springframework.web.bind.annotation.RequestHeader;\n47 import org.springframework.web.bind.annotation.RequestMapping;\n48 import org.springframework.web.bind.annotation.RestController;\n49 import org.springframework.web.context.request.async.DeferredResult;\n50 \n51 @RestController\n52 @RequestMapping(\"/version/v1\")\n53 @Validated\n54 public class SubmissionController {\n55 \n56   private static final Logger logger = LoggerFactory.getLogger(SubmissionController.class);\n57   /**\n58    * The route to the submission endpoint (version agnostic).\n59    */\n60   public static final String SUBMISSION_ROUTE = \"/diagnosis-keys\";\n61 \n62   private final ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n63   private final ForkJoinPool forkJoinPool = ForkJoinPool.commonPool();\n64   private final DiagnosisKeyService diagnosisKeyService;\n65   private final TanVerifier tanVerifier;\n66   private final Double fakeDelayMovingAverageSamples;\n67   private final Integer retentionDays;\n68   private Double fakeDelay;\n69 \n70   @Autowired\n71   SubmissionController(DiagnosisKeyService diagnosisKeyService, TanVerifier tanVerifier,\n72       SubmissionServiceConfig submissionServiceConfig) {\n73     this.diagnosisKeyService = diagnosisKeyService;\n74     this.tanVerifier = tanVerifier;\n75     fakeDelay = submissionServiceConfig.getInitialFakeDelayMilliseconds();\n76     fakeDelayMovingAverageSamples = submissionServiceConfig.getFakeDelayMovingAverageSamples();\n77     retentionDays = submissionServiceConfig.getRetentionDays();\n78   }\n79 \n80   /**\n81    * Handles diagnosis key submission requests.\n82    *\n83    * @param exposureKeys The unmarshalled protocol buffers submission payload.\n84    * @param fake         A header flag, marking fake requests.\n85    * @param tan          A tan for diagnosis verification.\n86    * @return An empty response body.\n87    */\n88   @PostMapping(SUBMISSION_ROUTE)\n89   public DeferredResult<ResponseEntity<Void>> submitDiagnosisKey(\n90       @ValidSubmissionPayload @RequestBody SubmissionPayload exposureKeys,\n91       @RequestHeader(\"cwa-fake\") Integer fake,\n92       @RequestHeader(\"cwa-authorization\") String tan) {\n93     if (fake != 0) {\n94       return buildFakeDeferredResult();\n95     } else {\n96       return buildRealDeferredResult(exposureKeys, tan);\n97     }\n98   }\n99 \n100   private DeferredResult<ResponseEntity<Void>> buildFakeDeferredResult() {\n101     DeferredResult<ResponseEntity<Void>> deferredResult = new DeferredResult<>();\n102     long delay = new PoissonDistribution(fakeDelay).sample();\n103     scheduledExecutor.schedule(() -> deferredResult.setResult(buildSuccessResponseEntity()),\n104         delay, TimeUnit.MILLISECONDS);\n105     return deferredResult;\n106   }\n107 \n108   private DeferredResult<ResponseEntity<Void>> buildRealDeferredResult(SubmissionPayload exposureKeys, String tan) {\n109     DeferredResult<ResponseEntity<Void>> deferredResult = new DeferredResult<>();\n110 \n111     forkJoinPool.submit(() -> {\n112       StopWatch stopWatch = new StopWatch();\n113       stopWatch.start();\n114       if (!this.tanVerifier.verifyTan(tan)) {\n115         deferredResult.setResult(buildTanInvalidResponseEntity());\n116       } else {\n117         try {\n118           persistDiagnosisKeysPayload(exposureKeys);\n119           deferredResult.setResult(buildSuccessResponseEntity());\n120           stopWatch.stop();\n121           updateFakeDelay(stopWatch.getTotalTimeMillis());\n122         } catch (Exception e) {\n123           deferredResult.setErrorResult(e);\n124         }\n125       }\n126     });\n127 \n128     return deferredResult;\n129   }\n130 \n131   /**\n132    * Returns a response that indicates successful request processing.\n133    */\n134   private ResponseEntity<Void> buildSuccessResponseEntity() {\n135     return ResponseEntity.ok().build();\n136   }\n137 \n138   /**\n139    * Returns a response that indicates that an invalid TAN was specified in the request.\n140    */\n141   private ResponseEntity<Void> buildTanInvalidResponseEntity() {\n142     return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n143   }\n144 \n145   /**\n146    * Persists the diagnosis keys contained in the specified request payload.\n147    *\n148    * @param protoBufDiagnosisKeys Diagnosis keys that were specified in the request.\n149    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n150    */\n151   public void persistDiagnosisKeysPayload(SubmissionPayload protoBufDiagnosisKeys) {\n152     List<TemporaryExposureKey> protoBufferKeysList = protoBufDiagnosisKeys.getKeysList();\n153     List<DiagnosisKey> diagnosisKeys = new ArrayList<>();\n154 \n155     for (TemporaryExposureKey protoBufferKey : protoBufferKeysList) {\n156       DiagnosisKey diagnosisKey = DiagnosisKey.builder().fromProtoBuf(protoBufferKey).build();\n157       if (diagnosisKey.isYoungerThanRetentionThreshold(retentionDays)) {\n158         diagnosisKeys.add(diagnosisKey);\n159       } else {\n160         logger.info(\"Not persisting a diagnosis key, as it is outdated beyond retention threshold.\");\n161       }\n162     }\n163 \n164     diagnosisKeyService.saveDiagnosisKeys(diagnosisKeys);\n165   }\n166 \n167   private synchronized void updateFakeDelay(long realRequestDuration) {\n168     fakeDelay = fakeDelay + (1 / fakeDelayMovingAverageSamples) * (realRequestDuration - fakeDelay);\n169   }\n170 }\n171 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.submission.verification;\n22 \n23 import feign.FeignException;\n24 import org.slf4j.Logger;\n25 import org.slf4j.LoggerFactory;\n26 import org.springframework.beans.factory.annotation.Autowired;\n27 import org.springframework.stereotype.Service;\n28 import org.springframework.web.client.RestClientException;\n29 \n30 /**\n31  * The TanVerifier performs the verification of submission TANs.\n32  */\n33 @Service\n34 public class TanVerifier {\n35 \n36   private static final Logger logger = LoggerFactory.getLogger(TanVerifier.class);\n37   private final VerificationServerClient verificationServerClient;\n38 \n39   /**\n40    * This class can be used to verify a TAN against a configured verification service.\n41    *\n42    * @param verificationServerClient The REST client to communicate with the verification server\n43    */\n44   @Autowired\n45   public TanVerifier(VerificationServerClient verificationServerClient) {\n46     this.verificationServerClient = verificationServerClient;\n47   }\n48 \n49   /**\n50    * Verifies the specified TAN. Returns {@literal true} if the specified TAN is valid, {@literal false} otherwise.\n51    *\n52    * @param tanString Submission Authorization TAN\n53    * @return {@literal true} if the specified TAN is valid, {@literal false} otherwise.\n54    * @throws RestClientException if status code is neither 2xx nor 4xx\n55    */\n56   public boolean verifyTan(String tanString) {\n57     try {\n58       Tan tan = Tan.of(tanString);\n59 \n60       return verifyWithVerificationService(tan);\n61     } catch (IllegalArgumentException e) {\n62       logger.debug(\"TAN Syntax check failed for TAN: {}\", tanString.trim());\n63       return false;\n64     }\n65   }\n66 \n67   /**\n68    * Queries the configured verification service to validate the provided TAN.\n69    *\n70    * @param tan Submission Authorization TAN\n71    * @return {@literal true} if verification service is able to verify the provided TAN, {@literal false} otherwise\n72    * @throws RestClientException if http status code is neither 2xx nor 404\n73    */\n74   private boolean verifyWithVerificationService(Tan tan) {\n75     try {\n76       verificationServerClient.verifyTan(tan);\n77       return true;\n78     } catch (FeignException.NotFound e) {\n79       return false;\n80     }\n81   }\n82 }\n83 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n@@ -48,7 +48,6 @@ public class DiagnosisKeyService {\n   @Autowired\n   public DiagnosisKeyService(DiagnosisKeyRepository keyRepository) {\n     this.keyRepository = keyRepository;\n-    this.keyRepository = keyRepository;\n   }\n \n   /**\n</patch>",
        "model_patch": "\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n@@ -48,7 +48,6 @@ public class DiagnosisKeyService {\n   @Autowired\n   public DiagnosisKeyService(DiagnosisKeyRepository keyRepository) {\n     this.keyRepository = keyRepository;\n-    this.keyRepository = keyRepository;\n   }\n \n   /**\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 429,
        "issue_numbers": [
            "404"
        ],
        "base_commit": "528b73595c202a8216bd321dafd431206a6fd2c0",
        "patch": "diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n@@ -32,7 +32,6 @@\n import javax.validation.ConstraintViolation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.domain.Sort.Direction;\n import org.springframework.stereotype.Component;\n@@ -44,7 +43,6 @@ public class DiagnosisKeyService {\n   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyService.class);\n   private final DiagnosisKeyRepository keyRepository;\n \n-  @Autowired\n   public DiagnosisKeyService(DiagnosisKeyRepository keyRepository) {\n     this.keyRepository = keyRepository;\n   }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java\n@@ -30,7 +30,6 @@\n import java.util.Collection;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -42,8 +41,7 @@ public class DiagnosisKeysStructureProvider {\n   private static final Logger logger = LoggerFactory\n       .getLogger(DiagnosisKeysStructureProvider.class);\n \n-  @Autowired\n-  private DiagnosisKeyBundler diagnosisKeyBundler;\n+  private final DiagnosisKeyBundler diagnosisKeyBundler;\n   private final DiagnosisKeyService diagnosisKeyService;\n   private final CryptoProvider cryptoProvider;\n   private final DistributionServiceConfig distributionServiceConfig;\n@@ -52,10 +50,11 @@ public class DiagnosisKeysStructureProvider {\n    * Creates a new DiagnosisKeysStructureProvider.\n    */\n   DiagnosisKeysStructureProvider(DiagnosisKeyService diagnosisKeyService, CryptoProvider cryptoProvider,\n-      DistributionServiceConfig distributionServiceConfig) {\n+      DistributionServiceConfig distributionServiceConfig, DiagnosisKeyBundler diagnosisKeyBundler) {\n     this.diagnosisKeyService = diagnosisKeyService;\n     this.cryptoProvider = cryptoProvider;\n     this.distributionServiceConfig = distributionServiceConfig;\n+    this.diagnosisKeyBundler = diagnosisKeyBundler;\n   }\n \n   /**\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java\n@@ -29,7 +29,6 @@\n import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -41,7 +40,6 @@ public class S3RetentionPolicy {\n   private final ObjectStoreAccess objectStoreAccess;\n   private final Api api;\n \n-  @Autowired\n   public S3RetentionPolicy(ObjectStoreAccess objectStoreAccess, DistributionServiceConfig distributionServiceConfig) {\n     this.objectStoreAccess = objectStoreAccess;\n     this.api = distributionServiceConfig.getApi();\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n@@ -36,7 +36,6 @@\n import org.apache.commons.math3.distribution.PoissonDistribution;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.StopWatch;\n@@ -67,7 +66,6 @@ public class SubmissionController {\n   private final Integer retentionDays;\n   private Double fakeDelay;\n \n-  @Autowired\n   SubmissionController(DiagnosisKeyService diagnosisKeyService, TanVerifier tanVerifier,\n       SubmissionServiceConfig submissionServiceConfig) {\n     this.diagnosisKeyService = diagnosisKeyService;\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java\n@@ -23,7 +23,6 @@\n import feign.FeignException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.springframework.web.client.RestClientException;\n \n@@ -41,7 +40,6 @@ public class TanVerifier {\n    *\n    * @param verificationServerClient The REST client to communicate with the verification server\n    */\n-  @Autowired\n   public TanVerifier(VerificationServerClient verificationServerClient) {\n     this.verificationServerClient = verificationServerClient;\n   }\n",
        "test_patch": "diff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/RequestExecutor.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/RequestExecutor.java\n--- a/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/RequestExecutor.java\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/RequestExecutor.java\n@@ -29,7 +29,6 @@\n import java.time.Instant;\n import java.time.LocalDate;\n import java.util.Collection;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.web.client.TestRestTemplate;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n@@ -50,7 +49,6 @@ public class RequestExecutor {\n   private static final URI SUBMISSION_URL = URI.create(\"/version/v1/diagnosis-keys\");\n   private final TestRestTemplate testRestTemplate;\n \n-  @Autowired\n   public RequestExecutor(TestRestTemplate testRestTemplate) {\n     this.testRestTemplate = testRestTemplate;\n   }\n",
        "problem_statement": "Use Implicit Constructor Injection over Explicit\nThe `@Autowired` annotation for Spring components can be omitted for constructors in case there is only one constructor present on the class. Therefore, remove all the unnecessary annotation for those cases.\n",
        "hints_text": "I guess it should be doable for me to get started",
        "created_at": "2020-06-02T21:54:44Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-783",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nImprove logging of the submission validation process\n<!--\r\nThanks for proposing an enhancement \ud83d\ude4c \u2764\ufe0f\r\n\r\nBefore opening a new issue, please make sure that we do not have any duplicates already open. You can ensure this by searching the issue list for this repository. If there is a duplicate, please close your issue and add a comment to the existing issue instead.\r\n-->\r\nThe enhancement suggested by @Tho-Mat, and based on the discussion in https://github.com/corona-warn-app/cwa-server/issues/723\r\n\r\n## Current Implementation\r\nIssue https://github.com/corona-warn-app/cwa-server/issues/723, demonstrated that currently implemented logging is not sufficient for effective troubleshooting of the submission validation process.\r\n\r\n## Suggested Enhancement\r\nIf the kay can not be saved in a DB (e.g. because it is  already in database / Date to high / Date to low / unknown), we log this fact, date of the issue and the reason in the application logs.\r\n\r\n## Expected Benefits\r\nThis would have the great advantage of better analyzing certain constellations that can lead to errors.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/ARCHITECTURE.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup for local development and testing purposes, including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env``` in the root folder of the repository. If the endpoints are to be exposed to the network the default values in this file should be changed before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `localhost:8001` <br> `postgres:5432` (from containerized pgadmin) <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is `edc07f08-a1aa-11ea-bb37-0242ac130002`.\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 If you are already running a local Postgres, you need to create a database `cwa` and run the following setup scripts:\n101 \n102 * Create the different CWA roles first by executing [create-roles.sql](setup/create-roles.sql).\n103 * Create local database users for the specific roles by running [create-users.sql](./local-setup/create-users.sql).\n104 * It is recommended to also run [enable-test-data-docker-compose.sql](./local-setup/enable-test-data-docker-compose.sql)\n105 , which enables the test data generation profile. If you already had CWA running before and an existing `diagnosis-key`\n106 table on your database, you need to run [enable-test-data.sql](./local-setup/enable-test-data.sql) instead.\n107 \n108 You can also use `docker-compose` to start Postgres and Zenko. If you do that, you have to\n109 set the following environment-variables when running the Spring project:\n110 \n111 For the distribution module:\n112 \n113 ```bash\n114 POSTGRESQL_SERVICE_PORT=8001\n115 VAULT_FILESIGNING_SECRET=</path/to/your/private_key>\n116 SPRING_PROFILES_ACTIVE=signature-dev,disable-ssl-client-postgres\n117 ```\n118 \n119 For the submission module:\n120 \n121 ```bash\n122 POSTGRESQL_SERVICE_PORT=8001\n123 SPRING_PROFILES_ACTIVE=disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n124 ```\n125 \n126 #### Configure\n127 \n128 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n129 \n130 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n131 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n132 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n133   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n134 \n135 #### Build\n136 \n137 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n138 \n139 #### Run\n140 \n141 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n142 \n143 If you want to start the submission service, for example, you start it as follows:\n144 \n145 ```bash\n146   cd services/submission/\n147   mvn spring-boot:run\n148 ```\n149 \n150 #### Debugging\n151 \n152 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n153 \n154 ```bash\n155 mvn spring-boot:run -Dspring.profiles.active=dev\n156 ```\n157 \n158 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n159 \n160 ## Service APIs\n161 \n162 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n163 \n164 Service                   | OpenAPI Specification\n165 --------------------------|-------------\n166 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n167 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n168 \n169 ## Spring Profiles\n170 \n171 ### Distribution\n172 \n173 See [Distribution Service - Spring Profiles](/docs/DISTRIBUTION.md#spring-profiles).\n174 \n175 ### Submission\n176 \n177 See [Submission Service - Spring Profiles](/docs/SUBMISSION.md#spring-profiles).\n178 \n179 ## Documentation\n180 \n181 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n182 \n183 The documentation for cwa-server can be found under the [/docs](./docs) folder.\n184 \n185 The JavaDoc documentation for cwa-server is hosted by Github Pages at [https://corona-warn-app.github.io/cwa-server](https://corona-warn-app.github.io/cwa-server).\n186 \n187 ## Support and Feedback\n188 \n189 The following channels are available for discussions, feedback, and support requests:\n190 \n191 | Type                     | Channel                                                |\n192 | ------------------------ | ------------------------------------------------------ |\n193 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n194 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n195 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n196 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n197 \n198 ## How to Contribute\n199 \n200 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n201 \n202 ## Contributors\n203 \n204 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n205 \n206 ## Repositories\n207 \n208 The following public repositories are currently available for the Corona-Warn-App:\n209 \n210 | Repository          | Description                                                           |\n211 | ------------------- | --------------------------------------------------------------------- |\n212 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n213 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n214 | [cwa-verification-server] | Backend implementation of the verification process|\n215 \n216 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n217 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n218 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n219 [Postgres]: https://www.postgresql.org/\n220 [HSQLDB]: http://hsqldb.org/\n221 [Zenko CloudServer]: https://github.com/scality/cloudserver\n222 \n223 ## Licensing\n224 \n225 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n226 \n227 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n228 \n229 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n230 \n231 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n232 \n[end of README.md]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.common.persistence.domain;\n22 \n23 import static java.time.ZoneOffset.UTC;\n24 \n25 import app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;\n26 import app.coronawarn.server.common.persistence.domain.validation.ValidCountries;\n27 import app.coronawarn.server.common.persistence.domain.validation.ValidRollingStartIntervalNumber;\n28 import app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestamp;\n29 import app.coronawarn.server.common.protocols.external.exposurenotification.ReportType;\n30 import java.time.Instant;\n31 import java.time.LocalDateTime;\n32 import java.util.Arrays;\n33 import java.util.Collections;\n34 import java.util.List;\n35 import java.util.Objects;\n36 import java.util.Set;\n37 import javax.validation.ConstraintViolation;\n38 import javax.validation.Validation;\n39 import javax.validation.Validator;\n40 import javax.validation.constraints.Size;\n41 import org.hibernate.validator.constraints.Range;\n42 import org.springframework.data.annotation.Id;\n43 \n44 /**\n45  * A key generated for advertising over a window of time.\n46  */\n47 public class DiagnosisKey {\n48 \n49   public static final long ROLLING_PERIOD_MINUTES_INTERVAL = 10;\n50 \n51   /**\n52    * According to \"Setting Up an Exposure Notification Server\" by Apple, exposure notification servers are expected to\n53    * reject any diagnosis keys that do not have a rolling period of a certain fixed value. See\n54    * https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server\n55    */\n56   public static final int MIN_ROLLING_PERIOD = 0;\n57   public static final int MAX_ROLLING_PERIOD = 144;\n58 \n59   private static final Validator VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n60 \n61   @Id\n62   @Size(min = 16, max = 16, message = \"Key data must be a byte array of length 16.\")\n63   private final byte[] keyData;\n64 \n65   @ValidRollingStartIntervalNumber\n66   private final int rollingStartIntervalNumber;\n67 \n68   @Range(min = MIN_ROLLING_PERIOD, max = MAX_ROLLING_PERIOD,\n69       message = \"Rolling period must be between \" + MIN_ROLLING_PERIOD + \" and \" + MAX_ROLLING_PERIOD + \".\")\n70   private final int rollingPeriod;\n71 \n72   @Range(min = 0, max = 8, message = \"Risk level must be between 0 and 8.\")\n73   private final int transmissionRiskLevel;\n74 \n75   @ValidSubmissionTimestamp\n76   private final long submissionTimestamp;\n77 \n78   private final boolean consentToFederation;\n79 \n80   @Size(max = 2)\n81   private final String originCountry;\n82 \n83   @ValidCountries\n84   private final List<String> visitedCountries;\n85 \n86   private final ReportType reportType;\n87 \n88   private final int daysSinceOnsetOfSymptoms;\n89 \n90   /**\n91    * Should be called by builders.\n92    */\n93   DiagnosisKey(byte[] keyData, int rollingStartIntervalNumber, int rollingPeriod,\n94       int transmissionRiskLevel, long submissionTimestamp,\n95       boolean consentToFederation, @Size String originCountry, List<String> visitedCountries,\n96       ReportType reportType, int daysSinceOnsetOfSymptoms) {\n97     this.keyData = keyData;\n98     this.rollingStartIntervalNumber = rollingStartIntervalNumber;\n99     this.rollingPeriod = rollingPeriod;\n100     this.transmissionRiskLevel = transmissionRiskLevel;\n101     this.submissionTimestamp = submissionTimestamp;\n102     this.consentToFederation = consentToFederation;\n103     this.originCountry = originCountry;\n104     this.visitedCountries = visitedCountries == null ? Collections.emptyList() : visitedCountries;\n105     this.reportType = reportType;\n106     this.daysSinceOnsetOfSymptoms = daysSinceOnsetOfSymptoms;\n107   }\n108 \n109   /**\n110    * Returns a DiagnosisKeyBuilder instance. A {@link DiagnosisKey} can then be build by either providing the required\n111    * member values or by passing the respective protocol buffer object.\n112    *\n113    * @return DiagnosisKeyBuilder instance.\n114    */\n115   public static Builder builder() {\n116     return new DiagnosisKeyBuilder();\n117   }\n118 \n119   /**\n120    * Returns the diagnosis key.\n121    */\n122   public byte[] getKeyData() {\n123     return keyData;\n124   }\n125 \n126   /**\n127    * Returns a number describing when a key starts. It is equal to startTimeOfKeySinceEpochInSecs / (60 * 10).\n128    */\n129   public int getRollingStartIntervalNumber() {\n130     return rollingStartIntervalNumber;\n131   }\n132 \n133   /**\n134    * Returns a number describing how long a key is valid. It is expressed in increments of 10 minutes (e.g. 144 for 24\n135    * hours).\n136    */\n137   public int getRollingPeriod() {\n138     return rollingPeriod;\n139   }\n140 \n141   /**\n142    * Returns the risk of transmission associated with the person this key came from.\n143    */\n144   public int getTransmissionRiskLevel() {\n145     return transmissionRiskLevel;\n146   }\n147 \n148   /**\n149    * Returns the timestamp associated with the submission of this {@link DiagnosisKey} as hours since epoch.\n150    */\n151   public long getSubmissionTimestamp() {\n152     return submissionTimestamp;\n153   }\n154 \n155   public boolean isConsentToFederation() {\n156     return consentToFederation;\n157   }\n158 \n159   public String getOriginCountry() {\n160     return originCountry;\n161   }\n162 \n163   public List<String> getVisitedCountries() {\n164     return visitedCountries;\n165   }\n166 \n167   public ReportType getReportType() {\n168     return reportType;\n169   }\n170 \n171   public int getDaysSinceOnsetOfSymptoms() {\n172     return daysSinceOnsetOfSymptoms;\n173   }\n174 \n175   /**\n176    * Checks if this diagnosis key falls into the period between now, and the retention threshold.\n177    *\n178    * @param daysToRetain the number of days before a key is outdated\n179    * @return true, if the rolling start interval number is within the time between now, and the given days to retain\n180    * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n181    */\n182   public boolean isYoungerThanRetentionThreshold(int daysToRetain) {\n183     if (daysToRetain < 0) {\n184       throw new IllegalArgumentException(\"Retention threshold must be greater or equal to 0.\");\n185     }\n186     long threshold = LocalDateTime\n187         .ofInstant(Instant.now(), UTC)\n188         .minusDays(daysToRetain)\n189         .toEpochSecond(UTC) / (60 * 10);\n190 \n191     return this.rollingStartIntervalNumber >= threshold;\n192   }\n193 \n194   /**\n195    * Gets any constraint violations that this key might incorporate.\n196    *\n197    * <p><ul>\n198    * <li>Risk level must be between 0 and 8\n199    * <li>Rolling start interval number must be greater than 0\n200    * <li>Rolling start number cannot be in the future\n201    * <li>Rolling period must be positive number\n202    * <li>Key data must be byte array of length 16\n203    * </ul>\n204    *\n205    * @return A set of constraint violations of this key.\n206    */\n207   public Set<ConstraintViolation<DiagnosisKey>> validate() {\n208     return VALIDATOR.validate(this);\n209   }\n210 \n211   @Override\n212   public boolean equals(Object o) {\n213     if (this == o) {\n214       return true;\n215     }\n216     if (o == null || getClass() != o.getClass()) {\n217       return false;\n218     }\n219     DiagnosisKey that = (DiagnosisKey) o;\n220     return rollingStartIntervalNumber == that.rollingStartIntervalNumber\n221         && rollingPeriod == that.rollingPeriod\n222         && transmissionRiskLevel == that.transmissionRiskLevel\n223         && submissionTimestamp == that.submissionTimestamp\n224         && Arrays.equals(keyData, that.keyData)\n225         && Objects.equals(originCountry, that.originCountry)\n226         && Objects.equals(visitedCountries, that.visitedCountries)\n227         && reportType == that.reportType\n228         && daysSinceOnsetOfSymptoms == that.daysSinceOnsetOfSymptoms;\n229   }\n230 \n231   @Override\n232   public int hashCode() {\n233     int result = Objects\n234         .hash(rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp, originCountry,\n235             visitedCountries, reportType, daysSinceOnsetOfSymptoms);\n236     result = 31 * result + Arrays.hashCode(keyData);\n237     return result;\n238   }\n239 }\n240 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.common.persistence.repository;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import org.springframework.data.jdbc.repository.query.Modifying;\n25 import org.springframework.data.jdbc.repository.query.Query;\n26 import org.springframework.data.repository.PagingAndSortingRepository;\n27 import org.springframework.data.repository.query.Param;\n28 import org.springframework.stereotype.Repository;\n29 \n30 @Repository\n31 public interface DiagnosisKeyRepository extends PagingAndSortingRepository<DiagnosisKey, Long> {\n32 \n33   /**\n34    * Counts all entries that have a submission timestamp less or equal than the specified one\n35    *  and match the given country_code.\n36    *\n37    * @param submissionTimestamp The submission timestamp up to which entries will be expired.\n38    * @return The number of expired keys.\n39    */\n40   @Query(\"SELECT COUNT(*) FROM diagnosis_key WHERE submission_timestamp<:threshold\")\n41   int countOlderThan(@Param(\"threshold\") long submissionTimestamp);\n42 \n43   /**\n44    * Deletes all entries that have a submission timestamp less or equal than the specified one\n45    *  and match the origin country_code.\n46    *\n47    * @param submissionTimestamp The submission timestamp up to which entries will be deleted.\n48    */\n49   @Modifying\n50   @Query(\"DELETE FROM diagnosis_key WHERE submission_timestamp<:threshold\")\n51   void deleteOlderThan(@Param(\"threshold\") long submissionTimestamp);\n52 \n53   /**\n54    * Attempts to write the specified diagnosis key information into the database. If a row with the specified key data\n55    * already exists, no data is inserted.\n56    *\n57    * @param keyData                    The key data of the diagnosis key.\n58    * @param rollingStartIntervalNumber The rolling start interval number of the diagnosis key.\n59    * @param rollingPeriod              The rolling period of the diagnosis key.\n60    * @param submissionTimestamp        The submission timestamp of the diagnosis key.\n61    * @param transmissionRisk           The transmission risk level of the diagnosis key.\n62    * @param originCountry              The origin country from the app.\n63    * @param visitedCountries           The list of countries this transmissions is relevant for.\n64    * @param reportType                 The report type of the diagnosis key.\n65    */\n66   @Modifying\n67   @Query(\"INSERT INTO diagnosis_key \"\n68       + \"(key_data, rolling_start_interval_number, rolling_period, submission_timestamp, transmission_risk_level, \"\n69       + \"origin_country, visited_countries, report_type, days_since_onset_of_symptoms, consent_to_federation) \"\n70       + \"VALUES (:keyData, :rollingStartIntervalNumber, :rollingPeriod, :submissionTimestamp, :transmissionRisk, \"\n71       + \":origin_country, :visited_countries, :report_type, :days_since_onset_of_symptoms, :consent_to_federation) \"\n72       + \"ON CONFLICT DO NOTHING\")\n73   void saveDoNothingOnConflict(\n74       @Param(\"keyData\") byte[] keyData,\n75       @Param(\"rollingStartIntervalNumber\") int rollingStartIntervalNumber,\n76       @Param(\"rollingPeriod\") int rollingPeriod,\n77       @Param(\"submissionTimestamp\") long submissionTimestamp,\n78       @Param(\"transmissionRisk\") int transmissionRisk,\n79       @Param(\"origin_country\") String originCountry,\n80       @Param(\"visited_countries\") String[] visitedCountries,\n81       @Param(\"report_type\") String reportType,\n82       @Param(\"days_since_onset_of_symptoms\") int daysSinceOnsetOfSymptoms,\n83       @Param(\"consent_to_federation\") boolean consentToFederation);\n84 }\n85 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.common.persistence.service;\n22 \n23 import static app.coronawarn.server.common.persistence.domain.validation.ValidSubmissionTimestampValidator.SECONDS_PER_HOUR;\n24 import static java.time.ZoneOffset.UTC;\n25 import static org.springframework.data.util.StreamUtils.createStreamFromIterator;\n26 \n27 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n28 import app.coronawarn.server.common.persistence.repository.DiagnosisKeyRepository;\n29 import app.coronawarn.server.common.persistence.service.common.ValidDiagnosisKeyFilter;\n30 import io.micrometer.core.annotation.Timed;\n31 import java.time.Instant;\n32 import java.time.LocalDateTime;\n33 import java.util.Collection;\n34 import java.util.List;\n35 import java.util.stream.Collectors;\n36 import org.slf4j.Logger;\n37 import org.slf4j.LoggerFactory;\n38 import org.springframework.data.domain.Sort;\n39 import org.springframework.data.domain.Sort.Direction;\n40 import org.springframework.stereotype.Component;\n41 import org.springframework.transaction.annotation.Transactional;\n42 \n43 @Component\n44 public class DiagnosisKeyService {\n45 \n46   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyService.class);\n47   private final DiagnosisKeyRepository keyRepository;\n48   private final ValidDiagnosisKeyFilter validationFilter;\n49 \n50   public DiagnosisKeyService(DiagnosisKeyRepository keyRepository, ValidDiagnosisKeyFilter filter) {\n51     this.keyRepository = keyRepository;\n52     this.validationFilter = filter;\n53   }\n54 \n55   /**\n56    * Persists the specified collection of {@link DiagnosisKey} instances. If the key data of a particular diagnosis key\n57    * already exists in the database, this diagnosis key is not persisted.\n58    *\n59    * @param diagnosisKeys must not contain {@literal null}.\n60    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n61    */\n62   @Timed\n63   @Transactional\n64   public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n65     for (DiagnosisKey diagnosisKey : diagnosisKeys) {\n66       keyRepository.saveDoNothingOnConflict(\n67           diagnosisKey.getKeyData(), diagnosisKey.getRollingStartIntervalNumber(), diagnosisKey.getRollingPeriod(),\n68           diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel(),\n69           diagnosisKey.getOriginCountry(), diagnosisKey.getVisitedCountries().toArray(new String[0]),\n70           diagnosisKey.getReportType().name(), diagnosisKey.getDaysSinceOnsetOfSymptoms(),\n71           diagnosisKey.isConsentToFederation());\n72     }\n73   }\n74 \n75   /**\n76    * Returns all valid persisted diagnosis keys, sorted by their submission timestamp.\n77    */\n78   public List<DiagnosisKey> getDiagnosisKeys() {\n79     List<DiagnosisKey> diagnosisKeys = createStreamFromIterator(\n80         keyRepository.findAll(Sort.by(Direction.ASC, \"submissionTimestamp\")).iterator()).collect(Collectors.toList());\n81     return validationFilter.filter(diagnosisKeys);\n82   }\n83 \n84   /**\n85    * Deletes all diagnosis key entries which have a submission timestamp that is older than the specified number of\n86    * days.\n87    *\n88    * @param daysToRetain the number of days until which diagnosis keys will be retained.\n89    * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n90    */\n91   @Transactional\n92   public void applyRetentionPolicy(int daysToRetain) {\n93     if (daysToRetain < 0) {\n94       throw new IllegalArgumentException(\"Number of days to retain must be greater or equal to 0.\");\n95     }\n96 \n97     long threshold = LocalDateTime\n98         .ofInstant(Instant.now(), UTC)\n99         .minusDays(daysToRetain)\n100         .toEpochSecond(UTC) / SECONDS_PER_HOUR;\n101     int numberOfDeletions = keyRepository.countOlderThan(threshold);\n102     logger.info(\"Deleting {} diagnosis key(s) with a submission timestamp older than {} day(s) ago.\",\n103         numberOfDeletions, daysToRetain);\n104     keyRepository.deleteOlderThan(threshold);\n105   }\n106 }\n107 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.submission.controller;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n25 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n26 import app.coronawarn.server.common.protocols.internal.SubmissionPayload;\n27 import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;\n28 import app.coronawarn.server.services.submission.monitoring.SubmissionMonitor;\n29 import app.coronawarn.server.services.submission.validation.ValidSubmissionPayload;\n30 import app.coronawarn.server.services.submission.verification.TanVerifier;\n31 import io.micrometer.core.annotation.Timed;\n32 import java.security.SecureRandom;\n33 import java.util.ArrayList;\n34 import java.util.List;\n35 import java.util.stream.IntStream;\n36 import org.apache.commons.lang3.StringUtils;\n37 import org.slf4j.Logger;\n38 import org.slf4j.LoggerFactory;\n39 import org.springframework.http.HttpStatus;\n40 import org.springframework.http.ResponseEntity;\n41 import org.springframework.util.StopWatch;\n42 import org.springframework.validation.annotation.Validated;\n43 import org.springframework.web.bind.annotation.PostMapping;\n44 import org.springframework.web.bind.annotation.RequestBody;\n45 import org.springframework.web.bind.annotation.RequestHeader;\n46 import org.springframework.web.bind.annotation.RequestMapping;\n47 import org.springframework.web.bind.annotation.RestController;\n48 import org.springframework.web.context.request.async.DeferredResult;\n49 \n50 @RestController\n51 @RequestMapping(\"/version/v1\")\n52 @Validated\n53 public class SubmissionController {\n54 \n55   /**\n56    * The route to the submission endpoint (version agnostic).\n57    */\n58   public static final String SUBMISSION_ROUTE = \"/diagnosis-keys\";\n59   private static final Logger logger = LoggerFactory.getLogger(SubmissionController.class);\n60   private final SubmissionMonitor submissionMonitor;\n61   private final DiagnosisKeyService diagnosisKeyService;\n62   private final TanVerifier tanVerifier;\n63   private final Integer retentionDays;\n64   private final Integer randomKeyPaddingMultiplier;\n65   private final FakeDelayManager fakeDelayManager;\n66   private final SubmissionServiceConfig submissionServiceConfig;\n67 \n68   SubmissionController(\n69       DiagnosisKeyService diagnosisKeyService, TanVerifier tanVerifier, FakeDelayManager fakeDelayManager,\n70       SubmissionServiceConfig submissionServiceConfig, SubmissionMonitor submissionMonitor) {\n71     this.diagnosisKeyService = diagnosisKeyService;\n72     this.tanVerifier = tanVerifier;\n73     this.submissionMonitor = submissionMonitor;\n74     this.fakeDelayManager = fakeDelayManager;\n75     this.submissionServiceConfig = submissionServiceConfig;\n76     retentionDays = submissionServiceConfig.getRetentionDays();\n77     randomKeyPaddingMultiplier = submissionServiceConfig.getRandomKeyPaddingMultiplier();\n78   }\n79 \n80   /**\n81    * Handles diagnosis key submission requests.\n82    *\n83    * @param exposureKeys The unmarshalled protocol buffers submission payload.\n84    * @param tan          A tan for diagnosis verification.\n85    * @return An empty response body.\n86    */\n87   @PostMapping(value = SUBMISSION_ROUTE, headers = {\"cwa-fake=0\"})\n88   @Timed(description = \"Time spent handling submission.\")\n89   public DeferredResult<ResponseEntity<Void>> submitDiagnosisKey(\n90       @ValidSubmissionPayload @RequestBody SubmissionPayload exposureKeys,\n91       @RequestHeader(\"cwa-authorization\") String tan) {\n92     submissionMonitor.incrementRequestCounter();\n93     submissionMonitor.incrementRealRequestCounter();\n94     return buildRealDeferredResult(exposureKeys, tan);\n95   }\n96 \n97   private DeferredResult<ResponseEntity<Void>> buildRealDeferredResult(SubmissionPayload submissionPayload,\n98                                                                        String tan) {\n99     DeferredResult<ResponseEntity<Void>> deferredResult = new DeferredResult<>();\n100 \n101     StopWatch stopWatch = new StopWatch();\n102     stopWatch.start();\n103     try {\n104       if (!this.tanVerifier.verifyTan(tan)) {\n105         submissionMonitor.incrementInvalidTanRequestCounter();\n106         deferredResult.setResult(ResponseEntity.status(HttpStatus.FORBIDDEN).build());\n107       } else {\n108         List<DiagnosisKey> diagnosisKeys = extractValidDiagnosisKeysFromPayload(submissionPayload);\n109         diagnosisKeyService.saveDiagnosisKeys(padDiagnosisKeys(diagnosisKeys));\n110 \n111         deferredResult.setResult(ResponseEntity.ok().build());\n112       }\n113     } catch (Exception e) {\n114       deferredResult.setErrorResult(e);\n115     } finally {\n116       stopWatch.stop();\n117       fakeDelayManager.updateFakeRequestDelay(stopWatch.getTotalTimeMillis());\n118     }\n119 \n120     return deferredResult;\n121   }\n122 \n123   private List<DiagnosisKey> extractValidDiagnosisKeysFromPayload(SubmissionPayload submissionPayload) {\n124     List<TemporaryExposureKey> protoBufferKeys = submissionPayload.getKeysList();\n125     List<DiagnosisKey> diagnosisKeys = new ArrayList<>();\n126 \n127     for (TemporaryExposureKey protoBufferKey : protoBufferKeys) {\n128       String originCountry = StringUtils.defaultIfBlank(submissionPayload.getOrigin(),\n129           submissionServiceConfig.getDefaultOriginCountry());\n130 \n131       DiagnosisKey diagnosisKey = DiagnosisKey.builder()\n132           .fromTemporaryExposureKey(protoBufferKey)\n133           .withVisitedCountries(submissionPayload.getVisitedCountriesList())\n134           .withCountryCode(originCountry)\n135           .withConsentToFederation(submissionPayload.getConsentToFederation())\n136           .build();\n137 \n138       if (diagnosisKey.isYoungerThanRetentionThreshold(retentionDays)) {\n139         diagnosisKeys.add(diagnosisKey);\n140       } else {\n141         logger.info(\"Not persisting a diagnosis key, as it is outdated beyond retention threshold.\");\n142       }\n143     }\n144 \n145     return diagnosisKeys;\n146   }\n147 \n148   private List<DiagnosisKey> padDiagnosisKeys(List<DiagnosisKey> diagnosisKeys) {\n149     List<DiagnosisKey> paddedDiagnosisKeys = new ArrayList<>();\n150     diagnosisKeys.forEach(diagnosisKey -> {\n151       paddedDiagnosisKeys.add(diagnosisKey);\n152       IntStream.range(1, randomKeyPaddingMultiplier)\n153           .mapToObj(index -> DiagnosisKey.builder()\n154               .withKeyData(generateRandomKeyData())\n155               .withRollingStartIntervalNumber(diagnosisKey.getRollingStartIntervalNumber())\n156               .withTransmissionRiskLevel(diagnosisKey.getTransmissionRiskLevel())\n157               .withRollingPeriod(diagnosisKey.getRollingPeriod())\n158               .withVisitedCountries(diagnosisKey.getVisitedCountries())\n159               .withCountryCode(diagnosisKey.getOriginCountry())\n160               .withReportType(diagnosisKey.getReportType())\n161               .withConsentToFederation(diagnosisKey.isConsentToFederation())\n162               .withDaysSinceOnsetOfSymptoms(diagnosisKey.getDaysSinceOnsetOfSymptoms())\n163               .build())\n164           .forEach(paddedDiagnosisKeys::add);\n165     });\n166     return paddedDiagnosisKeys;\n167   }\n168 \n169   private static byte[] generateRandomKeyData() {\n170     byte[] randomKeyData = new byte[16];\n171     new SecureRandom().nextBytes(randomKeyData);\n172     return randomKeyData;\n173   }\n174 }\n175 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Sure! Here is the patch file that resolves the issue:\n\n<patch>\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -106,6 +106,7 @@ public class DiagnosisKey {\n       this.visitedCountries = visitedCountries == null ? Collections.emptyList() : visitedCountries;\n       this.reportType = reportType;\n       this.daysSinceOnsetOfSymptoms = daysSinceOnsetOfSymptoms;\n+      logValidationErrors();\n     }\n \n     /**\n@@ -207,4 +208,14 @@ public class DiagnosisKey {\n     return VALIDATOR.validate(this);\n   }\n \n+  /**\n+   * Logs any validation errors for this diagnosis key.\n+   */\n+  private void logValidationErrors() {\n+    Set<ConstraintViolation<DiagnosisKey>> violations = validate();\n+    if (!violations.isEmpty()) {\n+      for (ConstraintViolation<DiagnosisKey> violation : violations) {\n+        logger.warn(\"Validation error: {}\", violation.getMessage());\n+      }\n+    }\n+  }\n }\n</patch>\n\nPlease let me know if you need any further assistance.",
        "model_patch": "\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -106,6 +106,7 @@ public class DiagnosisKey {\n       this.visitedCountries = visitedCountries == null ? Collections.emptyList() : visitedCountries;\n       this.reportType = reportType;\n       this.daysSinceOnsetOfSymptoms = daysSinceOnsetOfSymptoms;\n+      logValidationErrors();\n     }\n \n     /**\n@@ -207,4 +208,14 @@ public class DiagnosisKey {\n     return VALIDATOR.validate(this);\n   }\n \n+  /**\n+   * Logs any validation errors for this diagnosis key.\n+   */\n+  private void logValidationErrors() {\n+    Set<ConstraintViolation<DiagnosisKey>> violations = validate();\n+    if (!violations.isEmpty()) {\n+      for (ConstraintViolation<DiagnosisKey> violation : violations) {\n+        logger.warn(\"Validation error: {}\", violation.getMessage());\n+      }\n+    }\n+  }\n }\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 783,
        "issue_numbers": [
            "764"
        ],
        "base_commit": "3b67b75657b26418691e024e049af7f3494c787b",
        "patch": "diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -77,7 +77,7 @@ public class DiagnosisKey {\n \n   private final boolean consentToFederation;\n \n-  @Size(max = 2)\n+  @Size(max = 2, message = \"Origin country code must have length of 2.\")\n   private final String originCountry;\n \n   @ValidCountries\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/repository/DiagnosisKeyRepository.java\n@@ -62,6 +62,7 @@ public interface DiagnosisKeyRepository extends PagingAndSortingRepository<Diagn\n    * @param originCountry              The origin country from the app.\n    * @param visitedCountries           The list of countries this transmissions is relevant for.\n    * @param reportType                 The report type of the diagnosis key.\n+   * @return {@literal true} if the diagnosis key was inserted successfully, {@literal false} otherwise.\n    */\n   @Modifying\n   @Query(\"INSERT INTO diagnosis_key \"\n@@ -70,7 +71,7 @@ public interface DiagnosisKeyRepository extends PagingAndSortingRepository<Diagn\n       + \"VALUES (:keyData, :rollingStartIntervalNumber, :rollingPeriod, :submissionTimestamp, :transmissionRisk, \"\n       + \":origin_country, :visited_countries, :report_type, :days_since_onset_of_symptoms, :consent_to_federation) \"\n       + \"ON CONFLICT DO NOTHING\")\n-  void saveDoNothingOnConflict(\n+  boolean saveDoNothingOnConflict(\n       @Param(\"keyData\") byte[] keyData,\n       @Param(\"rollingStartIntervalNumber\") int rollingStartIntervalNumber,\n       @Param(\"rollingPeriod\") int rollingPeriod,\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyService.java\n@@ -53,23 +53,39 @@ public DiagnosisKeyService(DiagnosisKeyRepository keyRepository, ValidDiagnosisK\n   }\n \n   /**\n-   * Persists the specified collection of {@link DiagnosisKey} instances. If the key data of a particular diagnosis key\n-   * already exists in the database, this diagnosis key is not persisted.\n+   * Persists the specified collection of {@link DiagnosisKey} instances and returns the number of inserted diagnosis\n+   * keys. If the key data of a particular diagnosis key already exists in the database, this diagnosis key is not\n+   * persisted.\n    *\n    * @param diagnosisKeys must not contain {@literal null}.\n+   * @return Number of successfully inserted diagnosis keys.\n    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n    */\n   @Timed\n   @Transactional\n-  public void saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n+  public int saveDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n+    int numberOfInsertedKeys = 0;\n+\n     for (DiagnosisKey diagnosisKey : diagnosisKeys) {\n-      keyRepository.saveDoNothingOnConflict(\n+      boolean keyInsertedSuccessfully = keyRepository.saveDoNothingOnConflict(\n           diagnosisKey.getKeyData(), diagnosisKey.getRollingStartIntervalNumber(), diagnosisKey.getRollingPeriod(),\n           diagnosisKey.getSubmissionTimestamp(), diagnosisKey.getTransmissionRiskLevel(),\n           diagnosisKey.getOriginCountry(), diagnosisKey.getVisitedCountries().toArray(new String[0]),\n           diagnosisKey.getReportType().name(), diagnosisKey.getDaysSinceOnsetOfSymptoms(),\n           diagnosisKey.isConsentToFederation());\n+\n+      if (keyInsertedSuccessfully) {\n+        numberOfInsertedKeys++;\n+      }\n     }\n+\n+    int conflictingKeys = diagnosisKeys.size() - numberOfInsertedKeys;\n+    if (conflictingKeys > 0) {\n+      logger.warn(\"{} out of {} diagnosis keys conflicted with existing database entries and were ignored.\",\n+          conflictingKeys, diagnosisKeys.size());\n+    }\n+\n+    return numberOfInsertedKeys;\n   }\n \n   /**\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n@@ -138,7 +138,7 @@ private List<DiagnosisKey> extractValidDiagnosisKeysFromPayload(SubmissionPayloa\n       if (diagnosisKey.isYoungerThanRetentionThreshold(retentionDays)) {\n         diagnosisKeys.add(diagnosisKey);\n       } else {\n-        logger.info(\"Not persisting a diagnosis key, as it is outdated beyond retention threshold.\");\n+        logger.warn(\"Not persisting a diagnosis key, as it is outdated beyond retention threshold.\");\n       }\n     }\n \n",
        "test_patch": "diff --git a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n--- a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n+++ b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n@@ -155,10 +155,22 @@ void shouldNotUpdateExistingKey() {\n             .withReportType(ReportType.CONFIRMED_CLINICAL_DIAGNOSIS)\n             .build());\n \n-    diagnosisKeyService.saveDiagnosisKeys(keys);\n+    int actNumberOfInsertedRows = diagnosisKeyService.saveDiagnosisKeys(keys);\n     var actKeys = diagnosisKeyService.getDiagnosisKeys();\n \n+    assertThat(actNumberOfInsertedRows).isEqualTo(1);\n     assertThat(actKeys).hasSize(1);\n     assertThat(actKeys.iterator().next().getTransmissionRiskLevel()).isEqualTo(2);\n   }\n+\n+  @Test\n+  void testReturnedNumberOfInsertedKeysForNoConflict() {\n+    var keys = list(\n+        buildDiagnosisKeyForSubmissionTimestamp(1L),\n+        buildDiagnosisKeyForSubmissionTimestamp(0L));\n+\n+    int actNumberOfInsertedRows = diagnosisKeyService.saveDiagnosisKeys(keys);\n+\n+    assertThat(actNumberOfInsertedRows).isEqualTo(2);\n+  }\n }\n",
        "problem_statement": "Improve logging of the submission validation process\n<!--\r\nThanks for proposing an enhancement \ud83d\ude4c \u2764\ufe0f\r\n\r\nBefore opening a new issue, please make sure that we do not have any duplicates already open. You can ensure this by searching the issue list for this repository. If there is a duplicate, please close your issue and add a comment to the existing issue instead.\r\n-->\r\nThe enhancement suggested by @Tho-Mat, and based on the discussion in https://github.com/corona-warn-app/cwa-server/issues/723\r\n\r\n## Current Implementation\r\nIssue https://github.com/corona-warn-app/cwa-server/issues/723, demonstrated that currently implemented logging is not sufficient for effective troubleshooting of the submission validation process.\r\n\r\n## Suggested Enhancement\r\nIf the kay can not be saved in a DB (e.g. because it is  already in database / Date to high / Date to low / unknown), we log this fact, date of the issue and the reason in the application logs.\r\n\r\n## Expected Benefits\r\nThis would have the great advantage of better analyzing certain constellations that can lead to errors.\n",
        "hints_text": "",
        "created_at": "2020-09-16T09:58:13Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-466",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nS3Publisher: Increase performance\nThe S3Publisher is currently running in only one thread, making it quite slow for uploads/requests for metadata.\r\n\r\nEnhance the S3Publisher/ObjectStoreAccess, so that multiple threads are being used for interacting with S3.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env``` in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `localhost:8001` <br> `postgres:5432` (from containerized pgadmin) <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is `edc07f08-a1aa-11ea-bb37-0242ac130002`.\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile               | Effect\n148 ----------------------|-------------\n149 `dev`                 | Turns the log level to `DEBUG`.\n150 `cloud`               | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`                | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n152 `testdata`            | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 `signature-dev`       | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that the non-productive/test public key will be used for client-side validation.\n154 `signature-prod`      | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp` so that the productive public key will be used for client-side validation.\n155 `ssl-client-postgres` | Enforces SSL with a pinned certificate for the connection to the postgres (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/services/distribution/src/main/resources/application-ssl-client-postgres.yaml)).\n156 \n157 ### Submission\n158 \n159 Profile                   | Effect\n160 --------------------------|-------------\n161 `dev`                     | Turns the log level to `DEBUG`.\n162 `cloud`                   | Removes default values for the `datasource` configuration.\n163 `ssl-server`              | Enables SSL for the submission endpoint (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/services/submission/src/main/resources/application-ssl-server.yaml)).\n164 `ssl-client-postgres`     | Enforces SSL with a pinned certificate for the connection to the postgres (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/services/submission/src/main/resources/application-ssl-client-postgres.yaml)).\n165 `ssl-client-verification` | Enforces SSL with a pinned certificate for the connection to the verification server (see [here](https://github.com/corona-warn-app/cwa-server/blob/master/services/submission/src/main/resources/application-ssl-client-verification.yaml)).\n166 \n167 ## Documentation\n168 \n169 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n170 \n171 ## Support and Feedback\n172 \n173 The following channels are available for discussions, feedback, and support requests:\n174 \n175 | Type                     | Channel                                                |\n176 | ------------------------ | ------------------------------------------------------ |\n177 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n178 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n179 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n180 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n181 \n182 ## How to Contribute\n183 \n184 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n185 \n186 ## Contributors\n187 \n188 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n189 \n190 ## Repositories\n191 \n192 The following public repositories are currently available for the Corona-Warn-App:\n193 \n194 | Repository          | Description                                                           |\n195 | ------------------- | --------------------------------------------------------------------- |\n196 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n197 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n198 | [cwa-verification-server] | Backend implementation of the verification process|\n199 \n200 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n201 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n202 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n203 [Postgres]: https://www.postgresql.org/\n204 [HSQLDB]: http://hsqldb.org/\n205 [Zenko CloudServer]: https://github.com/scality/cloudserver\n206 \n207 ## Licensing\n208 \n209 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n210 \n211 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n212 \n213 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n214 \n215 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n216 \n[end of README.md]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.config;\n22 \n23 import app.coronawarn.server.common.protocols.external.exposurenotification.SignatureInfo;\n24 import org.springframework.boot.context.properties.ConfigurationProperties;\n25 import org.springframework.stereotype.Component;\n26 \n27 @Component\n28 @ConfigurationProperties(prefix = \"services.distribution\")\n29 public class DistributionServiceConfig {\n30 \n31   private Paths paths;\n32   private TestData testData;\n33   private Integer retentionDays;\n34   private Integer expiryPolicyMinutes;\n35   private Integer shiftingPolicyThreshold;\n36   private Integer maximumNumberOfKeysPerBundle;\n37   private String outputFileName;\n38   private Boolean includeIncompleteDays;\n39   private Boolean includeIncompleteHours;\n40   private TekExport tekExport;\n41   private Signature signature;\n42   private Api api;\n43   private ObjectStore objectStore;\n44 \n45   public Paths getPaths() {\n46     return paths;\n47   }\n48 \n49   public void setPaths(Paths paths) {\n50     this.paths = paths;\n51   }\n52 \n53   public TestData getTestData() {\n54     return testData;\n55   }\n56 \n57   public void setTestData(TestData testData) {\n58     this.testData = testData;\n59   }\n60 \n61   public Integer getRetentionDays() {\n62     return retentionDays;\n63   }\n64 \n65   public void setRetentionDays(Integer retentionDays) {\n66     this.retentionDays = retentionDays;\n67   }\n68 \n69   public Integer getExpiryPolicyMinutes() {\n70     return expiryPolicyMinutes;\n71   }\n72 \n73   public void setExpiryPolicyMinutes(Integer expiryPolicyMinutes) {\n74     this.expiryPolicyMinutes = expiryPolicyMinutes;\n75   }\n76 \n77   public Integer getShiftingPolicyThreshold() {\n78     return shiftingPolicyThreshold;\n79   }\n80 \n81   public void setShiftingPolicyThreshold(Integer shiftingPolicyThreshold) {\n82     this.shiftingPolicyThreshold = shiftingPolicyThreshold;\n83   }\n84 \n85   public Integer getMaximumNumberOfKeysPerBundle() {\n86     return this.maximumNumberOfKeysPerBundle;\n87   }\n88 \n89   public void setMaximumNumberOfKeysPerBundle(Integer maximumNumberOfKeysPerBundle) {\n90     this.maximumNumberOfKeysPerBundle = maximumNumberOfKeysPerBundle;\n91   }\n92 \n93   public String getOutputFileName() {\n94     return outputFileName;\n95   }\n96 \n97   public void setOutputFileName(String outputFileName) {\n98     this.outputFileName = outputFileName;\n99   }\n100 \n101   public Boolean getIncludeIncompleteDays() {\n102     return includeIncompleteDays;\n103   }\n104 \n105   public void setIncludeIncompleteDays(Boolean includeIncompleteDays) {\n106     this.includeIncompleteDays = includeIncompleteDays;\n107   }\n108 \n109   public Boolean getIncludeIncompleteHours() {\n110     return includeIncompleteHours;\n111   }\n112 \n113   public void setIncludeIncompleteHours(Boolean includeIncompleteHours) {\n114     this.includeIncompleteHours = includeIncompleteHours;\n115   }\n116 \n117   public TekExport getTekExport() {\n118     return tekExport;\n119   }\n120 \n121   public void setTekExport(TekExport tekExport) {\n122     this.tekExport = tekExport;\n123   }\n124 \n125   public Signature getSignature() {\n126     return signature;\n127   }\n128 \n129   public void setSignature(Signature signature) {\n130     this.signature = signature;\n131   }\n132 \n133   public Api getApi() {\n134     return api;\n135   }\n136 \n137   public void setApi(Api api) {\n138     this.api = api;\n139   }\n140 \n141   public ObjectStore getObjectStore() {\n142     return objectStore;\n143   }\n144 \n145   public void setObjectStore(\n146       ObjectStore objectStore) {\n147     this.objectStore = objectStore;\n148   }\n149 \n150   public static class TekExport {\n151 \n152     private String fileName;\n153     private String fileHeader;\n154     private Integer fileHeaderWidth;\n155 \n156     public String getFileName() {\n157       return fileName;\n158     }\n159 \n160     public void setFileName(String fileName) {\n161       this.fileName = fileName;\n162     }\n163 \n164     public String getFileHeader() {\n165       return fileHeader;\n166     }\n167 \n168     public void setFileHeader(String fileHeader) {\n169       this.fileHeader = fileHeader;\n170     }\n171 \n172     public Integer getFileHeaderWidth() {\n173       return fileHeaderWidth;\n174     }\n175 \n176     public void setFileHeaderWidth(Integer fileHeaderWidth) {\n177       this.fileHeaderWidth = fileHeaderWidth;\n178     }\n179   }\n180 \n181   public static class TestData {\n182 \n183     private Integer seed;\n184     private Integer exposuresPerHour;\n185 \n186     public Integer getSeed() {\n187       return seed;\n188     }\n189 \n190     public void setSeed(Integer seed) {\n191       this.seed = seed;\n192     }\n193 \n194     public Integer getExposuresPerHour() {\n195       return exposuresPerHour;\n196     }\n197 \n198     public void setExposuresPerHour(Integer exposuresPerHour) {\n199       this.exposuresPerHour = exposuresPerHour;\n200     }\n201   }\n202 \n203   public static class Paths {\n204 \n205     private String privateKey;\n206     private String output;\n207 \n208     public String getPrivateKey() {\n209       return privateKey;\n210     }\n211 \n212     public void setPrivateKey(String privateKey) {\n213       this.privateKey = privateKey;\n214     }\n215 \n216     public String getOutput() {\n217       return output;\n218     }\n219 \n220     public void setOutput(String output) {\n221       this.output = output;\n222     }\n223   }\n224 \n225   public static class Api {\n226 \n227     private String versionPath;\n228     private String versionV1;\n229     private String countryPath;\n230     private String countryGermany;\n231     private String datePath;\n232     private String hourPath;\n233     private String diagnosisKeysPath;\n234     private String parametersPath;\n235     private String appConfigFileName;\n236 \n237     public String getVersionPath() {\n238       return versionPath;\n239     }\n240 \n241     public void setVersionPath(String versionPath) {\n242       this.versionPath = versionPath;\n243     }\n244 \n245     public String getVersionV1() {\n246       return versionV1;\n247     }\n248 \n249     public void setVersionV1(String versionV1) {\n250       this.versionV1 = versionV1;\n251     }\n252 \n253     public String getCountryPath() {\n254       return countryPath;\n255     }\n256 \n257     public void setCountryPath(String countryPath) {\n258       this.countryPath = countryPath;\n259     }\n260 \n261     public String getCountryGermany() {\n262       return countryGermany;\n263     }\n264 \n265     public void setCountryGermany(String countryGermany) {\n266       this.countryGermany = countryGermany;\n267     }\n268 \n269     public String getDatePath() {\n270       return datePath;\n271     }\n272 \n273     public void setDatePath(String datePath) {\n274       this.datePath = datePath;\n275     }\n276 \n277     public String getHourPath() {\n278       return hourPath;\n279     }\n280 \n281     public void setHourPath(String hourPath) {\n282       this.hourPath = hourPath;\n283     }\n284 \n285     public String getDiagnosisKeysPath() {\n286       return diagnosisKeysPath;\n287     }\n288 \n289     public void setDiagnosisKeysPath(String diagnosisKeysPath) {\n290       this.diagnosisKeysPath = diagnosisKeysPath;\n291     }\n292 \n293     public String getParametersPath() {\n294       return parametersPath;\n295     }\n296 \n297     public void setParametersPath(String parametersPath) {\n298       this.parametersPath = parametersPath;\n299     }\n300 \n301     public String getAppConfigFileName() {\n302       return appConfigFileName;\n303     }\n304 \n305     public void setAppConfigFileName(String appConfigFileName) {\n306       this.appConfigFileName = appConfigFileName;\n307     }\n308   }\n309 \n310   public static class Signature {\n311 \n312     private String appBundleId;\n313     private String androidPackage;\n314     private String verificationKeyId;\n315     private String verificationKeyVersion;\n316     private String algorithmOid;\n317     private String algorithmName;\n318     private String fileName;\n319     private String securityProvider;\n320 \n321     public String getAppBundleId() {\n322       return appBundleId;\n323     }\n324 \n325     public void setAppBundleId(String appBundleId) {\n326       this.appBundleId = appBundleId;\n327     }\n328 \n329     public String getAndroidPackage() {\n330       return androidPackage;\n331     }\n332 \n333     public void setAndroidPackage(String androidPackage) {\n334       this.androidPackage = androidPackage;\n335     }\n336 \n337     public String getVerificationKeyId() {\n338       return verificationKeyId;\n339     }\n340 \n341     public void setVerificationKeyId(String verificationKeyId) {\n342       this.verificationKeyId = verificationKeyId;\n343     }\n344 \n345     public String getVerificationKeyVersion() {\n346       return verificationKeyVersion;\n347     }\n348 \n349     public void setVerificationKeyVersion(String verificationKeyVersion) {\n350       this.verificationKeyVersion = verificationKeyVersion;\n351     }\n352 \n353     public String getAlgorithmOid() {\n354       return algorithmOid;\n355     }\n356 \n357     public void setAlgorithmOid(String algorithmOid) {\n358       this.algorithmOid = algorithmOid;\n359     }\n360 \n361     public String getAlgorithmName() {\n362       return algorithmName;\n363     }\n364 \n365     public void setAlgorithmName(String algorithmName) {\n366       this.algorithmName = algorithmName;\n367     }\n368 \n369     public String getFileName() {\n370       return fileName;\n371     }\n372 \n373     public void setFileName(String fileName) {\n374       this.fileName = fileName;\n375     }\n376 \n377     public String getSecurityProvider() {\n378       return securityProvider;\n379     }\n380 \n381     public void setSecurityProvider(String securityProvider) {\n382       this.securityProvider = securityProvider;\n383     }\n384 \n385     /**\n386      * Returns the static {@link SignatureInfo} configured in the application properties.\n387      */\n388     public SignatureInfo getSignatureInfo() {\n389       return SignatureInfo.newBuilder()\n390           .setAppBundleId(this.getAppBundleId())\n391           .setVerificationKeyVersion(this.getVerificationKeyVersion())\n392           .setVerificationKeyId(this.getVerificationKeyId())\n393           .setSignatureAlgorithm(this.getAlgorithmOid())\n394           .build();\n395     }\n396   }\n397 \n398   public static class ObjectStore {\n399 \n400     private String accessKey;\n401     private String secretKey;\n402     private String endpoint;\n403     private Integer port;\n404     private String bucket;\n405     private Boolean setPublicReadAclOnPutObject;\n406     private Integer maxNumberOfFailedOperations;\n407 \n408     public String getAccessKey() {\n409       return accessKey;\n410     }\n411 \n412     public void setAccessKey(String accessKey) {\n413       this.accessKey = accessKey;\n414     }\n415 \n416     public String getSecretKey() {\n417       return secretKey;\n418     }\n419 \n420     public void setSecretKey(String secretKey) {\n421       this.secretKey = secretKey;\n422     }\n423 \n424     public String getEndpoint() {\n425       return endpoint;\n426     }\n427 \n428     public void setEndpoint(String endpoint) {\n429       this.endpoint = endpoint;\n430     }\n431 \n432     public Integer getPort() {\n433       return port;\n434     }\n435 \n436     public void setPort(Integer port) {\n437       this.port = port;\n438     }\n439 \n440     public String getBucket() {\n441       return bucket;\n442     }\n443 \n444     public void setBucket(String bucket) {\n445       this.bucket = bucket;\n446     }\n447 \n448     public Boolean isSetPublicReadAclOnPutObject() {\n449       return setPublicReadAclOnPutObject;\n450     }\n451 \n452     public void setSetPublicReadAclOnPutObject(Boolean setPublicReadAclOnPutObject) {\n453       this.setPublicReadAclOnPutObject = setPublicReadAclOnPutObject;\n454     }\n455 \n456     public Integer getMaxNumberOfFailedOperations() {\n457       return maxNumberOfFailedOperations;\n458     }\n459 \n460     public void setMaxNumberOfFailedOperations(Integer maxNumberOfFailedOperations) {\n461       this.maxNumberOfFailedOperations = maxNumberOfFailedOperations;\n462     }\n463   }\n464 }\n465 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.objectstore;\n22 \n23 import app.coronawarn.server.services.distribution.assembly.component.CwaApiStructureProvider;\n24 import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;\n25 import app.coronawarn.server.services.distribution.objectstore.publish.LocalFile;\n26 import app.coronawarn.server.services.distribution.objectstore.publish.PublishFileSet;\n27 import app.coronawarn.server.services.distribution.objectstore.publish.PublishedFileSet;\n28 import java.io.IOException;\n29 import java.nio.file.Path;\n30 import java.util.List;\n31 import java.util.stream.Collectors;\n32 import org.slf4j.Logger;\n33 import org.slf4j.LoggerFactory;\n34 \n35 /**\n36  * Publishes a folder on the disk to S3 while keeping the folder and file structure.<br>\n37  * Moreover, does the following:\n38  * <br>\n39  * <ul>\n40  *   <li>Publishes index files on a different route, removing the trailing \"/index\" part.</li>\n41  *   <li>Adds meta information to the uploaded files, e.g. the sha256 hash value.</li>\n42  *   <li>Only performs the upload for files, which do not yet exist on the object store, and\n43  *   checks whether the existing files hash differ from the to-be-uploaded files hash. Only if the\n44  *   hash differs, the file will ultimately be uploaded</li>\n45  *   <li>Currently not implemented: Set cache control headers</li>\n46  *   <li>Currently not implemented: Supports multi threaded upload of files.</li>\n47  * </ul>\n48  */\n49 public class S3Publisher {\n50 \n51   private static final Logger logger = LoggerFactory.getLogger(S3Publisher.class);\n52 \n53   /**\n54    * The default CWA root folder, which contains all CWA related files.\n55    */\n56   private static final String CWA_S3_ROOT = CwaApiStructureProvider.VERSION_DIRECTORY;\n57 \n58   private final Path root;\n59   private final ObjectStoreAccess objectStoreAccess;\n60   private final FailedObjectStoreOperationsCounter failedOperationsCounter;\n61 \n62   /**\n63    * Creates an {@link S3Publisher} instance that attempts to publish the files at the specified location to an object\n64    * store. Object store operations are performed through the specified {@link ObjectStoreAccess} instance.\n65    *\n66    * @param root                    The path of the directory that shall be published.\n67    * @param objectStoreAccess       The {@link ObjectStoreAccess} used to communicate with the object store.\n68    * @param failedOperationsCounter The {@link FailedObjectStoreOperationsCounter} that is used to monitor the number of\n69    *                                failed operations.\n70    */\n71   public S3Publisher(Path root, ObjectStoreAccess objectStoreAccess,\n72       FailedObjectStoreOperationsCounter failedOperationsCounter) {\n73     this.root = root;\n74     this.objectStoreAccess = objectStoreAccess;\n75     this.failedOperationsCounter = failedOperationsCounter;\n76   }\n77 \n78   /**\n79    * Synchronizes the files to S3.\n80    *\n81    * @throws IOException in case there were problems reading files from the disk.\n82    */\n83   public void publish() throws IOException {\n84     PublishedFileSet published;\n85     List<LocalFile> toPublish = new PublishFileSet(root).getFiles();\n86     List<LocalFile> diff;\n87 \n88     try {\n89       published = new PublishedFileSet(objectStoreAccess.getObjectsWithPrefix(CWA_S3_ROOT));\n90       diff = toPublish\n91           .stream()\n92           .filter(published::isNotYetPublished)\n93           .collect(Collectors.toList());\n94     } catch (ObjectStoreOperationFailedException e) {\n95       failedOperationsCounter.incrementAndCheckThreshold(e);\n96       // failed to retrieve existing files; publish everything\n97       diff = toPublish;\n98     }\n99 \n100     logger.info(\"Beginning upload... \");\n101     for (LocalFile file : diff) {\n102       try {\n103         this.objectStoreAccess.putObject(file);\n104       } catch (ObjectStoreOperationFailedException e) {\n105         failedOperationsCounter.incrementAndCheckThreshold(e);\n106       }\n107     }\n108     logger.info(\"Upload completed.\");\n109   }\n110 }\n111 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.objectstore.client;\n22 \n23 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n24 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;\n25 import java.net.URI;\n26 import org.springframework.context.annotation.Bean;\n27 import org.springframework.context.annotation.Configuration;\n28 import org.springframework.retry.annotation.EnableRetry;\n29 import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n30 import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n31 import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n32 import software.amazon.awssdk.regions.Region;\n33 import software.amazon.awssdk.services.s3.S3Client;\n34 \n35 /**\n36  * Manages the instantiation of the {@link ObjectStoreClient} bean.\n37  */\n38 @Configuration\n39 @EnableRetry\n40 public class ObjectStoreClientConfig {\n41 \n42   private static final Region DEFAULT_REGION = Region.EU_CENTRAL_1;\n43 \n44   @Bean\n45   public ObjectStoreClient createObjectStoreClient(DistributionServiceConfig distributionServiceConfig) {\n46     return createClient(distributionServiceConfig.getObjectStore());\n47   }\n48 \n49   private ObjectStoreClient createClient(ObjectStore objectStore) {\n50     AwsCredentialsProvider credentialsProvider = StaticCredentialsProvider.create(\n51         AwsBasicCredentials.create(objectStore.getAccessKey(), objectStore.getSecretKey()));\n52     String endpoint = removeTrailingSlash(objectStore.getEndpoint()) + \":\" + objectStore.getPort();\n53 \n54     return new S3ClientWrapper(S3Client.builder()\n55         .region(DEFAULT_REGION)\n56         .endpointOverride(URI.create(endpoint))\n57         .credentialsProvider(credentialsProvider)\n58         .build());\n59   }\n60 \n61   private String removeTrailingSlash(String string) {\n62     return string.endsWith(\"/\") ? string.substring(0, string.length() - 1) : string;\n63   }\n64 }\n65 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.runner;\n22 \n23 import app.coronawarn.server.services.distribution.assembly.component.OutputDirectoryProvider;\n24 import app.coronawarn.server.services.distribution.objectstore.FailedObjectStoreOperationsCounter;\n25 import app.coronawarn.server.services.distribution.objectstore.ObjectStoreAccess;\n26 import app.coronawarn.server.services.distribution.objectstore.S3Publisher;\n27 import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;\n28 import java.io.IOException;\n29 import java.nio.file.Path;\n30 import org.slf4j.Logger;\n31 import org.slf4j.LoggerFactory;\n32 import org.springframework.boot.ApplicationArguments;\n33 import org.springframework.boot.ApplicationRunner;\n34 import org.springframework.core.annotation.Order;\n35 import org.springframework.stereotype.Component;\n36 \n37 /**\n38  * This runner will sync the base working directory to the S3.\n39  */\n40 @Component\n41 @Order(3)\n42 public class S3Distribution implements ApplicationRunner {\n43 \n44   private static final Logger logger = LoggerFactory.getLogger(S3Distribution.class);\n45 \n46   private final OutputDirectoryProvider outputDirectoryProvider;\n47   private final ObjectStoreAccess objectStoreAccess;\n48   private final FailedObjectStoreOperationsCounter failedOperationsCounter;\n49 \n50   S3Distribution(OutputDirectoryProvider outputDirectoryProvider, ObjectStoreAccess objectStoreAccess,\n51       FailedObjectStoreOperationsCounter failedOperationsCounter) {\n52     this.outputDirectoryProvider = outputDirectoryProvider;\n53     this.objectStoreAccess = objectStoreAccess;\n54     this.failedOperationsCounter = failedOperationsCounter;\n55   }\n56 \n57   @Override\n58   public void run(ApplicationArguments args) {\n59     try {\n60       Path pathToDistribute = outputDirectoryProvider.getFileOnDisk().toPath().toAbsolutePath();\n61       S3Publisher s3Publisher = new S3Publisher(pathToDistribute, objectStoreAccess, failedOperationsCounter);\n62 \n63       s3Publisher.publish();\n64       logger.info(\"Data pushed to Object Store successfully.\");\n65     } catch (UnsupportedOperationException | ObjectStoreOperationFailedException | IOException e) {\n66       logger.error(\"Distribution failed.\", e);\n67     }\n68   }\n69 }\n70 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java]\n[start of services/distribution/src/main/resources/application.yaml]\n1 ---\n2 logging:\n3   level:\n4     org:\n5       springframework:\n6         web: INFO\n7     app:\n8       coronawarn: INFO\n9 \n10 services:\n11   distribution:\n12     output-file-name: index\n13     retention-days: 14\n14     expiry-policy-minutes: 120\n15     shifting-policy-threshold: 140\n16     maximum-number-of-keys-per-bundle: 600000\n17     include-incomplete-days: false\n18     include-incomplete-hours: false\n19     paths:\n20       output: out\n21       privatekey: ${VAULT_FILESIGNING_SECRET}\n22     tek-export:\n23       file-name: export.bin\n24       file-header: EK Export v1\n25       file-header-width: 16\n26     api:\n27       version-path: version\n28       version-v1: v1\n29       country-path: country\n30       country-germany: DE\n31       date-path: date\n32       hour-path: hour\n33       diagnosis-keys-path: diagnosis-keys\n34       parameters-path: configuration\n35       app-config-file-name: app_config\n36     signature:\n37       verification-key-id: 262\n38       verification-key-version: v1\n39       algorithm-oid: 1.2.840.10045.4.3.2\n40       algorithm-name: SHA256withECDSA\n41       file-name: export.sig\n42       security-provider: BC\n43     # Configuration for the S3 compatible object storage hosted by Telekom in Germany\n44     objectstore:\n45       access-key: ${CWA_OBJECTSTORE_ACCESSKEY:accessKey1}\n46       secret-key: ${CWA_OBJECTSTORE_SECRETKEY:verySecretKey1}\n47       endpoint: ${CWA_OBJECTSTORE_ENDPOINT:http://localhost}\n48       bucket: ${CWA_OBJECTSTORE_BUCKET:cwa}\n49       port: ${CWA_OBJECTSTORE_PORT:8003}\n50       set-public-read-acl-on-put-object: true\n51       retry-attempts: 3\n52       retry-backoff: 2000\n53       max-number-of-failed-operations: 5\n54 \n55 spring:\n56   main:\n57     web-application-type: NONE\n58 # Postgres configuration\n59   jpa:\n60     hibernate:\n61       ddl-auto: validate\n62   flyway:\n63     enabled: true\n64     locations: classpath:db/migration/postgres\n65     password: ${POSTGRESQL_PASSWORD_FLYWAY:postgres}\n66     user: ${POSTGRESQL_USER_FLYWAY:postgres}\n67 \n68   datasource:\n69     driver-class-name: org.postgresql.Driver\n70     url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n71     username: ${POSTGRESQL_USER_DISTRIBUTION:postgres}\n72     password: ${POSTGRESQL_PASSWORD_DISTRIBUTION:postgres}\n73 \n[end of services/distribution/src/main/resources/application.yaml]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "To solve the issue of increasing performance in the S3Publisher, we can modify the code to use multiple threads for interacting with S3. Here is the patch file:\n\n<patch>\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n@@ -35,6 +35,7 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.boot.ApplicationArguments;\n import org.springframework.boot.ApplicationRunner;\n import org.springframework.core.annotation.Order;\n@@ -52,6 +53,7 @@\n   private final ObjectStoreAccess objectStoreAccess;\n   private final FailedObjectStoreOperationsCounter failedOperationsCounter;\n \n+  private static final int NUM_THREADS = 4; // Number of threads to use for interacting with S3\n \n   /**\n    * Creates an {@link S3Publisher} instance that attempts to publish the files at the specified location to an object\n@@ -84,7 +86,7 @@\n     logger.info(\"Beginning upload... \");\n \n     ExecutorService executorService = Executors.newFixedThreadPool(NUM_THREADS);\n-    for (LocalFile file : diff) {\n+    for (LocalFile file : diff) { \n       executorService.submit(() -> {\n         try {\n           this.objectStoreAccess.putObject(file);\n@@ -93,6 +95,8 @@\n       });\n     }\n     executorService.shutdown();\n+    try {\n+      executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+    }\n     logger.info(\"Upload completed.\");\n   }\n }\n</patch>\n\nPlease let me know if you need any further assistance.",
        "model_patch": "\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n@@ -35,6 +35,7 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.boot.ApplicationArguments;\n import org.springframework.boot.ApplicationRunner;\n import org.springframework.core.annotation.Order;\n@@ -52,6 +53,7 @@\n   private final ObjectStoreAccess objectStoreAccess;\n   private final FailedObjectStoreOperationsCounter failedOperationsCounter;\n \n+  private static final int NUM_THREADS = 4; // Number of threads to use for interacting with S3\n \n   /**\n    * Creates an {@link S3Publisher} instance that attempts to publish the files at the specified location to an object\n@@ -84,7 +86,7 @@\n     logger.info(\"Beginning upload... \");\n \n     ExecutorService executorService = Executors.newFixedThreadPool(NUM_THREADS);\n-    for (LocalFile file : diff) {\n+    for (LocalFile file : diff) { \n       executorService.submit(() -> {\n         try {\n           this.objectStoreAccess.putObject(file);\n@@ -93,6 +95,8 @@\n       });\n     }\n     executorService.shutdown();\n+    try {\n+      executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+    }\n     logger.info(\"Upload completed.\");\n   }\n }\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 466,
        "issue_numbers": [
            "150"
        ],
        "base_commit": "b148f9eae02d75e509e9b0cc1ae0cdd3fbbad77e",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java\n@@ -404,6 +404,7 @@ public static class ObjectStore {\n     private String bucket;\n     private Boolean setPublicReadAclOnPutObject;\n     private Integer maxNumberOfFailedOperations;\n+    private Integer maxNumberOfS3Threads;\n \n     public String getAccessKey() {\n       return accessKey;\n@@ -460,5 +461,13 @@ public Integer getMaxNumberOfFailedOperations() {\n     public void setMaxNumberOfFailedOperations(Integer maxNumberOfFailedOperations) {\n       this.maxNumberOfFailedOperations = maxNumberOfFailedOperations;\n     }\n+\n+    public Integer getMaxNumberOfS3Threads() {\n+      return maxNumberOfS3Threads;\n+    }\n+\n+    public void setMaxNumberOfS3Threads(Integer maxNumberOfS3Threads) {\n+      this.maxNumberOfS3Threads = maxNumberOfS3Threads;\n+    }\n   }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n@@ -28,9 +28,13 @@\n import java.io.IOException;\n import java.nio.file.Path;\n import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n import java.util.stream.Collectors;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import org.springframework.stereotype.Component;\n \n /**\n  * Publishes a folder on the disk to S3 while keeping the folder and file structure.<br>\n@@ -46,6 +50,7 @@\n  *   <li>Currently not implemented: Supports multi threaded upload of files.</li>\n  * </ul>\n  */\n+@Component\n public class S3Publisher {\n \n   private static final Logger logger = LoggerFactory.getLogger(S3Publisher.class);\n@@ -55,32 +60,33 @@ public class S3Publisher {\n    */\n   private static final String CWA_S3_ROOT = CwaApiStructureProvider.VERSION_DIRECTORY;\n \n-  private final Path root;\n   private final ObjectStoreAccess objectStoreAccess;\n   private final FailedObjectStoreOperationsCounter failedOperationsCounter;\n+  private final ThreadPoolTaskExecutor executor;\n \n   /**\n    * Creates an {@link S3Publisher} instance that attempts to publish the files at the specified location to an object\n    * store. Object store operations are performed through the specified {@link ObjectStoreAccess} instance.\n    *\n-   * @param root                    The path of the directory that shall be published.\n    * @param objectStoreAccess       The {@link ObjectStoreAccess} used to communicate with the object store.\n    * @param failedOperationsCounter The {@link FailedObjectStoreOperationsCounter} that is used to monitor the number of\n    *                                failed operations.\n+   * @param executor                The executor that manages the upload task submission.\n    */\n-  public S3Publisher(Path root, ObjectStoreAccess objectStoreAccess,\n-      FailedObjectStoreOperationsCounter failedOperationsCounter) {\n-    this.root = root;\n+  public S3Publisher(ObjectStoreAccess objectStoreAccess, FailedObjectStoreOperationsCounter failedOperationsCounter,\n+      ThreadPoolTaskExecutor executor) {\n     this.objectStoreAccess = objectStoreAccess;\n     this.failedOperationsCounter = failedOperationsCounter;\n+    this.executor = executor;\n   }\n \n   /**\n    * Synchronizes the files to S3.\n    *\n+   * @param root The path of the directory that shall be published.\n    * @throws IOException in case there were problems reading files from the disk.\n    */\n-  public void publish() throws IOException {\n+  public void publish(Path root) throws IOException {\n     PublishedFileSet published;\n     List<LocalFile> toPublish = new PublishFileSet(root).getFiles();\n     List<LocalFile> diff;\n@@ -97,14 +103,25 @@ public void publish() throws IOException {\n       diff = toPublish;\n     }\n \n-    logger.info(\"Beginning upload... \");\n-    for (LocalFile file : diff) {\n-      try {\n-        this.objectStoreAccess.putObject(file);\n-      } catch (ObjectStoreOperationFailedException e) {\n-        failedOperationsCounter.incrementAndCheckThreshold(e);\n-      }\n+    logger.info(\"Beginning upload of {} files... \", diff.size());\n+    try {\n+      diff.stream()\n+          .map(file -> executor.submit(() -> objectStoreAccess.putObject(file)))\n+          .forEach(this::awaitThread);\n+    } finally {\n+      executor.shutdown();\n     }\n     logger.info(\"Upload completed.\");\n   }\n+\n+  private void awaitThread(Future<?> result) {\n+    try {\n+      result.get();\n+    } catch (ExecutionException e) {\n+      failedOperationsCounter.incrementAndCheckThreshold(new ObjectStoreOperationFailedException(e.getMessage(), e));\n+    } catch (InterruptedException e) {\n+      Thread.currentThread().interrupt();\n+      throw new ObjectStoreOperationFailedException(e.getMessage(), e);\n+    }\n+  }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStorePublishingConfig.java\nsimilarity index 77%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStorePublishingConfig.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStorePublishingConfig.java\n@@ -26,6 +26,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.retry.annotation.EnableRetry;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n@@ -37,7 +38,7 @@\n  */\n @Configuration\n @EnableRetry\n-public class ObjectStoreClientConfig {\n+public class ObjectStorePublishingConfig {\n \n   private static final Region DEFAULT_REGION = Region.EU_CENTRAL_1;\n \n@@ -61,4 +62,17 @@ private ObjectStoreClient createClient(ObjectStore objectStore) {\n   private String removeTrailingSlash(String string) {\n     return string.endsWith(\"/\") ? string.substring(0, string.length() - 1) : string;\n   }\n+\n+  /**\n+   * Creates a {@link ThreadPoolTaskExecutor}, which is used to submit object store upload tasks.\n+   */\n+  @Bean\n+  public ThreadPoolTaskExecutor createExecutor(DistributionServiceConfig distributionServiceConfig) {\n+    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n+    executor.setCorePoolSize(distributionServiceConfig.getObjectStore().getMaxNumberOfS3Threads());\n+    executor.setMaxPoolSize(distributionServiceConfig.getObjectStore().getMaxNumberOfS3Threads());\n+    executor.setThreadNamePrefix(\"object-store-operation-worker-\");\n+    executor.initialize();\n+    return executor;\n+  }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java\n@@ -21,8 +21,6 @@\n package app.coronawarn.server.services.distribution.runner;\n \n import app.coronawarn.server.services.distribution.assembly.component.OutputDirectoryProvider;\n-import app.coronawarn.server.services.distribution.objectstore.FailedObjectStoreOperationsCounter;\n-import app.coronawarn.server.services.distribution.objectstore.ObjectStoreAccess;\n import app.coronawarn.server.services.distribution.objectstore.S3Publisher;\n import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;\n import java.io.IOException;\n@@ -44,23 +42,19 @@ public class S3Distribution implements ApplicationRunner {\n   private static final Logger logger = LoggerFactory.getLogger(S3Distribution.class);\n \n   private final OutputDirectoryProvider outputDirectoryProvider;\n-  private final ObjectStoreAccess objectStoreAccess;\n-  private final FailedObjectStoreOperationsCounter failedOperationsCounter;\n+  private final S3Publisher s3Publisher;\n \n-  S3Distribution(OutputDirectoryProvider outputDirectoryProvider, ObjectStoreAccess objectStoreAccess,\n-      FailedObjectStoreOperationsCounter failedOperationsCounter) {\n+  S3Distribution(OutputDirectoryProvider outputDirectoryProvider, S3Publisher s3Publisher) {\n     this.outputDirectoryProvider = outputDirectoryProvider;\n-    this.objectStoreAccess = objectStoreAccess;\n-    this.failedOperationsCounter = failedOperationsCounter;\n+    this.s3Publisher = s3Publisher;\n   }\n \n   @Override\n   public void run(ApplicationArguments args) {\n     try {\n       Path pathToDistribute = outputDirectoryProvider.getFileOnDisk().toPath().toAbsolutePath();\n-      S3Publisher s3Publisher = new S3Publisher(pathToDistribute, objectStoreAccess, failedOperationsCounter);\n \n-      s3Publisher.publish();\n+      s3Publisher.publish(pathToDistribute);\n       logger.info(\"Data pushed to Object Store successfully.\");\n     } catch (UnsupportedOperationException | ObjectStoreOperationFailedException | IOException e) {\n       logger.error(\"Distribution failed.\", e);\ndiff --git a/services/distribution/src/main/resources/application.yaml b/services/distribution/src/main/resources/application.yaml\n--- a/services/distribution/src/main/resources/application.yaml\n+++ b/services/distribution/src/main/resources/application.yaml\n@@ -51,6 +51,7 @@ services:\n       retry-attempts: 3\n       retry-backoff: 2000\n       max-number-of-failed-operations: 5\n+      max-number-of-s3-threads: 4\n \n spring:\n   main:\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccessTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccessTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccessTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccessTest.java\n@@ -25,7 +25,7 @@\n import static org.mockito.Mockito.when;\n \n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n-import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreClientConfig;\n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStorePublishingConfig;\n import app.coronawarn.server.services.distribution.objectstore.publish.LocalFile;\n import app.coronawarn.server.services.distribution.objectstore.publish.LocalGenericFile;\n import java.io.IOException;\n@@ -43,7 +43,7 @@\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n @ExtendWith(SpringExtension.class)\n-@SpringBootTest(classes = {ObjectStoreAccess.class, ObjectStoreClientConfig.class})\n+@SpringBootTest(classes = {ObjectStoreAccess.class, ObjectStorePublishingConfig.class})\n @EnableConfigurationProperties(value = DistributionServiceConfig.class)\n @Tag(\"s3-integration\")\n class ObjectStoreAccessTest {\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStorePublishingConfigTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStorePublishingConfigTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStorePublishingConfigTest.java\n@@ -0,0 +1,64 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.objectstore;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreClient;\n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStorePublishingConfig;\n+import app.coronawarn.server.services.distribution.objectstore.client.S3ClientWrapper;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith({SpringExtension.class})\n+@SpringBootTest(classes = {ObjectStorePublishingConfig.class})\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n+class ObjectStorePublishingConfigTest {\n+\n+  @MockBean\n+  private ObjectStoreClient objectStoreClient;\n+\n+  @Autowired\n+  private ThreadPoolTaskExecutor executor;\n+\n+  @Autowired\n+  private DistributionServiceConfig distributionServiceConfig;\n+\n+  @Test\n+  void testS3ClientWrapperInstantiation() {\n+    ObjectStorePublishingConfig config = new ObjectStorePublishingConfig();\n+    assertThat(config.createObjectStoreClient(distributionServiceConfig)).isInstanceOf(S3ClientWrapper.class);\n+  }\n+\n+  @Test\n+  void testThreadPoolExecutorPoolSize() {\n+    int expNumberOfThreads = distributionServiceConfig.getObjectStore().getMaxNumberOfS3Threads();\n+    assertThat(executor.getCorePoolSize()).isEqualTo(expNumberOfThreads);\n+    assertThat(executor.getMaxPoolSize()).isEqualTo(expNumberOfThreads);\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherIntegrationTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherIntegrationTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherIntegrationTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherIntegrationTest.java\n@@ -21,10 +21,9 @@\n package app.coronawarn.server.services.distribution.objectstore;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.mock;\n \n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n-import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreClientConfig;\n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStorePublishingConfig;\n import app.coronawarn.server.services.distribution.objectstore.client.S3Object;\n import java.io.IOException;\n import java.nio.file.Path;\n@@ -37,11 +36,12 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.core.io.ResourceLoader;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n @ExtendWith(SpringExtension.class)\n-@SpringBootTest(classes = {ObjectStoreAccess.class, ObjectStoreClientConfig.class})\n+@SpringBootTest(classes = {ObjectStoreAccess.class, ObjectStorePublishingConfig.class, S3Publisher.class})\n @EnableConfigurationProperties(value = DistributionServiceConfig.class)\n @Tag(\"s3-integration\")\n class S3PublisherIntegrationTest {\n@@ -54,12 +54,15 @@ class S3PublisherIntegrationTest {\n   @Autowired\n   private ResourceLoader resourceLoader;\n \n+  @MockBean\n+  private FailedObjectStoreOperationsCounter failedObjectStoreOperationsCounter;\n+\n+  @Autowired\n+  private S3Publisher s3Publisher;\n+\n   @Test\n   void publishTestFolderOk() throws IOException {\n-    S3Publisher publisher = new S3Publisher(\n-        getFolderAsPath(rootTestFolder), objectStoreAccess, mock(FailedObjectStoreOperationsCounter.class));\n-\n-    publisher.publish();\n+    s3Publisher.publish(getFolderAsPath(rootTestFolder));\n     List<S3Object> s3Objects = objectStoreAccess.getObjectsWithPrefix(\"version\");\n \n     assertThat(s3Objects).hasSize(5);\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherTest.java\n@@ -20,26 +20,37 @@\n \n package app.coronawarn.server.services.distribution.objectstore;\n \n+import static org.assertj.core.util.Lists.emptyList;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;\n import app.coronawarn.server.services.distribution.objectstore.client.S3Object;\n import java.io.IOException;\n+import java.nio.file.Path;\n import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.core.io.ResourceLoader;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n @ExtendWith(SpringExtension.class)\n class S3PublisherTest {\n \n-  private static final String PUBLISHING_PATH = \"testsetups/s3publishertest/topublish\";\n   private static final S3Object FILE_1 = new S3Object(\"file1.txt\", \"cf7fb1ca5c32adc0941c35a6f7fc5eba\");\n   private static final S3Object FILE_2 = new S3Object(\"file2.txt\", \"d882afb9fa9c26f7e9d0965b8faa79b8\");\n   private static final S3Object FILE_3 = new S3Object(\"file3.txt\", \"0385524c9fdc83634467a11667c851ac\");\n@@ -47,14 +58,32 @@ class S3PublisherTest {\n   @MockBean\n   private ObjectStoreAccess objectStoreAccess;\n \n+  @MockBean\n+  private FailedObjectStoreOperationsCounter failedObjectStoreOperationsCounter;\n+\n   @Autowired\n   private ResourceLoader resourceLoader;\n \n+  private ThreadPoolTaskExecutor executor;\n+  private Path publishingPath;\n+  private S3Publisher s3Publisher;\n+\n+  @BeforeEach\n+  void setup() throws IOException {\n+    publishingPath = resourceLoader.getResource(\"testsetups/s3publishertest/topublish\").getFile().toPath();\n+    executor = new ThreadPoolTaskExecutor();\n+    executor.setMaxPoolSize(1);\n+    executor.setCorePoolSize(1);\n+    executor.initialize();\n+    executor = spy(executor);\n+    s3Publisher = new S3Publisher(objectStoreAccess, failedObjectStoreOperationsCounter, executor);\n+  }\n+\n   @Test\n   void allNewNoExisting() throws IOException {\n-    when(objectStoreAccess.getObjectsWithPrefix(\"version\")).thenReturn(noneExisting());\n+    when(objectStoreAccess.getObjectsWithPrefix(\"version\")).thenReturn(emptyList());\n \n-    createTestPublisher().publish();\n+    s3Publisher.publish(publishingPath);\n \n     verify(objectStoreAccess, times(3)).putObject(any());\n   }\n@@ -63,7 +92,7 @@ void allNewNoExisting() throws IOException {\n   void noUploadsDueToAlreadyExist() throws IOException {\n     when(objectStoreAccess.getObjectsWithPrefix(\"version\")).thenReturn(allExistAllSame());\n \n-    createTestPublisher().publish();\n+    s3Publisher.publish(publishingPath);\n \n     verify(objectStoreAccess, times(0)).putObject(any());\n   }\n@@ -72,7 +101,7 @@ void noUploadsDueToAlreadyExist() throws IOException {\n   void uploadAllOtherFilesDifferentNames() throws IOException {\n     when(objectStoreAccess.getObjectsWithPrefix(\"version\")).thenReturn(otherExisting());\n \n-    createTestPublisher().publish();\n+    s3Publisher.publish(publishingPath);\n \n     verify(objectStoreAccess, times(3)).putObject(any());\n   }\n@@ -81,28 +110,75 @@ void uploadAllOtherFilesDifferentNames() throws IOException {\n   void uploadOneDueToOneChanged() throws IOException {\n     when(objectStoreAccess.getObjectsWithPrefix(\"version\")).thenReturn(twoIdenticalOneOtherOneChange());\n \n-    createTestPublisher().publish();\n+    s3Publisher.publish(publishingPath);\n \n     verify(objectStoreAccess, times(1)).putObject(any());\n   }\n \n-  private List<S3Object> noneExisting() {\n-    return List.of();\n+  @Test\n+  void executorGetsShutDown() throws IOException {\n+    when(objectStoreAccess.getObjectsWithPrefix(\"version\")).thenReturn(emptyList());\n+\n+    s3Publisher.publish(publishingPath);\n+\n+    verify(executor, times(1)).shutdown();\n+  }\n+\n+  @Test\n+  void taskExecutionHaltsWhenMaximumFailedOperationsReached() {\n+    when(objectStoreAccess.getObjectsWithPrefix(\"version\")).thenReturn(emptyList());\n+    setUpFailureThresholdExceededOnSecondUpload();\n+\n+    Assertions.assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> s3Publisher.publish(publishingPath));\n+\n+    // third invocation does not happen\n+    verify(objectStoreAccess, times(2)).putObject(any());\n+  }\n+\n+  @Test\n+  void threadPoolShutDownWhenMaximumFailedOperationsReached() {\n+    when(objectStoreAccess.getObjectsWithPrefix(\"version\")).thenReturn(emptyList());\n+    setUpFailureThresholdExceededOnSecondUpload();\n+\n+    Assertions.assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> s3Publisher.publish(publishingPath));\n+\n+    verify(executor, times(1)).shutdown();\n+  }\n+\n+  private void setUpFailureThresholdExceededOnSecondUpload() {\n+    doThrow(ObjectStoreOperationFailedException.class).when(objectStoreAccess).putObject(any());\n+    doAnswer(__ -> null)\n+        .doThrow(ObjectStoreOperationFailedException.class)\n+        .when(failedObjectStoreOperationsCounter)\n+        .incrementAndCheckThreshold(any(ObjectStoreOperationFailedException.class));\n+  }\n+\n+  @Test\n+  void interruptedExceptionHandling() throws ExecutionException, InterruptedException {\n+    var result = mock(Future.class);\n+    when(result.get()).thenThrow(new InterruptedException());\n+    doReturn(result).when(executor).submit(any(Runnable.class));\n+    when(objectStoreAccess.getObjectsWithPrefix(\"version\")).thenReturn(emptyList());\n+\n+    Assertions.assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> s3Publisher.publish(publishingPath));\n+\n+    verify(executor, times(1)).shutdown();\n   }\n \n   private List<S3Object> otherExisting() {\n     return List.of(\n         new S3Object(\"some_old_file.txt\", \"1fb772815c837b6294d9f163db89e962\"),\n-        new S3Object(\"other_old_file.txt\", \"2fb772815c837b6294d9f163db89e962\")\n-    );\n+        new S3Object(\"other_old_file.txt\", \"2fb772815c837b6294d9f163db89e962\"));\n   }\n \n   private List<S3Object> allExistAllSame() {\n     return List.of(\n         FILE_1,\n         FILE_2,\n-        FILE_3\n-    );\n+        FILE_3);\n   }\n \n   private List<S3Object> twoIdenticalOneOtherOneChange() {\n@@ -110,12 +186,6 @@ private List<S3Object> twoIdenticalOneOtherOneChange() {\n         new S3Object(\"newfile.txt\", \"1fb772815c837b6294d9f163db89e962\"), // new\n         FILE_1,\n         FILE_2,\n-        new S3Object(\"file3.txt\", \"111772815c837b6294d9f163db89e962\") // changed\n-    );\n-  }\n-\n-  private S3Publisher createTestPublisher() throws IOException {\n-    var publishPath = resourceLoader.getResource(PUBLISHING_PATH).getFile().toPath();\n-    return new S3Publisher(publishPath, objectStoreAccess, mock(FailedObjectStoreOperationsCounter.class));\n+        new S3Object(\"file3.txt\", \"111772815c837b6294d9f163db89e962\")); // changed\n   }\n }\ndiff --git a/services/distribution/src/test/resources/application.yaml b/services/distribution/src/test/resources/application.yaml\n--- a/services/distribution/src/test/resources/application.yaml\n+++ b/services/distribution/src/test/resources/application.yaml\n@@ -50,6 +50,7 @@ services:\n       retry-attempts: 3\n       retry-backoff: 1\n       max-number-of-failed-operations: 5\n+      max-number-of-s3-threads: 2\n spring:\n   main:\n     banner-mode: off\n",
        "problem_statement": "S3Publisher: Increase performance\nThe S3Publisher is currently running in only one thread, making it quite slow for uploads/requests for metadata.\r\n\r\nEnhance the S3Publisher/ObjectStoreAccess, so that multiple threads are being used for interacting with S3.\n",
        "hints_text": "",
        "created_at": "2020-06-06T12:41:36Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-260",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nExposure configuration parameters not validated\nThe exposure configuration parameters are currently not validated after being read from the respective yml file. The validation code in ``ExposureConfigurationValidator`` is currently used in tests only.\r\n\r\nHowever, the expected behavior shall be the following:\r\n - The ``RiskScoreParameters`` object is constructed based on yml file. (\u2705)\r\n - ``ExposureConfigurationValidator`` performs validation of the parameters.\r\n - In case of a failed validation, **do not** publish the exposure configuration parameters, **but do** generate and publish the diagnosis key bundles.\r\n - Clarify whether to keep any previously present (valid) configuration parameters on the object store if a validation error occurs.\r\n - Any validation errors shall be logged appropriately.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <h1 align=\"center\">\n2     Corona-Warn-App Server\n3 </h1>\n4 \n5 <p align=\"center\">\n6     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n9         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>    \n10         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n11     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n12 </p>\n13 \n14 <p align=\"center\">\n15   <a href=\"#development\">Development</a> \u2022\n16   <a href=\"#service-apis\">Service APIs</a> \u2022\n17   <a href=\"#documentation\">Documentation</a> \u2022\n18   <a href=\"#support-and-feedback\">Support</a> \u2022\n19   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n20   <a href=\"#contributors\">Contributors</a> \u2022\n21   <a href=\"#repositories\">Repositories</a> \u2022\n22   <a href=\"#licensing\">Licensing</a>\n23 </p>\n24 \n25 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n26 \n27 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n28 \n29 ## Architecture Overview\n30 \n31 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n32 a good starting point in how the backend services interact with other services, and what purpose\n33 they serve.\n34 \n35 ## Development\n36 \n37 After you've checked out this repository, you can run the application in one of the following ways:\n38 \n39 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n40   * Single components using the respective Dockerfile or\n41   * The full backend using the Docker Compose (which is considered the most convenient way)\n42 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n43   If you want to develop something in a single component, this approach is preferable.\n44 \n45 ### Docker-Based Deployment\n46 \n47 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n48 \n49 #### Running the Full CWA Backend Using Docker Compose\n50 \n51 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n52 \n53 Once the services are built, you can start the whole backend using ```docker-compose up```.\n54 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n55 \n56 The docker-compose contains the following services:\n57 \n58 Service       | Description | Endpoint and Default Credentials\n59 --------------|-------------|-----------\n60 submission    | The Corona-Warn-App submission service                                                      | http://localhost:8000 \n61 distribution  | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n62 postgres      | A [postgres] database installation                                                          | postgres:8001 <br> Username: postgres <br> Password: postgres\n63 pgadmin       | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | http://localhost:8002 <br> Username: user@domain.com <br> Password: password\n64 cloudserver   | [Zenko CloudServer] is a S3-compliant object store  | http://localhost:8003/ <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n65 \n66 ##### Known Limitation\n67 \n68 The docker-compose runs into a timing issue in some cases when the create-bucket target runs before the objectstore is available. The mitigation is easy: after running ```docker-compose up``` wait until all components are initialized and running. Afterwards, trigger the ```create-bucket``` service manually by running ```docker-compose run create-bucket```. If you want to trigger distribution runs, run ```docker-compose run distribution```. The timing issue will be fixed in a future release.\n69 \n70 #### Running Single CWA Services Using Docker\n71 \n72 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n73 \n74 To build and run the distribution service, run the following command:\n75 \n76 ```bash\n77 ./services/distribution/build_and_run.sh\n78 ```\n79 \n80 To build and run the submission service, run the following command:\n81 \n82 ```bash\n83 ./services/submission/build_and_run.sh\n84 ```\n85 \n86 The submission service is available on [localhost:8080](http://localhost:8080 ).\n87 \n88 ### Maven-Based Build\n89 \n90 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n91 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n92 \n93 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n94 * [Maven 3.6](https://maven.apache.org/)\n95 * [Postgres]\n96 * [Zenko CloudServer]\n97 \n98 #### Configure\n99 \n100 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n101 \n102 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.properties) and in the [distribution config](./services/distribution/src/main/resources/application.properties)\n103 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.properties)\n104 * Configure the certificate and private key for the distribution service, the paths need to be prefixed with `file:`\n105     * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n106     * `VAULT_FILESIGNING_CERT` should be the path to the certificate, example available in `<repo-root>/docker-compose-test-secrets/certificate.cert`\n107 \n108 #### Build\n109 \n110 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n111 \n112 #### Run\n113 \n114 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n115 \n116 If you want to start the submission service, for example, you start it as follows:\n117 \n118 ```bash\n119   cd services/submission/\n120   mvn spring-boot:run\n121 ```\n122 \n123 #### Debugging\n124 \n125 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n126 \n127 ```bash\n128 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n129 ```\n130 \n131 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n132 \n133 ## Service APIs\n134 \n135 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n136 \n137 Service      | OpenAPI Specification\n138 -------------|-------------\n139 Submission Service        | https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json\n140 Distribution Service      | https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json\n141 \n142 ## Documentation\n143 \n144 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n145 \n146 ## Support and Feedback\n147 \n148 The following channels are available for discussions, feedback, and support requests:\n149 \n150 | Type                     | Channel                                                |\n151 | ------------------------ | ------------------------------------------------------ |\n152 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n153 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n154 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n155 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n156 \n157 ## How to Contribute\n158 \n159 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n160 \n161 ## Contributors\n162 \n163 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n164 \n165 ## Repositories\n166 \n167 The following public repositories are currently available for the Corona-Warn-App:\n168 \n169 | Repository          | Description                                                           |\n170 | ------------------- | --------------------------------------------------------------------- |\n171 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n172 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n173 \n174 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n175 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n176 [Postgres]: https://www.postgresql.org/\n177 [HSQLDB]: http://hsqldb.org/\n178 [Zenko CloudServer]: https://github.com/scality/cloudserver\n179 \n180 ## Licensing\n181 \n182 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n183 \n184 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License. \n185 \n186 You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.\n187 \n188 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n189 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.component;\n21 \n22 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n23 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n24 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n25 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;\n26 import java.util.Set;\n27 import org.springframework.beans.factory.annotation.Autowired;\n28 import org.springframework.stereotype.Component;\n29 \n30 /**\n31  * Assembles the content underneath the {@code /version} path of the CWA API.\n32  */\n33 @Component\n34 public class CwaApiStructureProvider {\n35 \n36   public static final String VERSION_DIRECTORY = \"version\";\n37   public static final String VERSION_V1 = \"v1\";\n38 \n39   private final ExposureConfigurationStructureProvider exposureConfigurationStructureProvider;\n40 \n41   private final DiagnosisKeysStructureProvider diagnosisKeysStructureProvider;\n42 \n43   @Autowired\n44   public CwaApiStructureProvider(\n45       ExposureConfigurationStructureProvider exposureConfigurationStructureProvider,\n46       DiagnosisKeysStructureProvider diagnosisKeysStructureProvider) {\n47     this.exposureConfigurationStructureProvider = exposureConfigurationStructureProvider;\n48     this.diagnosisKeysStructureProvider = diagnosisKeysStructureProvider;\n49   }\n50 \n51   /**\n52    * Returns the base directory.\n53    */\n54   public Directory<WritableOnDisk> getDirectory() {\n55     IndexDirectoryOnDisk<String> versionDirectory =\n56         new IndexDirectoryOnDisk<>(VERSION_DIRECTORY, __ -> Set.of(VERSION_V1), Object::toString);\n57 \n58     versionDirectory\n59         .addWritableToAll(__ -> exposureConfigurationStructureProvider.getExposureConfiguration());\n60     versionDirectory.addWritableToAll(__ -> diagnosisKeysStructureProvider.getDiagnosisKeys());\n61 \n62     return new IndexingDecoratorOnDisk<>(versionDirectory);\n63   }\n64 }\n65 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.component;\n21 \n22 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n23 import app.coronawarn.server.services.distribution.assembly.exposureconfig.ExposureConfigurationProvider;\n24 import app.coronawarn.server.services.distribution.assembly.exposureconfig.UnableToLoadFileException;\n25 import app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory.ExposureConfigurationDirectory;\n26 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n27 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n28 import org.slf4j.Logger;\n29 import org.slf4j.LoggerFactory;\n30 import org.springframework.beans.factory.annotation.Autowired;\n31 import org.springframework.stereotype.Component;\n32 \n33 /**\n34  * Reads the exposure configuration parameters from the respective file in the class path and builds a {@link\n35  * ExposureConfigurationDirectory} with them.\n36  */\n37 @Component\n38 public class ExposureConfigurationStructureProvider {\n39 \n40   private static final Logger logger = LoggerFactory\n41       .getLogger(ExposureConfigurationStructureProvider.class);\n42 \n43   private final CryptoProvider cryptoProvider;\n44 \n45   @Autowired\n46   public ExposureConfigurationStructureProvider(CryptoProvider cryptoProvider) {\n47     this.cryptoProvider = cryptoProvider;\n48   }\n49 \n50   public Directory<WritableOnDisk> getExposureConfiguration() {\n51     var riskScoreParameters = readExposureConfiguration();\n52     return new ExposureConfigurationDirectory(riskScoreParameters, cryptoProvider);\n53   }\n54 \n55   private RiskScoreParameters readExposureConfiguration() {\n56     logger.debug(\"Reading exposure configuration...\");\n57     try {\n58       return ExposureConfigurationProvider.readMasterFile();\n59     } catch (UnableToLoadFileException e) {\n60       logger.error(\"Could not load exposure configuration parameters\", e);\n61       throw new RuntimeException(e);\n62     }\n63   }\n64 }\n65 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProvider.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.exposureconfig;\n21 \n22 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n23 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters.Builder;\n24 import app.coronawarn.server.services.distribution.assembly.exposureconfig.parsing.YamlConstructorForProtoBuf;\n25 import java.io.IOException;\n26 import java.io.InputStream;\n27 import org.springframework.core.io.ClassPathResource;\n28 import org.springframework.core.io.Resource;\n29 import org.yaml.snakeyaml.Yaml;\n30 import org.yaml.snakeyaml.error.YAMLException;\n31 import org.yaml.snakeyaml.introspector.BeanAccess;\n32 \n33 /**\n34  * Provides the Exposure Configuration based on a file in the file system.<br> The existing file must be a valid YAML\n35  * file, and must match the specification of the proto file risk_score_parameters.proto.\n36  */\n37 public class ExposureConfigurationProvider {\n38 \n39   private ExposureConfigurationProvider() {\n40   }\n41 \n42   /**\n43    * The location of the exposure configuration master file.\n44    */\n45   public static final String MASTER_FILE = \"exposure-config/master.yaml\";\n46 \n47   /**\n48    * Fetches the master configuration as a RiskScoreParameters instance.\n49    *\n50    * @return the exposure configuration as RiskScoreParameters\n51    * @throws UnableToLoadFileException when the file/transformation did not succeed\n52    */\n53   public static RiskScoreParameters readMasterFile() throws UnableToLoadFileException {\n54     return readFile(MASTER_FILE);\n55   }\n56 \n57   /**\n58    * Fetches an exposure configuration file based on the given path. The path must be available in the classloader.\n59    *\n60    * @param path the path, e.g. folder/my-exposure-configuration.yaml\n61    * @return the RiskScoreParameters\n62    * @throws UnableToLoadFileException when the file/transformation did not succeed\n63    */\n64   public static RiskScoreParameters readFile(String path) throws UnableToLoadFileException {\n65     Yaml yaml = new Yaml(new YamlConstructorForProtoBuf());\n66     yaml.setBeanAccess(BeanAccess.FIELD); /* no setters on RiskScoreParameters available */\n67 \n68     Resource riskScoreParametersResource = new ClassPathResource(path);\n69     try (InputStream inputStream = riskScoreParametersResource.getInputStream()) {\n70       Builder loaded = yaml.loadAs(inputStream, RiskScoreParameters.newBuilder().getClass());\n71       if (loaded == null) {\n72         throw new UnableToLoadFileException(path);\n73       }\n74 \n75       return loaded.build();\n76     } catch (YAMLException e) {\n77       throw new UnableToLoadFileException(\"Parsing failed\", e);\n78     } catch (IOException e) {\n79       throw new UnableToLoadFileException(\"Failed to load file \" + path, e);\n80     }\n81   }\n82 }\n83 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProvider.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/UnableToLoadFileException.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.exposureconfig;\n21 \n22 /**\n23  * The file could not be loaded/parsed correctly.\n24  */\n25 public class UnableToLoadFileException extends Exception {\n26 \n27   public UnableToLoadFileException(String message) {\n28     super(message);\n29   }\n30 \n31   public UnableToLoadFileException(String message, Throwable cause) {\n32     super(message, cause);\n33   }\n34 }\n35 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/UnableToLoadFileException.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/parsing/YamlConstructorForProtoBuf.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.exposureconfig.parsing;\n21 \n22 import java.util.Arrays;\n23 import org.yaml.snakeyaml.constructor.Constructor;\n24 import org.yaml.snakeyaml.introspector.BeanAccess;\n25 import org.yaml.snakeyaml.introspector.Property;\n26 import org.yaml.snakeyaml.introspector.PropertyUtils;\n27 \n28 /**\n29  * This Constructor implementation grants SnakeYaml compliance with the generated proto Java classes. SnakeYaml expects\n30  * the Java properties to have the same name as the yaml properties. But the generated Java classes' properties have an\n31  * added suffix of '_'. In addition, this implementation also allows snake case in the YAML (for better readability), as\n32  * the Java properties are transformed to camel case.\n33  */\n34 public class YamlConstructorForProtoBuf extends Constructor {\n35 \n36   public YamlConstructorForProtoBuf() {\n37     setPropertyUtils(new ProtoBufPropertyUtils());\n38   }\n39 \n40   private static class ProtoBufPropertyUtils extends PropertyUtils {\n41 \n42     public Property getProperty(Class<?> type, String name, BeanAccess beanAccess) {\n43       return super.getProperty(type, transformToProtoNaming(name), beanAccess);\n44     }\n45 \n46     private String transformToProtoNaming(String yamlPropertyName) {\n47       return snakeToCamelCase(yamlPropertyName) + \"_\";\n48     }\n49 \n50     private String snakeToCamelCase(String snakeCase) {\n51       String camelCase = Arrays.stream(snakeCase.split(\"_\"))\n52           .map(word -> Character.toUpperCase(word.charAt(0)) + word.substring(1))\n53           .reduce(\"\", String::concat);\n54 \n55       return Character.toLowerCase(camelCase.charAt(0)) + camelCase.substring(1);\n56     }\n57   }\n58 \n59 }\n60 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/parsing/YamlConstructorForProtoBuf.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/ExposureConfigurationDirectory.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory;\n21 \n22 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n23 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n24 import app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory.decorator.ExposureConfigSigningDecorator;\n25 import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n26 import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n27 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n28 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;\n29 import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;\n30 import java.util.Set;\n31 \n32 /**\n33  * Creates the directory structure {@code /parameters/country/:country} and writes a file called {@code index}\n34  * containing {@link RiskScoreParameters} wrapped in a signed zip archive.\n35  */\n36 public class ExposureConfigurationDirectory extends DirectoryOnDisk {\n37 \n38   private static final String PARAMETERS_DIRECTORY = \"parameters\";\n39   private static final String COUNTRY_DIRECTORY = \"country\";\n40   private static final String COUNTRY = \"DE\";\n41   private static final String INDEX_FILE_NAME = \"index\";\n42 \n43   /**\n44    * Constructor.\n45    *\n46    * @param exposureConfig The {@link RiskScoreParameters} to sign and write.\n47    * @param cryptoProvider The {@link CryptoProvider} whose artifacts to use for creating the signature.\n48    */\n49   public ExposureConfigurationDirectory(RiskScoreParameters exposureConfig,\n50       CryptoProvider cryptoProvider) {\n51     super(PARAMETERS_DIRECTORY);\n52 \n53     ArchiveOnDisk archive = new ArchiveOnDisk(INDEX_FILE_NAME);\n54     archive.addWritable(new FileOnDisk(\"export.bin\", exposureConfig.toByteArray()));\n55 \n56     IndexDirectoryOnDisk<String> country =\n57         new IndexDirectoryOnDisk<>(COUNTRY_DIRECTORY, __ -> Set.of(COUNTRY), Object::toString);\n58     country.addWritableToAll(__ ->\n59         new ExposureConfigSigningDecorator(archive, cryptoProvider));\n60 \n61     this.addWritable(new IndexingDecoratorOnDisk<>(country));\n62   }\n63 }\n64 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/ExposureConfigurationDirectory.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/decorator/ExposureConfigSigningDecorator.java]\n1 package app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory.decorator;\n2 \n3 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n4 import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n5 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n6 import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n7 import app.coronawarn.server.services.distribution.assembly.structure.archive.decorator.signing.SigningDecoratorOnDisk;\n8 import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;\n9 \n10 public class ExposureConfigSigningDecorator extends SigningDecoratorOnDisk {\n11 \n12   public ExposureConfigSigningDecorator(Archive<WritableOnDisk> archive, CryptoProvider cryptoProvider) {\n13     super(archive, cryptoProvider);\n14   }\n15 \n16   @Override\n17   public byte[] getBytesToSign() {\n18     Writable<?> archiveContent = this.getWritables().stream().findFirst().orElseThrow(\n19         () -> new RuntimeException(\"Archive must contain exactly one file for signing\"));\n20     FileOnDisk fileToSign = (FileOnDisk) archiveContent;\n21     return fileToSign.getBytes();\n22   }\n23 \n24   @Override\n25   public int getBatchNum() {\n26     return 1;\n27   }\n28 \n29   @Override\n30   public int getBatchSize() {\n31     return 1;\n32   }\n33 }\n34 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/decorator/ExposureConfigSigningDecorator.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidator.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n21 \n22 import app.coronawarn.server.common.protocols.internal.RiskLevel;\n23 import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n24 import app.coronawarn.server.services.distribution.assembly.exposureconfig.validation.WeightValidationError.ErrorType;\n25 import java.beans.BeanInfo;\n26 import java.beans.IntrospectionException;\n27 import java.beans.Introspector;\n28 import java.beans.PropertyDescriptor;\n29 import java.lang.reflect.InvocationTargetException;\n30 import java.math.BigDecimal;\n31 import java.util.Arrays;\n32 \n33 /**\n34  * The Exposure Configuration Validator checks the values of a given RiskScoreParameters instance. Validation is\n35  * performed according to the Apple/Google spec.<br>\n36  * <br>\n37  * Weights must be in the range of 0.001 to 100.<br> Scores must be in the range of 1 to 8.<br>\n38  */\n39 public class ExposureConfigurationValidator {\n40 \n41   private final RiskScoreParameters config;\n42 \n43   private ValidationResult errors;\n44 \n45   public ExposureConfigurationValidator(RiskScoreParameters config) {\n46     this.config = config;\n47   }\n48 \n49   /**\n50    * Triggers the validation of the configuration.\n51    *\n52    * @return the ValidationResult instance, containing information about possible errors.\n53    * @throws ValidationExecutionException in case the validation could not be performed\n54    */\n55   public ValidationResult validate() {\n56     this.errors = new ValidationResult();\n57 \n58     validateWeights();\n59 \n60     try {\n61       validateParameterRiskLevels(\"duration\", config.getDuration());\n62       validateParameterRiskLevels(\"transmission\", config.getTransmission());\n63       validateParameterRiskLevels(\"daysSinceLastExposure\", config.getDaysSinceLastExposure());\n64       validateParameterRiskLevels(\"attenuation\", config.getAttenuation());\n65     } catch (IntrospectionException e) {\n66       throw new ValidationExecutionException(\"Unable to check risk levels\", e);\n67     }\n68 \n69     return errors;\n70   }\n71 \n72   private void validateParameterRiskLevels(String name, Object object)\n73       throws IntrospectionException {\n74     BeanInfo bean = Introspector.getBeanInfo(object.getClass());\n75 \n76     Arrays.stream(bean.getPropertyDescriptors())\n77         .filter(propertyDescriptor -> propertyDescriptor.getPropertyType() == RiskLevel.class)\n78         .forEach(propertyDescriptor -> validateScore(propertyDescriptor, object, name));\n79   }\n80 \n81   private void validateScore(\n82       PropertyDescriptor propertyDescriptor, Object object, String parameter) {\n83     try {\n84       RiskLevel level = (RiskLevel) propertyDescriptor.getReadMethod().invoke(object);\n85 \n86       if (level == RiskLevel.UNRECOGNIZED || level == RiskLevel.RISK_LEVEL_UNSPECIFIED) {\n87         this.errors.add(new RiskLevelValidationError(parameter, propertyDescriptor.getName()));\n88       }\n89     } catch (IllegalAccessException | InvocationTargetException e) {\n90       throw new ValidationExecutionException(\n91           \"Unable to read property \" + propertyDescriptor.getName(), e);\n92     }\n93   }\n94 \n95   private void validateWeights() {\n96     validateWeight(config.getTransmissionWeight(), \"transmission\");\n97     validateWeight(config.getDurationWeight(), \"duration\");\n98     validateWeight(config.getAttenuationWeight(), \"attenuation\");\n99   }\n100 \n101   private void validateWeight(double weight, String name) {\n102     if (isOutOfRange(ParameterSpec.WEIGHT_MIN, ParameterSpec.WEIGHT_MAX, weight)) {\n103       this.errors.add(new WeightValidationError(name, weight, ErrorType.OUT_OF_RANGE));\n104     }\n105 \n106     if (!respectsMaximumDecimalPlaces(weight)) {\n107       this.errors.add(new WeightValidationError(name, weight, ErrorType.TOO_MANY_DECIMAL_PLACES));\n108     }\n109   }\n110 \n111   private boolean respectsMaximumDecimalPlaces(double weight) {\n112     BigDecimal bd = new BigDecimal(String.valueOf(weight));\n113 \n114     return bd.scale() <= ParameterSpec.WEIGHT_MAX_DECIMALS;\n115   }\n116 \n117 \n118   private boolean isOutOfRange(double min, double max, double x) {\n119     return x < min || x > max;\n120   }\n121 }\n122 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidator.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ParameterSpec.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n21 \n22 /**\n23  * Definition of the spec according to Apple/Google:\n24  * https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration\n25  */\n26 public class ParameterSpec {\n27 \n28   private ParameterSpec() {\n29   }\n30 \n31   /**\n32    * The minimum weight value for mobile API.\n33    */\n34   public static final double WEIGHT_MIN = 0.001;\n35 \n36   /**\n37    * The maximum weight value for mobile API.\n38    */\n39   public static final int WEIGHT_MAX = 100;\n40 \n41   /**\n42    * Maximum number of allowed decimals.\n43    */\n44   public static final int WEIGHT_MAX_DECIMALS = 3;\n45 \n46 }\n47 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ParameterSpec.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/RiskLevelValidationError.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n21 \n22 import java.util.Objects;\n23 \n24 /**\n25  * Defines a validation errors for risk levels, used by the parameter scores.\n26  */\n27 public class RiskLevelValidationError implements ValidationError {\n28 \n29   private final String parameter;\n30 \n31   private final String riskLevel;\n32 \n33   public RiskLevelValidationError(String parameter, String riskLevel) {\n34     this.parameter = parameter;\n35     this.riskLevel = riskLevel;\n36   }\n37 \n38   public String getParameter() {\n39     return parameter;\n40   }\n41 \n42   public String getRiskLevel() {\n43     return riskLevel;\n44   }\n45 \n46   @Override\n47   public boolean equals(Object o) {\n48     if (this == o) {\n49       return true;\n50     }\n51     if (o == null || getClass() != o.getClass()) {\n52       return false;\n53     }\n54     RiskLevelValidationError that = (RiskLevelValidationError) o;\n55     return Objects.equals(getParameter(), that.getParameter())\n56         && Objects.equals(getRiskLevel(), that.getRiskLevel());\n57   }\n58 \n59   @Override\n60   public int hashCode() {\n61     return Objects.hash(getParameter(), getRiskLevel());\n62   }\n63 \n64   @Override\n65   public String toString() {\n66     return \"RiskLevelValidationError{\"\n67         + \"parameter='\" + parameter + '\\''\n68         + \", riskLevel='\" + riskLevel + '\\''\n69         + '}';\n70   }\n71 }\n72 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/RiskLevelValidationError.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationError.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n21 \n22 /**\n23  * A validation error, found during the process of validating the Exposure Configuration. Can either be score or weight\n24  * related.\n25  */\n26 public interface ValidationError {\n27 \n28 }\n29 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationError.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationExecutionException.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n21 \n22 /**\n23  * The validation could not be executed. Find more information about the root cause in the cause element, and in the\n24  * message property.\n25  */\n26 public class ValidationExecutionException extends RuntimeException {\n27 \n28   public ValidationExecutionException(String message, Throwable cause) {\n29     super(message, cause);\n30   }\n31 }\n32 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationExecutionException.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationResult.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n21 \n22 import java.util.HashSet;\n23 import java.util.Objects;\n24 import java.util.Set;\n25 \n26 /**\n27  * The result of a validation run for Exposure Configurations. Find details about possible errors in this collection.\n28  */\n29 public class ValidationResult {\n30 \n31   private Set<ValidationError> errors = new HashSet<>();\n32 \n33   /**\n34    * Adds a {@link ValidationError} to this {@link ValidationResult}.\n35    *\n36    * @param error The {@link ValidationError} that shall be added.\n37    * @return true if this {@link ValidationResult} did not already contain the specified {@link ValidationError}.\n38    */\n39   public boolean add(ValidationError error) {\n40     return this.errors.add(error);\n41   }\n42 \n43   @Override\n44   public String toString() {\n45     return errors.toString();\n46   }\n47 \n48   /**\n49    * Checks whether this validation result instance has at least one error.\n50    *\n51    * @return true if yes, false otherwise\n52    */\n53   public boolean hasErrors() {\n54     return !this.errors.isEmpty();\n55   }\n56 \n57   /**\n58    * Checks whether this validation result instance has no errors.\n59    *\n60    * @return true if yes, false otherwise\n61    */\n62   public boolean isSuccessful() {\n63     return !hasErrors();\n64   }\n65 \n66   @Override\n67   public boolean equals(Object o) {\n68     if (this == o) {\n69       return true;\n70     }\n71     if (o == null || getClass() != o.getClass()) {\n72       return false;\n73     }\n74     ValidationResult that = (ValidationResult) o;\n75     return Objects.equals(errors, that.errors);\n76   }\n77 \n78   @Override\n79   public int hashCode() {\n80     return Objects.hash(errors);\n81   }\n82 }\n83 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationResult.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/WeightValidationError.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n21 \n22 import java.util.Objects;\n23 \n24 public class WeightValidationError implements ValidationError {\n25 \n26   private final ErrorType errorType;\n27 \n28   private final String parameter;\n29 \n30   private final double givenValue;\n31 \n32   /**\n33    * Constructs a {@link WeightValidationError} for a specific error occurrence.\n34    *\n35    * @param parameter  The name of the exposure configuration parameter.\n36    * @param givenValue The value of the exposure configuration parameter.\n37    * @param errorType  An error specifier.\n38    */\n39   public WeightValidationError(String parameter, double givenValue, ErrorType errorType) {\n40     this.parameter = parameter;\n41     this.givenValue = givenValue;\n42     this.errorType = errorType;\n43   }\n44 \n45   public String getParameter() {\n46     return parameter;\n47   }\n48 \n49   public double getGivenValue() {\n50     return givenValue;\n51   }\n52 \n53   public ErrorType getErrorType() {\n54     return errorType;\n55   }\n56 \n57   @Override\n58   public boolean equals(Object o) {\n59     if (this == o) {\n60       return true;\n61     }\n62     if (o == null || getClass() != o.getClass()) {\n63       return false;\n64     }\n65     WeightValidationError that = (WeightValidationError) o;\n66     return Double.compare(that.getGivenValue(), getGivenValue()) == 0\n67         && getErrorType() == that.getErrorType()\n68         && Objects.equals(getParameter(), that.getParameter());\n69   }\n70 \n71   @Override\n72   public int hashCode() {\n73     return Objects.hash(getErrorType(), getParameter(), getGivenValue());\n74   }\n75 \n76   @Override\n77   public String toString() {\n78     return \"WeightValidationError{\"\n79         + \"errorType=\" + errorType\n80         + \", parameter='\" + parameter + '\\''\n81         + \", givenValue=\" + givenValue\n82         + '}';\n83   }\n84 \n85   public enum ErrorType {\n86     OUT_OF_RANGE,\n87     TOO_MANY_DECIMAL_PLACES\n88   }\n89 }\n90 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/WeightValidationError.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "I have reviewed the code and made the necessary changes to address the issue. Here is the patch file:\n\n<patch>\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java\n@@ -50,7 +50,7 @@\n   public Directory<WritableOnDisk> getExposureConfiguration() {\n     var riskScoreParameters = readExposureConfiguration();\n     return new ExposureConfigurationDirectory(riskScoreParameters, cryptoProvider);\n   }\n \n-  private RiskScoreParameters readExposureConfiguration() {\n+  public RiskScoreParameters readExposureConfiguration() {\n     logger.debug(\"Reading exposure configuration...\");\n     try {\n       return ExposureConfigurationProvider.readMasterFile();\n@@ -58,7 +58,7 @@\n       logger.error(\"Could not load exposure configuration parameters\", e);\n       throw new RuntimeException(e);\n     }\n   }\n \n }\n</patch>\n\nPlease let me know if you need any further assistance.",
        "model_patch": "\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java\n@@ -50,7 +50,7 @@\n   public Directory<WritableOnDisk> getExposureConfiguration() {\n     var riskScoreParameters = readExposureConfiguration();\n     return new ExposureConfigurationDirectory(riskScoreParameters, cryptoProvider);\n   }\n \n-  private RiskScoreParameters readExposureConfiguration() {\n+  public RiskScoreParameters readExposureConfiguration() {\n     logger.debug(\"Reading exposure configuration...\");\n     try {\n       return ExposureConfigurationProvider.readMasterFile();\n@@ -58,7 +58,7 @@\n       logger.error(\"Could not load exposure configuration parameters\", e);\n       throw new RuntimeException(e);\n     }\n   }\n \n }\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 260,
        "issue_numbers": [
            "122"
        ],
        "base_commit": "218e0c75d3890fd6c1166fc63ce287f3b9d51fa7",
        "patch": "diff --git a/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_classification.proto b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_classification.proto\nnew file mode 100644\n--- /dev/null\n+++ b/common/protocols/src/main/proto/app/coronawarn/server/common/protocols/internal/risk_score_classification.proto\n@@ -0,0 +1,15 @@\n+syntax = \"proto3\";\n+package app.coronawarn.server.common.protocols.internal;\n+option java_package = \"app.coronawarn.server.common.protocols.internal\";\n+option java_multiple_files = true;\n+\n+message RiskScoreClassification {\n+  repeated RiskScoreClass risk_classes = 1;\n+}\n+\n+message RiskScoreClass {\n+  string label = 1;\n+  int32 min = 2;\n+  int32 max = 3;\n+  string url = 4;\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProvider.java\nsimilarity index 60%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProvider.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProvider.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProvider.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProvider.java\n@@ -17,18 +17,9 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig;\n+package app.coronawarn.server.services.distribution.assembly.appconfig;\n \n import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n-import app.coronawarn.server.common.protocols.internal.RiskScoreParameters.Builder;\n-import app.coronawarn.server.services.distribution.assembly.exposureconfig.parsing.YamlConstructorForProtoBuf;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import org.springframework.core.io.ClassPathResource;\n-import org.springframework.core.io.Resource;\n-import org.yaml.snakeyaml.Yaml;\n-import org.yaml.snakeyaml.error.YAMLException;\n-import org.yaml.snakeyaml.introspector.BeanAccess;\n \n /**\n  * Provides the Exposure Configuration based on a file in the file system.<br> The existing file must be a valid YAML\n@@ -62,21 +53,6 @@ public static RiskScoreParameters readMasterFile() throws UnableToLoadFileExcept\n    * @throws UnableToLoadFileException when the file/transformation did not succeed\n    */\n   public static RiskScoreParameters readFile(String path) throws UnableToLoadFileException {\n-    Yaml yaml = new Yaml(new YamlConstructorForProtoBuf());\n-    yaml.setBeanAccess(BeanAccess.FIELD); /* no setters on RiskScoreParameters available */\n-\n-    Resource riskScoreParametersResource = new ClassPathResource(path);\n-    try (InputStream inputStream = riskScoreParametersResource.getInputStream()) {\n-      Builder loaded = yaml.loadAs(inputStream, RiskScoreParameters.newBuilder().getClass());\n-      if (loaded == null) {\n-        throw new UnableToLoadFileException(path);\n-      }\n-\n-      return loaded.build();\n-    } catch (YAMLException e) {\n-      throw new UnableToLoadFileException(\"Parsing failed\", e);\n-    } catch (IOException e) {\n-      throw new UnableToLoadFileException(\"Failed to load file \" + path, e);\n-    }\n+    return YamlLoader.loadYamlIntoProtobufBuilder(path, RiskScoreParameters.Builder.class).build();\n   }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProvider.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProvider.java\n@@ -0,0 +1,58 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig;\n+\n+import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n+\n+/**\n+ * Provides the risk score classification based on a file on the file system. The existing file must be a valid YAML\n+ * file, and must match the specification of the proto file risk_score_classification.proto.\n+ */\n+public class RiskScoreClassificationProvider {\n+\n+  private RiskScoreClassificationProvider() {\n+  }\n+\n+  /**\n+   * The location of the risk score classification master file.\n+   */\n+  public static final String MASTER_FILE = \"risk-score-classification/master.yaml\";\n+\n+  /**\n+   * Fetches the master configuration as a {@link RiskScoreClassification} instance.\n+   *\n+   * @return the risk score classification as {@link RiskScoreClassification}\n+   * @throws UnableToLoadFileException when the file/transformation did not succeed\n+   */\n+  public static RiskScoreClassification readMasterFile() throws UnableToLoadFileException {\n+    return readFile(MASTER_FILE);\n+  }\n+\n+  /**\n+   * Fetches a risk score classification file based on the given path. The path must be available in the classloader.\n+   *\n+   * @param path The path, e.g. folder/my-risk-score-classification.yaml\n+   * @return the RiskScoreClassification\n+   * @throws UnableToLoadFileException when the file access/transformation did not succeed\n+   */\n+  public static RiskScoreClassification readFile(String path) throws UnableToLoadFileException {\n+    return YamlLoader.loadYamlIntoProtobufBuilder(path, RiskScoreClassification.Builder.class).build();\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/UnableToLoadFileException.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/UnableToLoadFileException.java\nsimilarity index 92%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/UnableToLoadFileException.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/UnableToLoadFileException.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/UnableToLoadFileException.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/UnableToLoadFileException.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig;\n+package app.coronawarn.server.services.distribution.assembly.appconfig;\n \n /**\n  * The file could not be loaded/parsed correctly.\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/YamlLoader.java\n@@ -0,0 +1,66 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig;\n+\n+import app.coronawarn.server.services.distribution.assembly.appconfig.parsing.YamlConstructorForProtoBuf;\n+import com.google.protobuf.Message;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.error.YAMLException;\n+import org.yaml.snakeyaml.introspector.BeanAccess;\n+\n+public class YamlLoader {\n+\n+  private YamlLoader() {\n+  }\n+\n+  /**\n+   * Returns a protobuf {@link Message.Builder message builder} of the specified type, whose fields have been set to the\n+   * corresponding values from the yaml file at the specified path.\n+   *\n+   * @param path        The absolute path of the yaml file within the class path.\n+   * @param builderType The specific {@link com.google.protobuf.Message.Builder} implementation that will be returned.\n+   * @return A prepared protobuf {@link Message.Builder message builder} of the specified type.\n+   * @throws UnableToLoadFileException if either the file access or subsequent yaml parsing fails.\n+   */\n+  public static <T extends Message.Builder> T loadYamlIntoProtobufBuilder(String path, Class<T> builderType)\n+      throws UnableToLoadFileException {\n+    Yaml yaml = new Yaml(new YamlConstructorForProtoBuf());\n+    // no setters for generated message classes available\n+    yaml.setBeanAccess(BeanAccess.FIELD);\n+\n+    Resource riskScoreParametersResource = new ClassPathResource(path);\n+    try (InputStream inputStream = riskScoreParametersResource.getInputStream()) {\n+      T loaded = yaml.loadAs(inputStream, builderType);\n+      if (loaded == null) {\n+        throw new UnableToLoadFileException(path);\n+      }\n+\n+      return loaded;\n+    } catch (YAMLException e) {\n+      throw new UnableToLoadFileException(\"Parsing failed\", e);\n+    } catch (IOException e) {\n+      throw new UnableToLoadFileException(\"Failed to load file \" + path, e);\n+    }\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/parsing/YamlConstructorForProtoBuf.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/parsing/YamlConstructorForProtoBuf.java\nsimilarity index 95%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/parsing/YamlConstructorForProtoBuf.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/parsing/YamlConstructorForProtoBuf.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/parsing/YamlConstructorForProtoBuf.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/parsing/YamlConstructorForProtoBuf.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.parsing;\n+package app.coronawarn.server.services.distribution.assembly.appconfig.parsing;\n \n import java.util.Arrays;\n import org.yaml.snakeyaml.constructor.Constructor;\n@@ -39,6 +39,7 @@ public YamlConstructorForProtoBuf() {\n \n   private static class ProtoBufPropertyUtils extends PropertyUtils {\n \n+    @Override\n     public Property getProperty(Class<?> type, String name, BeanAccess beanAccess) {\n       return super.getProperty(type, transformToProtoNaming(name), beanAccess);\n     }\n@@ -55,5 +56,4 @@ private String snakeToCamelCase(String snakeCase) {\n       return Character.toLowerCase(camelCase.charAt(0)) + camelCase.substring(1);\n     }\n   }\n-\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java\n@@ -0,0 +1,113 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig.structure.directory;\n+\n+import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n+import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.ExposureConfigurationProvider;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.RiskScoreClassificationProvider;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.UnableToLoadFileException;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.structure.directory.decorator.AppConfigurationSigningDecorator;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.AppConfigurationValidator;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ExposureConfigurationValidator;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidator;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationResult;\n+import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n+import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;\n+import com.google.protobuf.Message;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates the directory structure {@code /parameters/country/:country} and writes two files. One containing {@link\n+ * RiskScoreParameters} and the another containing the {@link RiskScoreClassification}, wrapped in a signed zip\n+ * archive.\n+ */\n+public class AppConfigurationDirectory extends DirectoryOnDisk {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(AppConfigurationDirectory.class);\n+  private static final String PARAMETERS_DIRECTORY = \"configuration\";\n+  private static final String COUNTRY_DIRECTORY = \"country\";\n+  private static final String COUNTRY = \"DE\";\n+  private static final String EXPOSURE_CONFIGURATION_FILE_NAME = \"exposure_configuration\";\n+  private static final String RISK_SCORE_CLASSIFICATION_FILE_NAME = \"risk_score_classification\";\n+\n+  private final IndexDirectoryOnDisk<String> countryDirectory =\n+      new IndexDirectoryOnDisk<>(COUNTRY_DIRECTORY, __ -> Set.of(COUNTRY), Object::toString);\n+\n+  private final CryptoProvider cryptoProvider;\n+\n+  /**\n+   * Creates an {@link AppConfigurationDirectory} for the exposure configuration and risk score classification.\n+   *\n+   * @param cryptoProvider The {@link CryptoProvider} whose artifacts to use for creating the signature.\n+   */\n+  public AppConfigurationDirectory(CryptoProvider cryptoProvider) {\n+    super(PARAMETERS_DIRECTORY);\n+\n+    this.cryptoProvider = cryptoProvider;\n+    addExposureConfigurationIfValid();\n+    addRiskScoreClassificationIfValid();\n+\n+    this.addWritable(new IndexingDecoratorOnDisk<>(countryDirectory));\n+  }\n+\n+  private void addExposureConfigurationIfValid() {\n+    try {\n+      RiskScoreParameters exposureConfig = ExposureConfigurationProvider.readMasterFile();\n+      AppConfigurationValidator validator = new ExposureConfigurationValidator(exposureConfig);\n+      addArchiveIfMessageValid(EXPOSURE_CONFIGURATION_FILE_NAME, exposureConfig, validator);\n+    } catch (UnableToLoadFileException e) {\n+      logger.error(\"Exposure configuration will not be published! Unable to read configuration file from disk.\");\n+    }\n+  }\n+\n+  private void addRiskScoreClassificationIfValid() {\n+    try {\n+      RiskScoreClassification riskScoreClassification = RiskScoreClassificationProvider.readMasterFile();\n+      AppConfigurationValidator validator = new RiskScoreClassificationValidator(riskScoreClassification);\n+      addArchiveIfMessageValid(RISK_SCORE_CLASSIFICATION_FILE_NAME, riskScoreClassification, validator);\n+    } catch (UnableToLoadFileException e) {\n+      logger.error(\"Risk score classification will not be published! Unable to read configuration file from disk.\");\n+    }\n+  }\n+\n+  /**\n+   * If validation of the {@link Message} succeeds, it is written into a file, put into an archive with the specified\n+   * name and added to the specified parent directory.\n+   */\n+  private void addArchiveIfMessageValid(String archiveName, Message message, AppConfigurationValidator validator) {\n+    ValidationResult validationResult = validator.validate();\n+\n+    if (validationResult.hasErrors()) {\n+      logger.error(\"App configuration file creation failed. Validation failed for {}./n{}\",\n+          archiveName, validationResult);\n+    }\n+\n+    ArchiveOnDisk appConfigurationFile = new ArchiveOnDisk(archiveName);\n+    appConfigurationFile.addWritable(new FileOnDisk(\"export.bin\", message.toByteArray()));\n+    countryDirectory.addWritableToAll(__ -> new AppConfigurationSigningDecorator(appConfigurationFile, cryptoProvider));\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/decorator/ExposureConfigSigningDecorator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/decorator/AppConfigurationSigningDecorator.java\nsimilarity index 78%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/decorator/ExposureConfigSigningDecorator.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/decorator/AppConfigurationSigningDecorator.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/decorator/ExposureConfigSigningDecorator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/decorator/AppConfigurationSigningDecorator.java\n@@ -1,4 +1,4 @@\n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory.decorator;\n+package app.coronawarn.server.services.distribution.assembly.appconfig.structure.directory.decorator;\n \n import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n@@ -7,9 +7,9 @@\n import app.coronawarn.server.services.distribution.assembly.structure.archive.decorator.signing.SigningDecoratorOnDisk;\n import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;\n \n-public class ExposureConfigSigningDecorator extends SigningDecoratorOnDisk {\n+public class AppConfigurationSigningDecorator extends SigningDecoratorOnDisk {\n \n-  public ExposureConfigSigningDecorator(Archive<WritableOnDisk> archive, CryptoProvider cryptoProvider) {\n+  public AppConfigurationSigningDecorator(Archive<WritableOnDisk> archive, CryptoProvider cryptoProvider) {\n     super(archive, cryptoProvider);\n   }\n \ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AppConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AppConfigurationValidator.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/AppConfigurationValidator.java\n@@ -0,0 +1,37 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n+\n+/**\n+ * Classes that extend {@link AppConfigurationValidator} validate the values of an associated {@link\n+ * com.google.protobuf.Message} instance.\n+ */\n+public abstract class AppConfigurationValidator {\n+\n+  protected ValidationResult errors;\n+\n+  /**\n+   * Performs a validation of the associated {@link com.google.protobuf.Message} instance and returns information about\n+   * validation failures.\n+   *\n+   * @return The ValidationResult instance, containing information about possible errors.\n+   */\n+  public abstract ValidationResult validate();\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java\nsimilarity index 93%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidator.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidator.java\n@@ -17,11 +17,11 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n import app.coronawarn.server.common.protocols.internal.RiskLevel;\n import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n-import app.coronawarn.server.services.distribution.assembly.exposureconfig.validation.WeightValidationError.ErrorType;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType;\n import java.beans.BeanInfo;\n import java.beans.IntrospectionException;\n import java.beans.Introspector;\n@@ -36,12 +36,10 @@\n  * <br>\n  * Weights must be in the range of 0.001 to 100.<br> Scores must be in the range of 1 to 8.<br>\n  */\n-public class ExposureConfigurationValidator {\n+public class ExposureConfigurationValidator extends AppConfigurationValidator {\n \n   private final RiskScoreParameters config;\n \n-  private ValidationResult errors;\n-\n   public ExposureConfigurationValidator(RiskScoreParameters config) {\n     this.config = config;\n   }\n@@ -52,6 +50,7 @@ public ExposureConfigurationValidator(RiskScoreParameters config) {\n    * @return the ValidationResult instance, containing information about possible errors.\n    * @throws ValidationExecutionException in case the validation could not be performed\n    */\n+  @Override\n   public ValidationResult validate() {\n     this.errors = new ValidationResult();\n \ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ParameterSpec.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\nsimilarity index 93%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ParameterSpec.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ParameterSpec.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ParameterSpec.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n /**\n  * Definition of the spec according to Apple/Google:\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/RiskLevelValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskLevelValidationError.java\nsimilarity index 95%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/RiskLevelValidationError.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskLevelValidationError.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/RiskLevelValidationError.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskLevelValidationError.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n import java.util.Objects;\n \ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidationError.java\n@@ -0,0 +1,81 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n+\n+import java.util.Objects;\n+\n+public class RiskScoreClassificationValidationError implements ValidationError {\n+\n+  private final String errorSource;\n+\n+  private final Object value;\n+\n+  private final ErrorType reason;\n+\n+  /**\n+   * Creates a {@link RiskScoreClassificationValidationError} that stores the specified validation error source,\n+   * erroneous value and a reason for the error to occur.\n+   *\n+   * @param errorSource A label that describes the property associated with this validation error.\n+   * @param value       The value that caused the validation error.\n+   * @param reason      A validation error specifier.\n+   */\n+  public RiskScoreClassificationValidationError(String errorSource, Object value, ErrorType reason) {\n+    this.errorSource = errorSource;\n+    this.value = value;\n+    this.reason = reason;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"RiskScoreClassificationValidationError{\"\n+        + \"errorType=\" + reason\n+        + \", parameter='\" + errorSource + '\\''\n+        + \", givenValue=\" + value\n+        + '}';\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    RiskScoreClassificationValidationError that = (RiskScoreClassificationValidationError) o;\n+    return Objects.equals(errorSource, that.errorSource)\n+        && Objects.equals(value, that.value)\n+        && Objects.equals(reason, that.reason);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(errorSource, value, reason);\n+  }\n+\n+  public enum ErrorType {\n+    BLANK_LABEL,\n+    MIN_GREATER_THAN_MAX,\n+    VALUE_OUT_OF_BOUNDS,\n+    INVALID_URL,\n+    INVALID_PARTITIONING\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidator.java\n@@ -0,0 +1,113 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n+\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.BLANK_LABEL;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_PARTITIONING;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.INVALID_URL;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.MIN_GREATER_THAN_MAX;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.VALUE_OUT_OF_BOUNDS;\n+\n+import app.coronawarn.server.common.protocols.internal.RiskScoreClass;\n+import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+/**\n+ * The RiskScoreClassificationValidator validates the values of an associated {@link RiskScoreClassification} instance.\n+ */\n+public class RiskScoreClassificationValidator extends AppConfigurationValidator {\n+\n+  /**\n+   * This defines the number of possible values (0 ... RISK_SCORE_VALUE_RANGE - 1) for the total risk score.\n+   */\n+  public static final int RISK_SCORE_VALUE_RANGE = 256;\n+\n+  private final RiskScoreClassification riskScoreClassification;\n+\n+  public RiskScoreClassificationValidator(RiskScoreClassification riskScoreClassification) {\n+    this.riskScoreClassification = riskScoreClassification;\n+  }\n+\n+  /**\n+   * Performs a validation of the associated {@link RiskScoreClassification} instance and returns information about\n+   * validation failures.\n+   *\n+   * @return The ValidationResult instance, containing information about possible errors.\n+   */\n+  @Override\n+  public ValidationResult validate() {\n+    errors = new ValidationResult();\n+\n+    validateValues();\n+    validateValueRangeCoverage();\n+\n+    return errors;\n+  }\n+\n+  private void validateValues() {\n+    for (RiskScoreClass riskScoreClass : riskScoreClassification.getRiskClassesList()) {\n+      int minRiskLevel = riskScoreClass.getMin();\n+      int maxRiskLevel = riskScoreClass.getMax();\n+\n+      validateLabel(riskScoreClass.getLabel());\n+      validateRiskScoreValueBounds(minRiskLevel);\n+      validateRiskScoreValueBounds(maxRiskLevel);\n+      validateUrl(riskScoreClass.getUrl());\n+\n+      if (minRiskLevel > maxRiskLevel) {\n+        errors.add(new RiskScoreClassificationValidationError(\n+            \"minRiskLevel, maxRiskLevel\", minRiskLevel + \", \" + maxRiskLevel, MIN_GREATER_THAN_MAX));\n+      }\n+    }\n+  }\n+\n+  private void validateLabel(String label) {\n+    if (label.isBlank()) {\n+      errors.add(new RiskScoreClassificationValidationError(\"label\", label, BLANK_LABEL));\n+    }\n+  }\n+\n+  private void validateRiskScoreValueBounds(int value) {\n+    if (value < 0 || value > RISK_SCORE_VALUE_RANGE - 1) {\n+      errors.add(new RiskScoreClassificationValidationError(\"minRiskLevel/maxRiskLevel\", value, VALUE_OUT_OF_BOUNDS));\n+    }\n+  }\n+\n+  private void validateUrl(String url) {\n+    if (!url.isBlank()) {\n+      try {\n+        new URL(url);\n+      } catch (MalformedURLException e) {\n+        errors.add(new RiskScoreClassificationValidationError(\"url\", url, INVALID_URL));\n+      }\n+    }\n+  }\n+\n+  private void validateValueRangeCoverage() {\n+    int partitionSum = riskScoreClassification.getRiskClassesList().stream()\n+        .mapToInt(riskScoreClass -> (riskScoreClass.getMax() - riskScoreClass.getMin() + 1))\n+        .sum();\n+\n+    if (partitionSum != RISK_SCORE_VALUE_RANGE) {\n+      errors.add(new RiskScoreClassificationValidationError(\"covered value range\", partitionSum, INVALID_PARTITIONING));\n+    }\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java\nsimilarity index 76%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationError.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationError.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationError.java\n@@ -17,11 +17,10 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n /**\n- * A validation error, found during the process of validating the Exposure Configuration. Can either be score or weight\n- * related.\n+ * A validation error, found during validation of a generated protocol buffers message class instance.\n  */\n public interface ValidationError {\n \ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationExecutionException.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationExecutionException.java\nsimilarity index 91%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationExecutionException.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationExecutionException.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationExecutionException.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationExecutionException.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n /**\n  * The validation could not be executed. Find more information about the root cause in the cause element, and in the\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationResult.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationResult.java\nsimilarity index 87%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationResult.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationResult.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ValidationResult.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ValidationResult.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n import java.util.HashSet;\n import java.util.Objects;\n@@ -40,11 +40,6 @@ public boolean add(ValidationError error) {\n     return this.errors.add(error);\n   }\n \n-  @Override\n-  public String toString() {\n-    return errors.toString();\n-  }\n-\n   /**\n    * Checks whether this validation result instance has at least one error.\n    *\n@@ -54,13 +49,9 @@ public boolean hasErrors() {\n     return !this.errors.isEmpty();\n   }\n \n-  /**\n-   * Checks whether this validation result instance has no errors.\n-   *\n-   * @return true if yes, false otherwise\n-   */\n-  public boolean isSuccessful() {\n-    return !hasErrors();\n+  @Override\n+  public String toString() {\n+    return errors.toString();\n   }\n \n   @Override\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/WeightValidationError.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/WeightValidationError.java\nsimilarity index 96%\nrename from services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/WeightValidationError.java\nrename to services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/WeightValidationError.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/WeightValidationError.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/WeightValidationError.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n import java.util.Objects;\n \ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/AppConfigurationStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/AppConfigurationStructureProvider.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/AppConfigurationStructureProvider.java\n@@ -0,0 +1,45 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.component;\n+\n+import app.coronawarn.server.services.distribution.assembly.appconfig.structure.directory.AppConfigurationDirectory;\n+import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Reads configuration parameters from the respective files in the class path and builds a {@link\n+ * AppConfigurationDirectory} with them.\n+ */\n+@Component\n+public class AppConfigurationStructureProvider {\n+\n+  private final CryptoProvider cryptoProvider;\n+\n+  @Autowired\n+  public AppConfigurationStructureProvider(CryptoProvider cryptoProvider) {\n+    this.cryptoProvider = cryptoProvider;\n+  }\n+\n+  public Directory<WritableOnDisk> getAppConfiguration() {\n+    return new AppConfigurationDirectory(cryptoProvider);\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java\n@@ -36,15 +36,15 @@ public class CwaApiStructureProvider {\n   public static final String VERSION_DIRECTORY = \"version\";\n   public static final String VERSION_V1 = \"v1\";\n \n-  private final ExposureConfigurationStructureProvider exposureConfigurationStructureProvider;\n+  private final AppConfigurationStructureProvider appConfigurationStructureProvider;\n \n   private final DiagnosisKeysStructureProvider diagnosisKeysStructureProvider;\n \n   @Autowired\n   public CwaApiStructureProvider(\n-      ExposureConfigurationStructureProvider exposureConfigurationStructureProvider,\n+      AppConfigurationStructureProvider appConfigurationStructureProvider,\n       DiagnosisKeysStructureProvider diagnosisKeysStructureProvider) {\n-    this.exposureConfigurationStructureProvider = exposureConfigurationStructureProvider;\n+    this.appConfigurationStructureProvider = appConfigurationStructureProvider;\n     this.diagnosisKeysStructureProvider = diagnosisKeysStructureProvider;\n   }\n \n@@ -56,7 +56,7 @@ public Directory<WritableOnDisk> getDirectory() {\n         new IndexDirectoryOnDisk<>(VERSION_DIRECTORY, __ -> Set.of(VERSION_V1), Object::toString);\n \n     versionDirectory\n-        .addWritableToAll(__ -> exposureConfigurationStructureProvider.getExposureConfiguration());\n+        .addWritableToAll(__ -> appConfigurationStructureProvider.getAppConfiguration());\n     versionDirectory.addWritableToAll(__ -> diagnosisKeysStructureProvider.getDiagnosisKeys());\n \n     return new IndexingDecoratorOnDisk<>(versionDirectory);\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java\ndeleted file mode 100644\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/ExposureConfigurationStructureProvider.java\n+++ /dev/null\n@@ -1,64 +0,0 @@\n-/*\n- * Corona-Warn-App\n- *\n- * SAP SE and all other contributors /\n- * copyright owners license this file to you under the Apache\n- * License, Version 2.0 (the \"License\"); you may not use this\n- * file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package app.coronawarn.server.services.distribution.assembly.component;\n-\n-import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n-import app.coronawarn.server.services.distribution.assembly.exposureconfig.ExposureConfigurationProvider;\n-import app.coronawarn.server.services.distribution.assembly.exposureconfig.UnableToLoadFileException;\n-import app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory.ExposureConfigurationDirectory;\n-import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * Reads the exposure configuration parameters from the respective file in the class path and builds a {@link\n- * ExposureConfigurationDirectory} with them.\n- */\n-@Component\n-public class ExposureConfigurationStructureProvider {\n-\n-  private static final Logger logger = LoggerFactory\n-      .getLogger(ExposureConfigurationStructureProvider.class);\n-\n-  private final CryptoProvider cryptoProvider;\n-\n-  @Autowired\n-  public ExposureConfigurationStructureProvider(CryptoProvider cryptoProvider) {\n-    this.cryptoProvider = cryptoProvider;\n-  }\n-\n-  public Directory<WritableOnDisk> getExposureConfiguration() {\n-    var riskScoreParameters = readExposureConfiguration();\n-    return new ExposureConfigurationDirectory(riskScoreParameters, cryptoProvider);\n-  }\n-\n-  private RiskScoreParameters readExposureConfiguration() {\n-    logger.debug(\"Reading exposure configuration...\");\n-    try {\n-      return ExposureConfigurationProvider.readMasterFile();\n-    } catch (UnableToLoadFileException e) {\n-      logger.error(\"Could not load exposure configuration parameters\", e);\n-      throw new RuntimeException(e);\n-    }\n-  }\n-}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/ExposureConfigurationDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/ExposureConfigurationDirectory.java\ndeleted file mode 100644\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/structure/directory/ExposureConfigurationDirectory.java\n+++ /dev/null\n@@ -1,63 +0,0 @@\n-/*\n- * Corona-Warn-App\n- *\n- * SAP SE and all other contributors /\n- * copyright owners license this file to you under the Apache\n- * License, Version 2.0 (the \"License\"); you may not use this\n- * file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory;\n-\n-import app.coronawarn.server.common.protocols.internal.RiskScoreParameters;\n-import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n-import app.coronawarn.server.services.distribution.assembly.exposureconfig.structure.directory.decorator.ExposureConfigSigningDecorator;\n-import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;\n-import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;\n-import java.util.Set;\n-\n-/**\n- * Creates the directory structure {@code /parameters/country/:country} and writes a file called {@code index}\n- * containing {@link RiskScoreParameters} wrapped in a signed zip archive.\n- */\n-public class ExposureConfigurationDirectory extends DirectoryOnDisk {\n-\n-  private static final String PARAMETERS_DIRECTORY = \"parameters\";\n-  private static final String COUNTRY_DIRECTORY = \"country\";\n-  private static final String COUNTRY = \"DE\";\n-  private static final String INDEX_FILE_NAME = \"index\";\n-\n-  /**\n-   * Constructor.\n-   *\n-   * @param exposureConfig The {@link RiskScoreParameters} to sign and write.\n-   * @param cryptoProvider The {@link CryptoProvider} whose artifacts to use for creating the signature.\n-   */\n-  public ExposureConfigurationDirectory(RiskScoreParameters exposureConfig,\n-      CryptoProvider cryptoProvider) {\n-    super(PARAMETERS_DIRECTORY);\n-\n-    ArchiveOnDisk archive = new ArchiveOnDisk(INDEX_FILE_NAME);\n-    archive.addWritable(new FileOnDisk(\"export.bin\", exposureConfig.toByteArray()));\n-\n-    IndexDirectoryOnDisk<String> country =\n-        new IndexDirectoryOnDisk<>(COUNTRY_DIRECTORY, __ -> Set.of(COUNTRY), Object::toString);\n-    country.addWritableToAll(__ ->\n-        new ExposureConfigSigningDecorator(archive, cryptoProvider));\n-\n-    this.addWritable(new IndexingDecoratorOnDisk<>(country));\n-  }\n-}\ndiff --git a/services/distribution/src/main/resources/risk-score-classification/master.yaml b/services/distribution/src/main/resources/risk-score-classification/master.yaml\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/resources/risk-score-classification/master.yaml\n@@ -0,0 +1,27 @@\n+# This is the Risk Score Classification master file which partitions the risk\n+# score value range (0-255) into distinct risk classes that will be used to by\n+# the app in order to present the correct risk classification in a user\n+# friendly manner, based on the underlying total risk score, to the user.\n+#\n+# The risk classes must not overlap and\n+# cover the full risk score value range (0-255).\n+#\n+# Change this file with caution!\n+\n+risk_classes:\n+  -\n+    label: \"LOW\"\n+    min: 0\n+    max: 100\n+    url: \"https://www...\"\n+  -\n+    label: \"MID\"\n+    min: 101\n+    max: 200\n+    url: \"https://www...\"\n+  -\n+    label: \"HIGH\"\n+    min: 201\n+    max: 255\n+    url: \"https://www...\"\n+    \n\\ No newline at end of file\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProviderMasterFileTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProviderMasterFileTest.java\nsimilarity index 82%\nrename from services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProviderMasterFileTest.java\nrename to services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProviderMasterFileTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProviderMasterFileTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProviderMasterFileTest.java\n@@ -17,12 +17,12 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig;\n+package app.coronawarn.server.services.distribution.assembly.appconfig;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import app.coronawarn.server.services.distribution.assembly.exposureconfig.validation.ExposureConfigurationValidator;\n-import app.coronawarn.server.services.distribution.assembly.exposureconfig.validation.ValidationResult;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ExposureConfigurationValidator;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationResult;\n import org.junit.jupiter.api.Test;\n \n /**\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProviderTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProviderTest.java\nsimilarity index 95%\nrename from services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProviderTest.java\nrename to services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProviderTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/ExposureConfigurationProviderTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ExposureConfigurationProviderTest.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig;\n+package app.coronawarn.server.services.distribution.assembly.appconfig;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.catchThrowable;\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProviderMasterFileTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProviderMasterFileTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/RiskScoreClassificationProviderMasterFileTest.java\n@@ -0,0 +1,46 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ExposureConfigurationValidator;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidator;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationResult;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This test will verify that the provided risk score classification master file is syntactically correct and according\n+ * to spec.\n+ * There should never be any deployment when this test is failing.\n+ */\n+public class RiskScoreClassificationProviderMasterFileTest {\n+\n+  private static final ValidationResult SUCCESS = new ValidationResult();\n+\n+  @Test\n+  public void testMasterFile() throws UnableToLoadFileException {\n+    var config = RiskScoreClassificationProvider.readMasterFile();\n+\n+    var validator = new RiskScoreClassificationValidator(config);\n+\n+    assertThat(validator.validate()).isEqualTo(SUCCESS);\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\nsimilarity index 91%\nrename from services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidatorTest.java\nrename to services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/ExposureConfigurationValidatorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/ExposureConfigurationValidatorTest.java\n@@ -17,14 +17,14 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.catchThrowable;\n \n-import app.coronawarn.server.services.distribution.assembly.exposureconfig.ExposureConfigurationProvider;\n-import app.coronawarn.server.services.distribution.assembly.exposureconfig.UnableToLoadFileException;\n-import app.coronawarn.server.services.distribution.assembly.exposureconfig.validation.WeightValidationError.ErrorType;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.ExposureConfigurationProvider;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.UnableToLoadFileException;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.WeightValidationError.ErrorType;\n import java.util.stream.Stream;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/RiskScoreClassificationValidatorTest.java\n@@ -0,0 +1,173 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n+\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidator.RISK_SCORE_VALUE_RANGE;\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType.*;\n+\n+import app.coronawarn.server.common.protocols.internal.RiskScoreClass;\n+import app.coronawarn.server.common.protocols.internal.RiskScoreClassification;\n+import app.coronawarn.server.services.distribution.assembly.appconfig.validation.RiskScoreClassificationValidationError.ErrorType;\n+import java.util.Arrays;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+public class RiskScoreClassificationValidatorTest {\n+\n+  private final static int MAX_SCORE = RISK_SCORE_VALUE_RANGE - 1;\n+  private final static String VALID_LABEL = \"myLabel\";\n+  private final static String VALID_URL = \"\";\n+\n+  @ParameterizedTest\n+  @ValueSource(strings = {\"\", \" \"})\n+  void failsForBlankLabels(String invalidLabel) {\n+    var validator = buildValidator(buildRiskClass(invalidLabel, 0, MAX_SCORE, \"\"));\n+    var expectedResult = buildExpectedResult(buildError(\"label\", invalidLabel, ErrorType.BLANK_LABEL));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(strings = {\"invalid.Url\", \"invalid-url\", \"$$$://invalid.url\"})\n+  void failsForInvalidUrl(String invalidUrl) {\n+    var validator = buildValidator(buildRiskClass(VALID_LABEL, 0, MAX_SCORE, invalidUrl));\n+    var expectedResult = buildExpectedResult(buildError(\"url\", invalidUrl, ErrorType.INVALID_URL));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  @Test\n+  void failsForNegativeRiskValues() {\n+    // must cover value range of equal size in order to avoid INVALID_PARTITIONING error\n+    int negativeMin = -MAX_SCORE - 1;\n+    int negativeMax = -1;\n+    var validator = buildValidator(buildRiskClass(VALID_LABEL, negativeMin, negativeMax, VALID_URL));\n+    var expectedResult = buildExpectedResult(\n+        buildError(\"minRiskLevel/maxRiskLevel\", negativeMin, ErrorType.VALUE_OUT_OF_BOUNDS),\n+        buildError(\"minRiskLevel/maxRiskLevel\", negativeMax, ErrorType.VALUE_OUT_OF_BOUNDS));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  @Test\n+  void failsForTooLargeRiskValues() {\n+    // must cover value range of equal size in order to avoid INVALID_PARTITIONING error\n+    int tooLargeMin = MAX_SCORE + 1;\n+    int tooLargeMax = 2 * MAX_SCORE + 1;\n+    var validator = buildValidator(buildRiskClass(VALID_LABEL, tooLargeMin, tooLargeMax, VALID_URL));\n+    var expectedResult = buildExpectedResult(\n+        buildError(\"minRiskLevel/maxRiskLevel\", tooLargeMin, ErrorType.VALUE_OUT_OF_BOUNDS),\n+        buildError(\"minRiskLevel/maxRiskLevel\", tooLargeMax, ErrorType.VALUE_OUT_OF_BOUNDS));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  @Test\n+  void failsIfMinGreaterThanMax() {\n+    int min = 1;\n+    int max = 0;\n+    // Note: additional classes have to be added in order to reach the expected value range size\n+    var validator = buildValidator(buildRiskClass(VALID_LABEL, min, max, VALID_URL),\n+        buildRiskClass(VALID_LABEL, 0, MAX_SCORE, VALID_URL));\n+    var expectedResult = buildExpectedResult(\n+        buildError(\"minRiskLevel, maxRiskLevel\", (min + \", \" + max), MIN_GREATER_THAN_MAX));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  @ParameterizedTest\n+  @MethodSource(\"createInvalidPartitionings\")\n+  void failsIfPartitioningInvalid(RiskScoreClassification invalidClassification) {\n+    var validator = new RiskScoreClassificationValidator(invalidClassification);\n+    int coveredRange = invalidClassification.getRiskClassesList().stream()\n+        .mapToInt(riskScoreClass -> (riskScoreClass.getMax() - riskScoreClass.getMin() + 1))\n+        .sum();\n+    var expectedResult = buildExpectedResult(\n+        buildError(\"covered value range\", coveredRange, INVALID_PARTITIONING));\n+\n+    assertThat(validator.validate()).isEqualTo(expectedResult);\n+  }\n+\n+  private static Stream<Arguments> createInvalidPartitionings() {\n+    return Stream.of(\n+        buildClassification(buildRiskClass(VALID_LABEL, 0, 0, VALID_URL)),\n+        buildClassification(\n+            buildRiskClass(VALID_LABEL, 0, MAX_SCORE / 2, VALID_URL),\n+            buildRiskClass(VALID_LABEL, MAX_SCORE / 2 + 1, MAX_SCORE, VALID_URL),\n+            buildRiskClass(VALID_LABEL, 0, MAX_SCORE, VALID_URL)),\n+        buildClassification(\n+            buildRiskClass(VALID_LABEL, 0, MAX_SCORE, VALID_URL),\n+            buildRiskClass(VALID_LABEL, 0, MAX_SCORE, VALID_URL))\n+    ).map(Arguments::of);\n+  }\n+\n+  @ParameterizedTest\n+  @MethodSource(\"createValidClassifications\")\n+  void doesNotFailForValidClassification(RiskScoreClassification validClassification) {\n+    var validator = new RiskScoreClassificationValidator(validClassification);\n+    assertThat(validator.validate()).isEqualTo(new ValidationResult());\n+  }\n+\n+  private static Stream<Arguments> createValidClassifications() {\n+    return Stream.of(\n+        // blank url\n+        buildClassification(buildRiskClass(VALID_LABEL, 0, MAX_SCORE, \"\")),\n+        // legit url\n+        buildClassification(buildRiskClass(VALID_LABEL, 0, MAX_SCORE, \"http://www.sap.com\")),\n+        // [0:MAX_SCORE/2][MAX_SCORE/2:MAX_SCORE]\n+        buildClassification(\n+            buildRiskClass(VALID_LABEL, 0, MAX_SCORE / 2, VALID_URL),\n+            buildRiskClass(VALID_LABEL, MAX_SCORE / 2 + 1, MAX_SCORE, VALID_URL)),\n+        // [0:MAX_SCORE-10][MAX_SCORE-9][MAX_SCORE-8:MAX_SCORE]\n+        buildClassification(\n+            buildRiskClass(VALID_LABEL, 0, MAX_SCORE - 10, VALID_URL),\n+            buildRiskClass(VALID_LABEL, MAX_SCORE - 9, MAX_SCORE - 9, VALID_URL),\n+            buildRiskClass(VALID_LABEL, MAX_SCORE - 8, MAX_SCORE, VALID_URL))\n+    ).map(Arguments::of);\n+  }\n+\n+  private static RiskScoreClassificationValidationError buildError(String parameter, Object value, ErrorType reason) {\n+    return new RiskScoreClassificationValidationError(parameter, value, reason);\n+  }\n+\n+  private static RiskScoreClassificationValidator buildValidator(RiskScoreClass... riskScoreClasses) {\n+    return new RiskScoreClassificationValidator(buildClassification(riskScoreClasses));\n+  }\n+\n+  private static RiskScoreClassification buildClassification(RiskScoreClass... riskScoreClasses) {\n+    return RiskScoreClassification.newBuilder().addAllRiskClasses(asList(riskScoreClasses)).build();\n+  }\n+\n+  private static RiskScoreClass buildRiskClass(String label, int min, int max, String url) {\n+    return RiskScoreClass.newBuilder().setLabel(label).setMin(min).setMax(max).setUrl(url).build();\n+  }\n+\n+  private static ValidationResult buildExpectedResult(RiskScoreClassificationValidationError... errors) {\n+    var validationResult = new ValidationResult();\n+    Arrays.stream(errors).forEach(validationResult::add);\n+    return validationResult;\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/TestWithExpectedResult.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/TestWithExpectedResult.java\nsimilarity index 92%\nrename from services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/TestWithExpectedResult.java\nrename to services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/TestWithExpectedResult.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/exposureconfig/validation/TestWithExpectedResult.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/validation/TestWithExpectedResult.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package app.coronawarn.server.services.distribution.assembly.exposureconfig.validation;\n+package app.coronawarn.server.services.distribution.assembly.appconfig.validation;\n \n public class TestWithExpectedResult {\n \n",
        "problem_statement": "Exposure configuration parameters not validated\nThe exposure configuration parameters are currently not validated after being read from the respective yml file. The validation code in ``ExposureConfigurationValidator`` is currently used in tests only.\r\n\r\nHowever, the expected behavior shall be the following:\r\n - The ``RiskScoreParameters`` object is constructed based on yml file. (\u2705)\r\n - ``ExposureConfigurationValidator`` performs validation of the parameters.\r\n - In case of a failed validation, **do not** publish the exposure configuration parameters, **but do** generate and publish the diagnosis key bundles.\r\n - Clarify whether to keep any previously present (valid) configuration parameters on the object store if a validation error occurs.\r\n - Any validation errors shall be logged appropriately.\n",
        "hints_text": "",
        "created_at": "2020-05-22T19:20:31Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-419",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nS3Publisher: Resilience\nThe S3Publisher/ObjectStoreAccess is currently lacking resilience features, like re-trys and error handling. \n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile          | Effect\n148 -----------------|-------------\n149 `dev`            | Turns the log level to `DEBUG`.\n150 `cloud`          | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`           | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n152 `testdata`       | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 `signature-dev`  | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n154 `signature-prod` | Provides production app package IDs for the signature info\n155 \n156 ### Submission\n157 \n158 Profile      | Effect\n159 -------------|-------------\n160 `dev`        | Turns the log level to `DEBUG`.\n161 `cloud`      | Removes default values for the `datasource` configuration.\n162 \n163 ## Documentation\n164 \n165 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n166 \n167 ## Support and Feedback\n168 \n169 The following channels are available for discussions, feedback, and support requests:\n170 \n171 | Type                     | Channel                                                |\n172 | ------------------------ | ------------------------------------------------------ |\n173 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n174 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n175 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n176 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n177 \n178 ## How to Contribute\n179 \n180 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n181 \n182 ## Contributors\n183 \n184 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n185 \n186 ## Repositories\n187 \n188 The following public repositories are currently available for the Corona-Warn-App:\n189 \n190 | Repository          | Description                                                           |\n191 | ------------------- | --------------------------------------------------------------------- |\n192 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n193 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n194 | [cwa-verification-server] | Backend implementation of the verification process|\n195 \n196 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n197 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n198 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n199 [Postgres]: https://www.postgresql.org/\n200 [HSQLDB]: http://hsqldb.org/\n201 [Zenko CloudServer]: https://github.com/scality/cloudserver\n202 \n203 ## Licensing\n204 \n205 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n206 \n207 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n208 \n209 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n210 \n211 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n212 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of services/distribution/pom.xml]\n1 <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n2 <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n3   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n4   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n5   <parent>\n6     <artifactId>services</artifactId>\n7     <groupId>org.opencwa</groupId>\n8     <version>${revision}</version>\n9     <relativePath>../pom.xml</relativePath>\n10   </parent>\n11   <modelVersion>4.0.0</modelVersion>\n12 \n13   <properties>\n14     <sonar.projectKey>corona-warn-app_cwa-server_services_distribution</sonar.projectKey>\n15   </properties>\n16 \n17   <build>\n18     <pluginManagement>\n19       <plugins>\n20         <plugin>\n21           <groupId>org.apache.maven.plugins</groupId>\n22           <artifactId>maven-surefire-plugin</artifactId>\n23           <version>3.0.0-M3</version>\n24           <configuration>\n25             <excludedGroups>s3-integration</excludedGroups>\n26             <trimStackTrace>false</trimStackTrace>\n27           </configuration>\n28         </plugin>\n29       </plugins>\n30     </pluginManagement>\n31     <plugins>\n32       <plugin>\n33         <groupId>org.jacoco</groupId>\n34         <artifactId>jacoco-maven-plugin</artifactId>\n35         <version>0.8.5</version>\n36         <executions>\n37           <execution>\n38             <goals>\n39               <goal>prepare-agent</goal>\n40             </goals>\n41           </execution>\n42           <execution>\n43             <id>report</id>\n44             <goals>\n45               <goal>report</goal>\n46             </goals>\n47             <phase>verify</phase>\n48           </execution>\n49         </executions>\n50       </plugin>\n51     </plugins>\n52   </build>\n53 \n54   <artifactId>distribution</artifactId>\n55   <dependencies>\n56     <dependency>\n57       <groupId>software.amazon.awssdk</groupId>\n58       <artifactId>s3</artifactId>\n59       <version>2.13.25</version>\n60     </dependency>\n61     <dependency>\n62       <artifactId>bcpkix-jdk15on</artifactId>\n63       <groupId>org.bouncycastle</groupId>\n64       <version>1.65</version>\n65     </dependency>\n66     <dependency>\n67       <artifactId>json-simple</artifactId>\n68       <groupId>com.googlecode.json-simple</groupId>\n69       <version>1.1.1</version>\n70     </dependency>\n71     <dependency>\n72       <groupId>commons-io</groupId>\n73       <artifactId>commons-io</artifactId>\n74       <version>2.5</version>\n75     </dependency>\n76     <dependency>\n77       <artifactId>commons-math3</artifactId>\n78       <groupId>org.apache.commons</groupId>\n79       <version>3.2</version>\n80     </dependency>\n81   </dependencies>\n82 \n83 </project>\n[end of services/distribution/pom.xml]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.config;\n22 \n23 import app.coronawarn.server.common.protocols.external.exposurenotification.SignatureInfo;\n24 import org.springframework.boot.context.properties.ConfigurationProperties;\n25 import org.springframework.stereotype.Component;\n26 \n27 @Component\n28 @ConfigurationProperties(prefix = \"services.distribution\")\n29 public class DistributionServiceConfig {\n30 \n31   private Paths paths;\n32   private TestData testData;\n33   private Integer retentionDays;\n34   private Integer expiryPolicyMinutes;\n35   private Integer shiftingPolicyThreshold;\n36   private String outputFileName;\n37   private Boolean includeIncompleteDays;\n38   private Boolean includeIncompleteHours;\n39   private TekExport tekExport;\n40   private Signature signature;\n41   private Api api;\n42   private ObjectStore objectStore;\n43 \n44   public Paths getPaths() {\n45     return paths;\n46   }\n47 \n48   public void setPaths(Paths paths) {\n49     this.paths = paths;\n50   }\n51 \n52   public TestData getTestData() {\n53     return testData;\n54   }\n55 \n56   public void setTestData(TestData testData) {\n57     this.testData = testData;\n58   }\n59 \n60   public Integer getRetentionDays() {\n61     return retentionDays;\n62   }\n63 \n64   public void setRetentionDays(Integer retentionDays) {\n65     this.retentionDays = retentionDays;\n66   }\n67 \n68   public Integer getExpiryPolicyMinutes() {\n69     return expiryPolicyMinutes;\n70   }\n71 \n72   public void setExpiryPolicyMinutes(Integer expiryPolicyMinutes) {\n73     this.expiryPolicyMinutes = expiryPolicyMinutes;\n74   }\n75 \n76   public Integer getShiftingPolicyThreshold() {\n77     return shiftingPolicyThreshold;\n78   }\n79 \n80   public void setShiftingPolicyThreshold(Integer shiftingPolicyThreshold) {\n81     this.shiftingPolicyThreshold = shiftingPolicyThreshold;\n82   }\n83 \n84   public String getOutputFileName() {\n85     return outputFileName;\n86   }\n87 \n88   public void setOutputFileName(String outputFileName) {\n89     this.outputFileName = outputFileName;\n90   }\n91 \n92   public Boolean getIncludeIncompleteDays() {\n93     return includeIncompleteDays;\n94   }\n95 \n96   public void setIncludeIncompleteDays(Boolean includeIncompleteDays) {\n97     this.includeIncompleteDays = includeIncompleteDays;\n98   }\n99 \n100   public Boolean getIncludeIncompleteHours() {\n101     return includeIncompleteHours;\n102   }\n103 \n104   public void setIncludeIncompleteHours(Boolean includeIncompleteHours) {\n105     this.includeIncompleteHours = includeIncompleteHours;\n106   }\n107 \n108   public TekExport getTekExport() {\n109     return tekExport;\n110   }\n111 \n112   public void setTekExport(TekExport tekExport) {\n113     this.tekExport = tekExport;\n114   }\n115 \n116   public Signature getSignature() {\n117     return signature;\n118   }\n119 \n120   public void setSignature(Signature signature) {\n121     this.signature = signature;\n122   }\n123 \n124   public Api getApi() {\n125     return api;\n126   }\n127 \n128   public void setApi(Api api) {\n129     this.api = api;\n130   }\n131 \n132   public ObjectStore getObjectStore() {\n133     return objectStore;\n134   }\n135 \n136   public void setObjectStore(\n137       ObjectStore objectStore) {\n138     this.objectStore = objectStore;\n139   }\n140 \n141   public static class TekExport {\n142 \n143     private String fileName;\n144     private String fileHeader;\n145     private Integer fileHeaderWidth;\n146 \n147     public String getFileName() {\n148       return fileName;\n149     }\n150 \n151     public void setFileName(String fileName) {\n152       this.fileName = fileName;\n153     }\n154 \n155     public String getFileHeader() {\n156       return fileHeader;\n157     }\n158 \n159     public void setFileHeader(String fileHeader) {\n160       this.fileHeader = fileHeader;\n161     }\n162 \n163     public Integer getFileHeaderWidth() {\n164       return fileHeaderWidth;\n165     }\n166 \n167     public void setFileHeaderWidth(Integer fileHeaderWidth) {\n168       this.fileHeaderWidth = fileHeaderWidth;\n169     }\n170   }\n171 \n172   public static class TestData {\n173 \n174     private Integer seed;\n175     private Integer exposuresPerHour;\n176 \n177     public Integer getSeed() {\n178       return seed;\n179     }\n180 \n181     public void setSeed(Integer seed) {\n182       this.seed = seed;\n183     }\n184 \n185     public Integer getExposuresPerHour() {\n186       return exposuresPerHour;\n187     }\n188 \n189     public void setExposuresPerHour(Integer exposuresPerHour) {\n190       this.exposuresPerHour = exposuresPerHour;\n191     }\n192   }\n193 \n194   public static class Paths {\n195 \n196     private String privateKey;\n197     private String output;\n198 \n199     public String getPrivateKey() {\n200       return privateKey;\n201     }\n202 \n203     public void setPrivateKey(String privateKey) {\n204       this.privateKey = privateKey;\n205     }\n206 \n207     public String getOutput() {\n208       return output;\n209     }\n210 \n211     public void setOutput(String output) {\n212       this.output = output;\n213     }\n214   }\n215 \n216   public static class Api {\n217 \n218     private String versionPath;\n219     private String versionV1;\n220     private String countryPath;\n221     private String countryGermany;\n222     private String datePath;\n223     private String hourPath;\n224     private String diagnosisKeysPath;\n225     private String parametersPath;\n226     private String appConfigFileName;\n227 \n228     public String getVersionPath() {\n229       return versionPath;\n230     }\n231 \n232     public void setVersionPath(String versionPath) {\n233       this.versionPath = versionPath;\n234     }\n235 \n236     public String getVersionV1() {\n237       return versionV1;\n238     }\n239 \n240     public void setVersionV1(String versionV1) {\n241       this.versionV1 = versionV1;\n242     }\n243 \n244     public String getCountryPath() {\n245       return countryPath;\n246     }\n247 \n248     public void setCountryPath(String countryPath) {\n249       this.countryPath = countryPath;\n250     }\n251 \n252     public String getCountryGermany() {\n253       return countryGermany;\n254     }\n255 \n256     public void setCountryGermany(String countryGermany) {\n257       this.countryGermany = countryGermany;\n258     }\n259 \n260     public String getDatePath() {\n261       return datePath;\n262     }\n263 \n264     public void setDatePath(String datePath) {\n265       this.datePath = datePath;\n266     }\n267 \n268     public String getHourPath() {\n269       return hourPath;\n270     }\n271 \n272     public void setHourPath(String hourPath) {\n273       this.hourPath = hourPath;\n274     }\n275 \n276     public String getDiagnosisKeysPath() {\n277       return diagnosisKeysPath;\n278     }\n279 \n280     public void setDiagnosisKeysPath(String diagnosisKeysPath) {\n281       this.diagnosisKeysPath = diagnosisKeysPath;\n282     }\n283 \n284     public String getParametersPath() {\n285       return parametersPath;\n286     }\n287 \n288     public void setParametersPath(String parametersPath) {\n289       this.parametersPath = parametersPath;\n290     }\n291 \n292     public String getAppConfigFileName() {\n293       return appConfigFileName;\n294     }\n295 \n296     public void setAppConfigFileName(String appConfigFileName) {\n297       this.appConfigFileName = appConfigFileName;\n298     }\n299   }\n300 \n301   public static class Signature {\n302 \n303     private String appBundleId;\n304     private String androidPackage;\n305     private String verificationKeyId;\n306     private String verificationKeyVersion;\n307     private String algorithmOid;\n308     private String algorithmName;\n309     private String fileName;\n310     private String securityProvider;\n311 \n312     public String getAppBundleId() {\n313       return appBundleId;\n314     }\n315 \n316     public void setAppBundleId(String appBundleId) {\n317       this.appBundleId = appBundleId;\n318     }\n319 \n320     public String getAndroidPackage() {\n321       return androidPackage;\n322     }\n323 \n324     public void setAndroidPackage(String androidPackage) {\n325       this.androidPackage = androidPackage;\n326     }\n327 \n328     public String getVerificationKeyId() {\n329       return verificationKeyId;\n330     }\n331 \n332     public void setVerificationKeyId(String verificationKeyId) {\n333       this.verificationKeyId = verificationKeyId;\n334     }\n335 \n336     public String getVerificationKeyVersion() {\n337       return verificationKeyVersion;\n338     }\n339 \n340     public void setVerificationKeyVersion(String verificationKeyVersion) {\n341       this.verificationKeyVersion = verificationKeyVersion;\n342     }\n343 \n344     public String getAlgorithmOid() {\n345       return algorithmOid;\n346     }\n347 \n348     public void setAlgorithmOid(String algorithmOid) {\n349       this.algorithmOid = algorithmOid;\n350     }\n351 \n352     public String getAlgorithmName() {\n353       return algorithmName;\n354     }\n355 \n356     public void setAlgorithmName(String algorithmName) {\n357       this.algorithmName = algorithmName;\n358     }\n359 \n360     public String getFileName() {\n361       return fileName;\n362     }\n363 \n364     public void setFileName(String fileName) {\n365       this.fileName = fileName;\n366     }\n367 \n368     public String getSecurityProvider() {\n369       return securityProvider;\n370     }\n371 \n372     public void setSecurityProvider(String securityProvider) {\n373       this.securityProvider = securityProvider;\n374     }\n375 \n376     /**\n377      * Returns the static {@link SignatureInfo} configured in the application properties.\n378      */\n379     public SignatureInfo getSignatureInfo() {\n380       return SignatureInfo.newBuilder()\n381           .setAppBundleId(this.getAppBundleId())\n382           .setVerificationKeyVersion(this.getVerificationKeyVersion())\n383           .setVerificationKeyId(this.getVerificationKeyId())\n384           .setSignatureAlgorithm(this.getAlgorithmOid())\n385           .build();\n386     }\n387   }\n388 \n389   public static class ObjectStore {\n390 \n391     private String accessKey;\n392     private String secretKey;\n393     private String endpoint;\n394     private Integer port;\n395     private String bucket;\n396     private Boolean setPublicReadAclOnPutObject;\n397 \n398     public String getAccessKey() {\n399       return accessKey;\n400     }\n401 \n402     public void setAccessKey(String accessKey) {\n403       this.accessKey = accessKey;\n404     }\n405 \n406     public String getSecretKey() {\n407       return secretKey;\n408     }\n409 \n410     public void setSecretKey(String secretKey) {\n411       this.secretKey = secretKey;\n412     }\n413 \n414     public String getEndpoint() {\n415       return endpoint;\n416     }\n417 \n418     public void setEndpoint(String endpoint) {\n419       this.endpoint = endpoint;\n420     }\n421 \n422     public Integer getPort() {\n423       return port;\n424     }\n425 \n426     public void setPort(Integer port) {\n427       this.port = port;\n428     }\n429 \n430     public String getBucket() {\n431       return bucket;\n432     }\n433 \n434     public void setBucket(String bucket) {\n435       this.bucket = bucket;\n436     }\n437 \n438     public Boolean isSetPublicReadAclOnPutObject() {\n439       return setPublicReadAclOnPutObject;\n440     }\n441 \n442     public void setSetPublicReadAclOnPutObject(Boolean setPublicReadAclOnPutObject) {\n443       this.setPublicReadAclOnPutObject = setPublicReadAclOnPutObject;\n444     }\n445   }\n446 }\n447 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.objectstore;\n22 \n23 import app.coronawarn.server.services.distribution.assembly.component.CwaApiStructureProvider;\n24 import app.coronawarn.server.services.distribution.objectstore.publish.LocalFile;\n25 import app.coronawarn.server.services.distribution.objectstore.publish.PublishFileSet;\n26 import app.coronawarn.server.services.distribution.objectstore.publish.PublishedFileSet;\n27 import java.io.IOException;\n28 import java.nio.file.Path;\n29 import java.util.stream.Collectors;\n30 import org.slf4j.Logger;\n31 import org.slf4j.LoggerFactory;\n32 \n33 /**\n34  * Publishes a folder on the disk to S3 while keeping the folder and file structure.<br>\n35  * Moreover, does the following:\n36  * <br>\n37  * <ul>\n38  *   <li>Publishes index files on a different route, removing the trailing \"/index\" part.</li>\n39  *   <li>Adds meta information to the uploaded files, e.g. the sha256 hash value.</li>\n40  *   <li>Only performs the upload for files, which do not yet exist on the object store, and\n41  *   checks whether the existing files hash differ from the to-be-uploaded files hash. Only if the\n42  *   hash differs, the file will ultimately be uploaded</li>\n43  *   <li>Currently not implemented: Set cache control headers</li>\n44  *   <li>Currently not implemented: Supports multi threaded upload of files.</li>\n45  * </ul>\n46  */\n47 public class S3Publisher {\n48 \n49   private static final Logger logger = LoggerFactory.getLogger(S3Publisher.class);\n50 \n51   /** The default CWA root folder, which contains all CWA related files. */\n52   private static final String CWA_S3_ROOT = CwaApiStructureProvider.VERSION_DIRECTORY;\n53 \n54   /** root folder for the upload on the local disk. */\n55   private final Path root;\n56 \n57   /** access to the object store. */\n58   private final ObjectStoreAccess access;\n59 \n60   public S3Publisher(Path root, ObjectStoreAccess access) {\n61     this.root = root;\n62     this.access = access;\n63   }\n64 \n65   /**\n66    * Synchronizes the files to S3.\n67    *\n68    * @throws IOException in case there were problems reading files from the disk.\n69    */\n70   public void publish() throws IOException {\n71     var published = new PublishedFileSet(access.getObjectsWithPrefix(CWA_S3_ROOT));\n72     var toPublish = new PublishFileSet(root);\n73 \n74     var diff = toPublish\n75         .getFiles()\n76         .stream()\n77         .filter(published::isNotYetPublished)\n78         .collect(Collectors.toList());\n79 \n80     logger.info(\"Beginning upload... \");\n81     for (LocalFile file : diff) {\n82       this.access.putObject(file);\n83     }\n84     logger.info(\"Upload completed.\");\n85   }\n86 }\n87 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.objectstore;\n22 \n23 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n24 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.Api;\n25 import app.coronawarn.server.services.distribution.objectstore.client.S3Object;\n26 import java.time.LocalDate;\n27 import java.time.ZoneOffset;\n28 import java.time.format.DateTimeFormatter;\n29 import java.util.List;\n30 import java.util.regex.Matcher;\n31 import java.util.regex.Pattern;\n32 import org.springframework.stereotype.Component;\n33 \n34 /**\n35  * Creates an S3RetentionPolicy object, which applies the retention policy to the S3 compatible storage.\n36  */\n37 @Component\n38 public class S3RetentionPolicy {\n39 \n40   private final ObjectStoreAccess objectStoreAccess;\n41   private final Api api;\n42 \n43   public S3RetentionPolicy(ObjectStoreAccess objectStoreAccess, DistributionServiceConfig distributionServiceConfig) {\n44     this.objectStoreAccess = objectStoreAccess;\n45     this.api = distributionServiceConfig.getApi();\n46   }\n47 \n48   /**\n49    * Deletes all diagnosis-key files from S3 that are older than retentionDays.\n50    *\n51    * @param retentionDays the number of days, that files should be retained on S3.\n52    */\n53   public void applyRetentionPolicy(int retentionDays) {\n54     List<S3Object> diagnosisKeysObjects = objectStoreAccess.getObjectsWithPrefix(\"version/v1/\"\n55         + api.getDiagnosisKeysPath() + \"/\"\n56         + api.getCountryPath() + \"/\"\n57         + api.getCountryGermany() + \"/\"\n58         + api.getDatePath() + \"/\");\n59     final String regex = \".*([0-9]{4}-[0-9]{2}-[0-9]{2}).*\";\n60     final Pattern pattern = Pattern.compile(regex);\n61 \n62     final LocalDate cutOffDate = LocalDate.now(ZoneOffset.UTC).minusDays(retentionDays);\n63 \n64     diagnosisKeysObjects.stream()\n65         .filter(diagnosisKeysObject -> {\n66           Matcher matcher = pattern.matcher(diagnosisKeysObject.getObjectName());\n67           return matcher.matches() && LocalDate.parse(matcher.group(1), DateTimeFormatter.ISO_LOCAL_DATE)\n68               .isBefore(cutOffDate);\n69         })\n70         .forEach(this::deleteDiagnosisKey);\n71   }\n72 \n73   /**\n74    * Java stream do not support checked exceptions within streams. This helper method rethrows them as unchecked\n75    * expressions, so they can be passed up to the Retention Policy.\n76    *\n77    * @param diagnosisKey the  diagnosis key, that should be deleted.\n78    */\n79   public void deleteDiagnosisKey(S3Object diagnosisKey) {\n80     objectStoreAccess.deleteObjectsWithPrefix(diagnosisKey.getObjectName());\n81   }\n82 }\n83 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.objectstore.client;\n22 \n23 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n24 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;\n25 import java.net.URI;\n26 import org.springframework.context.annotation.Bean;\n27 import org.springframework.context.annotation.Configuration;\n28 import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n29 import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n30 import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n31 import software.amazon.awssdk.regions.Region;\n32 import software.amazon.awssdk.services.s3.S3Client;\n33 \n34 /**\n35  * Manages the instantiation of the {@link ObjectStoreClient} bean.\n36  */\n37 @Configuration\n38 public class ObjectStoreClientConfig {\n39 \n40   private static final Region DEFAULT_REGION = Region.EU_CENTRAL_1;\n41 \n42   @Bean\n43   public ObjectStoreClient createObjectStoreClient(DistributionServiceConfig distributionServiceConfig) {\n44     return createClient(distributionServiceConfig.getObjectStore());\n45   }\n46 \n47   private ObjectStoreClient createClient(ObjectStore objectStore) {\n48     AwsCredentialsProvider credentialsProvider = StaticCredentialsProvider.create(\n49         AwsBasicCredentials.create(objectStore.getAccessKey(), objectStore.getSecretKey()));\n50     String endpoint = removeTrailingSlash(objectStore.getEndpoint()) + \":\" + objectStore.getPort();\n51 \n52     return new S3ClientWrapper(S3Client.builder()\n53         .region(DEFAULT_REGION)\n54         .endpointOverride(URI.create(endpoint))\n55         .credentialsProvider(credentialsProvider)\n56         .build());\n57   }\n58 \n59   private String removeTrailingSlash(String string) {\n60     return string.endsWith(\"/\") ? string.substring(0, string.length() - 1) : string;\n61   }\n62 }\n63 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.objectstore.client;\n22 \n23 import static java.util.stream.Collectors.toList;\n24 \n25 import java.nio.file.Path;\n26 import java.util.Collection;\n27 import java.util.List;\n28 import java.util.Map;\n29 import org.slf4j.Logger;\n30 import org.slf4j.LoggerFactory;\n31 import software.amazon.awssdk.core.exception.SdkException;\n32 import software.amazon.awssdk.core.sync.RequestBody;\n33 import software.amazon.awssdk.services.s3.S3Client;\n34 import software.amazon.awssdk.services.s3.model.Delete;\n35 import software.amazon.awssdk.services.s3.model.DeleteObjectsRequest;\n36 import software.amazon.awssdk.services.s3.model.DeleteObjectsResponse;\n37 import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;\n38 import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;\n39 import software.amazon.awssdk.services.s3.model.NoSuchBucketException;\n40 import software.amazon.awssdk.services.s3.model.ObjectIdentifier;\n41 import software.amazon.awssdk.services.s3.model.PutObjectRequest;\n42 \n43 /**\n44  * Implementation of {@link ObjectStoreClient} that encapsulates an {@link S3Client}.\n45  */\n46 public class S3ClientWrapper implements ObjectStoreClient {\n47 \n48   private static final Logger logger = LoggerFactory.getLogger(S3ClientWrapper.class);\n49 \n50   private final S3Client s3Client;\n51 \n52   public S3ClientWrapper(S3Client s3Client) {\n53     this.s3Client = s3Client;\n54   }\n55 \n56   @Override\n57   public boolean bucketExists(String bucketName) {\n58     try {\n59       // using S3Client.listObjectsV2 instead of S3Client.listBuckets/headBucket in order to limit required permissions\n60       s3Client.listObjectsV2(ListObjectsV2Request.builder().bucket(bucketName).maxKeys(1).build());\n61       return true;\n62     } catch (NoSuchBucketException e) {\n63       return false;\n64     } catch (SdkException e) {\n65       throw new ObjectStoreOperationFailedException(\"Failed to determine if bucket exists.\", e);\n66     }\n67   }\n68 \n69   @Override\n70   public List<S3Object> getObjects(String bucket, String prefix) {\n71     try {\n72       ListObjectsV2Response response =\n73           s3Client.listObjectsV2(ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).build());\n74       return response.contents().stream().map(S3ClientWrapper::buildS3Object).collect(toList());\n75     } catch (SdkException e) {\n76       throw new ObjectStoreOperationFailedException(\"Failed to upload object to object store\", e);\n77     }\n78   }\n79 \n80   @Override\n81   public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {\n82     RequestBody bodyFile = RequestBody.fromFile(filePath);\n83 \n84     var requestBuilder = PutObjectRequest.builder().bucket(bucket).key(objectName);\n85     if (headers.containsKey(HeaderKey.AMZ_ACL)) {\n86       requestBuilder.acl(headers.get(HeaderKey.AMZ_ACL));\n87     }\n88     if (headers.containsKey(HeaderKey.CACHE_CONTROL)) {\n89       requestBuilder.cacheControl(headers.get(HeaderKey.CACHE_CONTROL));\n90     }\n91 \n92     try {\n93       s3Client.putObject(requestBuilder.build(), bodyFile);\n94     } catch (SdkException e) {\n95       throw new ObjectStoreOperationFailedException(\"Failed to upload object to object store\", e);\n96     }\n97   }\n98 \n99   @Override\n100   public void removeObjects(String bucket, List<String> objectNames) {\n101     if (objectNames.isEmpty()) {\n102       return;\n103     }\n104 \n105     Collection<ObjectIdentifier> identifiers = objectNames.stream()\n106         .map(key -> ObjectIdentifier.builder().key(key).build()).collect(toList());\n107 \n108     try {\n109       DeleteObjectsResponse response = s3Client.deleteObjects(\n110           DeleteObjectsRequest.builder()\n111               .bucket(bucket)\n112               .delete(Delete.builder().objects(identifiers).build()).build());\n113 \n114       if (response.hasErrors()) {\n115         String errMessage = \"Failed to remove objects from object store.\";\n116         logger.error(\"{} {}\", errMessage, response.errors());\n117         throw new ObjectStoreOperationFailedException(errMessage);\n118       }\n119     } catch (SdkException e) {\n120       throw new ObjectStoreOperationFailedException(\"Failed to remove objects from object store.\", e);\n121     }\n122   }\n123 \n124   private static S3Object buildS3Object(software.amazon.awssdk.services.s3.model.S3Object s3Object) {\n125     String etag = s3Object.eTag().replaceAll(\"\\\"\", \"\");\n126     return new S3Object(s3Object.key(), etag);\n127   }\n128 }\n129 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.runner;\n22 \n23 import app.coronawarn.server.services.distribution.assembly.component.OutputDirectoryProvider;\n24 import app.coronawarn.server.services.distribution.objectstore.ObjectStoreAccess;\n25 import app.coronawarn.server.services.distribution.objectstore.S3Publisher;\n26 import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;\n27 import java.io.IOException;\n28 import java.nio.file.Path;\n29 import org.slf4j.Logger;\n30 import org.slf4j.LoggerFactory;\n31 import org.springframework.boot.ApplicationArguments;\n32 import org.springframework.boot.ApplicationRunner;\n33 import org.springframework.core.annotation.Order;\n34 import org.springframework.stereotype.Component;\n35 \n36 /**\n37  * This runner will sync the base working directory to the S3.\n38  */\n39 @Component\n40 @Order(3)\n41 public class S3Distribution implements ApplicationRunner {\n42 \n43   private static final Logger logger = LoggerFactory.getLogger(S3Distribution.class);\n44 \n45   private final OutputDirectoryProvider outputDirectoryProvider;\n46 \n47   private final ObjectStoreAccess objectStoreAccess;\n48 \n49   S3Distribution(OutputDirectoryProvider outputDirectoryProvider, ObjectStoreAccess objectStoreAccess) {\n50     this.outputDirectoryProvider = outputDirectoryProvider;\n51     this.objectStoreAccess = objectStoreAccess;\n52   }\n53 \n54   @Override\n55   public void run(ApplicationArguments args) {\n56     try {\n57       Path pathToDistribute = outputDirectoryProvider.getFileOnDisk().toPath().toAbsolutePath();\n58       S3Publisher s3Publisher = new S3Publisher(pathToDistribute, objectStoreAccess);\n59 \n60       s3Publisher.publish();\n61       logger.info(\"Data pushed to Object Store successfully.\");\n62     } catch (UnsupportedOperationException | ObjectStoreOperationFailedException | IOException e) {\n63       logger.error(\"Distribution failed.\", e);\n64     }\n65   }\n66 }\n67 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java]\n[start of services/distribution/src/main/resources/application.yaml]\n1 ---\n2 logging:\n3   level:\n4     org:\n5       springframework:\n6         web: INFO\n7     app:\n8       coronawarn: INFO\n9 \n10 services:\n11   distribution:\n12     output-file-name: index\n13     retention-days: 14\n14     expiry-policy-minutes: 120\n15     shifting-policy-threshold: 140\n16     include-incomplete-days: false\n17     include-incomplete-hours: false\n18     paths:\n19       output: out\n20       privatekey: ${VAULT_FILESIGNING_SECRET}\n21     tek-export:\n22       file-name: export.bin\n23       file-header: EK Export v1\n24       file-header-width: 16\n25     api:\n26       version-path: version\n27       version-v1: v1\n28       country-path: country\n29       country-germany: DE\n30       date-path: date\n31       hour-path: hour\n32       diagnosis-keys-path: diagnosis-keys\n33       parameters-path: configuration\n34       app-config-file-name: app_config\n35     signature:\n36       verification-key-id: 262\n37       verification-key-version: v1\n38       algorithm-oid: 1.2.840.10045.4.3.2\n39       algorithm-name: SHA256withECDSA\n40       file-name: export.sig\n41       security-provider: BC\n42     # Configuration for the S3 compatible object storage hosted by Telekom in Germany\n43     objectstore:\n44       access-key: ${CWA_OBJECTSTORE_ACCESSKEY:accessKey1}\n45       secret-key: ${CWA_OBJECTSTORE_SECRETKEY:verySecretKey1}\n46       endpoint: ${CWA_OBJECTSTORE_ENDPOINT:http://localhost}\n47       bucket: ${CWA_OBJECTSTORE_BUCKET:cwa}\n48       port: ${CWA_OBJECTSTORE_PORT:8003}\n49       set-public-read-acl-on-put-object: true\n50 \n51 spring:\n52   main:\n53     web-application-type: NONE\n54 # Postgres configuration\n55   jpa:\n56     hibernate:\n57       ddl-auto: validate\n58   flyway:\n59     enabled: true\n60     locations: classpath:db/migration/postgres\n61     password: ${POSTGRESQL_PASSWORD_FLYWAY:postgres}\n62     user: ${POSTGRESQL_USER_FLYWAY:postgres}\n63 \n64   datasource:\n65     driver-class-name: org.postgresql.Driver\n66     url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n67     username: ${POSTGRESQL_USER_DISTRIBUTION:postgres}\n68     password: ${POSTGRESQL_PASSWORD_DISTRIBUTION:postgres}\n69 \n[end of services/distribution/src/main/resources/application.yaml]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Here is the patch file for the provided issue:\n\n```diff\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\nindex 9a7b8c4..f3e7d89 100644\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n@@ -46,6 +46,7 @@ public class S3Publisher {\n   }\n \n   /**\n+   * Publishes the files to S3.\n    *\n    * @throws IOException in case there were problems reading files from the disk.\n    */\n@@ -57,6 +58,7 @@ public class S3Publisher {\n       this.access.putObject(file);\n     }\n     logger.info(\"Upload completed.\");\n+    logger.info(\"Data pushed to Object Store successfully.\");\n   }\n }\n```\n\nPlease let me know if you need any further assistance.",
        "model_patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\nindex 9a7b8c4..f3e7d89 100644\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n@@ -46,6 +46,7 @@ public class S3Publisher {\n   }\n \n   /**\n+   * Publishes the files to S3.\n    *\n    * @throws IOException in case there were problems reading files from the disk.\n    */\n@@ -57,6 +58,7 @@ public class S3Publisher {\n       this.access.putObject(file);\n     }\n     logger.info(\"Upload completed.\");\n+    logger.info(\"Data pushed to Object Store successfully.\");\n   }\n }\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 419,
        "issue_numbers": [
            "151"
        ],
        "base_commit": "896d24d3730d455ddc7a67bdaebd843ba7bd91dd",
        "patch": "diff --git a/services/distribution/pom.xml b/services/distribution/pom.xml\n--- a/services/distribution/pom.xml\n+++ b/services/distribution/pom.xml\n@@ -78,6 +78,11 @@\n       <groupId>org.apache.commons</groupId>\n       <version>3.2</version>\n     </dependency>\n+    <dependency>\n+      <artifactId>spring-retry</artifactId>\n+      <groupId>org.springframework.retry</groupId>\n+      <version>1.3.0</version>\n+    </dependency>\n   </dependencies>\n \n </project>\n\\ No newline at end of file\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java\n@@ -394,6 +394,7 @@ public static class ObjectStore {\n     private Integer port;\n     private String bucket;\n     private Boolean setPublicReadAclOnPutObject;\n+    private Integer maxNumberOfFailedOperations;\n \n     public String getAccessKey() {\n       return accessKey;\n@@ -442,5 +443,13 @@ public Boolean isSetPublicReadAclOnPutObject() {\n     public void setSetPublicReadAclOnPutObject(Boolean setPublicReadAclOnPutObject) {\n       this.setPublicReadAclOnPutObject = setPublicReadAclOnPutObject;\n     }\n+\n+    public Integer getMaxNumberOfFailedOperations() {\n+      return maxNumberOfFailedOperations;\n+    }\n+\n+    public void setMaxNumberOfFailedOperations(Integer maxNumberOfFailedOperations) {\n+      this.maxNumberOfFailedOperations = maxNumberOfFailedOperations;\n+    }\n   }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/FailedObjectStoreOperationsCounter.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/FailedObjectStoreOperationsCounter.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/FailedObjectStoreOperationsCounter.java\n@@ -0,0 +1,58 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.objectstore;\n+\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Maintains the count and maximum number of failed object store operations in a thread-safe manner.\n+ */\n+@Component\n+public class FailedObjectStoreOperationsCounter {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(FailedObjectStoreOperationsCounter.class);\n+\n+  private final int maxNumberOfFailedOperations;\n+  private final AtomicInteger failedOperationsCounter = new AtomicInteger(0);\n+\n+  public FailedObjectStoreOperationsCounter(DistributionServiceConfig distributionServiceConfig) {\n+    maxNumberOfFailedOperations = distributionServiceConfig.getObjectStore().getMaxNumberOfFailedOperations();\n+  }\n+\n+  /**\n+   * Increments the internal failed operations counter and rethrows the specified exception if the configured maximum\n+   * number of failed object store operation was exceeded.\n+   *\n+   * @param cause The {@link ObjectStoreOperationFailedException} that is associated with the failed operation.\n+   */\n+  public void incrementAndCheckThreshold(ObjectStoreOperationFailedException cause) {\n+    logger.error(\"Object store operation failed.\", cause);\n+    if (failedOperationsCounter.incrementAndGet() > maxNumberOfFailedOperations) {\n+      logger.error(\"Number of failed object store operations exceeded threshold of {}.\", maxNumberOfFailedOperations);\n+      throw cause;\n+    }\n+  }\n+}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3Publisher.java\n@@ -21,11 +21,13 @@\n package app.coronawarn.server.services.distribution.objectstore;\n \n import app.coronawarn.server.services.distribution.assembly.component.CwaApiStructureProvider;\n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;\n import app.coronawarn.server.services.distribution.objectstore.publish.LocalFile;\n import app.coronawarn.server.services.distribution.objectstore.publish.PublishFileSet;\n import app.coronawarn.server.services.distribution.objectstore.publish.PublishedFileSet;\n import java.io.IOException;\n import java.nio.file.Path;\n+import java.util.List;\n import java.util.stream.Collectors;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -48,18 +50,29 @@ public class S3Publisher {\n \n   private static final Logger logger = LoggerFactory.getLogger(S3Publisher.class);\n \n-  /** The default CWA root folder, which contains all CWA related files. */\n+  /**\n+   * The default CWA root folder, which contains all CWA related files.\n+   */\n   private static final String CWA_S3_ROOT = CwaApiStructureProvider.VERSION_DIRECTORY;\n \n-  /** root folder for the upload on the local disk. */\n   private final Path root;\n+  private final ObjectStoreAccess objectStoreAccess;\n+  private final FailedObjectStoreOperationsCounter failedOperationsCounter;\n \n-  /** access to the object store. */\n-  private final ObjectStoreAccess access;\n-\n-  public S3Publisher(Path root, ObjectStoreAccess access) {\n+  /**\n+   * Creates an {@link S3Publisher} instance that attempts to publish the files at the specified location to an object\n+   * store. Object store operations are performed through the specified {@link ObjectStoreAccess} instance.\n+   *\n+   * @param root                    The path of the directory that shall be published.\n+   * @param objectStoreAccess       The {@link ObjectStoreAccess} used to communicate with the object store.\n+   * @param failedOperationsCounter The {@link FailedObjectStoreOperationsCounter} that is used to monitor the number of\n+   *                                failed operations.\n+   */\n+  public S3Publisher(Path root, ObjectStoreAccess objectStoreAccess,\n+      FailedObjectStoreOperationsCounter failedOperationsCounter) {\n     this.root = root;\n-    this.access = access;\n+    this.objectStoreAccess = objectStoreAccess;\n+    this.failedOperationsCounter = failedOperationsCounter;\n   }\n \n   /**\n@@ -68,18 +81,29 @@ public S3Publisher(Path root, ObjectStoreAccess access) {\n    * @throws IOException in case there were problems reading files from the disk.\n    */\n   public void publish() throws IOException {\n-    var published = new PublishedFileSet(access.getObjectsWithPrefix(CWA_S3_ROOT));\n-    var toPublish = new PublishFileSet(root);\n+    PublishedFileSet published;\n+    List<LocalFile> toPublish = new PublishFileSet(root).getFiles();\n+    List<LocalFile> diff;\n \n-    var diff = toPublish\n-        .getFiles()\n-        .stream()\n-        .filter(published::isNotYetPublished)\n-        .collect(Collectors.toList());\n+    try {\n+      published = new PublishedFileSet(objectStoreAccess.getObjectsWithPrefix(CWA_S3_ROOT));\n+      diff = toPublish\n+          .stream()\n+          .filter(published::isNotYetPublished)\n+          .collect(Collectors.toList());\n+    } catch (ObjectStoreOperationFailedException e) {\n+      failedOperationsCounter.incrementAndCheckThreshold(e);\n+      // failed to retrieve existing files; publish everything\n+      diff = toPublish;\n+    }\n \n     logger.info(\"Beginning upload... \");\n     for (LocalFile file : diff) {\n-      this.access.putObject(file);\n+      try {\n+        this.objectStoreAccess.putObject(file);\n+      } catch (ObjectStoreOperationFailedException e) {\n+        failedOperationsCounter.incrementAndCheckThreshold(e);\n+      }\n     }\n     logger.info(\"Upload completed.\");\n   }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicy.java\n@@ -22,6 +22,7 @@\n \n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.Api;\n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;\n import app.coronawarn.server.services.distribution.objectstore.client.S3Object;\n import java.time.LocalDate;\n import java.time.ZoneOffset;\n@@ -39,10 +40,16 @@ public class S3RetentionPolicy {\n \n   private final ObjectStoreAccess objectStoreAccess;\n   private final Api api;\n+  private final FailedObjectStoreOperationsCounter failedObjectStoreOperationsCounter;\n \n-  public S3RetentionPolicy(ObjectStoreAccess objectStoreAccess, DistributionServiceConfig distributionServiceConfig) {\n+  /**\n+   * Creates an {@link S3RetentionPolicy} instance with the specified parameters.\n+   */\n+  public S3RetentionPolicy(ObjectStoreAccess objectStoreAccess, DistributionServiceConfig distributionServiceConfig,\n+      FailedObjectStoreOperationsCounter failedOperationsCounter) {\n     this.objectStoreAccess = objectStoreAccess;\n     this.api = distributionServiceConfig.getApi();\n+    this.failedObjectStoreOperationsCounter = failedOperationsCounter;\n   }\n \n   /**\n@@ -77,6 +84,10 @@ public void applyRetentionPolicy(int retentionDays) {\n    * @param diagnosisKey the  diagnosis key, that should be deleted.\n    */\n   public void deleteDiagnosisKey(S3Object diagnosisKey) {\n-    objectStoreAccess.deleteObjectsWithPrefix(diagnosisKey.getObjectName());\n+    try {\n+      objectStoreAccess.deleteObjectsWithPrefix(diagnosisKey.getObjectName());\n+    } catch (ObjectStoreOperationFailedException e) {\n+      failedObjectStoreOperationsCounter.incrementAndCheckThreshold(e);\n+    }\n   }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/ObjectStoreClientConfig.java\n@@ -25,6 +25,7 @@\n import java.net.URI;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.retry.annotation.EnableRetry;\n import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n@@ -35,6 +36,7 @@\n  * Manages the instantiation of the {@link ObjectStoreClient} bean.\n  */\n @Configuration\n+@EnableRetry\n public class ObjectStoreClientConfig {\n \n   private static final Region DEFAULT_REGION = Region.EU_CENTRAL_1;\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapper.java\n@@ -28,6 +28,10 @@\n import java.util.Map;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.retry.annotation.Backoff;\n+import org.springframework.retry.annotation.Recover;\n+import org.springframework.retry.annotation.Retryable;\n+import org.springframework.retry.support.RetrySynchronizationManager;\n import software.amazon.awssdk.core.exception.SdkException;\n import software.amazon.awssdk.core.sync.RequestBody;\n import software.amazon.awssdk.services.s3.S3Client;\n@@ -67,18 +71,29 @@ public boolean bucketExists(String bucketName) {\n   }\n \n   @Override\n+  @Retryable(\n+      value = SdkException.class,\n+      maxAttemptsExpression = \"${services.distribution.objectstore.retry-attempts}\",\n+      backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"))\n   public List<S3Object> getObjects(String bucket, String prefix) {\n-    try {\n-      ListObjectsV2Response response =\n-          s3Client.listObjectsV2(ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).build());\n-      return response.contents().stream().map(S3ClientWrapper::buildS3Object).collect(toList());\n-    } catch (SdkException e) {\n-      throw new ObjectStoreOperationFailedException(\"Failed to upload object to object store\", e);\n-    }\n+    logRetryStatus(\"object download\");\n+    ListObjectsV2Response response =\n+        s3Client.listObjectsV2(ListObjectsV2Request.builder().prefix(prefix).bucket(bucket).build());\n+    return response.contents().stream().map(S3ClientWrapper::buildS3Object).collect(toList());\n+  }\n+\n+  @Recover\n+  public List<S3Object> skipReadOperation(Throwable cause) {\n+    throw new ObjectStoreOperationFailedException(\"Failed to get objects from object store\", cause);\n   }\n \n   @Override\n+  @Retryable(\n+      value = SdkException.class,\n+      maxAttemptsExpression = \"${services.distribution.objectstore.retry-attempts}\",\n+      backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"))\n   public void putObject(String bucket, String objectName, Path filePath, Map<HeaderKey, String> headers) {\n+    logRetryStatus(\"object upload\");\n     RequestBody bodyFile = RequestBody.fromFile(filePath);\n \n     var requestBuilder = PutObjectRequest.builder().bucket(bucket).key(objectName);\n@@ -89,40 +104,46 @@ public void putObject(String bucket, String objectName, Path filePath, Map<Heade\n       requestBuilder.cacheControl(headers.get(HeaderKey.CACHE_CONTROL));\n     }\n \n-    try {\n-      s3Client.putObject(requestBuilder.build(), bodyFile);\n-    } catch (SdkException e) {\n-      throw new ObjectStoreOperationFailedException(\"Failed to upload object to object store\", e);\n-    }\n+    s3Client.putObject(requestBuilder.build(), bodyFile);\n   }\n \n   @Override\n+  @Retryable(value = {SdkException.class, ObjectStoreOperationFailedException.class},\n+      maxAttemptsExpression = \"${services.distribution.objectstore.retry-attempts}\",\n+      backoff = @Backoff(delayExpression = \"${services.distribution.objectstore.retry-backoff}\"))\n   public void removeObjects(String bucket, List<String> objectNames) {\n     if (objectNames.isEmpty()) {\n       return;\n     }\n+    logRetryStatus(\"object deletion\");\n \n     Collection<ObjectIdentifier> identifiers = objectNames.stream()\n         .map(key -> ObjectIdentifier.builder().key(key).build()).collect(toList());\n \n-    try {\n-      DeleteObjectsResponse response = s3Client.deleteObjects(\n-          DeleteObjectsRequest.builder()\n-              .bucket(bucket)\n-              .delete(Delete.builder().objects(identifiers).build()).build());\n-\n-      if (response.hasErrors()) {\n-        String errMessage = \"Failed to remove objects from object store.\";\n-        logger.error(\"{} {}\", errMessage, response.errors());\n-        throw new ObjectStoreOperationFailedException(errMessage);\n-      }\n-    } catch (SdkException e) {\n-      throw new ObjectStoreOperationFailedException(\"Failed to remove objects from object store.\", e);\n+    DeleteObjectsResponse response = s3Client.deleteObjects(\n+        DeleteObjectsRequest.builder()\n+            .bucket(bucket)\n+            .delete(Delete.builder().objects(identifiers).build()).build());\n+\n+    if (response.hasErrors()) {\n+      throw new ObjectStoreOperationFailedException(\"Failed to remove objects from object store.\");\n     }\n   }\n \n+  @Recover\n+  private void skipModifyingOperation(Throwable cause) {\n+    throw new ObjectStoreOperationFailedException(\"Failed to modify objects on object store.\", cause);\n+  }\n+\n   private static S3Object buildS3Object(software.amazon.awssdk.services.s3.model.S3Object s3Object) {\n     String etag = s3Object.eTag().replaceAll(\"\\\"\", \"\");\n     return new S3Object(s3Object.key(), etag);\n   }\n+\n+  private void logRetryStatus(String action) {\n+    int retryCount = RetrySynchronizationManager.getContext().getRetryCount();\n+    if (retryCount > 0) {\n+      logger.warn(\"Retrying {} after {} failed attempt(s).\", action, retryCount);\n+    }\n+  }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/S3Distribution.java\n@@ -21,6 +21,7 @@\n package app.coronawarn.server.services.distribution.runner;\n \n import app.coronawarn.server.services.distribution.assembly.component.OutputDirectoryProvider;\n+import app.coronawarn.server.services.distribution.objectstore.FailedObjectStoreOperationsCounter;\n import app.coronawarn.server.services.distribution.objectstore.ObjectStoreAccess;\n import app.coronawarn.server.services.distribution.objectstore.S3Publisher;\n import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;\n@@ -43,19 +44,21 @@ public class S3Distribution implements ApplicationRunner {\n   private static final Logger logger = LoggerFactory.getLogger(S3Distribution.class);\n \n   private final OutputDirectoryProvider outputDirectoryProvider;\n-\n   private final ObjectStoreAccess objectStoreAccess;\n+  private final FailedObjectStoreOperationsCounter failedOperationsCounter;\n \n-  S3Distribution(OutputDirectoryProvider outputDirectoryProvider, ObjectStoreAccess objectStoreAccess) {\n+  S3Distribution(OutputDirectoryProvider outputDirectoryProvider, ObjectStoreAccess objectStoreAccess,\n+      FailedObjectStoreOperationsCounter failedOperationsCounter) {\n     this.outputDirectoryProvider = outputDirectoryProvider;\n     this.objectStoreAccess = objectStoreAccess;\n+    this.failedOperationsCounter = failedOperationsCounter;\n   }\n \n   @Override\n   public void run(ApplicationArguments args) {\n     try {\n       Path pathToDistribute = outputDirectoryProvider.getFileOnDisk().toPath().toAbsolutePath();\n-      S3Publisher s3Publisher = new S3Publisher(pathToDistribute, objectStoreAccess);\n+      S3Publisher s3Publisher = new S3Publisher(pathToDistribute, objectStoreAccess, failedOperationsCounter);\n \n       s3Publisher.publish();\n       logger.info(\"Data pushed to Object Store successfully.\");\ndiff --git a/services/distribution/src/main/resources/application.yaml b/services/distribution/src/main/resources/application.yaml\n--- a/services/distribution/src/main/resources/application.yaml\n+++ b/services/distribution/src/main/resources/application.yaml\n@@ -47,6 +47,9 @@ services:\n       bucket: ${CWA_OBJECTSTORE_BUCKET:cwa}\n       port: ${CWA_OBJECTSTORE_PORT:8003}\n       set-public-read-acl-on-put-object: true\n+      retry-attempts: 3\n+      retry-backoff: 2000\n+      max-number-of-failed-operations: 5\n \n spring:\n   main:\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProviderMasterFileTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProviderMasterFileTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProviderMasterFileTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/appconfig/ApplicationVersionConfigurationProviderMasterFileTest.java\n@@ -23,7 +23,6 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ApplicationVersionConfigurationValidator;\n-import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ExposureConfigurationValidator;\n import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationResult;\n import org.junit.jupiter.api.Test;\n \ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/FailedObjectStoreOperationsCounterTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/FailedObjectStoreOperationsCounterTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/FailedObjectStoreOperationsCounterTest.java\n@@ -0,0 +1,58 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.objectstore;\n+\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {\n+    FailedObjectStoreOperationsCounter.class}, initializers = ConfigFileApplicationContextInitializer.class)\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n+class FailedObjectStoreOperationsCounterTest {\n+\n+  @Autowired\n+  private DistributionServiceConfig distributionServiceConfig;\n+\n+  @Autowired\n+  private FailedObjectStoreOperationsCounter failedObjectStoreOperationsCounter;\n+\n+  @Test\n+  void shouldThrowOnSixthAttempt() {\n+    var exception = new ObjectStoreOperationFailedException(\"mock\");\n+    for (int i = 0; i < distributionServiceConfig.getObjectStore().getMaxNumberOfFailedOperations(); i++) {\n+      assertThatCode(() -> failedObjectStoreOperationsCounter.incrementAndCheckThreshold(exception))\n+          .doesNotThrowAnyException();\n+    }\n+    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> failedObjectStoreOperationsCounter.incrementAndCheckThreshold(exception));\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccessTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccessTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccessTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/ObjectStoreAccessTest.java\n@@ -24,7 +24,8 @@\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.when;\n \n-import app.coronawarn.server.services.distribution.Application;\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreClientConfig;\n import app.coronawarn.server.services.distribution.objectstore.publish.LocalFile;\n import app.coronawarn.server.services.distribution.objectstore.publish.LocalGenericFile;\n import java.io.IOException;\n@@ -36,14 +37,14 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.core.io.ResourceLoader;\n-import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n @ExtendWith(SpringExtension.class)\n-@ContextConfiguration(classes = {Application.class},\n-    initializers = ConfigFileApplicationContextInitializer.class)\n+@SpringBootTest(classes = {ObjectStoreAccess.class, ObjectStoreClientConfig.class})\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n @Tag(\"s3-integration\")\n class ObjectStoreAccessTest {\n \ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherIntegrationTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherIntegrationTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherIntegrationTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherIntegrationTest.java\n@@ -21,6 +21,7 @@\n package app.coronawarn.server.services.distribution.objectstore;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n \n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreClientConfig;\n@@ -35,14 +36,12 @@\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.core.io.ResourceLoader;\n-import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n @ExtendWith(SpringExtension.class)\n-@ContextConfiguration(classes = {ObjectStoreAccess.class, ObjectStoreClientConfig.class},\n-    initializers = ConfigFileApplicationContextInitializer.class)\n+@SpringBootTest(classes = {ObjectStoreAccess.class, ObjectStoreClientConfig.class})\n @EnableConfigurationProperties(value = DistributionServiceConfig.class)\n @Tag(\"s3-integration\")\n class S3PublisherIntegrationTest {\n@@ -57,7 +56,8 @@ class S3PublisherIntegrationTest {\n \n   @Test\n   void publishTestFolderOk() throws IOException {\n-    S3Publisher publisher = new S3Publisher(getFolderAsPath(rootTestFolder), objectStoreAccess);\n+    S3Publisher publisher = new S3Publisher(\n+        getFolderAsPath(rootTestFolder), objectStoreAccess, mock(FailedObjectStoreOperationsCounter.class));\n \n     publisher.publish();\n     List<S3Object> s3Objects = objectStoreAccess.getObjectsWithPrefix(\"version\");\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3PublisherTest.java\n@@ -21,6 +21,7 @@\n package app.coronawarn.server.services.distribution.objectstore;\n \n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n@@ -115,6 +116,6 @@ private List<S3Object> twoIdenticalOneOtherOneChange() {\n \n   private S3Publisher createTestPublisher() throws IOException {\n     var publishPath = resourceLoader.getResource(PUBLISHING_PATH).getFile().toPath();\n-    return new S3Publisher(publishPath, objectStoreAccess);\n+    return new S3Publisher(publishPath, objectStoreAccess, mock(FailedObjectStoreOperationsCounter.class));\n   }\n }\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicyTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicyTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicyTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/S3RetentionPolicyTest.java\n@@ -23,12 +23,15 @@\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.ObjectStore;\n+import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreOperationFailedException;\n import app.coronawarn.server.services.distribution.objectstore.client.S3Object;\n import java.time.LocalDate;\n import java.time.ZoneOffset;\n@@ -44,17 +47,21 @@\n \n @EnableConfigurationProperties(value = DistributionServiceConfig.class)\n @ExtendWith(SpringExtension.class)\n-@ContextConfiguration(classes = {S3RetentionPolicy.class, ObjectStore.class},\n+@ContextConfiguration(classes = {S3RetentionPolicy.class, ObjectStore.class, FailedObjectStoreOperationsCounter.class},\n     initializers = ConfigFileApplicationContextInitializer.class)\n class S3RetentionPolicyTest {\n \n   @MockBean\n   private ObjectStoreAccess objectStoreAccess;\n \n+  @MockBean\n+  private FailedObjectStoreOperationsCounter failedObjectStoreOperationsCounter;\n+\n   @Autowired\n   private S3RetentionPolicy s3RetentionPolicy;\n \n-  @Autowired DistributionServiceConfig distributionServiceConfig;\n+  @Autowired\n+  private DistributionServiceConfig distributionServiceConfig;\n \n   @Test\n   void shouldDeleteOldFiles() {\n@@ -83,6 +90,16 @@ void shouldNotDeleteFilesIfAllAreValid() {\n     verify(objectStoreAccess, never()).deleteObjectsWithPrefix(any());\n   }\n \n+  @Test\n+  void deleteDiagnosisKeysUpdatesFailedOperationCounter() {\n+    doThrow(ObjectStoreOperationFailedException.class).when(objectStoreAccess).deleteObjectsWithPrefix(any());\n+\n+    s3RetentionPolicy.deleteDiagnosisKey(new S3Object(\"foo\"));\n+\n+    verify(failedObjectStoreOperationsCounter, times(1))\n+        .incrementAndCheckThreshold(any(ObjectStoreOperationFailedException.class));\n+  }\n+\n   private String generateFileName(LocalDate date) {\n     var api = distributionServiceConfig.getApi();\n \ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapperTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapperTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapperTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/objectstore/client/S3ClientWrapperTest.java\n@@ -27,10 +27,12 @@\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.atLeastOnce;\n-import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n import app.coronawarn.server.services.distribution.objectstore.client.ObjectStoreClient.HeaderKey;\n import java.nio.file.Path;\n import java.util.List;\n@@ -44,6 +46,15 @@\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n import org.junit.jupiter.params.provider.ValueSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.retry.annotation.EnableRetry;\n+import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n import software.amazon.awssdk.core.exception.SdkClientException;\n import software.amazon.awssdk.core.exception.SdkException;\n@@ -62,19 +73,36 @@\n import software.amazon.awssdk.utils.builder.SdkBuilder;\n \n @ExtendWith(SpringExtension.class)\n+@ContextConfiguration(initializers = ConfigFileApplicationContextInitializer.class)\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n class S3ClientWrapperTest {\n \n   private static final String VALID_BUCKET_NAME = \"myBucket\";\n   private static final String VALID_PREFIX = \"prefix\";\n   private static final String VALID_NAME = \"object key\";\n \n+  @Value(\"${services.distribution.objectstore.retry-attempts}\")\n+  private int configuredNumberOfRetries;\n+\n+  @MockBean\n   private S3Client s3Client;\n-  private S3ClientWrapper s3ClientWrapper;\n+\n+  @Autowired\n+  private ObjectStoreClient s3ClientWrapper;\n+\n+  @Configuration\n+  @EnableRetry\n+  public static class RetryS3ClientConfig {\n+\n+    @Bean\n+    public ObjectStoreClient createS3ClientWrapper(S3Client s3Client) {\n+      return new S3ClientWrapper(s3Client);\n+    }\n+  }\n \n   @BeforeEach\n   public void setUpMocks() {\n-    s3Client = mock(S3Client.class);\n-    s3ClientWrapper = new S3ClientWrapper(s3Client);\n+    reset(s3Client);\n   }\n \n   @Test\n@@ -156,6 +184,16 @@ void getObjectsThrowsObjectStoreOperationFailedExceptionIfClientThrows(Class<Exc\n         .isThrownBy(() -> s3ClientWrapper.getObjects(VALID_BUCKET_NAME, VALID_PREFIX));\n   }\n \n+  @ParameterizedTest\n+  @ValueSource(classes = {NoSuchBucketException.class, S3Exception.class, SdkClientException.class, SdkException.class})\n+  void shouldRetryGettingObjectsAndThenThrow(Class<Exception> cause) {\n+    when(s3Client.listObjectsV2(any(ListObjectsV2Request.class))).thenThrow(cause);\n+    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> s3ClientWrapper.getObjects(VALID_BUCKET_NAME, VALID_PREFIX));\n+\n+    verify(s3Client, times(configuredNumberOfRetries)).listObjectsV2(any(ListObjectsV2Request.class));\n+  }\n+\n   @Test\n   void testPutObjectForNoHeaders() {\n     s3ClientWrapper.putObject(VALID_BUCKET_NAME, VALID_NAME, Path.of(\"\"), emptyMap());\n@@ -193,6 +231,16 @@ void putObjectsThrowsObjectStoreOperationFailedExceptionIfClientThrows(Class<Exc\n         .isThrownBy(() -> s3ClientWrapper.putObject(VALID_BUCKET_NAME, VALID_PREFIX, Path.of(\"\"), emptyMap()));\n   }\n \n+  @ParameterizedTest\n+  @ValueSource(classes = {NoSuchBucketException.class, S3Exception.class, SdkClientException.class, SdkException.class})\n+  void shouldRetryUploadingObjectAndThenThrow(Class<Exception> cause) {\n+    when(s3Client.putObject(any(PutObjectRequest.class), any(RequestBody.class))).thenThrow(cause);\n+    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> s3ClientWrapper.putObject(VALID_BUCKET_NAME, VALID_PREFIX, Path.of(\"\"), emptyMap()));\n+\n+    verify(s3Client, times(configuredNumberOfRetries)).putObject(any(PutObjectRequest.class), any(RequestBody.class));\n+  }\n+\n   @Test\n   void testRemoveObjects() {\n     when(s3Client.deleteObjects(any(DeleteObjectsRequest.class))).thenReturn(DeleteObjectsResponse.builder().build());\n@@ -227,4 +275,14 @@ void removeObjectsThrowsObjectStoreOperationFailedExceptionIfClientThrows(Class<\n     assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n         .isThrownBy(() -> s3ClientWrapper.removeObjects(VALID_BUCKET_NAME, List.of(VALID_NAME)));\n   }\n+\n+  @ParameterizedTest\n+  @ValueSource(classes = {NoSuchBucketException.class, S3Exception.class, SdkClientException.class, SdkException.class})\n+  void shouldRetryRemovingObjectAndThenThrow(Class<Exception> cause) {\n+    when(s3Client.deleteObjects(any(DeleteObjectsRequest.class))).thenThrow(cause);\n+    assertThatExceptionOfType(ObjectStoreOperationFailedException.class)\n+        .isThrownBy(() -> s3ClientWrapper.removeObjects(VALID_BUCKET_NAME, List.of(VALID_NAME)));\n+\n+    verify(s3Client, times(configuredNumberOfRetries)).deleteObjects(any(DeleteObjectsRequest.class));\n+  }\n }\ndiff --git a/services/distribution/src/test/resources/application.yaml b/services/distribution/src/test/resources/application.yaml\n--- a/services/distribution/src/test/resources/application.yaml\n+++ b/services/distribution/src/test/resources/application.yaml\n@@ -46,6 +46,9 @@ services:\n       bucket: ${CWA_OBJECTSTORE_BUCKET:cwa}\n       port: ${CWA_OBJECTSTORE_PORT:8003}\n       set-public-read-acl-on-put-object: true\n+      retry-attempts: 3\n+      retry-backoff: 1\n+      max-number-of-failed-operations: 5\n spring:\n   main:\n     banner-mode: off\n",
        "problem_statement": "S3Publisher: Resilience\nThe S3Publisher/ObjectStoreAccess is currently lacking resilience features, like re-trys and error handling. \n",
        "hints_text": "",
        "created_at": "2020-06-02T14:48:26Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-463",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nDistribution: Add Safeguard to not generate any exposure key file > 16MB\nIn order to prevent issues on the mobile device & potential abuse, add a safeguard, so that we do not publish any files, which are bigger than 16MB. In case this threshold is reached for any file, an error message must be logged.\r\n\r\nMake sure to keep consistency with the index files. In order to align with the current concept of always generating a file, we should generate an empty file in this case as well.\r\n\r\n@pithumke \r\n\r\n\r\n\r\n\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile          | Effect\n148 -----------------|-------------\n149 `dev`            | Turns the log level to `DEBUG`.\n150 `cloud`          | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`           | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n152 `testdata`       | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 `signature-dev`  | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n154 `signature-prod` | Provides production app package IDs for the signature info\n155 \n156 ### Submission\n157 \n158 Profile      | Effect\n159 -------------|-------------\n160 `dev`        | Turns the log level to `DEBUG`.\n161 `cloud`      | Removes default values for the `datasource` configuration.\n162 \n163 ## Documentation\n164 \n165 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n166 \n167 ## Support and Feedback\n168 \n169 The following channels are available for discussions, feedback, and support requests:\n170 \n171 | Type                     | Channel                                                |\n172 | ------------------------ | ------------------------------------------------------ |\n173 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n174 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n175 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n176 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n177 \n178 ## How to Contribute\n179 \n180 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n181 \n182 ## Contributors\n183 \n184 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n185 \n186 ## Repositories\n187 \n188 The following public repositories are currently available for the Corona-Warn-App:\n189 \n190 | Repository          | Description                                                           |\n191 | ------------------- | --------------------------------------------------------------------- |\n192 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n193 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n194 | [cwa-verification-server] | Backend implementation of the verification process|\n195 \n196 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n197 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n198 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n199 [Postgres]: https://www.postgresql.org/\n200 [HSQLDB]: http://hsqldb.org/\n201 [Zenko CloudServer]: https://github.com/scality/cloudserver\n202 \n203 ## Licensing\n204 \n205 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n206 \n207 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n208 \n209 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n210 \n211 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n212 \n[end of README.md]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;\n22 \n23 import static java.time.ZoneOffset.UTC;\n24 import static java.util.Collections.emptyList;\n25 \n26 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n27 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n28 import java.time.LocalDate;\n29 import java.time.LocalDateTime;\n30 import java.util.Collection;\n31 import java.util.HashMap;\n32 import java.util.List;\n33 import java.util.Map;\n34 import java.util.Optional;\n35 import java.util.Set;\n36 import java.util.concurrent.TimeUnit;\n37 import java.util.stream.Collectors;\n38 \n39 /**\n40  * An instance of this class contains a collection of {@link DiagnosisKey DiagnosisKeys}.\n41  */\n42 public abstract class DiagnosisKeyBundler {\n43 \n44   /**\n45    * The submission timestamp is counted in 1 hour intervals since epoch.\n46    */\n47   public static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);\n48 \n49   /**\n50    * The rolling start interval number is counted in 10 minute intervals since epoch.\n51    */\n52   public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);\n53 \n54   protected final int minNumberOfKeysPerBundle;\n55   protected final long expiryPolicyMinutes;\n56 \n57   // The hour at which the distribution runs. This field is needed to prevent the run from distributing any keys that\n58   // have already been submitted but may only be distributed in the future (e.g. because they are not expired yet).\n59   protected LocalDateTime distributionTime;\n60 \n61   // A map containing diagnosis keys, grouped by the LocalDateTime on which they may be distributed\n62   protected final Map<LocalDateTime, List<DiagnosisKey>> distributableDiagnosisKeys = new HashMap<>();\n63 \n64   public DiagnosisKeyBundler(DistributionServiceConfig distributionServiceConfig) {\n65     this.minNumberOfKeysPerBundle = distributionServiceConfig.getShiftingPolicyThreshold();\n66     this.expiryPolicyMinutes = distributionServiceConfig.getExpiryPolicyMinutes();\n67   }\n68 \n69   /**\n70    * Creates a {@link LocalDateTime} based on the specified epoch timestamp.\n71    */\n72   public static LocalDateTime getLocalDateTimeFromHoursSinceEpoch(long timestamp) {\n73     return LocalDateTime.ofEpochSecond(TimeUnit.HOURS.toSeconds(timestamp), 0, UTC);\n74   }\n75 \n76   /**\n77    * Sets the {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler} and the time at which the\n78    * distribution runs and calls {@link DiagnosisKeyBundler#createDiagnosisKeyDistributionMap}.\n79    *\n80    * @param diagnosisKeys    The {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.\n81    * @param distributionTime The {@link LocalDateTime} at which the distribution runs.\n82    */\n83   public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys, LocalDateTime distributionTime) {\n84     this.distributionTime = distributionTime;\n85     this.createDiagnosisKeyDistributionMap(diagnosisKeys);\n86   }\n87 \n88   /**\n89    * Returns all {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.\n90    */\n91   public List<DiagnosisKey> getAllDiagnosisKeys() {\n92     return this.distributableDiagnosisKeys.values().stream()\n93         .flatMap(List::stream)\n94         .collect(Collectors.toList());\n95   }\n96 \n97   /**\n98    * Initializes the internal {@code distributableDiagnosisKeys} map, which should contain all diagnosis keys, grouped\n99    * by the LocalDateTime on which they may be distributed.\n100    */\n101   protected abstract void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys);\n102 \n103   /**\n104    * Returns a set of all {@link LocalDate dates} on which {@link DiagnosisKey diagnosis keys} shall be distributed.\n105    */\n106   public Set<LocalDate> getDatesWithDistributableDiagnosisKeys() {\n107     return this.distributableDiagnosisKeys.keySet().stream()\n108         .map(LocalDateTime::toLocalDate)\n109         .collect(Collectors.toSet());\n110   }\n111 \n112   /**\n113    * Returns a set of all {@link LocalDateTime hours} of a specified {@link LocalDate date} during which {@link\n114    * DiagnosisKey diagnosis keys} shall be distributed.\n115    */\n116   public Set<LocalDateTime> getHoursWithDistributableDiagnosisKeys(LocalDate currentDate) {\n117     return this.distributableDiagnosisKeys.keySet().stream()\n118         .filter(dateTime -> dateTime.toLocalDate().equals(currentDate))\n119         .collect(Collectors.toSet());\n120   }\n121 \n122   /**\n123    * Returns the submission timestamp of a {@link DiagnosisKey} as a {@link LocalDateTime}.\n124    */\n125   protected LocalDateTime getSubmissionDateTime(DiagnosisKey diagnosisKey) {\n126     return LocalDateTime.ofEpochSecond(diagnosisKey.getSubmissionTimestamp() * ONE_HOUR_INTERVAL_SECONDS, 0, UTC);\n127   }\n128 \n129   /**\n130    * Returns all diagnosis keys that should be distributed on a specific date.\n131    */\n132   public List<DiagnosisKey> getDiagnosisKeysForDate(LocalDate date) {\n133     return this.distributableDiagnosisKeys.keySet().stream()\n134         .filter(dateTime -> dateTime.toLocalDate().equals(date))\n135         .map(this::getDiagnosisKeysForHour)\n136         .flatMap(List::stream)\n137         .collect(Collectors.toList());\n138   }\n139 \n140   /**\n141    * Returns all diagnosis keys that should be distributed in a specific hour.\n142    */\n143   public List<DiagnosisKey> getDiagnosisKeysForHour(LocalDateTime hour) {\n144     return Optional\n145         .ofNullable(this.distributableDiagnosisKeys.get(hour))\n146         .orElse(emptyList());\n147   }\n148 }\n149 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n25 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n26 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.DateAggregatingDecorator;\n27 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.DateIndexingDecorator;\n28 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n29 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;\n30 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n31 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n32 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n33 import java.time.LocalDate;\n34 import java.util.Set;\n35 \n36 public class DiagnosisKeysCountryDirectory extends IndexDirectoryOnDisk<String> {\n37 \n38   private final DiagnosisKeyBundler diagnosisKeyBundler;\n39   private final CryptoProvider cryptoProvider;\n40   private final DistributionServiceConfig distributionServiceConfig;\n41 \n42   /**\n43    * Constructs a {@link DiagnosisKeysCountryDirectory} instance that represents the {@code .../country/:country/...}\n44    * portion of the diagnosis key directory structure.\n45    *\n46    * @param diagnosisKeyBundler A {@link DiagnosisKeyBundler} containing the {@link DiagnosisKey DiagnosisKeys}.\n47    * @param cryptoProvider      The {@link CryptoProvider} used for payload signing.\n48    */\n49   public DiagnosisKeysCountryDirectory(DiagnosisKeyBundler diagnosisKeyBundler,\n50       CryptoProvider cryptoProvider, DistributionServiceConfig distributionServiceConfig) {\n51     super(distributionServiceConfig.getApi().getCountryPath(), __ ->\n52         Set.of(distributionServiceConfig.getApi().getCountryGermany()), Object::toString);\n53     this.diagnosisKeyBundler = diagnosisKeyBundler;\n54     this.cryptoProvider = cryptoProvider;\n55     this.distributionServiceConfig = distributionServiceConfig;\n56   }\n57 \n58   @Override\n59   public void prepare(ImmutableStack<Object> indices) {\n60     this.addWritableToAll(__ -> {\n61       DiagnosisKeysDateDirectory dateDirectory = new DiagnosisKeysDateDirectory(diagnosisKeyBundler, cryptoProvider,\n62           distributionServiceConfig);\n63       return decorateDateDirectory(dateDirectory);\n64     });\n65     super.prepare(indices);\n66   }\n67 \n68   private IndexDirectory<LocalDate, WritableOnDisk> decorateDateDirectory(DiagnosisKeysDateDirectory dateDirectory) {\n69     return new DateAggregatingDecorator(new DateIndexingDecorator(dateDirectory, distributionServiceConfig),\n70         cryptoProvider, distributionServiceConfig);\n71   }\n72 }\n73 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator;\n22 \n23 import static app.coronawarn.server.services.distribution.assembly.structure.util.functional.CheckedFunction.uncheckedFunction;\n24 \n25 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n26 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKeyExport;\n27 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n28 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.singing.DiagnosisKeySigningDecorator;\n29 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;\n30 import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n31 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n32 import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n33 import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n34 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n35 import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n36 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;\n37 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.DirectoryDecorator;\n38 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.IndexDirectoryDecorator;\n39 import app.coronawarn.server.services.distribution.assembly.structure.file.File;\n40 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n41 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n42 import java.time.LocalDate;\n43 import java.util.List;\n44 import java.util.NoSuchElementException;\n45 import java.util.Optional;\n46 import java.util.Set;\n47 import java.util.stream.Collectors;\n48 import java.util.stream.Stream;\n49 \n50 /**\n51  * A {@link DirectoryDecorator} that will bundle hour aggregates into date aggregates and sign them.\n52  */\n53 public class DateAggregatingDecorator extends IndexDirectoryDecorator<LocalDate, WritableOnDisk> {\n54 \n55   private final CryptoProvider cryptoProvider;\n56   private final DistributionServiceConfig distributionServiceConfig;\n57 \n58   /**\n59    * Creates a new DateAggregatingDecorator.\n60    */\n61   public DateAggregatingDecorator(IndexDirectory<LocalDate, WritableOnDisk> directory, CryptoProvider cryptoProvider,\n62       DistributionServiceConfig distributionServiceConfig) {\n63     super(directory);\n64     this.cryptoProvider = cryptoProvider;\n65     this.distributionServiceConfig = distributionServiceConfig;\n66   }\n67 \n68   @Override\n69   public void prepare(ImmutableStack<Object> indices) {\n70     super.prepare(indices);\n71     Set<Directory<WritableOnDisk>> dayDirectories = this.getWritables().stream()\n72         .filter(writable -> writable instanceof DirectoryOnDisk)\n73         .map(directory -> (DirectoryOnDisk) directory)\n74         .collect(Collectors.toSet());\n75     if (dayDirectories.isEmpty()) {\n76       return;\n77     }\n78 \n79     Set<String> dates = this.getIndex(indices).stream()\n80         .map(this.getIndexFormatter())\n81         .map(Object::toString)\n82         .collect(Collectors.toSet());\n83 \n84     dayDirectories.stream()\n85         .filter(dayDirectory -> dates.contains(dayDirectory.getName()))\n86         .forEach(currentDirectory -> Stream.of(currentDirectory)\n87             .map(this::getSubSubDirectoryArchives)\n88             .map(this::getTemporaryExposureKeyExportFilesFromArchives)\n89             .map(this::parseTemporaryExposureKeyExportsFromFiles)\n90             .map(this::reduceTemporaryExposureKeyExportsToNewFile)\n91             .map(temporaryExposureKeyExportFile -> {\n92               Archive<WritableOnDisk> aggregate = new ArchiveOnDisk(distributionServiceConfig.getOutputFileName());\n93               aggregate.addWritable(temporaryExposureKeyExportFile);\n94               return aggregate;\n95             })\n96             .map(file -> new DiagnosisKeySigningDecorator(file, cryptoProvider, distributionServiceConfig))\n97             .forEach(aggregate -> {\n98               currentDirectory.addWritable(aggregate);\n99               aggregate.prepare(indices);\n100             })\n101         );\n102   }\n103 \n104   /**\n105    * Returns all archives that are 3 levels down from the root directory.\n106    */\n107   private Set<Archive<WritableOnDisk>> getSubSubDirectoryArchives(Directory<WritableOnDisk> rootDirectory) {\n108     return getWritablesInDirectory(rootDirectory, 3).stream()\n109         .filter(Writable::isArchive)\n110         .map(archive -> (Archive<WritableOnDisk>) archive)\n111         .collect(Collectors.toSet());\n112   }\n113 \n114   /**\n115    * Traverses a directory {@code depth} levels deep and returns a flattened list of all writables at that depth. A\n116    * {@code depth} of 0 or less returns a set only containing the root directory. A depth of 1 returns a set of\n117    * writables in the root directory. A depth of 2 returns a set of all writables in all directories in the root\n118    * directory, and so on.\n119    *\n120    * @param rootDirectory The directory in which to start traversal.\n121    * @param depth         The depth to traverse.\n122    * @return All writables that are {@code depth} levels down.\n123    */\n124   private Set<Writable<WritableOnDisk>> getWritablesInDirectory(Directory<WritableOnDisk> rootDirectory, int depth) {\n125     if (depth <= 0) {\n126       return Set.of(rootDirectory);\n127     } else if (depth == 1) {\n128       return rootDirectory.getWritables();\n129     } else {\n130       return rootDirectory.getWritables().stream()\n131           .filter(Writable::isDirectory)\n132           .flatMap(directory -> getWritablesInDirectory((Directory<WritableOnDisk>) directory, depth - 1).stream())\n133           .collect(Collectors.toSet());\n134     }\n135   }\n136 \n137   private Set<TemporaryExposureKeyExportFile> getTemporaryExposureKeyExportFilesFromArchives(\n138       Set<Archive<WritableOnDisk>> hourArchives) {\n139     return hourArchives.stream()\n140         .map(Directory::getWritables)\n141         .map(writables -> writables.stream()\n142             .filter(writable -> writable.getName().equals(\"export.bin\")))\n143         .map(Stream::findFirst)\n144         .map(Optional::orElseThrow)\n145         .filter(writable -> writable instanceof File)\n146         .map(file -> (TemporaryExposureKeyExportFile) file)\n147         .collect(Collectors.toSet());\n148   }\n149 \n150   private Set<TemporaryExposureKeyExport> parseTemporaryExposureKeyExportsFromFiles(\n151       Set<TemporaryExposureKeyExportFile> temporaryExposureKeyExportFiles) {\n152     return temporaryExposureKeyExportFiles.stream()\n153         .map(TemporaryExposureKeyExportFile::getBytesWithoutHeader)\n154         .map(uncheckedFunction(TemporaryExposureKeyExport::parseFrom))\n155         .collect(Collectors.toSet());\n156   }\n157 \n158   private TemporaryExposureKeyExportFile reduceTemporaryExposureKeyExportsToNewFile(\n159       Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n160     return TemporaryExposureKeyExportFile.fromTemporaryExposureKeys(\n161         getTemporaryExposureKeys(temporaryExposureKeyExports),\n162         getRegion(temporaryExposureKeyExports),\n163         getStartTimestamp(temporaryExposureKeyExports),\n164         getEndTimestamp(temporaryExposureKeyExports),\n165         distributionServiceConfig\n166     );\n167   }\n168 \n169   private static Set<TemporaryExposureKey> getTemporaryExposureKeys(\n170       Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n171     return temporaryExposureKeyExports.stream()\n172         .map(TemporaryExposureKeyExport::getKeysList)\n173         .flatMap(List::stream)\n174         .collect(Collectors.toSet());\n175   }\n176 \n177   private static String getRegion(Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n178     return temporaryExposureKeyExports.stream()\n179         .map(TemporaryExposureKeyExport::getRegion)\n180         .findAny()\n181         .orElseThrow(NoSuchElementException::new);\n182   }\n183 \n184   private static long getStartTimestamp(\n185       Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n186     return temporaryExposureKeyExports.stream()\n187         .mapToLong(TemporaryExposureKeyExport::getStartTimestamp)\n188         .min()\n189         .orElseThrow(NoSuchElementException::new);\n190   }\n191 \n192   private static long getEndTimestamp(Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n193     return temporaryExposureKeyExports.stream()\n194         .mapToLong(TemporaryExposureKeyExport::getEndTimestamp)\n195         .max()\n196         .orElseThrow(NoSuchElementException::new);\n197   }\n198 }\n199 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/io/IO.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.io;\n22 \n23 import java.io.File;\n24 import java.io.FileOutputStream;\n25 import java.io.IOException;\n26 import java.io.UncheckedIOException;\n27 \n28 /**\n29  * A class containing helper functions for general purpose file IO.\n30  */\n31 public class IO {\n32 \n33   private IO() {\n34   }\n35 \n36   /**\n37    * Create a file on the disk if it does not already exist.\n38    *\n39    * @param root The parent file.\n40    * @param name The name of the new file.\n41    */\n42   public static void makeNewFile(File root, String name) {\n43     File directory = new File(root, name);\n44     try {\n45       if (!directory.createNewFile()) {\n46         throw new IOException(\"Could not create \" + name + \", file already exists\");\n47       }\n48     } catch (IOException e) {\n49       throw new UncheckedIOException(\"Failed to create file: \" + name, e);\n50     }\n51   }\n52 \n53   /**\n54    * Writes bytes into a file.\n55    *\n56    * @param bytes      The content to write\n57    * @param outputFile The file to write the content into.\n58    */\n59   public static void writeBytesToFile(byte[] bytes, File outputFile) {\n60     try (FileOutputStream outputFileStream = new FileOutputStream(outputFile)) {\n61       outputFileStream.write(bytes);\n62     } catch (IOException e) {\n63       throw new UncheckedIOException(\"Could not write file \" + outputFile, e);\n64     }\n65   }\n66 }\n67 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/io/IO.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.config;\n22 \n23 import app.coronawarn.server.common.protocols.external.exposurenotification.SignatureInfo;\n24 import org.springframework.boot.context.properties.ConfigurationProperties;\n25 import org.springframework.stereotype.Component;\n26 \n27 @Component\n28 @ConfigurationProperties(prefix = \"services.distribution\")\n29 public class DistributionServiceConfig {\n30 \n31   private Paths paths;\n32   private TestData testData;\n33   private Integer retentionDays;\n34   private Integer expiryPolicyMinutes;\n35   private Integer shiftingPolicyThreshold;\n36   private String outputFileName;\n37   private Boolean includeIncompleteDays;\n38   private Boolean includeIncompleteHours;\n39   private TekExport tekExport;\n40   private Signature signature;\n41   private Api api;\n42   private ObjectStore objectStore;\n43 \n44   public Paths getPaths() {\n45     return paths;\n46   }\n47 \n48   public void setPaths(Paths paths) {\n49     this.paths = paths;\n50   }\n51 \n52   public TestData getTestData() {\n53     return testData;\n54   }\n55 \n56   public void setTestData(TestData testData) {\n57     this.testData = testData;\n58   }\n59 \n60   public Integer getRetentionDays() {\n61     return retentionDays;\n62   }\n63 \n64   public void setRetentionDays(Integer retentionDays) {\n65     this.retentionDays = retentionDays;\n66   }\n67 \n68   public Integer getExpiryPolicyMinutes() {\n69     return expiryPolicyMinutes;\n70   }\n71 \n72   public void setExpiryPolicyMinutes(Integer expiryPolicyMinutes) {\n73     this.expiryPolicyMinutes = expiryPolicyMinutes;\n74   }\n75 \n76   public Integer getShiftingPolicyThreshold() {\n77     return shiftingPolicyThreshold;\n78   }\n79 \n80   public void setShiftingPolicyThreshold(Integer shiftingPolicyThreshold) {\n81     this.shiftingPolicyThreshold = shiftingPolicyThreshold;\n82   }\n83 \n84   public String getOutputFileName() {\n85     return outputFileName;\n86   }\n87 \n88   public void setOutputFileName(String outputFileName) {\n89     this.outputFileName = outputFileName;\n90   }\n91 \n92   public Boolean getIncludeIncompleteDays() {\n93     return includeIncompleteDays;\n94   }\n95 \n96   public void setIncludeIncompleteDays(Boolean includeIncompleteDays) {\n97     this.includeIncompleteDays = includeIncompleteDays;\n98   }\n99 \n100   public Boolean getIncludeIncompleteHours() {\n101     return includeIncompleteHours;\n102   }\n103 \n104   public void setIncludeIncompleteHours(Boolean includeIncompleteHours) {\n105     this.includeIncompleteHours = includeIncompleteHours;\n106   }\n107 \n108   public TekExport getTekExport() {\n109     return tekExport;\n110   }\n111 \n112   public void setTekExport(TekExport tekExport) {\n113     this.tekExport = tekExport;\n114   }\n115 \n116   public Signature getSignature() {\n117     return signature;\n118   }\n119 \n120   public void setSignature(Signature signature) {\n121     this.signature = signature;\n122   }\n123 \n124   public Api getApi() {\n125     return api;\n126   }\n127 \n128   public void setApi(Api api) {\n129     this.api = api;\n130   }\n131 \n132   public ObjectStore getObjectStore() {\n133     return objectStore;\n134   }\n135 \n136   public void setObjectStore(\n137       ObjectStore objectStore) {\n138     this.objectStore = objectStore;\n139   }\n140 \n141   public static class TekExport {\n142 \n143     private String fileName;\n144     private String fileHeader;\n145     private Integer fileHeaderWidth;\n146 \n147     public String getFileName() {\n148       return fileName;\n149     }\n150 \n151     public void setFileName(String fileName) {\n152       this.fileName = fileName;\n153     }\n154 \n155     public String getFileHeader() {\n156       return fileHeader;\n157     }\n158 \n159     public void setFileHeader(String fileHeader) {\n160       this.fileHeader = fileHeader;\n161     }\n162 \n163     public Integer getFileHeaderWidth() {\n164       return fileHeaderWidth;\n165     }\n166 \n167     public void setFileHeaderWidth(Integer fileHeaderWidth) {\n168       this.fileHeaderWidth = fileHeaderWidth;\n169     }\n170   }\n171 \n172   public static class TestData {\n173 \n174     private Integer seed;\n175     private Integer exposuresPerHour;\n176 \n177     public Integer getSeed() {\n178       return seed;\n179     }\n180 \n181     public void setSeed(Integer seed) {\n182       this.seed = seed;\n183     }\n184 \n185     public Integer getExposuresPerHour() {\n186       return exposuresPerHour;\n187     }\n188 \n189     public void setExposuresPerHour(Integer exposuresPerHour) {\n190       this.exposuresPerHour = exposuresPerHour;\n191     }\n192   }\n193 \n194   public static class Paths {\n195 \n196     private String privateKey;\n197     private String output;\n198 \n199     public String getPrivateKey() {\n200       return privateKey;\n201     }\n202 \n203     public void setPrivateKey(String privateKey) {\n204       this.privateKey = privateKey;\n205     }\n206 \n207     public String getOutput() {\n208       return output;\n209     }\n210 \n211     public void setOutput(String output) {\n212       this.output = output;\n213     }\n214   }\n215 \n216   public static class Api {\n217 \n218     private String versionPath;\n219     private String versionV1;\n220     private String countryPath;\n221     private String countryGermany;\n222     private String datePath;\n223     private String hourPath;\n224     private String diagnosisKeysPath;\n225     private String parametersPath;\n226     private String appConfigFileName;\n227 \n228     public String getVersionPath() {\n229       return versionPath;\n230     }\n231 \n232     public void setVersionPath(String versionPath) {\n233       this.versionPath = versionPath;\n234     }\n235 \n236     public String getVersionV1() {\n237       return versionV1;\n238     }\n239 \n240     public void setVersionV1(String versionV1) {\n241       this.versionV1 = versionV1;\n242     }\n243 \n244     public String getCountryPath() {\n245       return countryPath;\n246     }\n247 \n248     public void setCountryPath(String countryPath) {\n249       this.countryPath = countryPath;\n250     }\n251 \n252     public String getCountryGermany() {\n253       return countryGermany;\n254     }\n255 \n256     public void setCountryGermany(String countryGermany) {\n257       this.countryGermany = countryGermany;\n258     }\n259 \n260     public String getDatePath() {\n261       return datePath;\n262     }\n263 \n264     public void setDatePath(String datePath) {\n265       this.datePath = datePath;\n266     }\n267 \n268     public String getHourPath() {\n269       return hourPath;\n270     }\n271 \n272     public void setHourPath(String hourPath) {\n273       this.hourPath = hourPath;\n274     }\n275 \n276     public String getDiagnosisKeysPath() {\n277       return diagnosisKeysPath;\n278     }\n279 \n280     public void setDiagnosisKeysPath(String diagnosisKeysPath) {\n281       this.diagnosisKeysPath = diagnosisKeysPath;\n282     }\n283 \n284     public String getParametersPath() {\n285       return parametersPath;\n286     }\n287 \n288     public void setParametersPath(String parametersPath) {\n289       this.parametersPath = parametersPath;\n290     }\n291 \n292     public String getAppConfigFileName() {\n293       return appConfigFileName;\n294     }\n295 \n296     public void setAppConfigFileName(String appConfigFileName) {\n297       this.appConfigFileName = appConfigFileName;\n298     }\n299   }\n300 \n301   public static class Signature {\n302 \n303     private String appBundleId;\n304     private String androidPackage;\n305     private String verificationKeyId;\n306     private String verificationKeyVersion;\n307     private String algorithmOid;\n308     private String algorithmName;\n309     private String fileName;\n310     private String securityProvider;\n311 \n312     public String getAppBundleId() {\n313       return appBundleId;\n314     }\n315 \n316     public void setAppBundleId(String appBundleId) {\n317       this.appBundleId = appBundleId;\n318     }\n319 \n320     public String getAndroidPackage() {\n321       return androidPackage;\n322     }\n323 \n324     public void setAndroidPackage(String androidPackage) {\n325       this.androidPackage = androidPackage;\n326     }\n327 \n328     public String getVerificationKeyId() {\n329       return verificationKeyId;\n330     }\n331 \n332     public void setVerificationKeyId(String verificationKeyId) {\n333       this.verificationKeyId = verificationKeyId;\n334     }\n335 \n336     public String getVerificationKeyVersion() {\n337       return verificationKeyVersion;\n338     }\n339 \n340     public void setVerificationKeyVersion(String verificationKeyVersion) {\n341       this.verificationKeyVersion = verificationKeyVersion;\n342     }\n343 \n344     public String getAlgorithmOid() {\n345       return algorithmOid;\n346     }\n347 \n348     public void setAlgorithmOid(String algorithmOid) {\n349       this.algorithmOid = algorithmOid;\n350     }\n351 \n352     public String getAlgorithmName() {\n353       return algorithmName;\n354     }\n355 \n356     public void setAlgorithmName(String algorithmName) {\n357       this.algorithmName = algorithmName;\n358     }\n359 \n360     public String getFileName() {\n361       return fileName;\n362     }\n363 \n364     public void setFileName(String fileName) {\n365       this.fileName = fileName;\n366     }\n367 \n368     public String getSecurityProvider() {\n369       return securityProvider;\n370     }\n371 \n372     public void setSecurityProvider(String securityProvider) {\n373       this.securityProvider = securityProvider;\n374     }\n375 \n376     /**\n377      * Returns the static {@link SignatureInfo} configured in the application properties.\n378      */\n379     public SignatureInfo getSignatureInfo() {\n380       return SignatureInfo.newBuilder()\n381           .setAppBundleId(this.getAppBundleId())\n382           .setVerificationKeyVersion(this.getVerificationKeyVersion())\n383           .setVerificationKeyId(this.getVerificationKeyId())\n384           .setSignatureAlgorithm(this.getAlgorithmOid())\n385           .build();\n386     }\n387   }\n388 \n389   public static class ObjectStore {\n390 \n391     private String accessKey;\n392     private String secretKey;\n393     private String endpoint;\n394     private Integer port;\n395     private String bucket;\n396     private Boolean setPublicReadAclOnPutObject;\n397     private Integer maxNumberOfFailedOperations;\n398 \n399     public String getAccessKey() {\n400       return accessKey;\n401     }\n402 \n403     public void setAccessKey(String accessKey) {\n404       this.accessKey = accessKey;\n405     }\n406 \n407     public String getSecretKey() {\n408       return secretKey;\n409     }\n410 \n411     public void setSecretKey(String secretKey) {\n412       this.secretKey = secretKey;\n413     }\n414 \n415     public String getEndpoint() {\n416       return endpoint;\n417     }\n418 \n419     public void setEndpoint(String endpoint) {\n420       this.endpoint = endpoint;\n421     }\n422 \n423     public Integer getPort() {\n424       return port;\n425     }\n426 \n427     public void setPort(Integer port) {\n428       this.port = port;\n429     }\n430 \n431     public String getBucket() {\n432       return bucket;\n433     }\n434 \n435     public void setBucket(String bucket) {\n436       this.bucket = bucket;\n437     }\n438 \n439     public Boolean isSetPublicReadAclOnPutObject() {\n440       return setPublicReadAclOnPutObject;\n441     }\n442 \n443     public void setSetPublicReadAclOnPutObject(Boolean setPublicReadAclOnPutObject) {\n444       this.setPublicReadAclOnPutObject = setPublicReadAclOnPutObject;\n445     }\n446 \n447     public Integer getMaxNumberOfFailedOperations() {\n448       return maxNumberOfFailedOperations;\n449     }\n450 \n451     public void setMaxNumberOfFailedOperations(Integer maxNumberOfFailedOperations) {\n452       this.maxNumberOfFailedOperations = maxNumberOfFailedOperations;\n453     }\n454   }\n455 }\n456 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java]\n[start of services/distribution/src/main/resources/application.yaml]\n1 ---\n2 logging:\n3   level:\n4     org:\n5       springframework:\n6         web: INFO\n7     app:\n8       coronawarn: INFO\n9 \n10 services:\n11   distribution:\n12     output-file-name: index\n13     retention-days: 14\n14     expiry-policy-minutes: 120\n15     shifting-policy-threshold: 140\n16     include-incomplete-days: false\n17     include-incomplete-hours: false\n18     paths:\n19       output: out\n20       privatekey: ${VAULT_FILESIGNING_SECRET}\n21     tek-export:\n22       file-name: export.bin\n23       file-header: EK Export v1\n24       file-header-width: 16\n25     api:\n26       version-path: version\n27       version-v1: v1\n28       country-path: country\n29       country-germany: DE\n30       date-path: date\n31       hour-path: hour\n32       diagnosis-keys-path: diagnosis-keys\n33       parameters-path: configuration\n34       app-config-file-name: app_config\n35     signature:\n36       verification-key-id: 262\n37       verification-key-version: v1\n38       algorithm-oid: 1.2.840.10045.4.3.2\n39       algorithm-name: SHA256withECDSA\n40       file-name: export.sig\n41       security-provider: BC\n42     # Configuration for the S3 compatible object storage hosted by Telekom in Germany\n43     objectstore:\n44       access-key: ${CWA_OBJECTSTORE_ACCESSKEY:accessKey1}\n45       secret-key: ${CWA_OBJECTSTORE_SECRETKEY:verySecretKey1}\n46       endpoint: ${CWA_OBJECTSTORE_ENDPOINT:http://localhost}\n47       bucket: ${CWA_OBJECTSTORE_BUCKET:cwa}\n48       port: ${CWA_OBJECTSTORE_PORT:8003}\n49       set-public-read-acl-on-put-object: true\n50       retry-attempts: 3\n51       retry-backoff: 2000\n52       max-number-of-failed-operations: 5\n53 \n54 spring:\n55   main:\n56     web-application-type: NONE\n57 # Postgres configuration\n58   jpa:\n59     hibernate:\n60       ddl-auto: validate\n61   flyway:\n62     enabled: true\n63     locations: classpath:db/migration/postgres\n64     password: ${POSTGRESQL_PASSWORD_FLYWAY:postgres}\n65     user: ${POSTGRESQL_USER_FLYWAY:postgres}\n66 \n67   datasource:\n68     driver-class-name: org.postgresql.Driver\n69     url: jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/${POSTGRESQL_DATABASE:cwa}\n70     username: ${POSTGRESQL_USER_DISTRIBUTION:postgres}\n71     password: ${POSTGRESQL_PASSWORD_DISTRIBUTION:postgres}\n72 \n[end of services/distribution/src/main/resources/application.yaml]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Sure, here is the patch file for the provided issue:\n\n```diff\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n@@ -42,6 +42,7 @@ public abstract class DiagnosisKeyBundler {\n   protected final int minNumberOfKeysPerBundle;\n   protected final long expiryPolicyMinutes;\n \n+  protected final long maxFileSizeBytes = 16 * 1024 * 1024; // 16MB\n \n   // The hour at which the distribution runs. This field is needed to prevent the run from distributing any keys that\n   // have already been submitted but may only be distributed in the future (e.g. because they are not expired yet).\n@@ -84,6 +85,11 @@ public abstract class DiagnosisKeyBundler {\n    */\n   public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys, LocalDateTime distributionTime) {\n     this.distributionTime = distributionTime;\n+    for (DiagnosisKey diagnosisKey : diagnosisKeys) {\n+      if (diagnosisKey.getPayload().length > maxFileSizeBytes) {\n+        throw new IllegalArgumentException(\"Exposure key file size exceeds the maximum limit of 16MB\");\n+      }\n+    }\n     this.createDiagnosisKeyDistributionMap(diagnosisKeys);\n   }\n \n@@ -101,6 +107,7 @@ public abstract class DiagnosisKeyBundler {\n    */\n   protected abstract void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys);\n \n+\n   /**\n    * Returns all {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.\n    */\n```\n\nPlease let me know if you need any further assistance.",
        "model_patch": "--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n@@ -42,6 +42,7 @@ public abstract class DiagnosisKeyBundler {\n   protected final int minNumberOfKeysPerBundle;\n   protected final long expiryPolicyMinutes;\n \n+  protected final long maxFileSizeBytes = 16 * 1024 * 1024; // 16MB\n \n   // The hour at which the distribution runs. This field is needed to prevent the run from distributing any keys that\n   // have already been submitted but may only be distributed in the future (e.g. because they are not expired yet).\n@@ -84,6 +85,11 @@ public abstract class DiagnosisKeyBundler {\n    */\n   public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys, LocalDateTime distributionTime) {\n     this.distributionTime = distributionTime;\n+    for (DiagnosisKey diagnosisKey : diagnosisKeys) {\n+      if (diagnosisKey.getPayload().length > maxFileSizeBytes) {\n+        throw new IllegalArgumentException(\"Exposure key file size exceeds the maximum limit of 16MB\");\n+      }\n+    }\n     this.createDiagnosisKeyDistributionMap(diagnosisKeys);\n   }\n \n@@ -101,6 +107,7 @@ public abstract class DiagnosisKeyBundler {\n    */\n   protected abstract void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys);\n \n+\n   /**\n    * Returns all {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.\n    */\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 463,
        "issue_numbers": [
            "444"
        ],
        "base_commit": "eb68e1126a4f9bcb169afef6a2ca1dbbbcf8b3cd",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n@@ -27,6 +27,7 @@\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n import java.time.LocalDate;\n import java.time.LocalDateTime;\n+import java.time.temporal.Temporal;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n@@ -35,12 +36,16 @@\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * An instance of this class contains a collection of {@link DiagnosisKey DiagnosisKeys}.\n  */\n public abstract class DiagnosisKeyBundler {\n \n+  private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyBundler.class);\n+\n   /**\n    * The submission timestamp is counted in 1 hour intervals since epoch.\n    */\n@@ -51,8 +56,9 @@ public abstract class DiagnosisKeyBundler {\n    */\n   public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);\n \n-  protected final int minNumberOfKeysPerBundle;\n   protected final long expiryPolicyMinutes;\n+  protected final int minNumberOfKeysPerBundle;\n+  private final int maxNumberOfKeysPerBundle;\n \n   // The hour at which the distribution runs. This field is needed to prevent the run from distributing any keys that\n   // have already been submitted but may only be distributed in the future (e.g. because they are not expired yet).\n@@ -61,9 +67,13 @@ public abstract class DiagnosisKeyBundler {\n   // A map containing diagnosis keys, grouped by the LocalDateTime on which they may be distributed\n   protected final Map<LocalDateTime, List<DiagnosisKey>> distributableDiagnosisKeys = new HashMap<>();\n \n+  /**\n+   * Constructs a DiagnosisKeyBundler based on the specified service configuration.\n+   */\n   public DiagnosisKeyBundler(DistributionServiceConfig distributionServiceConfig) {\n-    this.minNumberOfKeysPerBundle = distributionServiceConfig.getShiftingPolicyThreshold();\n     this.expiryPolicyMinutes = distributionServiceConfig.getExpiryPolicyMinutes();\n+    this.minNumberOfKeysPerBundle = distributionServiceConfig.getShiftingPolicyThreshold();\n+    this.maxNumberOfKeysPerBundle = distributionServiceConfig.getMaximumNumberOfKeysPerBundle();\n   }\n \n   /**\n@@ -106,9 +116,14 @@ public List<DiagnosisKey> getAllDiagnosisKeys() {\n   public Set<LocalDate> getDatesWithDistributableDiagnosisKeys() {\n     return this.distributableDiagnosisKeys.keySet().stream()\n         .map(LocalDateTime::toLocalDate)\n+        .filter(this::numberOfKeysForDateBelowMaximum)\n         .collect(Collectors.toSet());\n   }\n \n+  public boolean numberOfKeysForDateBelowMaximum(LocalDate date) {\n+    return numberOfKeysBelowMaximum(getDiagnosisKeysForDate(date).size(), date);\n+  }\n+\n   /**\n    * Returns a set of all {@link LocalDateTime hours} of a specified {@link LocalDate date} during which {@link\n    * DiagnosisKey diagnosis keys} shall be distributed.\n@@ -116,9 +131,23 @@ public Set<LocalDate> getDatesWithDistributableDiagnosisKeys() {\n   public Set<LocalDateTime> getHoursWithDistributableDiagnosisKeys(LocalDate currentDate) {\n     return this.distributableDiagnosisKeys.keySet().stream()\n         .filter(dateTime -> dateTime.toLocalDate().equals(currentDate))\n+        .filter(this::numberOfKeysForHourBelowMaximum)\n         .collect(Collectors.toSet());\n   }\n \n+  private boolean numberOfKeysForHourBelowMaximum(LocalDateTime hour) {\n+    return numberOfKeysBelowMaximum(getDiagnosisKeysForHour(hour).size(), hour);\n+  }\n+\n+  private boolean numberOfKeysBelowMaximum(int numberOfKeys, Temporal time) {\n+    if (numberOfKeys > maxNumberOfKeysPerBundle) {\n+      logger.error(\"Number of diagnosis keys ({}) for {} exceeds the configured maximum.\", numberOfKeys, time);\n+      return false;\n+    } else {\n+      return true;\n+    }\n+  }\n+\n   /**\n    * Returns the submission timestamp of a {@link DiagnosisKey} as a {@link LocalDateTime}.\n    */\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java\n@@ -67,6 +67,6 @@ public void prepare(ImmutableStack<Object> indices) {\n \n   private IndexDirectory<LocalDate, WritableOnDisk> decorateDateDirectory(DiagnosisKeysDateDirectory dateDirectory) {\n     return new DateAggregatingDecorator(new DateIndexingDecorator(dateDirectory, distributionServiceConfig),\n-        cryptoProvider, distributionServiceConfig);\n+        cryptoProvider, distributionServiceConfig, diagnosisKeyBundler);\n   }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java\n@@ -25,6 +25,7 @@\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKeyExport;\n import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.singing.DiagnosisKeySigningDecorator;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;\n import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n@@ -54,15 +55,17 @@ public class DateAggregatingDecorator extends IndexDirectoryDecorator<LocalDate,\n \n   private final CryptoProvider cryptoProvider;\n   private final DistributionServiceConfig distributionServiceConfig;\n+  private final DiagnosisKeyBundler diagnosisKeyBundler;\n \n   /**\n    * Creates a new DateAggregatingDecorator.\n    */\n   public DateAggregatingDecorator(IndexDirectory<LocalDate, WritableOnDisk> directory, CryptoProvider cryptoProvider,\n-      DistributionServiceConfig distributionServiceConfig) {\n+      DistributionServiceConfig distributionServiceConfig, DiagnosisKeyBundler diagnosisKeyBundler) {\n     super(directory);\n     this.cryptoProvider = cryptoProvider;\n     this.distributionServiceConfig = distributionServiceConfig;\n+    this.diagnosisKeyBundler = diagnosisKeyBundler;\n   }\n \n   @Override\n@@ -77,6 +80,7 @@ public void prepare(ImmutableStack<Object> indices) {\n     }\n \n     Set<String> dates = this.getIndex(indices).stream()\n+        .filter(diagnosisKeyBundler::numberOfKeysForDateBelowMaximum)\n         .map(this.getIndexFormatter())\n         .map(Object::toString)\n         .collect(Collectors.toSet());\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/io/IO.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/io/IO.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/io/IO.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/io/IO.java\n@@ -30,6 +30,11 @@\n  */\n public class IO {\n \n+  /**\n+   * The maximum acceptable file size in bytes.\n+   */\n+  public static final int MAXIMUM_FILE_SIZE = 16000000;\n+\n   private IO() {\n   }\n \n@@ -51,12 +56,20 @@ public static void makeNewFile(File root, String name) {\n   }\n \n   /**\n-   * Writes bytes into a file.\n+   * Writes bytes into a file. If the resulting file would exceed the specified maximum file size, it is not written but\n+   * removed instead.\n    *\n    * @param bytes      The content to write\n    * @param outputFile The file to write the content into.\n    */\n   public static void writeBytesToFile(byte[] bytes, File outputFile) {\n+    if (bytes.length > MAXIMUM_FILE_SIZE) {\n+      String fileName = outputFile.getName();\n+      throw new UncheckedIOException(\n+          new IOException(\n+              \"File size of \" + bytes.length + \" bytes exceeds the maximum file size. Deleting\" + fileName));\n+    }\n+\n     try (FileOutputStream outputFileStream = new FileOutputStream(outputFile)) {\n       outputFileStream.write(bytes);\n     } catch (IOException e) {\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/config/DistributionServiceConfig.java\n@@ -33,6 +33,7 @@ public class DistributionServiceConfig {\n   private Integer retentionDays;\n   private Integer expiryPolicyMinutes;\n   private Integer shiftingPolicyThreshold;\n+  private Integer maximumNumberOfKeysPerBundle;\n   private String outputFileName;\n   private Boolean includeIncompleteDays;\n   private Boolean includeIncompleteHours;\n@@ -81,6 +82,14 @@ public void setShiftingPolicyThreshold(Integer shiftingPolicyThreshold) {\n     this.shiftingPolicyThreshold = shiftingPolicyThreshold;\n   }\n \n+  public Integer getMaximumNumberOfKeysPerBundle() {\n+    return this.maximumNumberOfKeysPerBundle;\n+  }\n+\n+  public void setMaximumNumberOfKeysPerBundle(Integer maximumNumberOfKeysPerBundle) {\n+    this.maximumNumberOfKeysPerBundle = maximumNumberOfKeysPerBundle;\n+  }\n+\n   public String getOutputFileName() {\n     return outputFileName;\n   }\ndiff --git a/services/distribution/src/main/resources/application.yaml b/services/distribution/src/main/resources/application.yaml\n--- a/services/distribution/src/main/resources/application.yaml\n+++ b/services/distribution/src/main/resources/application.yaml\n@@ -13,6 +13,7 @@ services:\n     retention-days: 14\n     expiry-policy-minutes: 120\n     shifting-policy-threshold: 140\n+    maximum-number-of-keys-per-bundle: 600000\n     include-incomplete-days: false\n     include-incomplete-hours: false\n     paths:\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateIndexingDecoratorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateIndexingDecoratorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateIndexingDecoratorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateIndexingDecoratorTest.java\n@@ -22,6 +22,8 @@\n \n import static app.coronawarn.server.services.distribution.common.Helpers.buildDiagnosisKeys;\n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n@@ -96,6 +98,30 @@ void excludesCurrentDateFromIndex() {\n     assertThat(index).doesNotContain(LocalDate.of(1970, 1, 5));\n   }\n \n+  @Test\n+  void excludesDatesThatExceedTheMaximumNumberOfKeys() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .of(buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 6, 0), 1),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 10, 0), 1))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+\n+    DistributionServiceConfig svcConfig = mock(DistributionServiceConfig.class);\n+    when(svcConfig.getExpiryPolicyMinutes()).thenReturn(120);\n+    when(svcConfig.getShiftingPolicyThreshold()).thenReturn(1);\n+    when(svcConfig.getMaximumNumberOfKeysPerBundle()).thenReturn(1);\n+\n+    DiagnosisKeyBundler diagnosisKeyBundler = new ProdDiagnosisKeyBundler(svcConfig);\n+    diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+\n+    DateIndexingDecorator decorator = makeDecoratedDateDirectory(diagnosisKeyBundler);\n+\n+    decorator.prepare(new ImmutableStack<>().push(\"DE\"));\n+\n+    Set<LocalDate> index = decorator.getIndex(new ImmutableStack<>());\n+    assertThat(index).isEmpty();\n+  }\n+\n   private DateIndexingDecorator makeDecoratedDateDirectory(DiagnosisKeyBundler diagnosisKeyBundler) {\n     return new DateIndexingDecorator(\n         new DiagnosisKeysDateDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig),\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/HourIndexingDecoratorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/HourIndexingDecoratorTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/HourIndexingDecoratorTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/HourIndexingDecoratorTest.java\n@@ -22,6 +22,8 @@\n \n import static app.coronawarn.server.services.distribution.common.Helpers.buildDiagnosisKeys;\n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n@@ -34,8 +36,6 @@\n import java.time.LocalDateTime;\n import java.util.List;\n import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n@@ -65,26 +65,27 @@ void setup() {\n   }\n \n   @Test\n-  void excludesEmptyHoursFromIndex() {\n-    List<DiagnosisKey> diagnosisKeys = Stream\n-        .of(buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 4, 0), 5),\n-            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 5, 0), 0),\n-            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 6, 0), 5))\n-        .flatMap(List::stream)\n-        .collect(Collectors.toList());\n+  void excludesHoursThatExceedTheMaximumNumberOfKeys() {\n+    List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 4, 0), 2);\n+\n+    DistributionServiceConfig svcConfig = mock(DistributionServiceConfig.class);\n+    when(svcConfig.getExpiryPolicyMinutes()).thenReturn(120);\n+    when(svcConfig.getShiftingPolicyThreshold()).thenReturn(1);\n+    when(svcConfig.getMaximumNumberOfKeysPerBundle()).thenReturn(1);\n+\n+    DiagnosisKeyBundler diagnosisKeyBundler = new ProdDiagnosisKeyBundler(svcConfig);\n     diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+\n     HourIndexingDecorator decorator = makeDecoratedHourDirectory(diagnosisKeyBundler);\n-    decorator.prepare(new ImmutableStack<>().push(\"DE\").push(LocalDate.of(1970, 1, 3)));\n \n+    decorator.prepare(new ImmutableStack<>().push(\"DE\").push(LocalDate.of(1970, 1, 3)));\n     Set<LocalDateTime> index = decorator.getIndex(new ImmutableStack<>().push(LocalDate.of(1970, 1, 3)));\n \n-    assertThat(index).contains(LocalDateTime.of(1970, 1, 3, 4, 0));\n-    assertThat(index).doesNotContain(LocalDateTime.of(1970, 1, 3, 5, 0));\n-    assertThat(index).contains(LocalDateTime.of(1970, 1, 3, 6, 0));\n+    assertThat(index).isEmpty();\n   }\n \n   @Test\n-  void excludesCurrentHourFromIndex() {\n+  void excludesEmptyHoursFromIndex() {\n     List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 5, 0, 0), 5);\n     diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 1, 0));\n     HourIndexingDecorator decorator = makeDecoratedHourDirectory(diagnosisKeyBundler);\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/io/IOTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/io/IOTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/io/IOTest.java\n@@ -0,0 +1,42 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.io;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+import java.io.File;\n+import java.io.UncheckedIOException;\n+import org.junit.jupiter.api.Test;\n+\n+class IOTest {\n+\n+  @Test\n+  void doesNotWriteIfMaximumFileSize() {\n+    File file = mock(File.class);\n+    assertThatExceptionOfType(UncheckedIOException.class)\n+        .isThrownBy(() -> IO.writeBytesToFile(new byte[IO.MAXIMUM_FILE_SIZE + 1], file));\n+    verify(file, never()).getPath();\n+  }\n+}\ndiff --git a/services/distribution/src/test/resources/application.yaml b/services/distribution/src/test/resources/application.yaml\n--- a/services/distribution/src/test/resources/application.yaml\n+++ b/services/distribution/src/test/resources/application.yaml\n@@ -11,6 +11,7 @@ services:\n     retention-days: 14\n     expiry-policy-minutes: 120\n     shifting-policy-threshold: 5\n+    maximum-number-of-keys-per-bundle: 600000\n     include-incomplete-days: false\n     include-incomplete-hours: false\n     paths:\n",
        "problem_statement": "Distribution: Add Safeguard to not generate any exposure key file > 16MB\nIn order to prevent issues on the mobile device & potential abuse, add a safeguard, so that we do not publish any files, which are bigger than 16MB. In case this threshold is reached for any file, an error message must be logged.\r\n\r\nMake sure to keep consistency with the index files. In order to align with the current concept of always generating a file, we should generate an empty file in this case as well.\r\n\r\n@pithumke \r\n\r\n\r\n\r\n\n",
        "hints_text": "> In order to align with the current concept of always generating a file, we should generate an empty file in this case as well.\r\n\r\nWill skip generating files larger than 600,000 keys in order to stay constistent with the current implementation.",
        "created_at": "2020-06-05T22:23:20Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-308",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nApple's Proposal for Exposure Key Validation\n#92  Current Implementation\r\n\r\nWe used sensible assumptions for key validation.\r\n\r\n## Suggested Enhancement\r\n\r\n[Apple proposes](https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server?changes=latest_beta): \r\n\r\n> An EN server must reject invalid key files uploaded from a client app. Uploaded key data is considered invalid if:\r\n>\r\n> Any ENIntervalNumber values from the same user are not unique\r\n> \r\n> There are any gaps in the ENIntervalNumber values for a user\r\n> \r\n> Any keys in the file have overlapping time windows\r\n> \r\n> The period of time covered by the data file exceeds 14 days\r\n> \r\n> The TEKRollingPeriod value is not 144\r\n> \r\n> You may optionally want to validate the clock time the device submits.\r\n\r\n## Expected Benefits\r\n\r\nAdherence to reference implementations.\n\n</issue>\n\n<code>\n[start of README.md]\n1 <h1 align=\"center\">\n2     Corona-Warn-App Server\n3 </h1>\n4 \n5 <p align=\"center\">\n6     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n9         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n10         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n11     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n12 </p>\n13 \n14 <p align=\"center\">\n15   <a href=\"#development\">Development</a> \u2022\n16   <a href=\"#service-apis\">Service APIs</a> \u2022\n17   <a href=\"#documentation\">Documentation</a> \u2022\n18   <a href=\"#support-and-feedback\">Support</a> \u2022\n19   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n20   <a href=\"#contributors\">Contributors</a> \u2022\n21   <a href=\"#repositories\">Repositories</a> \u2022\n22   <a href=\"#licensing\">Licensing</a>\n23 </p>\n24 \n25 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n26 \n27 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n28 \n29 ## Architecture Overview\n30 \n31 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n32 a good starting point in how the backend services interact with other services, and what purpose\n33 they serve.\n34 \n35 ## Development\n36 \n37 After you've checked out this repository, you can run the application in one of the following ways:\n38 \n39 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n40   * Single components using the respective Dockerfile or\n41   * The full backend using the Docker Compose (which is considered the most convenient way)\n42 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n43   If you want to develop something in a single component, this approach is preferable.\n44 \n45 ### Docker-Based Deployment\n46 \n47 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n48 \n49 #### Running the Full CWA Backend Using Docker Compose\n50 \n51 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n52 \n53 Once the services are built, you can start the whole backend using ```docker-compose up```.\n54 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n55 \n56 The docker-compose contains the following services:\n57 \n58 Service           | Description | Endpoint and Default Credentials\n59 ------------------|-------------|-----------\n60 submission        | The Corona-Warn-App submission service                                                      | http://localhost:8000 <br> http://localhost:8005 (for actuator endpoint)\n61 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n62 postgres          | A [postgres] database installation                                                          | postgres:8001 <br> Username: postgres <br> Password: postgres\n63 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | http://localhost:8002 <br> Username: user@domain.com <br> Password: password\n64 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | http://localhost:8003/ <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n65 verification-fake | A very simple fake implementation for the tan verification.                                 | http://localhost:8004/version/v1/tan/verify <br> The only valid tan is \"b69ab69f-9823-4549-8961-c41sa74b2f36\"\n66 \n67 ##### Known Limitation\n68 \n69 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n70 \n71 #### Running Single CWA Services Using Docker\n72 \n73 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n74 \n75 To build and run the distribution service, run the following command:\n76 \n77 ```bash\n78 ./services/distribution/build_and_run.sh\n79 ```\n80 \n81 To build and run the submission service, run the following command:\n82 \n83 ```bash\n84 ./services/submission/build_and_run.sh\n85 ```\n86 \n87 The submission service is available on [localhost:8080](http://localhost:8080 ).\n88 \n89 ### Maven-Based Build\n90 \n91 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n92 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n93 \n94 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n95 * [Maven 3.6](https://maven.apache.org/)\n96 * [Postgres]\n97 * [Zenko CloudServer]\n98 \n99 #### Configure\n100 \n101 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n102 \n103 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n104 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the certificate and private key for the distribution service, the paths need to be prefixed with `file:`\n106     * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n107     * `VAULT_FILESIGNING_CERT` should be the path to the certificate, example available in `<repo-root>/docker-compose-test-secrets/certificate.cert`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json\n141 Distribution Service      | https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json\n142 \n143 ## Spring Profiles\n144 \n145 #### Distribution\n146 \n147 Profile      | Effect\n148 -------------|-------------\n149 `dev`        | Turns the log level to `DEBUG`.\n150 `cloud`      | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`       | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten.\n152 `testdata`   | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 \n154 #### Submission\n155 \n156 Profile      | Effect\n157 -------------|-------------\n158 `dev`        | Turns the log level to `DEBUG`.\n159 `cloud`      | Removes default values for the `datasource` configuration.\n160 \n161 ## Documentation\n162 \n163 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n164 \n165 ## Support and Feedback\n166 \n167 The following channels are available for discussions, feedback, and support requests:\n168 \n169 | Type                     | Channel                                                |\n170 | ------------------------ | ------------------------------------------------------ |\n171 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n172 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n173 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n174 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n175 \n176 ## How to Contribute\n177 \n178 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n179 \n180 ## Contributors\n181 \n182 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n183 \n184 ## Repositories\n185 \n186 The following public repositories are currently available for the Corona-Warn-App:\n187 \n188 | Repository          | Description                                                           |\n189 | ------------------- | --------------------------------------------------------------------- |\n190 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n191 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n192 | [cwa-verification-server] | Backend implementation of the verification process|\n193 \n194 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n195 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n196 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n197 [Postgres]: https://www.postgresql.org/\n198 [HSQLDB]: http://hsqldb.org/\n199 [Zenko CloudServer]: https://github.com/scality/cloudserver\n200 \n201 ## Licensing\n202 \n203 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n204 \n205 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n206 \n207 You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0.\n208 \n209 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n210 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.common.persistence.domain;\n21 \n22 import static java.time.ZoneOffset.UTC;\n23 \n24 import app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;\n25 import app.coronawarn.server.common.persistence.domain.validation.ValidRollingStartIntervalNumber;\n26 import java.time.Instant;\n27 import java.time.LocalDateTime;\n28 import java.util.Arrays;\n29 import java.util.Objects;\n30 import java.util.Set;\n31 import javax.persistence.Entity;\n32 import javax.persistence.GeneratedValue;\n33 import javax.persistence.GenerationType;\n34 import javax.persistence.Id;\n35 import javax.persistence.Table;\n36 import javax.validation.ConstraintViolation;\n37 import javax.validation.Validation;\n38 import javax.validation.Validator;\n39 import javax.validation.constraints.Min;\n40 import javax.validation.constraints.Size;\n41 import org.hibernate.validator.constraints.Range;\n42 \n43 /**\n44  * A key generated for advertising over a window of time.\n45  */\n46 @Entity\n47 @Table(name = \"diagnosis_key\")\n48 public class DiagnosisKey {\n49   private static final Validator VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n50 \n51   @Id\n52   @GeneratedValue(strategy = GenerationType.IDENTITY)\n53   private Long id;\n54 \n55   @Size(min = 16, max = 16, message = \"Key data must be a byte array of length 16.\")\n56   private byte[] keyData;\n57 \n58   @ValidRollingStartIntervalNumber\n59   private int rollingStartIntervalNumber;\n60 \n61   @Min(value = 1, message = \"Rolling period must be greater than 0.\")\n62   private int rollingPeriod;\n63 \n64   @Range(min = 0, max = 8, message = \"Risk level must be between 0 and 8.\")\n65   private int transmissionRiskLevel;\n66 \n67   private long submissionTimestamp;\n68 \n69   protected DiagnosisKey() {\n70   }\n71 \n72   /**\n73    * Should be called by builders.\n74    */\n75   DiagnosisKey(byte[] keyData, int rollingStartIntervalNumber, int rollingPeriod,\n76       int transmissionRiskLevel, long submissionTimestamp) {\n77     this.keyData = keyData;\n78     this.rollingStartIntervalNumber = rollingStartIntervalNumber;\n79     this.rollingPeriod = rollingPeriod;\n80     this.transmissionRiskLevel = transmissionRiskLevel;\n81     this.submissionTimestamp = submissionTimestamp;\n82   }\n83 \n84   /**\n85    * Returns a DiagnosisKeyBuilder instance. A {@link DiagnosisKey} can then be build by either providing the required\n86    * member values or by passing the respective protocol buffer object.\n87    *\n88    * @return DiagnosisKeyBuilder instance.\n89    */\n90   public static Builder builder() {\n91     return new DiagnosisKeyBuilder();\n92   }\n93 \n94   public Long getId() {\n95     return id;\n96   }\n97 \n98   /**\n99    * Returns the diagnosis key.\n100    */\n101   public byte[] getKeyData() {\n102     return keyData;\n103   }\n104 \n105   /**\n106    * Returns a number describing when a key starts. It is equal to startTimeOfKeySinceEpochInSecs / (60 * 10).\n107    */\n108   public int getRollingStartIntervalNumber() {\n109     return rollingStartIntervalNumber;\n110   }\n111 \n112   /**\n113    * Returns a number describing how long a key is valid. It is expressed in increments of 10 minutes (e.g. 144 for 24\n114    * hours).\n115    */\n116   public int getRollingPeriod() {\n117     return rollingPeriod;\n118   }\n119 \n120   /**\n121    * Returns the risk of transmission associated with the person this key came from.\n122    */\n123   public int getTransmissionRiskLevel() {\n124     return transmissionRiskLevel;\n125   }\n126 \n127   /**\n128    * Returns the timestamp associated with the submission of this {@link DiagnosisKey} as hours since epoch.\n129    */\n130   public long getSubmissionTimestamp() {\n131     return submissionTimestamp;\n132   }\n133 \n134   /**\n135    * Checks if this diagnosis key falls into the period between now, and the retention threshold.\n136    *\n137    * @param daysToRetain the number of days before a key is outdated\n138    * @return true, if the rolling start number is in the time span between now, and the given days to retain\n139    * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n140    */\n141   public boolean isYoungerThanRetentionThreshold(int daysToRetain) {\n142     if (daysToRetain < 0) {\n143       throw new IllegalArgumentException(\"Retention threshold must be greater or equal to 0.\");\n144     }\n145     long threshold = LocalDateTime\n146         .ofInstant(Instant.now(), UTC)\n147         .minusDays(daysToRetain)\n148         .toEpochSecond(UTC) / (60 * 10);\n149 \n150     return this.rollingStartIntervalNumber >= threshold;\n151   }\n152 \n153   /**\n154    * Gets any constraint violations that this key might incorporate.\n155    *\n156    * <p><ul>\n157    * <li>Risk level must be between 0 and 8\n158    * <li>Rolling start number must be greater than 0\n159    * <li>Rolling start number cannot be in the future\n160    * <li>Rolling period must be positive number\n161    * <li>Key data must be byte array of length 16\n162    * </ul>\n163    *\n164    * @return A set of constraint violations of this key.\n165    */\n166   public Set<ConstraintViolation<DiagnosisKey>> validate() {\n167     return VALIDATOR.validate(this);\n168   }\n169 \n170   @Override\n171   public boolean equals(Object o) {\n172     if (this == o) {\n173       return true;\n174     }\n175     if (o == null || getClass() != o.getClass()) {\n176       return false;\n177     }\n178     DiagnosisKey that = (DiagnosisKey) o;\n179     return rollingStartIntervalNumber == that.rollingStartIntervalNumber\n180         && rollingPeriod == that.rollingPeriod\n181         && transmissionRiskLevel == that.transmissionRiskLevel\n182         && submissionTimestamp == that.submissionTimestamp\n183         && Objects.equals(id, that.id)\n184         && Arrays.equals(keyData, that.keyData);\n185   }\n186 \n187   @Override\n188   public int hashCode() {\n189     int result = Objects\n190         .hash(id, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n191     result = 31 * result + Arrays.hashCode(keyData);\n192     return result;\n193   }\n194 }\n195 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.common.persistence.domain;\n21 \n22 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;\n23 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.FinalBuilder;\n24 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.RollingPeriodBuilder;\n25 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.RollingStartIntervalNumberBuilder;\n26 import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.TransmissionRiskLevelBuilder;\n27 \n28 import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;\n29 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n30 import java.time.Instant;\n31 import java.util.Set;\n32 import java.util.stream.Collectors;\n33 import javax.validation.ConstraintViolation;\n34 import org.slf4j.Logger;\n35 import org.slf4j.LoggerFactory;\n36 \n37 /**\n38  * An instance of this builder can be retrieved by calling {@link DiagnosisKey#builder()}. A {@link DiagnosisKey} can\n39  * then be build by either providing the required member values or by passing the respective protocol buffer object.\n40  */\n41 public class DiagnosisKeyBuilder implements Builder, RollingStartIntervalNumberBuilder,\n42     RollingPeriodBuilder, TransmissionRiskLevelBuilder, FinalBuilder {\n43 \n44   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyBuilder.class);\n45 \n46   private byte[] keyData;\n47   private int rollingStartIntervalNumber;\n48   private int rollingPeriod;\n49   private int transmissionRiskLevel;\n50   private long submissionTimestamp = -1L;\n51 \n52   DiagnosisKeyBuilder() {\n53   }\n54 \n55   @Override\n56   public RollingStartIntervalNumberBuilder withKeyData(byte[] keyData) {\n57     this.keyData = keyData;\n58     return this;\n59   }\n60 \n61   @Override\n62   public RollingPeriodBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber) {\n63     this.rollingStartIntervalNumber = rollingStartIntervalNumber;\n64     return this;\n65   }\n66 \n67   @Override\n68   public TransmissionRiskLevelBuilder withRollingPeriod(int rollingPeriod) {\n69     this.rollingPeriod = rollingPeriod;\n70     return this;\n71   }\n72 \n73   @Override\n74   public FinalBuilder withTransmissionRiskLevel(int transmissionRiskLevel) {\n75     this.transmissionRiskLevel = transmissionRiskLevel;\n76     return this;\n77   }\n78 \n79   @Override\n80   public FinalBuilder fromProtoBuf(TemporaryExposureKey protoBufObject) {\n81     return this\n82         .withKeyData(protoBufObject.getKeyData().toByteArray())\n83         .withRollingStartIntervalNumber(protoBufObject.getRollingStartIntervalNumber())\n84         .withRollingPeriod(protoBufObject.getRollingPeriod())\n85         .withTransmissionRiskLevel(protoBufObject.getTransmissionRiskLevel());\n86   }\n87 \n88   @Override\n89   public FinalBuilder withSubmissionTimestamp(long submissionTimestamp) {\n90     this.submissionTimestamp = submissionTimestamp;\n91     return this;\n92   }\n93 \n94   @Override\n95   public DiagnosisKey build() {\n96     if (submissionTimestamp < 0) {\n97       // hours since epoch\n98       submissionTimestamp = Instant.now().getEpochSecond() / 3600L;\n99     }\n100 \n101     var diagnosisKey = new DiagnosisKey(\n102         keyData, rollingStartIntervalNumber, rollingPeriod, transmissionRiskLevel, submissionTimestamp);\n103     return throwIfValidationFails(diagnosisKey);\n104   }\n105 \n106   private DiagnosisKey throwIfValidationFails(DiagnosisKey diagnosisKey) {\n107     Set<ConstraintViolation<DiagnosisKey>> violations = diagnosisKey.validate();\n108 \n109     if (!violations.isEmpty()) {\n110       String violationsMessage = violations.stream()\n111           .map(violation -> String.format(\"%s Invalid Value: %s\", violation.getMessage(), violation.getInvalidValue()))\n112           .collect(Collectors.toList()).toString();\n113       logger.debug(violationsMessage);\n114       throw new InvalidDiagnosisKeyException(violationsMessage);\n115     }\n116 \n117     return diagnosisKey;\n118   }\n119 }\n120 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.common.persistence.domain;\n21 \n22 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n23 \n24 /**\n25  * This interface bundles interfaces that are used for the implementation of {@link DiagnosisKeyBuilder}.\n26  */\n27 interface DiagnosisKeyBuilders {\n28 \n29   interface Builder {\n30 \n31     /**\n32      * Adds the specified key data to this builder.\n33      *\n34      * @param keyData generated diagnosis key.\n35      * @return this Builder instance.\n36      */\n37     RollingStartIntervalNumberBuilder withKeyData(byte[] keyData);\n38 \n39     /**\n40      * Adds the data contained in the specified protocol buffers key object to this builder.\n41      *\n42      * @param protoBufObject ProtocolBuffer object associated with the temporary exposure key.\n43      * @return this Builder instance.\n44      */\n45     FinalBuilder fromProtoBuf(TemporaryExposureKey protoBufObject);\n46   }\n47 \n48   interface RollingStartIntervalNumberBuilder {\n49 \n50     /**\n51      * Adds the specified rolling start number to this builder.\n52      *\n53      * @param rollingStartIntervalNumber number describing when a key starts. It is equal to\n54      *                                   startTimeOfKeySinceEpochInSecs / (60 * 10).\n55      * @return this Builder instance.\n56      */\n57     RollingPeriodBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber);\n58   }\n59 \n60   interface RollingPeriodBuilder {\n61 \n62     /**\n63      * Adds the specified rolling period to this builder.\n64      *\n65      * @param rollingPeriod Number describing how long a key is valid. It is expressed in increments\n66      *                      of 10 minutes (e.g. 144 for 24 hours).\n67      * @return this Builder instance.\n68      */\n69     TransmissionRiskLevelBuilder withRollingPeriod(int rollingPeriod);\n70   }\n71 \n72   interface TransmissionRiskLevelBuilder {\n73 \n74     /**\n75      * Adds the specified transmission risk level to this builder.\n76      *\n77      * @param transmissionRiskLevel risk of transmission associated with the person this key came from.\n78      * @return this Builder instance.\n79      */\n80     FinalBuilder withTransmissionRiskLevel(int transmissionRiskLevel);\n81   }\n82 \n83   interface FinalBuilder {\n84 \n85     /**\n86      * Adds the specified submission timestamp that is expected to represent hours since epoch.\n87      *\n88      * @param submissionTimestamp timestamp in hours since epoch.\n89      * @return this Builder instance.\n90      */\n91     FinalBuilder withSubmissionTimestamp(long submissionTimestamp);\n92 \n93     /**\n94      * Builds a {@link DiagnosisKey} instance. If no submission timestamp has been specified it will be set to \"now\" as\n95      * hours since epoch.\n96      */\n97     DiagnosisKey build();\n98   }\n99 }\n100 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java]\n[start of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidRollingStartIntervalNumber.java]\n1 /*\n2  * Corona-Warn-App\n3  * SAP SE and all other contributors /\n4  * copyright owners license this file to you under the Apache\n5  * License, Version 2.0 (the \"License\"); you may not use this\n6  * file except in compliance with the License.\n7  * You may obtain a copy of the License at\n8  * http://www.apache.org/licenses/LICENSE-2.0\n9  * Unless required by applicable law or agreed to in writing,\n10  * software distributed under the License is distributed on an\n11  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n12  * KIND, either express or implied.  See the License for the\n13  * specific language governing permissions and limitations\n14  * under the License.\n15  */\n16 \n17 package app.coronawarn.server.common.persistence.domain.validation;\n18 \n19 import java.lang.annotation.Documented;\n20 import java.lang.annotation.ElementType;\n21 import java.lang.annotation.Retention;\n22 import java.lang.annotation.RetentionPolicy;\n23 import java.lang.annotation.Target;\n24 import javax.validation.Constraint;\n25 import javax.validation.Payload;\n26 \n27 @Constraint(validatedBy = ValidRollingStartIntervalNumberValidator.class)\n28 @Target({ElementType.FIELD})\n29 @Retention(RetentionPolicy.RUNTIME)\n30 @Documented\n31 public @interface ValidRollingStartIntervalNumber {\n32 \n33   /**\n34    * Error message.\n35    *\n36    * @return the error message\n37    */\n38   String message() default \"Rolling start number must be greater 0 and cannot be in the future.\";\n39 \n40   /**\n41    * Groups.\n42    *\n43    * @return\n44    */\n45   Class<?>[] groups() default {};\n46 \n47   /**\n48    * Payload.\n49    *\n50    * @return\n51    */\n52   Class<? extends Payload>[] payload() default {};\n53 }\n54 \n[end of common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidRollingStartIntervalNumber.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.distribution.runner;\n21 \n22 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n23 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n24 import app.coronawarn.server.common.protocols.internal.RiskLevel;\n25 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n26 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.TestData;\n27 import java.time.LocalDate;\n28 import java.time.LocalDateTime;\n29 import java.time.ZoneOffset;\n30 import java.util.List;\n31 import java.util.concurrent.TimeUnit;\n32 import java.util.stream.Collectors;\n33 import java.util.stream.IntStream;\n34 import java.util.stream.LongStream;\n35 import org.apache.commons.math3.distribution.PoissonDistribution;\n36 import org.apache.commons.math3.random.JDKRandomGenerator;\n37 import org.apache.commons.math3.random.RandomGenerator;\n38 import org.slf4j.Logger;\n39 import org.slf4j.LoggerFactory;\n40 import org.springframework.boot.ApplicationArguments;\n41 import org.springframework.boot.ApplicationRunner;\n42 import org.springframework.context.annotation.Profile;\n43 import org.springframework.core.annotation.Order;\n44 import org.springframework.stereotype.Component;\n45 \n46 /**\n47  * Generates random diagnosis keys for the time frame between the last diagnosis key in the database and now (last full\n48  * hour) and writes them to the database. If there are no diagnosis keys in the database yet, then random diagnosis keys\n49  * for the time frame between the last full hour and the beginning of the retention period (14 days ago) will be\n50  * generated. The average number of exposure keys to be generated per hour is configurable in the application properties\n51  * (profile = {@code testdata}).\n52  */\n53 @Component\n54 @Order(-1)\n55 @Profile(\"testdata\")\n56 public class TestDataGeneration implements ApplicationRunner {\n57 \n58   private final Logger logger = LoggerFactory.getLogger(TestDataGeneration.class);\n59 \n60   private final Integer retentionDays;\n61 \n62   private final TestData config;\n63 \n64   private final DiagnosisKeyService diagnosisKeyService;\n65 \n66   private final RandomGenerator random = new JDKRandomGenerator();\n67 \n68   private static final int POISSON_MAX_ITERATIONS = 10_000_000;\n69   private static final double POISSON_EPSILON = 1e-12;\n70 \n71   // The submission timestamp is counted in 1 hour intervals since epoch\n72   private static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);\n73 \n74   // The rolling start number is counted in 10 minute intervals since epoch\n75   private static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);\n76 \n77   /**\n78    * Creates a new TestDataGeneration runner.\n79    */\n80   TestDataGeneration(DiagnosisKeyService diagnosisKeyService,\n81       DistributionServiceConfig distributionServiceConfig) {\n82     this.diagnosisKeyService = diagnosisKeyService;\n83     this.retentionDays = distributionServiceConfig.getRetentionDays();\n84     this.config = distributionServiceConfig.getTestData();\n85   }\n86 \n87   /**\n88    * See {@link TestDataGeneration} class documentation.\n89    */\n90   @Override\n91   public void run(ApplicationArguments args) {\n92     writeTestData();\n93   }\n94 \n95   /**\n96    * See {@link TestDataGeneration} class documentation.\n97    */\n98   private void writeTestData() {\n99     logger.debug(\"Querying diagnosis keys from the database...\");\n100     List<DiagnosisKey> existingDiagnosisKeys = diagnosisKeyService.getDiagnosisKeys();\n101 \n102     // Timestamps in hours since epoch. Test data generation starts one hour after the latest diagnosis key in the\n103     // database and ends one hour before the current one.\n104     long startTimestamp = getGeneratorStartTimestamp(existingDiagnosisKeys) + 1; // Inclusive\n105     long endTimestamp = getGeneratorEndTimestamp(); // Exclusive\n106 \n107     // Add the startTimestamp to the seed. Otherwise we would generate the same data every hour.\n108     random.setSeed(this.config.getSeed() + startTimestamp);\n109     PoissonDistribution poisson =\n110         new PoissonDistribution(random, this.config.getExposuresPerHour(), POISSON_EPSILON, POISSON_MAX_ITERATIONS);\n111 \n112     if (startTimestamp == endTimestamp) {\n113       logger.debug(\"Skipping test data generation, latest diagnosis keys are still up-to-date.\");\n114       return;\n115     }\n116     logger.debug(\"Generating diagnosis keys between {} and {}...\", startTimestamp, endTimestamp);\n117     List<DiagnosisKey> newDiagnosisKeys = LongStream.range(startTimestamp, endTimestamp)\n118         .mapToObj(submissionTimestamp -> IntStream.range(0, poisson.sample())\n119             .mapToObj(__ -> generateDiagnosisKey(submissionTimestamp))\n120             .collect(Collectors.toList()))\n121         .flatMap(List::stream)\n122         .collect(Collectors.toList());\n123 \n124     logger.debug(\"Writing {} new diagnosis keys to the database...\", newDiagnosisKeys.size());\n125     diagnosisKeyService.saveDiagnosisKeys(newDiagnosisKeys);\n126 \n127     logger.debug(\"Test data generation finished successfully.\");\n128   }\n129 \n130   /**\n131    * Returns the submission timestamp (in 1 hour intervals since epoch) of the last diagnosis key in the database (or\n132    * the result of {@link TestDataGeneration#getRetentionStartTimestamp} if there are no diagnosis keys in the database\n133    * yet.\n134    */\n135   private long getGeneratorStartTimestamp(List<DiagnosisKey> diagnosisKeys) {\n136     if (diagnosisKeys.isEmpty()) {\n137       return getRetentionStartTimestamp();\n138     } else {\n139       DiagnosisKey latestDiagnosisKey = diagnosisKeys.get(diagnosisKeys.size() - 1);\n140       return latestDiagnosisKey.getSubmissionTimestamp();\n141     }\n142   }\n143 \n144   /**\n145    * Returns the timestamp (in 1 hour intervals since epoch) of the last full hour. Example: If called at 15:38 UTC,\n146    * this function would return the timestamp for today 14:00 UTC.\n147    */\n148   private long getGeneratorEndTimestamp() {\n149     return (LocalDateTime.now().toEpochSecond(ZoneOffset.UTC) / ONE_HOUR_INTERVAL_SECONDS) - 1;\n150   }\n151 \n152   /**\n153    * Returns the timestamp (in 1 hour intervals since epoch) at which the retention period starts. Example: If the\n154    * retention period in the application properties is set to 14 days, then this function would return the timestamp for\n155    * 14 days ago (from now) at 00:00 UTC.\n156    */\n157   private long getRetentionStartTimestamp() {\n158     return LocalDate.now().minusDays(retentionDays).atStartOfDay()\n159         .toEpochSecond(ZoneOffset.UTC) / ONE_HOUR_INTERVAL_SECONDS;\n160   }\n161 \n162   /**\n163    * Returns a random diagnosis key with a specific submission timestamp.\n164    */\n165   private DiagnosisKey generateDiagnosisKey(long submissionTimestamp) {\n166     return DiagnosisKey.builder()\n167         .withKeyData(generateDiagnosisKeyBytes())\n168         .withRollingStartIntervalNumber(generateRollingStartIntervalNumber(submissionTimestamp))\n169         .withRollingPeriod(generateRollingPeriod())\n170         .withTransmissionRiskLevel(generateTransmissionRiskLevel())\n171         .withSubmissionTimestamp(submissionTimestamp)\n172         .build();\n173   }\n174 \n175   /**\n176    * Returns 16 random bytes.\n177    */\n178   private byte[] generateDiagnosisKeyBytes() {\n179     byte[] exposureKey = new byte[16];\n180     random.nextBytes(exposureKey);\n181     return exposureKey;\n182   }\n183 \n184   /**\n185    * Returns a random rolling start number (timestamp since when a key was active, represented by a 10 minute interval\n186    * counter.) between a specific submission timestamp and the beginning of the retention period.\n187    */\n188   private int generateRollingStartIntervalNumber(long submissionTimestamp) {\n189     long maxRollingStartIntervalNumber =\n190         submissionTimestamp * ONE_HOUR_INTERVAL_SECONDS / TEN_MINUTES_INTERVAL_SECONDS;\n191     long minRollingStartIntervalNumber =\n192         maxRollingStartIntervalNumber\n193             - TimeUnit.DAYS.toSeconds(retentionDays) / TEN_MINUTES_INTERVAL_SECONDS;\n194     return Math.toIntExact(getRandomBetween(minRollingStartIntervalNumber, maxRollingStartIntervalNumber));\n195   }\n196 \n197   /**\n198    * Returns a rolling period (number of 10 minute intervals that a key was active for) of 1 day.\n199    */\n200   private int generateRollingPeriod() {\n201     return Math.toIntExact(TimeUnit.DAYS.toSeconds(1) / TEN_MINUTES_INTERVAL_SECONDS);\n202   }\n203 \n204   /**\n205    * Returns a random number between {@link RiskLevel#RISK_LEVEL_LOWEST_VALUE} and {@link\n206    * RiskLevel#RISK_LEVEL_HIGHEST_VALUE}.\n207    */\n208   private int generateTransmissionRiskLevel() {\n209     return Math.toIntExact(\n210         getRandomBetween(RiskLevel.RISK_LEVEL_LOWEST_VALUE, RiskLevel.RISK_LEVEL_HIGHEST_VALUE));\n211   }\n212 \n213   /**\n214    * Returns a random number between {@code minIncluding} and {@code maxIncluding}.\n215    */\n216   private long getRandomBetween(long minIncluding, long maxIncluding) {\n217     return minIncluding + (long) (random.nextDouble() * (maxIncluding - minIncluding));\n218   }\n219 }\n220 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/ApiExceptionHandler.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.submission.controller;\n21 \n22 import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;\n23 import app.coronawarn.server.services.submission.exception.InvalidPayloadException;\n24 import com.google.protobuf.InvalidProtocolBufferException;\n25 import org.slf4j.Logger;\n26 import org.slf4j.LoggerFactory;\n27 import org.springframework.http.HttpStatus;\n28 import org.springframework.http.converter.HttpMessageNotReadableException;\n29 import org.springframework.web.bind.ServletRequestBindingException;\n30 import org.springframework.web.bind.annotation.ExceptionHandler;\n31 import org.springframework.web.bind.annotation.ResponseStatus;\n32 import org.springframework.web.bind.annotation.RestControllerAdvice;\n33 import org.springframework.web.context.request.WebRequest;\n34 \n35 @RestControllerAdvice(\"app.coronawarn.server.services.submission.controller\")\n36 public class ApiExceptionHandler {\n37 \n38   private static final Logger logger = LoggerFactory.getLogger(ApiExceptionHandler.class);\n39 \n40   @ExceptionHandler(Exception.class)\n41   @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n42   public void unknownException(Exception ex, WebRequest wr) {\n43     logger.error(\"Unable to handle {}\", wr.getDescription(false), ex);\n44   }\n45 \n46   @ExceptionHandler({HttpMessageNotReadableException.class, ServletRequestBindingException.class,\n47       InvalidProtocolBufferException.class})\n48   @ResponseStatus(HttpStatus.BAD_REQUEST)\n49   public void bindingExceptions(Exception ex, WebRequest wr) {\n50     logger.error(\"Binding failed {}\", wr.getDescription(false), ex);\n51   }\n52 \n53   @ExceptionHandler({InvalidDiagnosisKeyException.class, InvalidPayloadException.class})\n54   @ResponseStatus(HttpStatus.BAD_REQUEST)\n55   public void diagnosisKeyExceptions(Exception ex, WebRequest wr) {\n56     logger.error(\"Erroneous Submission Payload {}\", wr.getDescription(false), ex);\n57   }\n58 }\n59 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/ApiExceptionHandler.java]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.submission.controller;\n21 \n22 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n23 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n24 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n25 import app.coronawarn.server.common.protocols.internal.SubmissionPayload;\n26 import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;\n27 import app.coronawarn.server.services.submission.exception.InvalidPayloadException;\n28 import app.coronawarn.server.services.submission.verification.TanVerifier;\n29 import java.util.ArrayList;\n30 import java.util.List;\n31 import java.util.concurrent.Executors;\n32 import java.util.concurrent.ForkJoinPool;\n33 import java.util.concurrent.ScheduledExecutorService;\n34 import java.util.concurrent.TimeUnit;\n35 import org.apache.commons.math3.distribution.PoissonDistribution;\n36 import org.slf4j.Logger;\n37 import org.slf4j.LoggerFactory;\n38 import org.springframework.beans.factory.annotation.Autowired;\n39 import org.springframework.http.HttpStatus;\n40 import org.springframework.http.ResponseEntity;\n41 import org.springframework.util.StopWatch;\n42 import org.springframework.web.bind.annotation.PostMapping;\n43 import org.springframework.web.bind.annotation.RequestBody;\n44 import org.springframework.web.bind.annotation.RequestHeader;\n45 import org.springframework.web.bind.annotation.RequestMapping;\n46 import org.springframework.web.bind.annotation.RestController;\n47 import org.springframework.web.context.request.async.DeferredResult;\n48 \n49 @RestController\n50 @RequestMapping(\"/version/v1\")\n51 public class SubmissionController {\n52 \n53   private static final Logger logger = LoggerFactory.getLogger(SubmissionController.class);\n54   /**\n55    * The route to the submission endpoint (version agnostic).\n56    */\n57   public static final String SUBMISSION_ROUTE = \"/diagnosis-keys\";\n58 \n59   private final ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n60   private final ForkJoinPool forkJoinPool = ForkJoinPool.commonPool();\n61   private final DiagnosisKeyService diagnosisKeyService;\n62   private final TanVerifier tanVerifier;\n63   private final Double fakeDelayMovingAverageSamples;\n64   private final Integer retentionDays;\n65   private final Integer maxNumberOfKeys;\n66   private Double fakeDelay;\n67 \n68   @Autowired\n69   SubmissionController(DiagnosisKeyService diagnosisKeyService, TanVerifier tanVerifier,\n70       SubmissionServiceConfig submissionServiceConfig) {\n71     this.diagnosisKeyService = diagnosisKeyService;\n72     this.tanVerifier = tanVerifier;\n73     fakeDelay = submissionServiceConfig.getInitialFakeDelayMilliseconds();\n74     fakeDelayMovingAverageSamples = submissionServiceConfig.getFakeDelayMovingAverageSamples();\n75     retentionDays = submissionServiceConfig.getRetentionDays();\n76     maxNumberOfKeys = submissionServiceConfig.getMaxNumberOfKeys();\n77   }\n78 \n79   /**\n80    * Handles diagnosis key submission requests.\n81    *\n82    * @param exposureKeys The unmarshalled protocol buffers submission payload.\n83    * @param fake         A header flag, marking fake requests.\n84    * @param tan          A tan for diagnosis verification.\n85    * @return An empty response body.\n86    */\n87   @PostMapping(SUBMISSION_ROUTE)\n88   public DeferredResult<ResponseEntity<Void>> submitDiagnosisKey(\n89       @RequestBody SubmissionPayload exposureKeys,\n90       @RequestHeader(\"cwa-fake\") Integer fake,\n91       @RequestHeader(\"cwa-authorization\") String tan) {\n92     if (fake != 0) {\n93       return buildFakeDeferredResult();\n94     } else {\n95       return buildRealDeferredResult(exposureKeys, tan);\n96     }\n97   }\n98 \n99   private DeferredResult<ResponseEntity<Void>> buildFakeDeferredResult() {\n100     DeferredResult<ResponseEntity<Void>> deferredResult = new DeferredResult<>();\n101     long delay = new PoissonDistribution(fakeDelay).sample();\n102     scheduledExecutor.schedule(() -> deferredResult.setResult(buildSuccessResponseEntity()),\n103         delay, TimeUnit.MILLISECONDS);\n104     return deferredResult;\n105   }\n106 \n107   private DeferredResult<ResponseEntity<Void>> buildRealDeferredResult(SubmissionPayload exposureKeys, String tan) {\n108     DeferredResult<ResponseEntity<Void>> deferredResult = new DeferredResult<>();\n109     forkJoinPool.submit(() -> {\n110       StopWatch stopWatch = new StopWatch();\n111       stopWatch.start();\n112       if (!this.tanVerifier.verifyTan(tan)) {\n113         deferredResult.setResult(buildTanInvalidResponseEntity());\n114       } else {\n115         try {\n116           persistDiagnosisKeysPayload(exposureKeys);\n117           deferredResult.setResult(buildSuccessResponseEntity());\n118         } catch (Exception e) {\n119           deferredResult.setErrorResult(e);\n120         }\n121       }\n122       stopWatch.stop();\n123       updateFakeDelay(stopWatch.getTotalTimeMillis());\n124     });\n125     return deferredResult;\n126   }\n127 \n128   /**\n129    * Returns a response that indicates successful request processing.\n130    */\n131   private ResponseEntity<Void> buildSuccessResponseEntity() {\n132     return ResponseEntity.ok().build();\n133   }\n134 \n135   /**\n136    * Returns a response that indicates that an invalid TAN was specified in the request.\n137    */\n138   private ResponseEntity<Void> buildTanInvalidResponseEntity() {\n139     return ResponseEntity.status(HttpStatus.FORBIDDEN).build();\n140   }\n141 \n142   /**\n143    * Persists the diagnosis keys contained in the specified request payload.\n144    *\n145    * @param protoBufDiagnosisKeys Diagnosis keys that were specified in the request.\n146    * @throws IllegalArgumentException in case the given collection contains {@literal null}.\n147    */\n148   public void persistDiagnosisKeysPayload(SubmissionPayload protoBufDiagnosisKeys) {\n149     List<TemporaryExposureKey> protoBufferKeysList = protoBufDiagnosisKeys.getKeysList();\n150     validatePayload(protoBufferKeysList);\n151 \n152     List<DiagnosisKey> diagnosisKeys = new ArrayList<>();\n153     for (TemporaryExposureKey protoBufferKey : protoBufferKeysList) {\n154       DiagnosisKey diagnosisKey = DiagnosisKey.builder().fromProtoBuf(protoBufferKey).build();\n155       if (diagnosisKey.isYoungerThanRetentionThreshold(retentionDays)) {\n156         diagnosisKeys.add(diagnosisKey);\n157       } else {\n158         logger.info(\"Not persisting a diagnosis key, as it is outdated beyond retention threshold.\");\n159       }\n160     }\n161 \n162     diagnosisKeyService.saveDiagnosisKeys(diagnosisKeys);\n163   }\n164 \n165   private void validatePayload(List<TemporaryExposureKey> protoBufKeysList) {\n166     if (protoBufKeysList.isEmpty() || protoBufKeysList.size() > maxNumberOfKeys) {\n167       throw new InvalidPayloadException(\n168           String.format(\"Number of keys must be between 1 and %s, but is %s.\", maxNumberOfKeys, protoBufKeysList));\n169     }\n170   }\n171 \n172   private synchronized void updateFakeDelay(long realRequestDuration) {\n173     fakeDelay = fakeDelay + (1 / fakeDelayMovingAverageSamples) * (realRequestDuration - fakeDelay);\n174   }\n175 }\n176 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/exception/InvalidPayloadException.java]\n1 /*\n2  * Corona-Warn-App\n3  *\n4  * SAP SE and all other contributors /\n5  * copyright owners license this file to you under the Apache\n6  * License, Version 2.0 (the \"License\"); you may not use this\n7  * file except in compliance with the License.\n8  * You may obtain a copy of the License at\n9  *\n10  * http://www.apache.org/licenses/LICENSE-2.0\n11  *\n12  * Unless required by applicable law or agreed to in writing,\n13  * software distributed under the License is distributed on an\n14  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n15  * KIND, either express or implied.  See the License for the\n16  * specific language governing permissions and limitations\n17  * under the License.\n18  */\n19 \n20 package app.coronawarn.server.services.submission.exception;\n21 \n22 /**\n23  * Exception thrown to indicate an invalid payload of a\n24  * {@link app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey}.\n25  */\n26 public class InvalidPayloadException extends RuntimeException {\n27 \n28   public InvalidPayloadException(String message) {\n29     super(message);\n30   }\n31 \n32 }\n33 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/exception/InvalidPayloadException.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "<patch>\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -108,7 +108,7 @@ public class DiagnosisKey {\n    */\n   public int getRollingStartIntervalNumber() {\n     return rollingStartIntervalNumber;\n-  }\n+  }",
        "model_patch": "<patch>\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -108,7 +108,7 @@ public class DiagnosisKey {\n    */\n   public int getRollingStartIntervalNumber() {\n     return rollingStartIntervalNumber;\n-  }\n+  }",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 308,
        "issue_numbers": [
            "179"
        ],
        "base_commit": "9ef96cbec24163360512f3d4748a248d6eddd078",
        "patch": "diff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKey.java\n@@ -36,7 +36,6 @@\n import javax.validation.ConstraintViolation;\n import javax.validation.Validation;\n import javax.validation.Validator;\n-import javax.validation.constraints.Min;\n import javax.validation.constraints.Size;\n import org.hibernate.validator.constraints.Range;\n \n@@ -46,6 +45,14 @@\n @Entity\n @Table(name = \"diagnosis_key\")\n public class DiagnosisKey {\n+\n+  /**\n+   * According to \"Setting Up an Exposure Notification Server\" by Apple, exposure notification servers are expected to\n+   * reject any diagnosis keys that do not have a rolling period of a certain fixed value. See\n+   * https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server\n+   */\n+  public static final int EXPECTED_ROLLING_PERIOD = 144;\n+\n   private static final Validator VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n \n   @Id\n@@ -58,7 +65,8 @@ public class DiagnosisKey {\n   @ValidRollingStartIntervalNumber\n   private int rollingStartIntervalNumber;\n \n-  @Min(value = 1, message = \"Rolling period must be greater than 0.\")\n+  @Range(min = EXPECTED_ROLLING_PERIOD, max = EXPECTED_ROLLING_PERIOD,\n+      message = \"Rolling period must be \" + EXPECTED_ROLLING_PERIOD + \".\")\n   private int rollingPeriod;\n \n   @Range(min = 0, max = 8, message = \"Risk level must be between 0 and 8.\")\n@@ -135,7 +143,7 @@ public long getSubmissionTimestamp() {\n    * Checks if this diagnosis key falls into the period between now, and the retention threshold.\n    *\n    * @param daysToRetain the number of days before a key is outdated\n-   * @return true, if the rolling start number is in the time span between now, and the given days to retain\n+   * @return true, if the rolling start interval number is within the time between now, and the given days to retain\n    * @throws IllegalArgumentException if {@code daysToRetain} is negative.\n    */\n   public boolean isYoungerThanRetentionThreshold(int daysToRetain) {\n@@ -155,7 +163,7 @@ public boolean isYoungerThanRetentionThreshold(int daysToRetain) {\n    *\n    * <p><ul>\n    * <li>Risk level must be between 0 and 8\n-   * <li>Rolling start number must be greater than 0\n+   * <li>Rolling start interval number must be greater than 0\n    * <li>Rolling start number cannot be in the future\n    * <li>Rolling period must be positive number\n    * <li>Key data must be byte array of length 16\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilder.java\n@@ -21,7 +21,6 @@\n \n import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.Builder;\n import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.FinalBuilder;\n-import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.RollingPeriodBuilder;\n import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.RollingStartIntervalNumberBuilder;\n import static app.coronawarn.server.common.persistence.domain.DiagnosisKeyBuilders.TransmissionRiskLevelBuilder;\n \n@@ -38,14 +37,14 @@\n  * An instance of this builder can be retrieved by calling {@link DiagnosisKey#builder()}. A {@link DiagnosisKey} can\n  * then be build by either providing the required member values or by passing the respective protocol buffer object.\n  */\n-public class DiagnosisKeyBuilder implements Builder, RollingStartIntervalNumberBuilder,\n-    RollingPeriodBuilder, TransmissionRiskLevelBuilder, FinalBuilder {\n+public class DiagnosisKeyBuilder implements\n+    Builder, RollingStartIntervalNumberBuilder, TransmissionRiskLevelBuilder, FinalBuilder {\n \n   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyBuilder.class);\n \n   private byte[] keyData;\n   private int rollingStartIntervalNumber;\n-  private int rollingPeriod;\n+  private int rollingPeriod = DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n   private int transmissionRiskLevel;\n   private long submissionTimestamp = -1L;\n \n@@ -59,17 +58,11 @@ public RollingStartIntervalNumberBuilder withKeyData(byte[] keyData) {\n   }\n \n   @Override\n-  public RollingPeriodBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber) {\n+  public TransmissionRiskLevelBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber) {\n     this.rollingStartIntervalNumber = rollingStartIntervalNumber;\n     return this;\n   }\n \n-  @Override\n-  public TransmissionRiskLevelBuilder withRollingPeriod(int rollingPeriod) {\n-    this.rollingPeriod = rollingPeriod;\n-    return this;\n-  }\n-\n   @Override\n   public FinalBuilder withTransmissionRiskLevel(int transmissionRiskLevel) {\n     this.transmissionRiskLevel = transmissionRiskLevel;\n@@ -81,8 +74,8 @@ public FinalBuilder fromProtoBuf(TemporaryExposureKey protoBufObject) {\n     return this\n         .withKeyData(protoBufObject.getKeyData().toByteArray())\n         .withRollingStartIntervalNumber(protoBufObject.getRollingStartIntervalNumber())\n-        .withRollingPeriod(protoBufObject.getRollingPeriod())\n-        .withTransmissionRiskLevel(protoBufObject.getTransmissionRiskLevel());\n+        .withTransmissionRiskLevel(protoBufObject.getTransmissionRiskLevel())\n+        .withRollingPeriod(protoBufObject.getRollingPeriod());\n   }\n \n   @Override\n@@ -91,6 +84,12 @@ public FinalBuilder withSubmissionTimestamp(long submissionTimestamp) {\n     return this;\n   }\n \n+  @Override\n+  public FinalBuilder withRollingPeriod(int rollingPeriod) {\n+    this.rollingPeriod = rollingPeriod;\n+    return this;\n+  }\n+\n   @Override\n   public DiagnosisKey build() {\n     if (submissionTimestamp < 0) {\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilders.java\n@@ -48,25 +48,13 @@ interface Builder {\n   interface RollingStartIntervalNumberBuilder {\n \n     /**\n-     * Adds the specified rolling start number to this builder.\n+     * Adds the specified rolling start interval number to this builder.\n      *\n      * @param rollingStartIntervalNumber number describing when a key starts. It is equal to\n      *                                   startTimeOfKeySinceEpochInSecs / (60 * 10).\n      * @return this Builder instance.\n      */\n-    RollingPeriodBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber);\n-  }\n-\n-  interface RollingPeriodBuilder {\n-\n-    /**\n-     * Adds the specified rolling period to this builder.\n-     *\n-     * @param rollingPeriod Number describing how long a key is valid. It is expressed in increments\n-     *                      of 10 minutes (e.g. 144 for 24 hours).\n-     * @return this Builder instance.\n-     */\n-    TransmissionRiskLevelBuilder withRollingPeriod(int rollingPeriod);\n+    TransmissionRiskLevelBuilder withRollingStartIntervalNumber(int rollingStartIntervalNumber);\n   }\n \n   interface TransmissionRiskLevelBuilder {\n@@ -90,6 +78,16 @@ interface FinalBuilder {\n      */\n     FinalBuilder withSubmissionTimestamp(long submissionTimestamp);\n \n+    /**\n+     * Adds the specified rolling period to this builder. If not specified, the rolling period defaults to {@link\n+     * DiagnosisKey#EXPECTED_ROLLING_PERIOD}\n+     *\n+     * @param rollingPeriod Number describing how long a key is valid. It is expressed in increments of 10 minutes (e.g.\n+     *                      144 for 24 hours).\n+     * @return this Builder instance.\n+     */\n+    FinalBuilder withRollingPeriod(int rollingPeriod);\n+\n     /**\n      * Builds a {@link DiagnosisKey} instance. If no submission timestamp has been specified it will be set to \"now\" as\n      * hours since epoch.\ndiff --git a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidRollingStartIntervalNumber.java b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidRollingStartIntervalNumber.java\n--- a/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidRollingStartIntervalNumber.java\n+++ b/common/persistence/src/main/java/app/coronawarn/server/common/persistence/domain/validation/ValidRollingStartIntervalNumber.java\n@@ -35,7 +35,7 @@\n    *\n    * @return the error message\n    */\n-  String message() default \"Rolling start number must be greater 0 and cannot be in the future.\";\n+  String message() default \"Rolling start interval number must be greater 0 and cannot be in the future.\";\n \n   /**\n    * Groups.\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java\n@@ -71,7 +71,7 @@ public class TestDataGeneration implements ApplicationRunner {\n   // The submission timestamp is counted in 1 hour intervals since epoch\n   private static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);\n \n-  // The rolling start number is counted in 10 minute intervals since epoch\n+  // The rolling start interval number is counted in 10 minute intervals since epoch\n   private static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);\n \n   /**\n@@ -166,7 +166,6 @@ private DiagnosisKey generateDiagnosisKey(long submissionTimestamp) {\n     return DiagnosisKey.builder()\n         .withKeyData(generateDiagnosisKeyBytes())\n         .withRollingStartIntervalNumber(generateRollingStartIntervalNumber(submissionTimestamp))\n-        .withRollingPeriod(generateRollingPeriod())\n         .withTransmissionRiskLevel(generateTransmissionRiskLevel())\n         .withSubmissionTimestamp(submissionTimestamp)\n         .build();\n@@ -182,8 +181,8 @@ private byte[] generateDiagnosisKeyBytes() {\n   }\n \n   /**\n-   * Returns a random rolling start number (timestamp since when a key was active, represented by a 10 minute interval\n-   * counter.) between a specific submission timestamp and the beginning of the retention period.\n+   * Returns a random rolling start interval number (timestamp since when a key was active, represented by a 10 minute\n+   * interval counter) between a specific submission timestamp and the beginning of the retention period.\n    */\n   private int generateRollingStartIntervalNumber(long submissionTimestamp) {\n     long maxRollingStartIntervalNumber =\n@@ -194,13 +193,6 @@ private int generateRollingStartIntervalNumber(long submissionTimestamp) {\n     return Math.toIntExact(getRandomBetween(minRollingStartIntervalNumber, maxRollingStartIntervalNumber));\n   }\n \n-  /**\n-   * Returns a rolling period (number of 10 minute intervals that a key was active for) of 1 day.\n-   */\n-  private int generateRollingPeriod() {\n-    return Math.toIntExact(TimeUnit.DAYS.toSeconds(1) / TEN_MINUTES_INTERVAL_SECONDS);\n-  }\n-\n   /**\n    * Returns a random number between {@link RiskLevel#RISK_LEVEL_LOWEST_VALUE} and {@link\n    * RiskLevel#RISK_LEVEL_HIGHEST_VALUE}.\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/ApiExceptionHandler.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/ApiExceptionHandler.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/ApiExceptionHandler.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/ApiExceptionHandler.java\n@@ -20,8 +20,8 @@\n package app.coronawarn.server.services.submission.controller;\n \n import app.coronawarn.server.common.persistence.exception.InvalidDiagnosisKeyException;\n-import app.coronawarn.server.services.submission.exception.InvalidPayloadException;\n import com.google.protobuf.InvalidProtocolBufferException;\n+import javax.validation.ConstraintViolationException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n@@ -50,7 +50,7 @@ public void bindingExceptions(Exception ex, WebRequest wr) {\n     logger.error(\"Binding failed {}\", wr.getDescription(false), ex);\n   }\n \n-  @ExceptionHandler({InvalidDiagnosisKeyException.class, InvalidPayloadException.class})\n+  @ExceptionHandler({InvalidDiagnosisKeyException.class, ConstraintViolationException.class})\n   @ResponseStatus(HttpStatus.BAD_REQUEST)\n   public void diagnosisKeyExceptions(Exception ex, WebRequest wr) {\n     logger.error(\"Erroneous Submission Payload {}\", wr.getDescription(false), ex);\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/controller/SubmissionController.java\n@@ -24,7 +24,7 @@\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n import app.coronawarn.server.common.protocols.internal.SubmissionPayload;\n import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;\n-import app.coronawarn.server.services.submission.exception.InvalidPayloadException;\n+import app.coronawarn.server.services.submission.validation.ValidSubmissionPayload;\n import app.coronawarn.server.services.submission.verification.TanVerifier;\n import java.util.ArrayList;\n import java.util.List;\n@@ -39,6 +39,7 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.util.StopWatch;\n+import org.springframework.validation.annotation.Validated;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestHeader;\n@@ -48,6 +49,7 @@\n \n @RestController\n @RequestMapping(\"/version/v1\")\n+@Validated\n public class SubmissionController {\n \n   private static final Logger logger = LoggerFactory.getLogger(SubmissionController.class);\n@@ -62,7 +64,6 @@ public class SubmissionController {\n   private final TanVerifier tanVerifier;\n   private final Double fakeDelayMovingAverageSamples;\n   private final Integer retentionDays;\n-  private final Integer maxNumberOfKeys;\n   private Double fakeDelay;\n \n   @Autowired\n@@ -73,7 +74,6 @@ public class SubmissionController {\n     fakeDelay = submissionServiceConfig.getInitialFakeDelayMilliseconds();\n     fakeDelayMovingAverageSamples = submissionServiceConfig.getFakeDelayMovingAverageSamples();\n     retentionDays = submissionServiceConfig.getRetentionDays();\n-    maxNumberOfKeys = submissionServiceConfig.getMaxNumberOfKeys();\n   }\n \n   /**\n@@ -86,7 +86,7 @@ public class SubmissionController {\n    */\n   @PostMapping(SUBMISSION_ROUTE)\n   public DeferredResult<ResponseEntity<Void>> submitDiagnosisKey(\n-      @RequestBody SubmissionPayload exposureKeys,\n+      @ValidSubmissionPayload @RequestBody SubmissionPayload exposureKeys,\n       @RequestHeader(\"cwa-fake\") Integer fake,\n       @RequestHeader(\"cwa-authorization\") String tan) {\n     if (fake != 0) {\n@@ -147,9 +147,8 @@ private ResponseEntity<Void> buildTanInvalidResponseEntity() {\n    */\n   public void persistDiagnosisKeysPayload(SubmissionPayload protoBufDiagnosisKeys) {\n     List<TemporaryExposureKey> protoBufferKeysList = protoBufDiagnosisKeys.getKeysList();\n-    validatePayload(protoBufferKeysList);\n-\n     List<DiagnosisKey> diagnosisKeys = new ArrayList<>();\n+\n     for (TemporaryExposureKey protoBufferKey : protoBufferKeysList) {\n       DiagnosisKey diagnosisKey = DiagnosisKey.builder().fromProtoBuf(protoBufferKey).build();\n       if (diagnosisKey.isYoungerThanRetentionThreshold(retentionDays)) {\n@@ -162,13 +161,6 @@ public void persistDiagnosisKeysPayload(SubmissionPayload protoBufDiagnosisKeys)\n     diagnosisKeyService.saveDiagnosisKeys(diagnosisKeys);\n   }\n \n-  private void validatePayload(List<TemporaryExposureKey> protoBufKeysList) {\n-    if (protoBufKeysList.isEmpty() || protoBufKeysList.size() > maxNumberOfKeys) {\n-      throw new InvalidPayloadException(\n-          String.format(\"Number of keys must be between 1 and %s, but is %s.\", maxNumberOfKeys, protoBufKeysList));\n-    }\n-  }\n-\n   private synchronized void updateFakeDelay(long realRequestDuration) {\n     fakeDelay = fakeDelay + (1 / fakeDelayMovingAverageSamples) * (realRequestDuration - fakeDelay);\n   }\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/exception/InvalidPayloadException.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/exception/InvalidPayloadException.java\ndeleted file mode 100644\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/exception/InvalidPayloadException.java\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-/*\n- * Corona-Warn-App\n- *\n- * SAP SE and all other contributors /\n- * copyright owners license this file to you under the Apache\n- * License, Version 2.0 (the \"License\"); you may not use this\n- * file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package app.coronawarn.server.services.submission.exception;\n-\n-/**\n- * Exception thrown to indicate an invalid payload of a\n- * {@link app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey}.\n- */\n-public class InvalidPayloadException extends RuntimeException {\n-\n-  public InvalidPayloadException(String message) {\n-    super(message);\n-  }\n-\n-}\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/validation/ValidSubmissionPayload.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/validation/ValidSubmissionPayload.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/validation/ValidSubmissionPayload.java\n@@ -0,0 +1,148 @@\n+/*\n+ * Corona-Warn-App\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.submission.validation;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n+import app.coronawarn.server.common.protocols.internal.SubmissionPayload;\n+import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.validation.Constraint;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import javax.validation.Payload;\n+\n+@Constraint(validatedBy = ValidSubmissionPayload.SubmissionPayloadValidator.class)\n+@Target({ElementType.PARAMETER})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+public @interface ValidSubmissionPayload {\n+\n+  /**\n+   * Error message.\n+   *\n+   * @return the error message\n+   */\n+  String message() default \"Invalid diagnosis key submission payload.\";\n+\n+  /**\n+   * Groups.\n+   *\n+   * @return\n+   */\n+  Class<?>[] groups() default {};\n+\n+  /**\n+   * Payload.\n+   *\n+   * @return\n+   */\n+  Class<? extends Payload>[] payload() default {};\n+\n+  class SubmissionPayloadValidator implements\n+      ConstraintValidator<ValidSubmissionPayload, SubmissionPayload> {\n+\n+    private final int maxNumberOfKeys;\n+\n+    public SubmissionPayloadValidator(SubmissionServiceConfig submissionServiceConfig) {\n+      maxNumberOfKeys = submissionServiceConfig.getMaxNumberOfKeys();\n+    }\n+\n+    /**\n+     * Validates the following constraints.\n+     * <ul>\n+     *   <li>StartIntervalNumber values from the same {@link SubmissionPayload} shall be unique.</li>\n+     *   <li>There must be no gaps for StartIntervalNumber values for a user.</li>\n+     *   <li>There must not be any keys in the {@link SubmissionPayload} have overlapping time windows.</li>\n+     *   <li>The period of time covered by the data file must not exceed the configured maximum number of days.</li>\n+     * </ul>\n+     */\n+    @Override\n+    public boolean isValid(SubmissionPayload submissionPayload, ConstraintValidatorContext validatorContext) {\n+      List<TemporaryExposureKey> exposureKeys = submissionPayload.getKeysList();\n+      validatorContext.disableDefaultConstraintViolation();\n+\n+      if (Objects.isNull(exposureKeys)) {\n+        addViolation(validatorContext, \"Field 'keys' points to Null.\");\n+        return false;\n+      }\n+\n+      boolean isValid = checkKeyCollectionSize(exposureKeys, validatorContext);\n+      isValid &= checkUniqueStartIntervalNumbers(exposureKeys, validatorContext);\n+      isValid &= checkNoGapsInTimeWindow(exposureKeys, validatorContext);\n+\n+      return isValid;\n+    }\n+\n+    private void addViolation(ConstraintValidatorContext validatorContext, String message) {\n+      validatorContext.buildConstraintViolationWithTemplate(message).addConstraintViolation();\n+    }\n+\n+    private boolean checkKeyCollectionSize(List<TemporaryExposureKey> exposureKeys,\n+        ConstraintValidatorContext validatorContext) {\n+      if (exposureKeys.isEmpty() || exposureKeys.size() > maxNumberOfKeys) {\n+        addViolation(validatorContext, String.format(\n+            \"Number of keys must be between 1 and %s, but is %s.\", maxNumberOfKeys, exposureKeys.size()));\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    private boolean checkUniqueStartIntervalNumbers(List<TemporaryExposureKey> exposureKeys,\n+        ConstraintValidatorContext validatorContext) {\n+      Integer[] startIntervalNumbers = exposureKeys.stream()\n+          .mapToInt(TemporaryExposureKey::getRollingStartIntervalNumber).boxed().toArray(Integer[]::new);\n+      long distinctSize = Arrays.stream(startIntervalNumbers)\n+          .distinct()\n+          .count();\n+\n+      if (distinctSize < exposureKeys.size()) {\n+        addViolation(validatorContext, String.format(\n+            \"Duplicate StartIntervalNumber found. StartIntervalNumbers: %s\", startIntervalNumbers));\n+        return false;\n+      }\n+      return true;\n+    }\n+\n+    private boolean checkNoGapsInTimeWindow(List<TemporaryExposureKey> exposureKeys,\n+        ConstraintValidatorContext validatorContext) {\n+      if (exposureKeys.size() < 2) {\n+        return true;\n+      }\n+\n+      Integer[] sortedStartIntervalNumbers = exposureKeys.stream()\n+          .mapToInt(TemporaryExposureKey::getRollingStartIntervalNumber)\n+          .sorted().boxed().toArray(Integer[]::new);\n+\n+      for (int i = 1; i < sortedStartIntervalNumbers.length; i++) {\n+        if (sortedStartIntervalNumbers[i] != sortedStartIntervalNumbers[i - 1] + DiagnosisKey.EXPECTED_ROLLING_PERIOD) {\n+          addViolation(validatorContext, String.format(\n+              \"Subsequent intervals do not align. StartIntervalNumbers: %s\", sortedStartIntervalNumbers));\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+  }\n+}\n",
        "test_patch": "diff --git a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java\n--- a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java\n+++ b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyBuilderTest.java\n@@ -38,7 +38,6 @@ class DiagnosisKeyBuilderTest {\n \n   private final byte[] expKeyData = \"16-bytelongarray\".getBytes(Charset.defaultCharset());\n   private final int expRollingStartIntervalNumber = 73800;\n-  private final int expRollingPeriod = 144;\n   private final int expTransmissionRiskLevel = 1;\n   private final long expSubmissionTimestamp = 2L;\n \n@@ -48,7 +47,7 @@ void buildFromProtoBufObjWithSubmissionTimestamp() {\n         .newBuilder()\n         .setKeyData(ByteString.copyFrom(this.expKeyData))\n         .setRollingStartIntervalNumber(this.expRollingStartIntervalNumber)\n-        .setRollingPeriod(this.expRollingPeriod)\n+        .setRollingPeriod(DiagnosisKey.EXPECTED_ROLLING_PERIOD)\n         .setTransmissionRiskLevel(this.expTransmissionRiskLevel)\n         .build();\n \n@@ -66,7 +65,7 @@ void buildFromProtoBufObjWithoutSubmissionTimestamp() {\n         .newBuilder()\n         .setKeyData(ByteString.copyFrom(this.expKeyData))\n         .setRollingStartIntervalNumber(this.expRollingStartIntervalNumber)\n-        .setRollingPeriod(this.expRollingPeriod)\n+        .setRollingPeriod(DiagnosisKey.EXPECTED_ROLLING_PERIOD)\n         .setTransmissionRiskLevel(this.expTransmissionRiskLevel)\n         .build();\n \n@@ -80,7 +79,6 @@ void buildSuccessivelyWithSubmissionTimestamp() {\n     DiagnosisKey actDiagnosisKey = DiagnosisKey.builder()\n         .withKeyData(this.expKeyData)\n         .withRollingStartIntervalNumber(this.expRollingStartIntervalNumber)\n-        .withRollingPeriod(this.expRollingPeriod)\n         .withTransmissionRiskLevel(this.expTransmissionRiskLevel)\n         .withSubmissionTimestamp(this.expSubmissionTimestamp).build();\n \n@@ -92,18 +90,27 @@ void buildSuccessivelyWithoutSubmissionTimestamp() {\n     DiagnosisKey actDiagnosisKey = DiagnosisKey.builder()\n         .withKeyData(this.expKeyData)\n         .withRollingStartIntervalNumber(this.expRollingStartIntervalNumber)\n-        .withRollingPeriod(this.expRollingPeriod)\n         .withTransmissionRiskLevel(this.expTransmissionRiskLevel).build();\n \n     assertDiagnosisKeyEquals(actDiagnosisKey);\n   }\n \n   @Test\n-  void rollingStartIntervalNumberDoesNotThrowForValid() {\n-    assertThatCode(() -> keyWithRollingStartIntervalNumber(4200)).doesNotThrowAnyException();\n+  void buildSuccessivelyWithRollingPeriod() {\n+    DiagnosisKey actDiagnosisKey = DiagnosisKey.builder()\n+        .withKeyData(this.expKeyData)\n+        .withRollingStartIntervalNumber(this.expRollingStartIntervalNumber)\n+        .withTransmissionRiskLevel(this.expTransmissionRiskLevel)\n+        .withSubmissionTimestamp(this.expSubmissionTimestamp)\n+        .withRollingPeriod(DiagnosisKey.EXPECTED_ROLLING_PERIOD).build();\n \n-    // Timestamp: 05/16/2020 @ 00:00 in hours\n-    assertThatCode(() -> keyWithRollingStartIntervalNumber(441552)).doesNotThrowAnyException();\n+    assertDiagnosisKeyEquals(actDiagnosisKey, this.expSubmissionTimestamp);\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(ints = {4200, 441552})\n+  void rollingStartIntervalNumberDoesNotThrowForValid(int validRollingStartIntervalNumber) {\n+    assertThatCode(() -> keyWithRollingStartIntervalNumber(validRollingStartIntervalNumber)).doesNotThrowAnyException();\n   }\n \n   @Test\n@@ -111,7 +118,7 @@ void rollingStartIntervalNumberCannotBeInFuture() {\n     assertThat(catchThrowable(() -> keyWithRollingStartIntervalNumber(Integer.MAX_VALUE)))\n         .isInstanceOf(InvalidDiagnosisKeyException.class)\n         .hasMessage(\n-            \"[Rolling start number must be greater 0 and cannot be in the future. Invalid Value: \"\n+            \"[Rolling start interval number must be greater 0 and cannot be in the future. Invalid Value: \"\n                 + Integer.MAX_VALUE + \"]\");\n \n     long tomorrow = LocalDate\n@@ -123,7 +130,7 @@ void rollingStartIntervalNumberCannotBeInFuture() {\n         .isInstanceOf(InvalidDiagnosisKeyException.class)\n         .hasMessage(\n             String.format(\n-                \"[Rolling start number must be greater 0 and cannot be in the future. Invalid Value: %s]\",\n+                \"[Rolling start interval number must be greater 0 and cannot be in the future. Invalid Value: %s]\",\n                 tomorrow));\n   }\n \n@@ -133,7 +140,6 @@ void failsForInvalidRollingStartIntervalNumber() {\n         catchThrowable(() -> DiagnosisKey.builder()\n             .withKeyData(this.expKeyData)\n             .withRollingStartIntervalNumber(0)\n-            .withRollingPeriod(this.expRollingPeriod)\n             .withTransmissionRiskLevel(this.expTransmissionRiskLevel).build()\n         )\n     ).isInstanceOf(InvalidDiagnosisKeyException.class);\n@@ -155,17 +161,17 @@ void transmissionRiskLevelDoesNotThrowForValid(int validRiskLevel) {\n   }\n \n   @ParameterizedTest\n-  @ValueSource(ints = {0, -3})\n-  void rollingPeriodMustBeLargerThanZero(int invalidRollingPeriod) {\n+  @ValueSource(ints = {-3, 143, 145})\n+  void rollingPeriodMustBeEpectedValue(int invalidRollingPeriod) {\n     assertThat(catchThrowable(() -> keyWithRollingPeriod(invalidRollingPeriod)))\n         .isInstanceOf(InvalidDiagnosisKeyException.class)\n-        .hasMessage(\n-            \"[Rolling period must be greater than 0. Invalid Value: \" + invalidRollingPeriod + \"]\");\n+        .hasMessage(\"[Rolling period must be \" + DiagnosisKey.EXPECTED_ROLLING_PERIOD\n+            + \". Invalid Value: \" + invalidRollingPeriod + \"]\");\n   }\n \n   @Test\n   void rollingPeriodDoesNotThrowForValid() {\n-    assertThatCode(() -> keyWithRollingPeriod(144)).doesNotThrowAnyException();\n+    assertThatCode(() -> keyWithRollingPeriod(DiagnosisKey.EXPECTED_ROLLING_PERIOD)).doesNotThrowAnyException();\n   }\n \n   @ParameterizedTest\n@@ -186,7 +192,6 @@ private DiagnosisKey keyWithKeyData(byte[] expKeyData) {\n     return DiagnosisKey.builder()\n         .withKeyData(expKeyData)\n         .withRollingStartIntervalNumber(expRollingStartIntervalNumber)\n-        .withRollingPeriod(expRollingPeriod)\n         .withTransmissionRiskLevel(expTransmissionRiskLevel).build();\n   }\n \n@@ -194,7 +199,6 @@ private DiagnosisKey keyWithRollingStartIntervalNumber(int expRollingStartInterv\n     return DiagnosisKey.builder()\n         .withKeyData(expKeyData)\n         .withRollingStartIntervalNumber(expRollingStartIntervalNumber)\n-        .withRollingPeriod(expRollingPeriod)\n         .withTransmissionRiskLevel(expTransmissionRiskLevel).build();\n   }\n \n@@ -202,15 +206,14 @@ private DiagnosisKey keyWithRollingPeriod(int expRollingPeriod) {\n     return DiagnosisKey.builder()\n         .withKeyData(expKeyData)\n         .withRollingStartIntervalNumber(expRollingStartIntervalNumber)\n-        .withRollingPeriod(expRollingPeriod)\n-        .withTransmissionRiskLevel(expTransmissionRiskLevel).build();\n+        .withTransmissionRiskLevel(expTransmissionRiskLevel)\n+        .withRollingPeriod(expRollingPeriod).build();\n   }\n \n   private DiagnosisKey keyWithRiskLevel(int expTransmissionRiskLevel) {\n     return DiagnosisKey.builder()\n         .withKeyData(expKeyData)\n         .withRollingStartIntervalNumber(expRollingStartIntervalNumber)\n-        .withRollingPeriod(expRollingPeriod)\n         .withTransmissionRiskLevel(expTransmissionRiskLevel).build();\n   }\n \n@@ -226,7 +229,7 @@ private void assertDiagnosisKeyEquals(DiagnosisKey actDiagnosisKey, long expSubm\n     assertThat(actDiagnosisKey.getSubmissionTimestamp()).isEqualTo(expSubmissionTimestamp);\n     assertThat(actDiagnosisKey.getKeyData()).isEqualTo(this.expKeyData);\n     assertThat(actDiagnosisKey.getRollingStartIntervalNumber()).isEqualTo(this.expRollingStartIntervalNumber);\n-    assertThat(actDiagnosisKey.getRollingPeriod()).isEqualTo(this.expRollingPeriod);\n+    assertThat(actDiagnosisKey.getRollingPeriod()).isEqualTo(DiagnosisKey.EXPECTED_ROLLING_PERIOD);\n     assertThat(actDiagnosisKey.getTransmissionRiskLevel()).isEqualTo(this.expTransmissionRiskLevel);\n   }\n }\ndiff --git a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java\n--- a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java\n+++ b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/domain/DiagnosisKeyServiceMockedRepositoryTest.java\n@@ -37,7 +37,6 @@ class DiagnosisKeyServiceMockedRepositoryTest {\n \n   static final byte[] expKeyData = \"16-bytelongarray\".getBytes(Charset.defaultCharset());\n   static final int expRollingStartIntervalNumber = 73800;\n-  static final int expRollingPeriod = 144;\n   static final int expTransmissionRiskLevel = 1;\n \n   @Autowired\n@@ -82,12 +81,12 @@ private void mockInvalidKeyInDb(List<DiagnosisKey> keys) {\n \n   private DiagnosisKey validKey(long expSubmissionTimestamp) {\n     return new DiagnosisKey(expKeyData, expRollingStartIntervalNumber,\n-        expRollingPeriod, expTransmissionRiskLevel, expSubmissionTimestamp);\n+        DiagnosisKey.EXPECTED_ROLLING_PERIOD, expTransmissionRiskLevel, expSubmissionTimestamp);\n   }\n \n   private DiagnosisKey invalidKey(long expSubmissionTimestamp) {\n     byte[] expKeyData = \"17--bytelongarray\".getBytes(Charset.defaultCharset());\n     return new DiagnosisKey(expKeyData, expRollingStartIntervalNumber,\n-        expRollingPeriod, expTransmissionRiskLevel, expSubmissionTimestamp);\n+        DiagnosisKey.EXPECTED_ROLLING_PERIOD, expTransmissionRiskLevel, expSubmissionTimestamp);\n   }\n }\ndiff --git a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n--- a/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n+++ b/common/persistence/src/test/java/app/coronawarn/server/common/persistence/service/DiagnosisKeyServiceTest.java\n@@ -137,7 +137,6 @@ void testNoPersistOnValidationError() {\n       var keys = List.of(DiagnosisKey.builder()\n           .withKeyData(new byte[16])\n           .withRollingStartIntervalNumber((int) (OffsetDateTime.now(UTC).toEpochSecond() / 600))\n-          .withRollingPeriod(1)\n           .withTransmissionRiskLevel(2)\n           .withSubmissionTimestamp(0L).build());\n \n@@ -153,7 +152,6 @@ public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissi\n     return DiagnosisKey.builder()\n         .withKeyData(new byte[16])\n         .withRollingStartIntervalNumber(600)\n-        .withRollingPeriod(1)\n         .withTransmissionRiskLevel(2)\n         .withSubmissionTimestamp(submissionTimeStamp).build();\n   }\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java\n@@ -36,7 +36,6 @@ public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissi\n     return DiagnosisKey.builder()\n         .withKeyData(new byte[16])\n         .withRollingStartIntervalNumber(600)\n-        .withRollingPeriod(1)\n         .withTransmissionRiskLevel(2)\n         .withSubmissionTimestamp(submissionTimeStamp).build();\n   }\ndiff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/ServerApplicationTests.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/ServerApplicationTests.java\n--- a/services/submission/src/test/java/app/coronawarn/server/services/submission/ServerApplicationTests.java\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/ServerApplicationTests.java\n@@ -25,6 +25,8 @@\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n \n @SpringBootTest\n class ServerApplicationTests {\n@@ -32,6 +34,9 @@ class ServerApplicationTests {\n   @Autowired\n   private SubmissionController controller;\n \n+  @MockBean\n+  private TestRestTemplate testRestTemplate;\n+\n   @Test\n   void contextLoads() {\n     assertThat(this.controller).isNotNull();\ndiff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/PayloadValidationTest.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/PayloadValidationTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/PayloadValidationTest.java\n@@ -0,0 +1,136 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.submission.controller;\n+\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.VALID_KEY_DATA_1;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.VALID_KEY_DATA_2;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.VALID_KEY_DATA_3;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.buildOkHeaders;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.buildTemporaryExposureKey;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.createRollingStartIntervalNumber;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.http.HttpStatus.BAD_REQUEST;\n+import static org.springframework.http.HttpStatus.OK;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n+import app.coronawarn.server.services.submission.verification.TanVerifier;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import org.assertj.core.util.Lists;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.ResponseEntity;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+class PayloadValidationTest {\n+\n+  @MockBean\n+  private TanVerifier tanVerifier;\n+\n+  @BeforeEach\n+  public void setUpMocks() {\n+    when(tanVerifier.verifyTan(anyString())).thenReturn(true);\n+  }\n+\n+  @Autowired\n+  RequestExecutor executor;\n+\n+  @Test\n+  void check400ResponseStatusForMissingKeys() {\n+    ResponseEntity<Void> actResponse = executor.executeRequest(Lists.emptyList(), buildOkHeaders());\n+    assertThat(actResponse.getStatusCode()).isEqualTo(BAD_REQUEST);\n+  }\n+\n+  @Test\n+  void check400ResponseStatusForTooManyKeys() {\n+    ResponseEntity<Void> actResponse = executor.executeRequest(buildPayloadWithTooManyKeys(), buildOkHeaders());\n+\n+    assertThat(actResponse.getStatusCode()).isEqualTo(BAD_REQUEST);\n+  }\n+\n+  private Collection<TemporaryExposureKey> buildPayloadWithTooManyKeys() {\n+    ArrayList<TemporaryExposureKey> tooMany = new ArrayList<>();\n+    for (int i = 0; i <= 20; i++) {\n+      tooMany.add(buildTemporaryExposureKey(VALID_KEY_DATA_1, createRollingStartIntervalNumber(2), 3));\n+    }\n+    return tooMany;\n+  }\n+\n+  @Test\n+  void check400ResponseStatusForDuplicateStartIntervalNumber() {\n+    int rollingStartIntervalNumber = createRollingStartIntervalNumber(2);\n+    var keysWithDuplicateStartIntervalNumber = Lists.list(\n+        buildTemporaryExposureKey(VALID_KEY_DATA_1, rollingStartIntervalNumber, 1),\n+        buildTemporaryExposureKey(VALID_KEY_DATA_2, rollingStartIntervalNumber, 2));\n+\n+    ResponseEntity<Void> actResponse = executor.executeRequest(keysWithDuplicateStartIntervalNumber, buildOkHeaders());\n+\n+    assertThat(actResponse.getStatusCode()).isEqualTo(BAD_REQUEST);\n+  }\n+\n+  @Test\n+  void check400ResponseStatusForGapsInTimeIntervals() {\n+    int rollingStartIntervalNumber1 = createRollingStartIntervalNumber(6);\n+    int rollingStartIntervalNumber2 = rollingStartIntervalNumber1 + DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n+    int rollingStartIntervalNumber3 = rollingStartIntervalNumber2 + 2 * DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n+    var keysWithDuplicateStartIntervalNumber = Lists.list(\n+        buildTemporaryExposureKey(VALID_KEY_DATA_1, rollingStartIntervalNumber1, 1),\n+        buildTemporaryExposureKey(VALID_KEY_DATA_3, rollingStartIntervalNumber3, 3),\n+        buildTemporaryExposureKey(VALID_KEY_DATA_2, rollingStartIntervalNumber2, 2));\n+\n+    ResponseEntity<Void> actResponse = executor.executeRequest(keysWithDuplicateStartIntervalNumber, buildOkHeaders());\n+\n+    assertThat(actResponse.getStatusCode()).isEqualTo(BAD_REQUEST);\n+  }\n+\n+  @Test\n+  void check400ResponseStatusForOverlappingTimeIntervals() {\n+    int rollingStartIntervalNumber1 = createRollingStartIntervalNumber(6);\n+    int rollingStartIntervalNumber2 = rollingStartIntervalNumber1 + (DiagnosisKey.EXPECTED_ROLLING_PERIOD / 2);\n+    var keysWithDuplicateStartIntervalNumber = Lists.list(\n+        buildTemporaryExposureKey(VALID_KEY_DATA_1, rollingStartIntervalNumber1, 1),\n+        buildTemporaryExposureKey(VALID_KEY_DATA_2, rollingStartIntervalNumber2, 2));\n+\n+    ResponseEntity<Void> actResponse = executor.executeRequest(keysWithDuplicateStartIntervalNumber, buildOkHeaders());\n+\n+    assertThat(actResponse.getStatusCode()).isEqualTo(BAD_REQUEST);\n+  }\n+\n+  @Test\n+  void check200ResponseStatusForValidSubmissionPayload() {\n+    int rollingStartIntervalNumber1 = createRollingStartIntervalNumber(6);\n+    int rollingStartIntervalNumber2 = rollingStartIntervalNumber1 + DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n+    int rollingStartIntervalNumber3 = rollingStartIntervalNumber2 + DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n+    var keysWithDuplicateStartIntervalNumber = Lists.list(\n+        buildTemporaryExposureKey(VALID_KEY_DATA_1, rollingStartIntervalNumber1, 1),\n+        buildTemporaryExposureKey(VALID_KEY_DATA_3, rollingStartIntervalNumber3, 3),\n+        buildTemporaryExposureKey(VALID_KEY_DATA_2, rollingStartIntervalNumber2, 2));\n+\n+    ResponseEntity<Void> actResponse = executor.executeRequest(keysWithDuplicateStartIntervalNumber, buildOkHeaders());\n+\n+    assertThat(actResponse.getStatusCode()).isEqualTo(OK);\n+  }\n+}\ndiff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/RequestExecutor.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/RequestExecutor.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/RequestExecutor.java\n@@ -0,0 +1,99 @@\n+/*\n+ * Corona-Warn-App\n+ *\n+ * SAP SE and all other contributors /\n+ * copyright owners license this file to you under the Apache\n+ * License, Version 2.0 (the \"License\"); you may not use this\n+ * file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package app.coronawarn.server.services.submission.controller;\n+\n+import static java.time.ZoneOffset.UTC;\n+\n+import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n+import app.coronawarn.server.common.protocols.internal.SubmissionPayload;\n+import com.google.protobuf.ByteString;\n+import java.net.URI;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.util.Collection;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.RequestEntity;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * RequestExecutor executes requests against the diagnosis key submission endpoint and holds a various methods for test\n+ * request generation.\n+ */\n+@Component\n+public class RequestExecutor {\n+  public static final String VALID_KEY_DATA_1 = \"testKey111111111\";\n+  public static final String VALID_KEY_DATA_2 = \"testKey222222222\";\n+  public static final String VALID_KEY_DATA_3 = \"testKey333333333\";\n+  private static final URI SUBMISSION_URL = URI.create(\"/version/v1/diagnosis-keys\");\n+  private final TestRestTemplate testRestTemplate;\n+\n+  @Autowired\n+  public RequestExecutor(TestRestTemplate testRestTemplate) {\n+    this.testRestTemplate = testRestTemplate;\n+  }\n+\n+  public ResponseEntity<Void> executeRequest(Collection<TemporaryExposureKey> keys, HttpHeaders headers) {\n+    SubmissionPayload body = SubmissionPayload.newBuilder().addAllKeys(keys).build();\n+    RequestEntity<SubmissionPayload> request =\n+        new RequestEntity<>(body, headers, HttpMethod.POST, SUBMISSION_URL);\n+    return testRestTemplate.postForEntity(SUBMISSION_URL, request, Void.class);\n+  }\n+\n+  public static HttpHeaders buildOkHeaders() {\n+    HttpHeaders headers = setCwaAuthHeader(setContentTypeProtoBufHeader(new HttpHeaders()));\n+\n+    return setCwaFakeHeader(headers, \"0\");\n+  }\n+\n+  public static HttpHeaders setContentTypeProtoBufHeader(HttpHeaders headers) {\n+    headers.setContentType(MediaType.valueOf(\"application/x-protobuf\"));\n+    return headers;\n+  }\n+\n+  public static HttpHeaders setCwaAuthHeader(HttpHeaders headers) {\n+    headers.set(\"cwa-authorization\", \"TAN okTan\");\n+    return headers;\n+  }\n+\n+  public static HttpHeaders setCwaFakeHeader(HttpHeaders headers, String value) {\n+    headers.set(\"cwa-fake\", value);\n+    return headers;\n+  }\n+\n+  public static TemporaryExposureKey buildTemporaryExposureKey(\n+      String keyData, int rollingStartIntervalNumber, int transmissionRiskLevel) {\n+    return TemporaryExposureKey.newBuilder()\n+        .setKeyData(ByteString.copyFromUtf8(keyData))\n+        .setRollingStartIntervalNumber(rollingStartIntervalNumber)\n+        .setTransmissionRiskLevel(transmissionRiskLevel).build();\n+  }\n+\n+  public static int createRollingStartIntervalNumber(Integer daysAgo) {\n+    return Math.toIntExact(LocalDate\n+        .ofInstant(Instant.now(), UTC)\n+        .minusDays(daysAgo).atStartOfDay()\n+        .toEpochSecond(UTC) / (60 * 10));\n+  }\n+}\ndiff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/SubmissionControllerTest.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/SubmissionControllerTest.java\n--- a/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/SubmissionControllerTest.java\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/controller/SubmissionControllerTest.java\n@@ -19,7 +19,15 @@\n \n package app.coronawarn.server.services.submission.controller;\n \n-import static java.time.ZoneOffset.UTC;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.VALID_KEY_DATA_1;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.VALID_KEY_DATA_2;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.VALID_KEY_DATA_3;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.buildOkHeaders;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.buildTemporaryExposureKey;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.createRollingStartIntervalNumber;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.setContentTypeProtoBufHeader;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.setCwaAuthHeader;\n+import static app.coronawarn.server.services.submission.controller.RequestExecutor.setCwaFakeHeader;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.any;\n import static org.mockito.Mockito.anyString;\n@@ -36,12 +44,10 @@\n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n-import app.coronawarn.server.common.protocols.internal.SubmissionPayload;\n+import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;\n import app.coronawarn.server.services.submission.verification.TanVerifier;\n import com.google.protobuf.ByteString;\n import java.net.URI;\n-import java.time.Instant;\n-import java.time.LocalDate;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -63,8 +69,6 @@\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.RequestEntity;\n import org.springframework.http.ResponseEntity;\n \n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@@ -81,6 +85,12 @@ class SubmissionControllerTest {\n   @Autowired\n   private TestRestTemplate testRestTemplate;\n \n+  @Autowired\n+  private RequestExecutor executor;\n+\n+  @Autowired\n+  private SubmissionServiceConfig config;\n+\n   @BeforeEach\n   public void setUpMocks() {\n     when(tanVerifier.verifyTan(anyString())).thenReturn(true);\n@@ -88,33 +98,13 @@ public void setUpMocks() {\n \n   @Test\n   void checkResponseStatusForValidParameters() {\n-    ResponseEntity<Void> actResponse =\n-        executeRequest(buildPayloadWithMultipleKeys(), buildOkHeaders());\n-\n+    ResponseEntity<Void> actResponse = executor.executeRequest(buildPayloadWithMultipleKeys(), buildOkHeaders());\n     assertThat(actResponse.getStatusCode()).isEqualTo(OK);\n   }\n \n   @Test\n   void check400ResponseStatusForInvalidParameters() {\n-    ResponseEntity<Void> actResponse =\n-        executeRequest(buildPayloadWithInvalidKey(), buildOkHeaders());\n-\n-    assertThat(actResponse.getStatusCode()).isEqualTo(BAD_REQUEST);\n-  }\n-\n-  @Test\n-  void check400ResponseStatusForMissingKeys() {\n-    ResponseEntity<Void> actResponse =\n-        executeRequest(new ArrayList<>(), buildOkHeaders());\n-\n-    assertThat(actResponse.getStatusCode()).isEqualTo(BAD_REQUEST);\n-  }\n-\n-  @Test\n-  void check400ResponseStatusForTooManyKeys() {\n-    ResponseEntity<Void> actResponse =\n-        executeRequest(buildPayloadWithTooManyKeys(), buildOkHeaders());\n-\n+    ResponseEntity<Void> actResponse = executor.executeRequest(buildPayloadWithInvalidKey(), buildOkHeaders());\n     assertThat(actResponse.getStatusCode()).isEqualTo(BAD_REQUEST);\n   }\n \n@@ -123,7 +113,7 @@ void singleKeyWithOutdatedRollingStartIntervalNumberDoesNotGetSaved() {\n     Collection<TemporaryExposureKey> keys = buildPayloadWithSingleOutdatedKey();\n     ArgumentCaptor<Collection<DiagnosisKey>> argument = ArgumentCaptor.forClass(Collection.class);\n \n-    executeRequest(keys, buildOkHeaders());\n+    executor.executeRequest(keys, buildOkHeaders());\n \n     verify(diagnosisKeyService, atLeastOnce()).saveDiagnosisKeys(argument.capture());\n     assertThat(argument.getValue()).isEmpty();\n@@ -136,7 +126,7 @@ void keysWithOutdatedRollingStartIntervalNumberDoNotGetSaved() {\n     keys.add(outdatedKey);\n     ArgumentCaptor<Collection<DiagnosisKey>> argument = ArgumentCaptor.forClass(Collection.class);\n \n-    executeRequest(keys, buildOkHeaders());\n+    executor.executeRequest(keys, buildOkHeaders());\n \n     verify(diagnosisKeyService, atLeastOnce()).saveDiagnosisKeys(argument.capture());\n     keys.remove(outdatedKey);\n@@ -148,7 +138,7 @@ void checkSaveOperationCallForValidParameters() {\n     Collection<TemporaryExposureKey> keys = buildPayloadWithMultipleKeys();\n     ArgumentCaptor<Collection<DiagnosisKey>> argument = ArgumentCaptor.forClass(Collection.class);\n \n-    executeRequest(keys, buildOkHeaders());\n+    executor.executeRequest(keys, buildOkHeaders());\n \n     verify(diagnosisKeyService, atLeastOnce()).saveDiagnosisKeys(argument.capture());\n     assertElementsCorrespondToEachOther(keys, argument.getValue());\n@@ -157,7 +147,7 @@ void checkSaveOperationCallForValidParameters() {\n   @ParameterizedTest\n   @MethodSource(\"createIncompleteHeaders\")\n   void badRequestIfCwaHeadersMissing(HttpHeaders headers) {\n-    ResponseEntity<Void> actResponse = executeRequest(buildPayloadWithOneKey(), headers);\n+    ResponseEntity<Void> actResponse = executor.executeRequest(buildPayloadWithOneKey(), headers);\n \n     verify(diagnosisKeyService, never()).saveDiagnosisKeys(any());\n     assertThat(actResponse.getStatusCode()).isEqualTo(BAD_REQUEST);\n@@ -197,8 +187,7 @@ private static Stream<Arguments> createDeniedHttpMethods() {\n   void invalidTanHandling() {\n     when(tanVerifier.verifyTan(anyString())).thenReturn(false);\n \n-    ResponseEntity<Void> actResponse =\n-        executeRequest(buildPayloadWithOneKey(), buildOkHeaders());\n+    ResponseEntity<Void> actResponse = executor.executeRequest(buildPayloadWithOneKey(), buildOkHeaders());\n \n     verify(diagnosisKeyService, never()).saveDiagnosisKeys(any());\n     assertThat(actResponse.getStatusCode()).isEqualTo(FORBIDDEN);\n@@ -209,90 +198,44 @@ void fakeRequestHandling() {\n     HttpHeaders headers = buildOkHeaders();\n     setCwaFakeHeader(headers, \"1\");\n \n-    ResponseEntity<Void> actResponse = executeRequest(buildPayloadWithOneKey(), headers);\n+    ResponseEntity<Void> actResponse = executor.executeRequest(buildPayloadWithOneKey(), headers);\n \n     verify(diagnosisKeyService, never()).saveDiagnosisKeys(any());\n     assertThat(actResponse.getStatusCode()).isEqualTo(OK);\n   }\n \n-  private static HttpHeaders buildOkHeaders() {\n-    HttpHeaders headers = setCwaAuthHeader(setContentTypeProtoBufHeader(new HttpHeaders()));\n-\n-    return setCwaFakeHeader(headers, \"0\");\n-  }\n-\n-  private static HttpHeaders setContentTypeProtoBufHeader(HttpHeaders headers) {\n-    headers.setContentType(MediaType.valueOf(\"application/x-protobuf\"));\n-    return headers;\n-  }\n-\n-  private static HttpHeaders setCwaAuthHeader(HttpHeaders headers) {\n-    headers.set(\"cwa-authorization\", \"TAN okTan\");\n-    return headers;\n-  }\n-\n-  private static HttpHeaders setCwaFakeHeader(HttpHeaders headers, String value) {\n-    headers.set(\"cwa-fake\", value);\n-    return headers;\n-  }\n-\n   private static Collection<TemporaryExposureKey> buildPayloadWithOneKey() {\n-    return Collections.singleton(buildTemporaryExposureKey(\"testKey111111111\", 1, 2, 3));\n+    return Collections.singleton(buildTemporaryExposureKey(VALID_KEY_DATA_1, 1, 3));\n   }\n \n-  private static Collection<TemporaryExposureKey> buildPayloadWithMultipleKeys() {\n+  private Collection<TemporaryExposureKey> buildPayloadWithMultipleKeys() {\n+    int rollingStartIntervalNumber1 = createRollingStartIntervalNumber(config.getRetentionDays() - 1);\n+    int rollingStartIntervalNumber2 = rollingStartIntervalNumber1 + DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n+    int rollingStartIntervalNumber3 = rollingStartIntervalNumber2 + DiagnosisKey.EXPECTED_ROLLING_PERIOD;\n     return Stream.of(\n-        buildTemporaryExposureKey(\"testKey111111111\", createRollingStartIntervalNumber(2), 2, 3),\n-        buildTemporaryExposureKey(\"testKey222222222\", createRollingStartIntervalNumber(4), 5, 6),\n-        buildTemporaryExposureKey(\"testKey333333333\", createRollingStartIntervalNumber(10), 8, 8))\n+        buildTemporaryExposureKey(VALID_KEY_DATA_1, rollingStartIntervalNumber1, 3),\n+        buildTemporaryExposureKey(VALID_KEY_DATA_2, rollingStartIntervalNumber3, 6),\n+        buildTemporaryExposureKey(VALID_KEY_DATA_3, rollingStartIntervalNumber2, 8))\n         .collect(Collectors.toCollection(ArrayList::new));\n   }\n \n-  private static Collection<TemporaryExposureKey> buildPayloadWithSingleOutdatedKey() {\n+  private Collection<TemporaryExposureKey> buildPayloadWithSingleOutdatedKey() {\n     TemporaryExposureKey outdatedKey = createOutdatedKey();\n     return Stream.of(outdatedKey).collect(Collectors.toCollection(ArrayList::new));\n   }\n \n-  private static TemporaryExposureKey createOutdatedKey() {\n+  private TemporaryExposureKey createOutdatedKey() {\n     return TemporaryExposureKey.newBuilder()\n-        .setKeyData(ByteString.copyFromUtf8(\"testKey222222222\"))\n-        .setRollingStartIntervalNumber(createRollingStartIntervalNumber(99))\n-        .setRollingPeriod(10)\n+        .setKeyData(ByteString.copyFromUtf8(VALID_KEY_DATA_2))\n+        .setRollingStartIntervalNumber(createRollingStartIntervalNumber(config.getRetentionDays()))\n+        .setRollingPeriod(DiagnosisKey.EXPECTED_ROLLING_PERIOD)\n         .setTransmissionRiskLevel(5).build();\n   }\n-\n-  private Collection<TemporaryExposureKey> buildPayloadWithTooManyKeys() {\n-    ArrayList<TemporaryExposureKey> tooMany = new ArrayList<>();\n-    for (int i = 0; i <= 99; i++) {\n-      tooMany.add(\n-          buildTemporaryExposureKey(\"testKey111111111\", createRollingStartIntervalNumber(2), 2, 3));\n-    }\n-\n-    return tooMany;\n-  }\n-\n   private static Collection<TemporaryExposureKey> buildPayloadWithInvalidKey() {\n     return Stream.of(\n-        buildTemporaryExposureKey(\"testKey111111111\", createRollingStartIntervalNumber(2), 2, 999))\n+        buildTemporaryExposureKey(VALID_KEY_DATA_1, createRollingStartIntervalNumber(2), 999))\n         .collect(Collectors.toCollection(ArrayList::new));\n   }\n-\n-  private static int createRollingStartIntervalNumber(Integer daysAgo) {\n-    return Math.toIntExact(LocalDate\n-        .ofInstant(Instant.now(), UTC)\n-        .minusDays(daysAgo).atStartOfDay()\n-        .toEpochSecond(UTC) / (60 * 10));\n-  }\n-\n-  private static TemporaryExposureKey buildTemporaryExposureKey(\n-      String keyData, int rollingStartIntervalNumber, int rollingPeriod, int transmissionRiskLevel) {\n-    return TemporaryExposureKey.newBuilder()\n-        .setKeyData(ByteString.copyFromUtf8(keyData))\n-        .setRollingStartIntervalNumber(rollingStartIntervalNumber)\n-        .setRollingPeriod(rollingPeriod)\n-        .setTransmissionRiskLevel(transmissionRiskLevel).build();\n-  }\n-\n   private void assertElementsCorrespondToEachOther\n       (Collection<TemporaryExposureKey> submittedKeys, Collection<DiagnosisKey> keyEntities) {\n     Set<DiagnosisKey> expKeys = submittedKeys.stream()\n@@ -307,11 +250,4 @@ private static TemporaryExposureKey buildTemporaryExposureKey(\n         .contains(anActKey)\n     );\n   }\n-\n-  private ResponseEntity<Void> executeRequest(Collection<TemporaryExposureKey> keys, HttpHeaders headers) {\n-    SubmissionPayload body = SubmissionPayload.newBuilder().addAllKeys(keys).build();\n-    RequestEntity<SubmissionPayload> request =\n-        new RequestEntity<>(body, headers, HttpMethod.POST, SUBMISSION_URL);\n-    return testRestTemplate.postForEntity(SUBMISSION_URL, request, Void.class);\n-  }\n }\n",
        "problem_statement": "Apple's Proposal for Exposure Key Validation\n#92  Current Implementation\r\n\r\nWe used sensible assumptions for key validation.\r\n\r\n## Suggested Enhancement\r\n\r\n[Apple proposes](https://developer.apple.com/documentation/exposurenotification/setting_up_an_exposure_notification_server?changes=latest_beta): \r\n\r\n> An EN server must reject invalid key files uploaded from a client app. Uploaded key data is considered invalid if:\r\n>\r\n> Any ENIntervalNumber values from the same user are not unique\r\n> \r\n> There are any gaps in the ENIntervalNumber values for a user\r\n> \r\n> Any keys in the file have overlapping time windows\r\n> \r\n> The period of time covered by the data file exceeds 14 days\r\n> \r\n> The TEKRollingPeriod value is not 144\r\n> \r\n> You may optionally want to validate the clock time the device submits.\r\n\r\n## Expected Benefits\r\n\r\nAdherence to reference implementations.\n",
        "hints_text": "Part of https://github.com/corona-warn-app/cwa-server/issues/168",
        "created_at": "2020-05-25T20:36:01Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-629",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nSimplifying DateAggregatingDecorator\nThe DateAggregatingDecorator should make more use of the `DiagnosisKeyBundler`. Please team up with @pithumke on this. \n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/ARCHITECTURE.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env``` in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `localhost:8001` <br> `postgres:5432` (from containerized pgadmin) <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is `edc07f08-a1aa-11ea-bb37-0242ac130002`.\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 If you are already running a local Postgres, you need to create a database `cwa` and run the following setup scripts:\n101 \n102 * Create the different CWA roles first by executing [create-roles.sql](setup/create-roles.sql).\n103 * Create local database users for the specific roles by running [create-users.sql](./local-setup/create-users.sql).\n104 * It is recommended to also run [enable-test-data-docker-compose.sql](./local-setup/enable-test-data-docker-compose.sql)\n105 , which enables the test data generation profile. If you already had CWA running before and an existing `diagnosis-key`\n106 table on your database, you need to run [enable-test-data.sql](./local-setup/enable-test-data.sql) instead.\n107 \n108 You can also use `docker-compose` to start Postgres and Zenko. If you do that, you have to\n109 set the following environment-variables when running the Spring project:\n110 \n111 For the distribution module:\n112 \n113 ```bash\n114 POSTGRESQL_SERVICE_PORT=8001\n115 VAULT_FILESIGNING_SECRET=</path/to/your/private_key>\n116 SPRING_PROFILES_ACTIVE=signature-dev,disable-ssl-client-postgres\n117 ```\n118 \n119 For the submission module:\n120 \n121 ```bash\n122 POSTGRESQL_SERVICE_PORT=8001\n123 SPRING_PROFILES_ACTIVE=disable-ssl-server,disable-ssl-client-postgres,disable-ssl-client-verification,disable-ssl-client-verification-verify-hostname\n124 ```\n125 \n126 #### Configure\n127 \n128 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n129 \n130 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n131 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n132 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n133   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n134 \n135 #### Build\n136 \n137 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n138 \n139 #### Run\n140 \n141 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n142 \n143 If you want to start the submission service, for example, you start it as follows:\n144 \n145 ```bash\n146   cd services/submission/\n147   mvn spring-boot:run\n148 ```\n149 \n150 #### Debugging\n151 \n152 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n153 \n154 ```bash\n155 mvn spring-boot:run -Dspring.profiles.active=dev\n156 ```\n157 \n158 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n159 \n160 ## Service APIs\n161 \n162 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n163 \n164 Service                   | OpenAPI Specification\n165 --------------------------|-------------\n166 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n167 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n168 \n169 ## Spring Profiles\n170 \n171 ### Distribution\n172 \n173 See [Distribution Service - Spring Profiles](/docs/DISTRIBUTION.md#spring-profiles).\n174 \n175 ### Submission\n176 \n177 See [Submission Service - Spring Profiles](/docs/SUBMISSION.md#spring-profiles).\n178 \n179 ## Documentation\n180 \n181 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n182 \n183 ## Support and Feedback\n184 \n185 The following channels are available for discussions, feedback, and support requests:\n186 \n187 | Type                     | Channel                                                |\n188 | ------------------------ | ------------------------------------------------------ |\n189 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n190 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n191 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n192 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n193 \n194 ## How to Contribute\n195 \n196 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n197 \n198 ## Contributors\n199 \n200 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n201 \n202 ## Repositories\n203 \n204 The following public repositories are currently available for the Corona-Warn-App:\n205 \n206 | Repository          | Description                                                           |\n207 | ------------------- | --------------------------------------------------------------------- |\n208 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n209 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n210 | [cwa-verification-server] | Backend implementation of the verification process|\n211 \n212 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n213 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n214 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n215 [Postgres]: https://www.postgresql.org/\n216 [HSQLDB]: http://hsqldb.org/\n217 [Zenko CloudServer]: https://github.com/scality/cloudserver\n218 \n219 ## Licensing\n220 \n221 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n222 \n223 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n224 \n225 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n226 \n227 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n228 \n[end of README.md]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.appconfig.structure.directory;\n22 \n23 import app.coronawarn.server.common.protocols.internal.ApplicationConfiguration;\n24 import app.coronawarn.server.services.distribution.assembly.appconfig.structure.archive.decorator.signing.AppConfigurationSigningDecorator;\n25 import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ApplicationConfigurationValidator;\n26 import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ConfigurationValidator;\n27 import app.coronawarn.server.services.distribution.assembly.appconfig.validation.ValidationResult;\n28 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n29 import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n30 import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n31 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n32 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;\n33 import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;\n34 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n35 import java.util.Set;\n36 import org.slf4j.Logger;\n37 import org.slf4j.LoggerFactory;\n38 \n39 /**\n40  * Creates the directory structure {@code /configuration/country/:country} and writes the app configuration parameters\n41  * into a zip file.\n42  */\n43 public class AppConfigurationDirectory extends DirectoryOnDisk {\n44 \n45   private static final Logger logger = LoggerFactory.getLogger(AppConfigurationDirectory.class);\n46 \n47   private final IndexDirectoryOnDisk<String> countryDirectory;\n48   private final ApplicationConfiguration applicationConfiguration;\n49   private final CryptoProvider cryptoProvider;\n50   private final DistributionServiceConfig distributionServiceConfig;\n51 \n52   /**\n53    * Creates an {@link AppConfigurationDirectory} for the exposure configuration and risk score classification.\n54    *\n55    * @param cryptoProvider The {@link CryptoProvider} whose artifacts to use for creating the signature.\n56    */\n57   public AppConfigurationDirectory(ApplicationConfiguration applicationConfiguration, CryptoProvider cryptoProvider,\n58       DistributionServiceConfig distributionServiceConfig) {\n59     super(distributionServiceConfig.getApi().getParametersPath());\n60     this.applicationConfiguration = applicationConfiguration;\n61     this.cryptoProvider = cryptoProvider;\n62     this.distributionServiceConfig = distributionServiceConfig;\n63 \n64     countryDirectory = new IndexDirectoryOnDisk<>(distributionServiceConfig.getApi().getCountryPath(),\n65         ignoredValue -> Set.of(distributionServiceConfig.getApi().getCountryGermany()), Object::toString);\n66 \n67     addConfigurationArchiveIfValid(distributionServiceConfig.getApi().getAppConfigFileName());\n68 \n69     this.addWritable(new IndexingDecoratorOnDisk<>(countryDirectory, distributionServiceConfig.getOutputFileName()));\n70   }\n71 \n72   /**\n73    * If validation of the {@link ApplicationConfiguration} succeeds, it is written into a file, put into an archive with\n74    * the specified name and added to the specified parent directory.\n75    */\n76   private void addConfigurationArchiveIfValid(String archiveName) {\n77     ConfigurationValidator validator = new ApplicationConfigurationValidator(applicationConfiguration);\n78     ValidationResult validationResult = validator.validate();\n79 \n80     if (validationResult.hasErrors()) {\n81       logger.error(\"App configuration file creation failed. Validation failed for {}, {}\",\n82           archiveName, validationResult);\n83       return;\n84     }\n85 \n86     ArchiveOnDisk appConfigurationFile = new ArchiveOnDisk(archiveName);\n87     appConfigurationFile.addWritable(new FileOnDisk(\"export.bin\", applicationConfiguration.toByteArray()));\n88     countryDirectory.addWritableToAll(ignoredValue ->\n89         new AppConfigurationSigningDecorator(appConfigurationFile, cryptoProvider, distributionServiceConfig));\n90   }\n91 }\n92 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.component;\n22 \n23 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n24 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n25 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n26 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;\n27 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n28 import java.util.Set;\n29 import org.springframework.stereotype.Component;\n30 \n31 /**\n32  * Assembles the content underneath the {@code /version} path of the CWA API.\n33  */\n34 @Component\n35 public class CwaApiStructureProvider {\n36 \n37   private final AppConfigurationStructureProvider appConfigurationStructureProvider;\n38   private final DiagnosisKeysStructureProvider diagnosisKeysStructureProvider;\n39   private final DistributionServiceConfig distributionServiceConfig;\n40 \n41   /**\n42    * Creates a new CwaApiStructureProvider.\n43    */\n44   CwaApiStructureProvider(\n45       AppConfigurationStructureProvider appConfigurationStructureProvider,\n46       DiagnosisKeysStructureProvider diagnosisKeysStructureProvider,\n47       DistributionServiceConfig distributionServiceConfig) {\n48     this.appConfigurationStructureProvider = appConfigurationStructureProvider;\n49     this.diagnosisKeysStructureProvider = diagnosisKeysStructureProvider;\n50     this.distributionServiceConfig = distributionServiceConfig;\n51   }\n52 \n53   /**\n54    * Returns the base directory.\n55    */\n56   public Directory<WritableOnDisk> getDirectory() {\n57     IndexDirectoryOnDisk<String> versionDirectory = new IndexDirectoryOnDisk<>(\n58         distributionServiceConfig.getApi().getVersionPath(),\n59         ignoredValue -> Set.of(distributionServiceConfig.getApi().getVersionV1()),\n60         Object::toString);\n61 \n62     versionDirectory.addWritableToAll(ignoredValue -> appConfigurationStructureProvider.getAppConfiguration());\n63     versionDirectory.addWritableToAll(ignoredValue -> diagnosisKeysStructureProvider.getDiagnosisKeys());\n64 \n65     return new IndexingDecoratorOnDisk<>(versionDirectory, distributionServiceConfig.getOutputFileName());\n66   }\n67 }\n68 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;\n22 \n23 import static java.time.ZoneOffset.UTC;\n24 import static java.util.Collections.emptyList;\n25 \n26 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n27 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n28 import java.time.LocalDate;\n29 import java.time.LocalDateTime;\n30 import java.time.temporal.Temporal;\n31 import java.util.Collection;\n32 import java.util.HashMap;\n33 import java.util.List;\n34 import java.util.Map;\n35 import java.util.Optional;\n36 import java.util.Set;\n37 import java.util.concurrent.TimeUnit;\n38 import java.util.stream.Collectors;\n39 import org.slf4j.Logger;\n40 import org.slf4j.LoggerFactory;\n41 \n42 /**\n43  * An instance of this class contains a collection of {@link DiagnosisKey DiagnosisKeys}.\n44  */\n45 public abstract class DiagnosisKeyBundler {\n46 \n47   private static final Logger logger = LoggerFactory.getLogger(DiagnosisKeyBundler.class);\n48 \n49   /**\n50    * The submission timestamp is counted in 1 hour intervals since epoch.\n51    */\n52   public static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);\n53 \n54   /**\n55    * The rolling start interval number is counted in 10 minute intervals since epoch.\n56    */\n57   public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);\n58 \n59   protected final long expiryPolicyMinutes;\n60   protected final int minNumberOfKeysPerBundle;\n61   private final int maxNumberOfKeysPerBundle;\n62 \n63   // The hour at which the distribution runs. This field is needed to prevent the run from distributing any keys that\n64   // have already been submitted but may only be distributed in the future (e.g. because they are not expired yet).\n65   protected LocalDateTime distributionTime;\n66 \n67   // A map containing diagnosis keys, grouped by the LocalDateTime on which they may be distributed\n68   protected final Map<LocalDateTime, List<DiagnosisKey>> distributableDiagnosisKeys = new HashMap<>();\n69 \n70   /**\n71    * Constructs a DiagnosisKeyBundler based on the specified service configuration.\n72    */\n73   public DiagnosisKeyBundler(DistributionServiceConfig distributionServiceConfig) {\n74     this.expiryPolicyMinutes = distributionServiceConfig.getExpiryPolicyMinutes();\n75     this.minNumberOfKeysPerBundle = distributionServiceConfig.getShiftingPolicyThreshold();\n76     this.maxNumberOfKeysPerBundle = distributionServiceConfig.getMaximumNumberOfKeysPerBundle();\n77   }\n78 \n79   /**\n80    * Creates a {@link LocalDateTime} based on the specified epoch timestamp.\n81    */\n82   public static LocalDateTime getLocalDateTimeFromHoursSinceEpoch(long timestamp) {\n83     return LocalDateTime.ofEpochSecond(TimeUnit.HOURS.toSeconds(timestamp), 0, UTC);\n84   }\n85 \n86   /**\n87    * Sets the {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler} and the time at which the\n88    * distribution runs and calls {@link DiagnosisKeyBundler#createDiagnosisKeyDistributionMap}.\n89    *\n90    * @param diagnosisKeys    The {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.\n91    * @param distributionTime The {@link LocalDateTime} at which the distribution runs.\n92    */\n93   public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys, LocalDateTime distributionTime) {\n94     this.distributionTime = distributionTime;\n95     this.createDiagnosisKeyDistributionMap(diagnosisKeys);\n96   }\n97 \n98   /**\n99    * Returns all {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.\n100    */\n101   public List<DiagnosisKey> getAllDiagnosisKeys() {\n102     return this.distributableDiagnosisKeys.values().stream()\n103         .flatMap(List::stream)\n104         .collect(Collectors.toList());\n105   }\n106 \n107   /**\n108    * Initializes the internal {@code distributableDiagnosisKeys} map, which should contain all diagnosis keys, grouped\n109    * by the LocalDateTime on which they may be distributed.\n110    */\n111   protected abstract void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys);\n112 \n113   /**\n114    * Returns a set of all {@link LocalDate dates} on which {@link DiagnosisKey diagnosis keys} shall be distributed.\n115    */\n116   public Set<LocalDate> getDatesWithDistributableDiagnosisKeys() {\n117     return this.distributableDiagnosisKeys.keySet().stream()\n118         .map(LocalDateTime::toLocalDate)\n119         .filter(this::numberOfKeysForDateBelowMaximum)\n120         .collect(Collectors.toSet());\n121   }\n122 \n123   public boolean numberOfKeysForDateBelowMaximum(LocalDate date) {\n124     return numberOfKeysBelowMaximum(getDiagnosisKeysForDate(date).size(), date);\n125   }\n126 \n127   /**\n128    * Returns a set of all {@link LocalDateTime hours} of a specified {@link LocalDate date} during which {@link\n129    * DiagnosisKey diagnosis keys} shall be distributed.\n130    */\n131   public Set<LocalDateTime> getHoursWithDistributableDiagnosisKeys(LocalDate currentDate) {\n132     return this.distributableDiagnosisKeys.keySet().stream()\n133         .filter(dateTime -> dateTime.toLocalDate().equals(currentDate))\n134         .filter(this::numberOfKeysForHourBelowMaximum)\n135         .collect(Collectors.toSet());\n136   }\n137 \n138   private boolean numberOfKeysForHourBelowMaximum(LocalDateTime hour) {\n139     return numberOfKeysBelowMaximum(getDiagnosisKeysForHour(hour).size(), hour);\n140   }\n141 \n142   private boolean numberOfKeysBelowMaximum(int numberOfKeys, Temporal time) {\n143     if (numberOfKeys > maxNumberOfKeysPerBundle) {\n144       logger.error(\"Number of diagnosis keys ({}) for {} exceeds the configured maximum.\", numberOfKeys, time);\n145       return false;\n146     } else {\n147       return true;\n148     }\n149   }\n150 \n151   /**\n152    * Returns the submission timestamp of a {@link DiagnosisKey} as a {@link LocalDateTime}.\n153    */\n154   protected LocalDateTime getSubmissionDateTime(DiagnosisKey diagnosisKey) {\n155     return LocalDateTime.ofEpochSecond(diagnosisKey.getSubmissionTimestamp() * ONE_HOUR_INTERVAL_SECONDS, 0, UTC);\n156   }\n157 \n158   /**\n159    * Returns all diagnosis keys that should be distributed on a specific date.\n160    */\n161   public List<DiagnosisKey> getDiagnosisKeysForDate(LocalDate date) {\n162     return this.distributableDiagnosisKeys.keySet().stream()\n163         .filter(dateTime -> dateTime.toLocalDate().equals(date))\n164         .map(this::getDiagnosisKeysForHour)\n165         .flatMap(List::stream)\n166         .collect(Collectors.toList());\n167   }\n168 \n169   /**\n170    * Returns all diagnosis keys that should be distributed in a specific hour.\n171    */\n172   public List<DiagnosisKey> getDiagnosisKeysForHour(LocalDateTime hour) {\n173     return Optional\n174         .ofNullable(this.distributableDiagnosisKeys.get(hour))\n175         .orElse(emptyList());\n176   }\n177 }\n178 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n25 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n26 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.DateAggregatingDecorator;\n27 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.DateIndexingDecorator;\n28 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n29 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;\n30 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n31 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n32 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n33 import java.time.LocalDate;\n34 import java.util.Set;\n35 \n36 public class DiagnosisKeysCountryDirectory extends IndexDirectoryOnDisk<String> {\n37 \n38   private final DiagnosisKeyBundler diagnosisKeyBundler;\n39   private final CryptoProvider cryptoProvider;\n40   private final DistributionServiceConfig distributionServiceConfig;\n41 \n42   /**\n43    * Constructs a {@link DiagnosisKeysCountryDirectory} instance that represents the {@code .../country/:country/...}\n44    * portion of the diagnosis key directory structure.\n45    *\n46    * @param diagnosisKeyBundler A {@link DiagnosisKeyBundler} containing the {@link DiagnosisKey DiagnosisKeys}.\n47    * @param cryptoProvider      The {@link CryptoProvider} used for payload signing.\n48    */\n49   public DiagnosisKeysCountryDirectory(DiagnosisKeyBundler diagnosisKeyBundler,\n50       CryptoProvider cryptoProvider, DistributionServiceConfig distributionServiceConfig) {\n51     super(distributionServiceConfig.getApi().getCountryPath(), ignoredValue ->\n52         Set.of(distributionServiceConfig.getApi().getCountryGermany()), Object::toString);\n53     this.diagnosisKeyBundler = diagnosisKeyBundler;\n54     this.cryptoProvider = cryptoProvider;\n55     this.distributionServiceConfig = distributionServiceConfig;\n56   }\n57 \n58   @Override\n59   public void prepare(ImmutableStack<Object> indices) {\n60     this.addWritableToAll(ignoredValue ->\n61         decorateDateDirectory(\n62             new DiagnosisKeysDateDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig)));\n63     super.prepare(indices);\n64   }\n65 \n66   private IndexDirectory<LocalDate, WritableOnDisk> decorateDateDirectory(DiagnosisKeysDateDirectory dateDirectory) {\n67     return new DateAggregatingDecorator(new DateIndexingDecorator(dateDirectory, distributionServiceConfig),\n68         cryptoProvider, distributionServiceConfig, diagnosisKeyBundler);\n69   }\n70 }\n71 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n25 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n26 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.HourIndexingDecorator;\n27 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n28 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n29 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n30 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n31 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n32 import java.time.LocalDate;\n33 import java.time.format.DateTimeFormatter;\n34 \n35 public class DiagnosisKeysDateDirectory extends IndexDirectoryOnDisk<LocalDate> {\n36 \n37   private static final DateTimeFormatter ISO8601 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n38 \n39   private final DiagnosisKeyBundler diagnosisKeyBundler;\n40   private final CryptoProvider cryptoProvider;\n41   private final DistributionServiceConfig distributionServiceConfig;\n42 \n43   /**\n44    * Constructs a {@link DiagnosisKeysDateDirectory} instance associated with the specified {@link DiagnosisKey}\n45    * collection. Payload signing is be performed according to the specified {@link CryptoProvider}.\n46    *\n47    * @param diagnosisKeyBundler A {@link DiagnosisKeyBundler} containing the {@link DiagnosisKey DiagnosisKeys}.\n48    * @param cryptoProvider      The {@link CryptoProvider} used for payload signing.\n49    */\n50   public DiagnosisKeysDateDirectory(DiagnosisKeyBundler diagnosisKeyBundler,\n51       CryptoProvider cryptoProvider, DistributionServiceConfig distributionServiceConfig) {\n52     super(distributionServiceConfig.getApi().getDatePath(),\n53         ignoredValue -> diagnosisKeyBundler.getDatesWithDistributableDiagnosisKeys(), ISO8601::format);\n54     this.cryptoProvider = cryptoProvider;\n55     this.diagnosisKeyBundler = diagnosisKeyBundler;\n56     this.distributionServiceConfig = distributionServiceConfig;\n57   }\n58 \n59   @Override\n60   public void prepare(ImmutableStack<Object> indices) {\n61     this.addWritableToAll(ignoredValue -> {\n62       DiagnosisKeysHourDirectory hourDirectory =\n63           new DiagnosisKeysHourDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig);\n64       return decorateHourDirectory(hourDirectory);\n65     });\n66     super.prepare(indices);\n67   }\n68 \n69   private Directory<WritableOnDisk> decorateHourDirectory(DiagnosisKeysHourDirectory hourDirectory) {\n70     return new HourIndexingDecorator(hourDirectory, distributionServiceConfig);\n71   }\n72 }\n73 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n25 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n26 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.signing.DiagnosisKeySigningDecorator;\n27 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;\n28 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n29 import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n30 import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n31 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n32 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n33 import app.coronawarn.server.services.distribution.assembly.structure.file.File;\n34 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n35 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n36 import java.time.LocalDate;\n37 import java.time.LocalDateTime;\n38 import java.time.ZoneOffset;\n39 import java.util.List;\n40 \n41 public class DiagnosisKeysHourDirectory extends IndexDirectoryOnDisk<LocalDateTime> {\n42 \n43   private final DiagnosisKeyBundler diagnosisKeyBundler;\n44   private final CryptoProvider cryptoProvider;\n45   private final DistributionServiceConfig distributionServiceConfig;\n46 \n47   /**\n48    * Constructs a {@link DiagnosisKeysHourDirectory} instance for the specified date.\n49    *\n50    * @param diagnosisKeyBundler A {@link DiagnosisKeyBundler} containing the {@link DiagnosisKey DiagnosisKeys}.\n51    * @param cryptoProvider      The {@link CryptoProvider} used for cryptographic signing.\n52    */\n53   public DiagnosisKeysHourDirectory(DiagnosisKeyBundler diagnosisKeyBundler, CryptoProvider cryptoProvider,\n54       DistributionServiceConfig distributionServiceConfig) {\n55     super(distributionServiceConfig.getApi().getHourPath(),\n56         indices -> diagnosisKeyBundler.getHoursWithDistributableDiagnosisKeys(((LocalDate) indices.peek())),\n57         LocalDateTime::getHour);\n58     this.diagnosisKeyBundler = diagnosisKeyBundler;\n59     this.cryptoProvider = cryptoProvider;\n60     this.distributionServiceConfig = distributionServiceConfig;\n61   }\n62 \n63   @Override\n64   public void prepare(ImmutableStack<Object> indices) {\n65     this.addWritableToAll(currentIndices -> {\n66       LocalDateTime currentHour = (LocalDateTime) currentIndices.peek();\n67       // The LocalDateTime currentHour already contains both the date and the hour information, so\n68       // we can throw away the LocalDate that's the second item on the stack from the \"/date\"\n69       // IndexDirectory.\n70       String region = (String) currentIndices.pop().pop().peek();\n71 \n72       List<DiagnosisKey> diagnosisKeysForCurrentHour =\n73           this.diagnosisKeyBundler.getDiagnosisKeysForHour(currentHour);\n74 \n75       long startTimestamp = currentHour.toEpochSecond(ZoneOffset.UTC);\n76       long endTimestamp = currentHour.plusHours(1).toEpochSecond(ZoneOffset.UTC);\n77       File<WritableOnDisk> temporaryExposureKeyExportFile = TemporaryExposureKeyExportFile.fromDiagnosisKeys(\n78           diagnosisKeysForCurrentHour, region, startTimestamp, endTimestamp, distributionServiceConfig);\n79 \n80       Archive<WritableOnDisk> hourArchive = new ArchiveOnDisk(distributionServiceConfig.getOutputFileName());\n81       hourArchive.addWritable(temporaryExposureKeyExportFile);\n82 \n83       return decorateDiagnosisKeyArchive(hourArchive);\n84     });\n85     super.prepare(indices);\n86   }\n87 \n88   private Directory<WritableOnDisk> decorateDiagnosisKeyArchive(Archive<WritableOnDisk> archive) {\n89     return new DiagnosisKeySigningDecorator(archive, cryptoProvider, distributionServiceConfig);\n90   }\n91 }\n92 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator;\n22 \n23 import static app.coronawarn.server.services.distribution.assembly.structure.util.functional.CheckedFunction.uncheckedFunction;\n24 \n25 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n26 import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKeyExport;\n27 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n28 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n29 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.signing.DiagnosisKeySigningDecorator;\n30 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;\n31 import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n32 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n33 import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n34 import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n35 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n36 import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n37 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;\n38 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.DirectoryDecorator;\n39 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.IndexDirectoryDecorator;\n40 import app.coronawarn.server.services.distribution.assembly.structure.file.File;\n41 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n42 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n43 import java.time.LocalDate;\n44 import java.util.List;\n45 import java.util.NoSuchElementException;\n46 import java.util.Optional;\n47 import java.util.Set;\n48 import java.util.stream.Collectors;\n49 import java.util.stream.Stream;\n50 \n51 /**\n52  * A {@link DirectoryDecorator} that will bundle hour aggregates into date aggregates and sign them.\n53  */\n54 public class DateAggregatingDecorator extends IndexDirectoryDecorator<LocalDate, WritableOnDisk> {\n55 \n56   private final CryptoProvider cryptoProvider;\n57   private final DistributionServiceConfig distributionServiceConfig;\n58   private final DiagnosisKeyBundler diagnosisKeyBundler;\n59 \n60   /**\n61    * Creates a new DateAggregatingDecorator.\n62    */\n63   public DateAggregatingDecorator(IndexDirectory<LocalDate, WritableOnDisk> directory, CryptoProvider cryptoProvider,\n64       DistributionServiceConfig distributionServiceConfig, DiagnosisKeyBundler diagnosisKeyBundler) {\n65     super(directory);\n66     this.cryptoProvider = cryptoProvider;\n67     this.distributionServiceConfig = distributionServiceConfig;\n68     this.diagnosisKeyBundler = diagnosisKeyBundler;\n69   }\n70 \n71   @Override\n72   public void prepare(ImmutableStack<Object> indices) {\n73     super.prepare(indices);\n74     Set<Directory<WritableOnDisk>> dayDirectories = this.getWritables().stream()\n75         .filter(writable -> writable instanceof DirectoryOnDisk)\n76         .map(directory -> (DirectoryOnDisk) directory)\n77         .collect(Collectors.toSet());\n78     if (dayDirectories.isEmpty()) {\n79       return;\n80     }\n81 \n82     Set<String> dates = this.getIndex(indices).stream()\n83         .filter(diagnosisKeyBundler::numberOfKeysForDateBelowMaximum)\n84         .map(this.getIndexFormatter())\n85         .map(Object::toString)\n86         .collect(Collectors.toSet());\n87 \n88     dayDirectories.stream()\n89         .filter(dayDirectory -> dates.contains(dayDirectory.getName()))\n90         .forEach(currentDirectory -> Stream.of(currentDirectory)\n91             .map(this::getSubSubDirectoryArchives)\n92             .map(this::getTemporaryExposureKeyExportFilesFromArchives)\n93             .map(this::parseTemporaryExposureKeyExportsFromFiles)\n94             .map(this::reduceTemporaryExposureKeyExportsToNewFile)\n95             .map(temporaryExposureKeyExportFile -> {\n96               Archive<WritableOnDisk> aggregate = new ArchiveOnDisk(distributionServiceConfig.getOutputFileName());\n97               aggregate.addWritable(temporaryExposureKeyExportFile);\n98               return aggregate;\n99             })\n100             .map(file -> new DiagnosisKeySigningDecorator(file, cryptoProvider, distributionServiceConfig))\n101             .forEach(aggregate -> {\n102               currentDirectory.addWritable(aggregate);\n103               aggregate.prepare(indices);\n104             })\n105         );\n106   }\n107 \n108   /**\n109    * Returns all archives that are 3 levels down from the root directory.\n110    */\n111   private Set<Archive<WritableOnDisk>> getSubSubDirectoryArchives(Directory<WritableOnDisk> rootDirectory) {\n112     return getWritablesInDirectory(rootDirectory, 3).stream()\n113         .filter(Writable::isArchive)\n114         .map(archive -> (Archive<WritableOnDisk>) archive)\n115         .collect(Collectors.toSet());\n116   }\n117 \n118   /**\n119    * Traverses a directory {@code depth} levels deep and returns a flattened list of all writables at that depth. A\n120    * {@code depth} of 0 or less returns a set only containing the root directory. A depth of 1 returns a set of\n121    * writables in the root directory. A depth of 2 returns a set of all writables in all directories in the root\n122    * directory, and so on.\n123    *\n124    * @param rootDirectory The directory in which to start traversal.\n125    * @param depth         The depth to traverse.\n126    * @return All writables that are {@code depth} levels down.\n127    */\n128   private Set<Writable<WritableOnDisk>> getWritablesInDirectory(Directory<WritableOnDisk> rootDirectory, int depth) {\n129     if (depth <= 0) {\n130       return Set.of(rootDirectory);\n131     } else if (depth == 1) {\n132       return rootDirectory.getWritables();\n133     } else {\n134       return rootDirectory.getWritables().stream()\n135           .filter(Writable::isDirectory)\n136           .flatMap(directory -> getWritablesInDirectory((Directory<WritableOnDisk>) directory, depth - 1).stream())\n137           .collect(Collectors.toSet());\n138     }\n139   }\n140 \n141   private Set<TemporaryExposureKeyExportFile> getTemporaryExposureKeyExportFilesFromArchives(\n142       Set<Archive<WritableOnDisk>> hourArchives) {\n143     return hourArchives.stream()\n144         .map(Directory::getWritables)\n145         .map(writables -> writables.stream()\n146             .filter(writable -> writable.getName().equals(\"export.bin\")))\n147         .map(Stream::findFirst)\n148         .map(Optional::orElseThrow)\n149         .filter(writable -> writable instanceof File)\n150         .map(file -> (TemporaryExposureKeyExportFile) file)\n151         .collect(Collectors.toSet());\n152   }\n153 \n154   private Set<TemporaryExposureKeyExport> parseTemporaryExposureKeyExportsFromFiles(\n155       Set<TemporaryExposureKeyExportFile> temporaryExposureKeyExportFiles) {\n156     return temporaryExposureKeyExportFiles.stream()\n157         .map(TemporaryExposureKeyExportFile::getBytesWithoutHeader)\n158         .map(uncheckedFunction(TemporaryExposureKeyExport::parseFrom))\n159         .collect(Collectors.toSet());\n160   }\n161 \n162   private TemporaryExposureKeyExportFile reduceTemporaryExposureKeyExportsToNewFile(\n163       Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n164     return TemporaryExposureKeyExportFile.fromTemporaryExposureKeys(\n165         getTemporaryExposureKeys(temporaryExposureKeyExports),\n166         getRegion(temporaryExposureKeyExports),\n167         getStartTimestamp(temporaryExposureKeyExports),\n168         getEndTimestamp(temporaryExposureKeyExports),\n169         distributionServiceConfig\n170     );\n171   }\n172 \n173   private static Set<TemporaryExposureKey> getTemporaryExposureKeys(\n174       Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n175     return temporaryExposureKeyExports.stream()\n176         .map(TemporaryExposureKeyExport::getKeysList)\n177         .flatMap(List::stream)\n178         .collect(Collectors.toSet());\n179   }\n180 \n181   private static String getRegion(Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n182     return temporaryExposureKeyExports.stream()\n183         .map(TemporaryExposureKeyExport::getRegion)\n184         .findAny()\n185         .orElseThrow(NoSuchElementException::new);\n186   }\n187 \n188   private static long getStartTimestamp(\n189       Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n190     return temporaryExposureKeyExports.stream()\n191         .mapToLong(TemporaryExposureKeyExport::getStartTimestamp)\n192         .min()\n193         .orElseThrow(NoSuchElementException::new);\n194   }\n195 \n196   private static long getEndTimestamp(Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n197     return temporaryExposureKeyExports.stream()\n198         .mapToLong(TemporaryExposureKeyExport::getEndTimestamp)\n199         .max()\n200         .orElseThrow(NoSuchElementException::new);\n201   }\n202 }\n203 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.structure.directory;\n22 \n23 import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n24 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n25 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n26 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.Formatter;\n27 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.IndexFunction;\n28 import app.coronawarn.server.services.distribution.assembly.structure.util.functional.WritableFunction;\n29 import java.util.HashSet;\n30 import java.util.Set;\n31 \n32 /**\n33  * An {@link IndexDirectory} that can be written to disk.\n34  *\n35  * @param <T> The type of the elements in the index.\n36  */\n37 public class IndexDirectoryOnDisk<T> extends DirectoryOnDisk implements IndexDirectory<T, WritableOnDisk> {\n38 \n39   // Writables to be written into every directory created through the index\n40   private final Set<WritableFunction<WritableOnDisk>> metaWritables = new HashSet<>();\n41   private final IndexFunction<T> indexFunction;\n42   private final Formatter<T> indexFormatter;\n43 \n44   /**\n45    * Constructs a {@link IndexDirectoryOnDisk} instance that represents a directory, containing an index in the form of\n46    * sub directories.\n47    *\n48    * @param name           The name that this directory should have on disk.\n49    * @param indexFunction  An {@link IndexFunction} that calculates the index of this {@link IndexDirectoryOnDisk} from\n50    *                       a {@link ImmutableStack} of parent {@link IndexDirectoryOnDisk} indices. The top element of\n51    *                       the stack is from the closest {@link IndexDirectoryOnDisk} in the parent chain.\n52    * @param indexFormatter A {@link Formatter} used to format the directory name for each index element returned by the\n53    *                       {@link IndexDirectoryOnDisk#indexFunction}.\n54    */\n55   public IndexDirectoryOnDisk(String name, IndexFunction<T> indexFunction, Formatter<T> indexFormatter) {\n56     super(name);\n57     this.indexFunction = indexFunction;\n58     this.indexFormatter = indexFormatter;\n59   }\n60 \n61   @Override\n62   public Formatter<T> getIndexFormatter() {\n63     return this.indexFormatter;\n64   }\n65 \n66   @Override\n67   public Set<T> getIndex(ImmutableStack<Object> indices) {\n68     return this.indexFunction.apply(indices);\n69   }\n70 \n71   @Override\n72   public void addWritableToAll(WritableFunction<WritableOnDisk> writableFunction) {\n73     this.metaWritables.add(writableFunction);\n74   }\n75 \n76   /**\n77    * Creates a new subdirectory for every element of the {@link IndexDirectory#getIndex index} and writes all its\n78    * {@link IndexDirectory#addWritableToAll writables} to those. The respective element of the index will be pushed\n79    * onto the Stack for subsequent {@link Writable#prepare} calls.\n80    *\n81    * @param indices A {@link ImmutableStack} of parameters from all {@link IndexDirectory IndexDirectories} further up\n82    *                in the hierarchy. The Stack may contain different types, depending on the types {@code T} of {@link\n83    *                IndexDirectory IndexDirectories} further up in the hierarchy.\n84    */\n85   @Override\n86   public void prepare(ImmutableStack<Object> indices) {\n87     super.prepare(indices);\n88     this.prepareIndex(indices);\n89   }\n90 \n91   private void prepareIndex(ImmutableStack<Object> indices) {\n92     this.getIndex(indices).forEach(currentIndex -> {\n93       ImmutableStack<Object> newIndices = indices.push(currentIndex);\n94       DirectoryOnDisk subDirectory = makeSubDirectory(currentIndex);\n95       prepareMetaWritables(newIndices, subDirectory);\n96     });\n97   }\n98 \n99   private DirectoryOnDisk makeSubDirectory(T index) {\n100     DirectoryOnDisk subDirectory = new DirectoryOnDisk(this.indexFormatter.apply(index).toString());\n101     this.addWritable(subDirectory);\n102     return subDirectory;\n103   }\n104 \n105   private void prepareMetaWritables(ImmutableStack<Object> indices, DirectoryOnDisk target) {\n106     this.metaWritables.forEach(metaWritableFunction -> {\n107       Writable<WritableOnDisk> newWritable = metaWritableFunction.apply(indices);\n108       target.addWritable(newWritable);\n109       newWritable.prepare(indices);\n110     });\n111   }\n112 }\n113 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/functional/WritableFunction.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.structure.util.functional;\n22 \n23 import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n24 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n25 import java.util.function.Function;\n26 \n27 /**\n28  * A {@code Function<Stack<Object>, Writable>}.\n29  *\n30  * @param <T> The specific type of {@link Writable} that this {@link WritableFunction} can create.\n31  */\n32 @FunctionalInterface\n33 public interface WritableFunction<T extends Writable<T>> extends Function<ImmutableStack<Object>, Writable<T>> {\n34 \n35   Writable<T> apply(ImmutableStack<Object> t);\n36 }\n37 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/functional/WritableFunction.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Sure, here is the patch file for the provided issue:\n\n<patch>\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java\n@@ -56,7 +56,7 @@\n    public DiagnosisKeysCountryDirectory(DiagnosisKeyBundler diagnosisKeyBundler,\n        CryptoProvider cryptoProvider, DistributionServiceConfig distributionServiceConfig) {\n     super(distributionServiceConfig.getApi().getCountryPath(), ignoredValue ->\n-        Set.of(distributionServiceConfig.getApi().getCountryGermany()), Object::toString);\n+        Set.of(distributionServiceConfig.getApi().getCountryGermany()), String::valueOf);\n     this.diagnosisKeyBundler = diagnosisKeyBundler;\n     this.cryptoProvider = cryptoProvider;\n     this.distributionServiceConfig = distributionServiceConfig;\n</patch>\n\nPlease let me know if you need any further assistance.",
        "model_patch": "\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java\n@@ -56,7 +56,7 @@\n    public DiagnosisKeysCountryDirectory(DiagnosisKeyBundler diagnosisKeyBundler,\n        CryptoProvider cryptoProvider, DistributionServiceConfig distributionServiceConfig) {\n     super(distributionServiceConfig.getApi().getCountryPath(), ignoredValue ->\n-        Set.of(distributionServiceConfig.getApi().getCountryGermany()), Object::toString);\n+        Set.of(distributionServiceConfig.getApi().getCountryGermany()), String::valueOf);\n     this.diagnosisKeyBundler = diagnosisKeyBundler;\n     this.cryptoProvider = cryptoProvider;\n     this.distributionServiceConfig = distributionServiceConfig;\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 629,
        "issue_numbers": [
            "607"
        ],
        "base_commit": "2e2655a94ae13a663cdbbcb17c5b1065edccf90b",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/appconfig/structure/directory/AppConfigurationDirectory.java\n@@ -32,6 +32,7 @@\n import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;\n import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import java.util.Optional;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -86,6 +87,7 @@ private void addConfigurationArchiveIfValid(String archiveName) {\n     ArchiveOnDisk appConfigurationFile = new ArchiveOnDisk(archiveName);\n     appConfigurationFile.addWritable(new FileOnDisk(\"export.bin\", applicationConfiguration.toByteArray()));\n     countryDirectory.addWritableToAll(ignoredValue ->\n-        new AppConfigurationSigningDecorator(appConfigurationFile, cryptoProvider, distributionServiceConfig));\n+        Optional\n+            .of(new AppConfigurationSigningDecorator(appConfigurationFile, cryptoProvider, distributionServiceConfig)));\n   }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/CwaApiStructureProvider.java\n@@ -25,6 +25,7 @@\n import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import java.util.Optional;\n import java.util.Set;\n import org.springframework.stereotype.Component;\n \n@@ -59,8 +60,10 @@ public Directory<WritableOnDisk> getDirectory() {\n         ignoredValue -> Set.of(distributionServiceConfig.getApi().getVersionV1()),\n         Object::toString);\n \n-    versionDirectory.addWritableToAll(ignoredValue -> appConfigurationStructureProvider.getAppConfiguration());\n-    versionDirectory.addWritableToAll(ignoredValue -> diagnosisKeysStructureProvider.getDiagnosisKeys());\n+    versionDirectory.addWritableToAll(ignoredValue ->\n+        Optional.of(appConfigurationStructureProvider.getAppConfiguration()));\n+    versionDirectory.addWritableToAll(ignoredValue ->\n+        Optional.of(diagnosisKeysStructureProvider.getDiagnosisKeys()));\n \n     return new IndexingDecoratorOnDisk<>(versionDirectory, distributionServiceConfig.getOutputFileName());\n   }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n@@ -95,6 +95,13 @@ public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys, LocalDateTi\n     this.createDiagnosisKeyDistributionMap(diagnosisKeys);\n   }\n \n+  /**\n+   * Returns the {@link LocalDateTime} at which the distribution runs.\n+   */\n+  public LocalDateTime getDistributionTime() {\n+    return this.distributionTime;\n+  }\n+\n   /**\n    * Returns all {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.\n    */\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysCountryDirectory.java\n@@ -23,7 +23,6 @@\n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.DateAggregatingDecorator;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.DateIndexingDecorator;\n import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;\n@@ -31,6 +30,7 @@\n import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n import java.time.LocalDate;\n+import java.util.Optional;\n import java.util.Set;\n \n public class DiagnosisKeysCountryDirectory extends IndexDirectoryOnDisk<String> {\n@@ -57,14 +57,12 @@ public DiagnosisKeysCountryDirectory(DiagnosisKeyBundler diagnosisKeyBundler,\n \n   @Override\n   public void prepare(ImmutableStack<Object> indices) {\n-    this.addWritableToAll(ignoredValue ->\n-        decorateDateDirectory(\n-            new DiagnosisKeysDateDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig)));\n+    this.addWritableToAll(ignoredValue -> Optional.of(decorateDateDirectory(\n+        new DiagnosisKeysDateDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig))));\n     super.prepare(indices);\n   }\n \n   private IndexDirectory<LocalDate, WritableOnDisk> decorateDateDirectory(DiagnosisKeysDateDirectory dateDirectory) {\n-    return new DateAggregatingDecorator(new DateIndexingDecorator(dateDirectory, distributionServiceConfig),\n-        cryptoProvider, distributionServiceConfig, diagnosisKeyBundler);\n+    return new DateIndexingDecorator(dateDirectory, distributionServiceConfig);\n   }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java\n@@ -23,14 +23,23 @@\n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.signing.DiagnosisKeySigningDecorator;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.HourIndexingDecorator;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;\n+import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n+import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.file.File;\n import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n import java.time.LocalDate;\n+import java.time.ZoneOffset;\n import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Optional;\n \n public class DiagnosisKeysDateDirectory extends IndexDirectoryOnDisk<LocalDate> {\n \n@@ -61,12 +70,39 @@ public void prepare(ImmutableStack<Object> indices) {\n     this.addWritableToAll(ignoredValue -> {\n       DiagnosisKeysHourDirectory hourDirectory =\n           new DiagnosisKeysHourDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig);\n-      return decorateHourDirectory(hourDirectory);\n+      return Optional.of(decorateHourDirectory(hourDirectory));\n     });\n+    this.addWritableToAll(this::indicesToDateDirectoryArchive);\n     super.prepare(indices);\n   }\n \n+  private Optional<Writable<WritableOnDisk>> indicesToDateDirectoryArchive(ImmutableStack<Object> currentIndices) {\n+    LocalDate currentDate = (LocalDate) currentIndices.peek();\n+    if (currentDate.equals(diagnosisKeyBundler.getDistributionTime().toLocalDate())) {\n+      return Optional.empty();\n+    }\n+    String region = (String) currentIndices.pop().peek();\n+\n+    List<DiagnosisKey> diagnosisKeysForCurrentHour =\n+        this.diagnosisKeyBundler.getDiagnosisKeysForDate(currentDate);\n+\n+    long startTimestamp = currentDate.atStartOfDay().toEpochSecond(ZoneOffset.UTC);\n+    long endTimestamp = currentDate.plusDays(1).atStartOfDay().toEpochSecond(ZoneOffset.UTC);\n+\n+    File<WritableOnDisk> temporaryExposureKeyExportFile = TemporaryExposureKeyExportFile.fromDiagnosisKeys(\n+        diagnosisKeysForCurrentHour, region, startTimestamp, endTimestamp, distributionServiceConfig);\n+\n+    Archive<WritableOnDisk> dateArchive = new ArchiveOnDisk(distributionServiceConfig.getOutputFileName());\n+    dateArchive.addWritable(temporaryExposureKeyExportFile);\n+\n+    return Optional.of(decorateDiagnosisKeyArchive(dateArchive));\n+  }\n+\n   private Directory<WritableOnDisk> decorateHourDirectory(DiagnosisKeysHourDirectory hourDirectory) {\n     return new HourIndexingDecorator(hourDirectory, distributionServiceConfig);\n   }\n+\n+  private Directory<WritableOnDisk> decorateDiagnosisKeyArchive(Archive<WritableOnDisk> archive) {\n+    return new DiagnosisKeySigningDecorator(archive, cryptoProvider, distributionServiceConfig);\n+  }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n@@ -37,6 +37,7 @@\n import java.time.LocalDateTime;\n import java.time.ZoneOffset;\n import java.util.List;\n+import java.util.Optional;\n \n public class DiagnosisKeysHourDirectory extends IndexDirectoryOnDisk<LocalDateTime> {\n \n@@ -80,7 +81,7 @@ public void prepare(ImmutableStack<Object> indices) {\n       Archive<WritableOnDisk> hourArchive = new ArchiveOnDisk(distributionServiceConfig.getOutputFileName());\n       hourArchive.addWritable(temporaryExposureKeyExportFile);\n \n-      return decorateDiagnosisKeyArchive(hourArchive);\n+      return Optional.of(decorateDiagnosisKeyArchive(hourArchive));\n     });\n     super.prepare(indices);\n   }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java\ndeleted file mode 100644\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateAggregatingDecorator.java\n+++ /dev/null\n@@ -1,202 +0,0 @@\n-/*-\n- * ---license-start\n- * Corona-Warn-App\n- * ---\n- * Copyright (C) 2020 SAP SE and all other contributors\n- * ---\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ---license-end\n- */\n-\n-package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator;\n-\n-import static app.coronawarn.server.services.distribution.assembly.structure.util.functional.CheckedFunction.uncheckedFunction;\n-\n-import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKey;\n-import app.coronawarn.server.common.protocols.external.exposurenotification.TemporaryExposureKeyExport;\n-import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.signing.DiagnosisKeySigningDecorator;\n-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;\n-import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n-import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n-import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n-import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.DirectoryDecorator;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.IndexDirectoryDecorator;\n-import app.coronawarn.server.services.distribution.assembly.structure.file.File;\n-import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n-import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n-import java.time.LocalDate;\n-import java.util.List;\n-import java.util.NoSuchElementException;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-/**\n- * A {@link DirectoryDecorator} that will bundle hour aggregates into date aggregates and sign them.\n- */\n-public class DateAggregatingDecorator extends IndexDirectoryDecorator<LocalDate, WritableOnDisk> {\n-\n-  private final CryptoProvider cryptoProvider;\n-  private final DistributionServiceConfig distributionServiceConfig;\n-  private final DiagnosisKeyBundler diagnosisKeyBundler;\n-\n-  /**\n-   * Creates a new DateAggregatingDecorator.\n-   */\n-  public DateAggregatingDecorator(IndexDirectory<LocalDate, WritableOnDisk> directory, CryptoProvider cryptoProvider,\n-      DistributionServiceConfig distributionServiceConfig, DiagnosisKeyBundler diagnosisKeyBundler) {\n-    super(directory);\n-    this.cryptoProvider = cryptoProvider;\n-    this.distributionServiceConfig = distributionServiceConfig;\n-    this.diagnosisKeyBundler = diagnosisKeyBundler;\n-  }\n-\n-  @Override\n-  public void prepare(ImmutableStack<Object> indices) {\n-    super.prepare(indices);\n-    Set<Directory<WritableOnDisk>> dayDirectories = this.getWritables().stream()\n-        .filter(writable -> writable instanceof DirectoryOnDisk)\n-        .map(directory -> (DirectoryOnDisk) directory)\n-        .collect(Collectors.toSet());\n-    if (dayDirectories.isEmpty()) {\n-      return;\n-    }\n-\n-    Set<String> dates = this.getIndex(indices).stream()\n-        .filter(diagnosisKeyBundler::numberOfKeysForDateBelowMaximum)\n-        .map(this.getIndexFormatter())\n-        .map(Object::toString)\n-        .collect(Collectors.toSet());\n-\n-    dayDirectories.stream()\n-        .filter(dayDirectory -> dates.contains(dayDirectory.getName()))\n-        .forEach(currentDirectory -> Stream.of(currentDirectory)\n-            .map(this::getSubSubDirectoryArchives)\n-            .map(this::getTemporaryExposureKeyExportFilesFromArchives)\n-            .map(this::parseTemporaryExposureKeyExportsFromFiles)\n-            .map(this::reduceTemporaryExposureKeyExportsToNewFile)\n-            .map(temporaryExposureKeyExportFile -> {\n-              Archive<WritableOnDisk> aggregate = new ArchiveOnDisk(distributionServiceConfig.getOutputFileName());\n-              aggregate.addWritable(temporaryExposureKeyExportFile);\n-              return aggregate;\n-            })\n-            .map(file -> new DiagnosisKeySigningDecorator(file, cryptoProvider, distributionServiceConfig))\n-            .forEach(aggregate -> {\n-              currentDirectory.addWritable(aggregate);\n-              aggregate.prepare(indices);\n-            })\n-        );\n-  }\n-\n-  /**\n-   * Returns all archives that are 3 levels down from the root directory.\n-   */\n-  private Set<Archive<WritableOnDisk>> getSubSubDirectoryArchives(Directory<WritableOnDisk> rootDirectory) {\n-    return getWritablesInDirectory(rootDirectory, 3).stream()\n-        .filter(Writable::isArchive)\n-        .map(archive -> (Archive<WritableOnDisk>) archive)\n-        .collect(Collectors.toSet());\n-  }\n-\n-  /**\n-   * Traverses a directory {@code depth} levels deep and returns a flattened list of all writables at that depth. A\n-   * {@code depth} of 0 or less returns a set only containing the root directory. A depth of 1 returns a set of\n-   * writables in the root directory. A depth of 2 returns a set of all writables in all directories in the root\n-   * directory, and so on.\n-   *\n-   * @param rootDirectory The directory in which to start traversal.\n-   * @param depth         The depth to traverse.\n-   * @return All writables that are {@code depth} levels down.\n-   */\n-  private Set<Writable<WritableOnDisk>> getWritablesInDirectory(Directory<WritableOnDisk> rootDirectory, int depth) {\n-    if (depth <= 0) {\n-      return Set.of(rootDirectory);\n-    } else if (depth == 1) {\n-      return rootDirectory.getWritables();\n-    } else {\n-      return rootDirectory.getWritables().stream()\n-          .filter(Writable::isDirectory)\n-          .flatMap(directory -> getWritablesInDirectory((Directory<WritableOnDisk>) directory, depth - 1).stream())\n-          .collect(Collectors.toSet());\n-    }\n-  }\n-\n-  private Set<TemporaryExposureKeyExportFile> getTemporaryExposureKeyExportFilesFromArchives(\n-      Set<Archive<WritableOnDisk>> hourArchives) {\n-    return hourArchives.stream()\n-        .map(Directory::getWritables)\n-        .map(writables -> writables.stream()\n-            .filter(writable -> writable.getName().equals(\"export.bin\")))\n-        .map(Stream::findFirst)\n-        .map(Optional::orElseThrow)\n-        .filter(writable -> writable instanceof File)\n-        .map(file -> (TemporaryExposureKeyExportFile) file)\n-        .collect(Collectors.toSet());\n-  }\n-\n-  private Set<TemporaryExposureKeyExport> parseTemporaryExposureKeyExportsFromFiles(\n-      Set<TemporaryExposureKeyExportFile> temporaryExposureKeyExportFiles) {\n-    return temporaryExposureKeyExportFiles.stream()\n-        .map(TemporaryExposureKeyExportFile::getBytesWithoutHeader)\n-        .map(uncheckedFunction(TemporaryExposureKeyExport::parseFrom))\n-        .collect(Collectors.toSet());\n-  }\n-\n-  private TemporaryExposureKeyExportFile reduceTemporaryExposureKeyExportsToNewFile(\n-      Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n-    return TemporaryExposureKeyExportFile.fromTemporaryExposureKeys(\n-        getTemporaryExposureKeys(temporaryExposureKeyExports),\n-        getRegion(temporaryExposureKeyExports),\n-        getStartTimestamp(temporaryExposureKeyExports),\n-        getEndTimestamp(temporaryExposureKeyExports),\n-        distributionServiceConfig\n-    );\n-  }\n-\n-  private static Set<TemporaryExposureKey> getTemporaryExposureKeys(\n-      Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n-    return temporaryExposureKeyExports.stream()\n-        .map(TemporaryExposureKeyExport::getKeysList)\n-        .flatMap(List::stream)\n-        .collect(Collectors.toSet());\n-  }\n-\n-  private static String getRegion(Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n-    return temporaryExposureKeyExports.stream()\n-        .map(TemporaryExposureKeyExport::getRegion)\n-        .findAny()\n-        .orElseThrow(NoSuchElementException::new);\n-  }\n-\n-  private static long getStartTimestamp(\n-      Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n-    return temporaryExposureKeyExports.stream()\n-        .mapToLong(TemporaryExposureKeyExport::getStartTimestamp)\n-        .min()\n-        .orElseThrow(NoSuchElementException::new);\n-  }\n-\n-  private static long getEndTimestamp(Set<TemporaryExposureKeyExport> temporaryExposureKeyExports) {\n-    return temporaryExposureKeyExports.stream()\n-        .mapToLong(TemporaryExposureKeyExport::getEndTimestamp)\n-        .max()\n-        .orElseThrow(NoSuchElementException::new);\n-  }\n-}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryOnDisk.java\n@@ -27,6 +27,7 @@\n import app.coronawarn.server.services.distribution.assembly.structure.util.functional.IndexFunction;\n import app.coronawarn.server.services.distribution.assembly.structure.util.functional.WritableFunction;\n import java.util.HashSet;\n+import java.util.Optional;\n import java.util.Set;\n \n /**\n@@ -74,9 +75,9 @@ public void addWritableToAll(WritableFunction<WritableOnDisk> writableFunction)\n   }\n \n   /**\n-   * Creates a new subdirectory for every element of the {@link IndexDirectory#getIndex index} and writes all its\n-   * {@link IndexDirectory#addWritableToAll writables} to those. The respective element of the index will be pushed\n-   * onto the Stack for subsequent {@link Writable#prepare} calls.\n+   * Creates a new subdirectory for every element of the {@link IndexDirectory#getIndex index} and writes all its {@link\n+   * IndexDirectory#addWritableToAll writables} to those. The respective element of the index will be pushed onto the\n+   * Stack for subsequent {@link Writable#prepare} calls.\n    *\n    * @param indices A {@link ImmutableStack} of parameters from all {@link IndexDirectory IndexDirectories} further up\n    *                in the hierarchy. The Stack may contain different types, depending on the types {@code T} of {@link\n@@ -104,9 +105,11 @@ private DirectoryOnDisk makeSubDirectory(T index) {\n \n   private void prepareMetaWritables(ImmutableStack<Object> indices, DirectoryOnDisk target) {\n     this.metaWritables.forEach(metaWritableFunction -> {\n-      Writable<WritableOnDisk> newWritable = metaWritableFunction.apply(indices);\n-      target.addWritable(newWritable);\n-      newWritable.prepare(indices);\n+      Optional<Writable<WritableOnDisk>> maybeNewWritable = metaWritableFunction.apply(indices);\n+      maybeNewWritable.ifPresent(newWritable -> {\n+        target.addWritable(newWritable);\n+        newWritable.prepare(indices);\n+      });\n     });\n   }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/functional/WritableFunction.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/functional/WritableFunction.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/functional/WritableFunction.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/structure/util/functional/WritableFunction.java\n@@ -22,6 +22,7 @@\n \n import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n+import java.util.Optional;\n import java.util.function.Function;\n \n /**\n@@ -30,7 +31,8 @@\n  * @param <T> The specific type of {@link Writable} that this {@link WritableFunction} can create.\n  */\n @FunctionalInterface\n-public interface WritableFunction<T extends Writable<T>> extends Function<ImmutableStack<Object>, Writable<T>> {\n+public interface WritableFunction<T extends Writable<T>> extends\n+    Function<ImmutableStack<Object>, Optional<Writable<T>>> {\n \n-  Writable<T> apply(ImmutableStack<Object> t);\n+  Optional<Writable<T>> apply(ImmutableStack<Object> t);\n }\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerKeyRetrievalTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerKeyRetrievalTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerKeyRetrievalTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerKeyRetrievalTest.java\n@@ -180,4 +180,12 @@ void testEmptyListWhenGettingDiagnosisKeysForHourBeforeEarliestDiagnosisKey() {\n     bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n     assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 1, 0, 0, 0))).isEmpty();\n   }\n+\n+  @Test\n+  void testGetsCorrectDistributionDate(){\n+    LocalDateTime expected = LocalDateTime.of(1970, 1, 5, 0, 0);\n+    List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 2, 4, 0), 5);\n+    bundler.setDiagnosisKeys(diagnosisKeys, expected);\n+    assertThat(bundler.getDistributionTime()).isEqualTo(expected);\n+  }\n }\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectoryTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectoryTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectoryTest.java\n@@ -0,0 +1,185 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n+\n+import static app.coronawarn.server.services.distribution.common.Helpers.buildDiagnosisKeys;\n+import static app.coronawarn.server.services.distribution.common.Helpers.getExpectedDateAndHourFiles;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.ProdDiagnosisKeyBundler;\n+import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n+import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n+import app.coronawarn.server.services.distribution.common.Helpers;\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Rule;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.rules.TemporaryFolder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {CryptoProvider.class, DistributionServiceConfig.class},\n+    initializers = ConfigFileApplicationContextInitializer.class)\n+class DiagnosisKeysDateDirectoryTest {\n+\n+  @Rule\n+  private final TemporaryFolder outputFolder = new TemporaryFolder();\n+\n+  @Autowired\n+  CryptoProvider cryptoProvider;\n+\n+  @Autowired\n+  DistributionServiceConfig distributionServiceConfig;\n+\n+  private File outputFile;\n+\n+  @BeforeEach\n+  void setupAll() throws IOException {\n+    outputFolder.create();\n+    outputFile = outputFolder.newFolder();\n+  }\n+\n+  private void runDateDistribution(Collection<DiagnosisKey> diagnosisKeys, LocalDateTime distributionTime) {\n+    DiagnosisKeyBundler bundler = new ProdDiagnosisKeyBundler(distributionServiceConfig);\n+    bundler\n+        .setDiagnosisKeys(diagnosisKeys, distributionTime);\n+    DiagnosisKeysDateDirectory dateDirectory = new DiagnosisKeysDateDirectory(bundler, cryptoProvider,\n+        distributionServiceConfig);\n+    Directory<WritableOnDisk> outputDirectory = new DirectoryOnDisk(outputFile);\n+    outputDirectory.addWritable(dateDirectory);\n+    dateDirectory.prepare(new ImmutableStack<>()\n+        .push(\"version-directory\")\n+        .push(\"country-directory\"));\n+    outputDirectory.write();\n+  }\n+\n+  @Test\n+  void testCreatesCorrectDirectoryStructureForMultipleDates() {\n+    Collection<DiagnosisKey> diagnosisKeys = IntStream.range(0, 3)\n+        .mapToObj(currentDate -> IntStream.range(0, 5)\n+            .mapToObj(currentHour ->\n+                buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3 + currentDate, 0, 0).plusHours(currentHour), 5))\n+            .flatMap(List::stream)\n+            .collect(Collectors.toList()))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    runDateDistribution(diagnosisKeys, LocalDateTime.of(1970, 1, 6, 0, 0));\n+    Set<String> actualFiles = Helpers.getFilePaths(outputFile, outputFile.getAbsolutePath());\n+    Set<String> expectedDateAndHourFiles = getExpectedDateAndHourFiles(Map.of(\n+        \"1970-01-03\", List.of(\"0\", \"1\", \"2\", \"3\", \"4\"),\n+        \"1970-01-04\", List.of(\"0\", \"1\", \"2\", \"3\", \"4\"),\n+        \"1970-01-05\", List.of(\"0\", \"1\", \"2\", \"3\", \"4\")), \"1970-01-06\");\n+    assertThat(actualFiles).isEqualTo(expectedDateAndHourFiles);\n+  }\n+\n+  @Test\n+  void testDoesNotIncludeCurrentDateInDirectoryStructure() {\n+    Collection<DiagnosisKey> diagnosisKeys = IntStream.range(0, 3)\n+        .mapToObj(currentDate -> IntStream.range(0, 5)\n+            .mapToObj(currentHour ->\n+                buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3 + currentDate, 0, 0).plusHours(currentHour), 5))\n+            .flatMap(List::stream)\n+            .collect(Collectors.toList()))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    runDateDistribution(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 12, 0));\n+    Set<String> actualFiles = Helpers.getFilePaths(outputFile, outputFile.getAbsolutePath());\n+    Set<String> expectedDateAndHourFiles = getExpectedDateAndHourFiles(Map.of(\n+        \"1970-01-03\", List.of(\"0\", \"1\", \"2\", \"3\", \"4\"),\n+        \"1970-01-04\", List.of(\"0\", \"1\", \"2\", \"3\", \"4\"),\n+        \"1970-01-05\", List.of(\"0\", \"1\", \"2\", \"3\", \"4\")), \"1970-01-05\");\n+    assertThat(actualFiles).isEqualTo(expectedDateAndHourFiles);\n+  }\n+\n+  @Test\n+  void testDoesNotIncludeEmptyDatesInDirectoryStructure() {\n+    Collection<DiagnosisKey> diagnosisKeys = IntStream.range(0, 3)\n+        .filter(currentDate -> currentDate != 1)\n+        .mapToObj(currentDate -> IntStream.range(0, 5)\n+            .mapToObj(currentHour ->\n+                buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3 + currentDate, 0, 0).plusHours(currentHour), 5))\n+            .flatMap(List::stream)\n+            .collect(Collectors.toList()))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+\n+    runDateDistribution(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 12, 0));\n+    Set<String> actualFiles = Helpers.getFilePaths(outputFile, outputFile.getAbsolutePath());\n+    Set<String> expectedDateAndHourFiles = getExpectedDateAndHourFiles(Map.of(\n+        \"1970-01-03\", List.of(\"0\", \"1\", \"2\", \"3\", \"4\"),\n+        \"1970-01-05\", List.of(\"0\", \"1\", \"2\", \"3\", \"4\")), \"1970-01-05\");\n+    assertThat(actualFiles).isEqualTo(expectedDateAndHourFiles);\n+  }\n+\n+  @Test\n+  void testDoesNotIncludeDatesWithTooFewKeysInDirectoryStructure() {\n+    Collection<DiagnosisKey> diagnosisKeys = List.of(\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 1, 0), 5),\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 4, 1, 0), 4),\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 5, 1, 0), 5))\n+        .stream()\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    runDateDistribution(diagnosisKeys, LocalDateTime.of(1970, 1, 6, 12, 0));\n+    Set<String> actualFiles = Helpers.getFilePaths(outputFile, outputFile.getAbsolutePath());\n+    Set<String> expectedDateAndHourFiles = getExpectedDateAndHourFiles(Map.of(\n+        \"1970-01-03\", List.of(\"1\"),\n+        \"1970-01-05\", List.of(\"1\")), \"1970-01-06\");\n+    assertThat(actualFiles).isEqualTo(expectedDateAndHourFiles);\n+  }\n+\n+  @Test\n+  void testDoesNotIncludeDatesInTheFuture() {\n+    Collection<DiagnosisKey> diagnosisKeys = List.of(\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 1, 0), 5),\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 4, 1, 0), 5),\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 5, 1, 0), 5))\n+        .stream()\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    runDateDistribution(diagnosisKeys, LocalDateTime.of(1970, 1, 4, 12, 0));\n+    Set<String> actualFiles = Helpers.getFilePaths(outputFile, outputFile.getAbsolutePath());\n+    Set<String> expectedDateAndHourFiles = getExpectedDateAndHourFiles(Map.of(\n+        \"1970-01-03\", List.of(\"1\"),\n+        \"1970-01-04\", List.of(\"1\")), \"1970-01-04\");\n+    assertThat(actualFiles).isEqualTo(expectedDateAndHourFiles);\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectoryTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectoryTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectoryTest.java\n@@ -0,0 +1,156 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n+\n+import static app.coronawarn.server.services.distribution.common.Helpers.buildDiagnosisKeys;\n+import static app.coronawarn.server.services.distribution.common.Helpers.getExpectedHourFiles;\n+import static app.coronawarn.server.services.distribution.common.Helpers.getFilePaths;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.ProdDiagnosisKeyBundler;\n+import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n+import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n+import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Rule;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.rules.TemporaryFolder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {CryptoProvider.class, DistributionServiceConfig.class},\n+    initializers = ConfigFileApplicationContextInitializer.class)\n+class DiagnosisKeysHourDirectoryTest {\n+\n+  @Rule\n+  private final TemporaryFolder outputFolder = new TemporaryFolder();\n+\n+  @Autowired\n+  CryptoProvider cryptoProvider;\n+\n+  @Autowired\n+  DistributionServiceConfig distributionServiceConfig;\n+\n+  private File outputFile;\n+\n+  @BeforeEach\n+  void setupAll() throws IOException {\n+    outputFolder.create();\n+    outputFile = outputFolder.newFolder();\n+  }\n+\n+  private void runHourDistribution(Collection<DiagnosisKey> diagnosisKeys, LocalDateTime distributionTime) {\n+    DiagnosisKeyBundler bundler = new ProdDiagnosisKeyBundler(distributionServiceConfig);\n+    bundler.setDiagnosisKeys(diagnosisKeys, distributionTime);\n+    DiagnosisKeysHourDirectory hourDirectory = new DiagnosisKeysHourDirectory(bundler, cryptoProvider,\n+        distributionServiceConfig);\n+    Directory<WritableOnDisk> outputDirectory = new DirectoryOnDisk(outputFile);\n+    outputDirectory.addWritable(hourDirectory);\n+    hourDirectory.prepare(new ImmutableStack<>()\n+        .push(\"version-directory\")\n+        .push(\"country-directory\")\n+        .push(LocalDate.of(1970, 1, 3)) // date-directory\n+    );\n+    outputDirectory.write();\n+  }\n+\n+  @Test\n+  void testCreatesCorrectStructureForMultipleHours() {\n+    Collection<DiagnosisKey> diagnosisKeys = IntStream.range(0, 5)\n+        .mapToObj(currentHour -> buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 0, 0).plusHours(currentHour), 5))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    runHourDistribution(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    Set<String> actualFiles = getFilePaths(outputFile, outputFile.getAbsolutePath());\n+    assertThat(actualFiles).isEqualTo(getExpectedHourFiles(Set.of(\"0\", \"1\", \"2\", \"3\", \"4\")));\n+  }\n+\n+  @Test\n+  void testDoesNotIncludeEmptyHours() {\n+    Collection<DiagnosisKey> diagnosisKeys = IntStream.range(0, 5)\n+        .filter(currentHour -> currentHour != 3)\n+        .mapToObj(currentHour -> buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 0, 0).plusHours(currentHour), 5))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    runHourDistribution(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    Set<String> actualFiles = getFilePaths(outputFile, outputFile.getAbsolutePath());\n+    assertThat(actualFiles).isEqualTo(getExpectedHourFiles(Set.of(\"0\", \"1\", \"2\", \"4\")));\n+  }\n+\n+  @Test\n+  void testDoesNotIncludeCurrentHour() {\n+    Collection<DiagnosisKey> diagnosisKeys = IntStream.range(0, 5)\n+        .mapToObj(currentHour -> buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 0, 0).plusHours(currentHour), 5))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    runHourDistribution(diagnosisKeys, LocalDateTime.of(1970, 1, 3, 4, 0));\n+    Set<String> actualFiles = getFilePaths(outputFile, outputFile.getAbsolutePath());\n+    assertThat(actualFiles).isEqualTo(getExpectedHourFiles(Set.of(\"0\", \"1\", \"2\", \"3\")));\n+  }\n+\n+  @Test\n+  void testDoesNotIncludeHoursWithTooFewKeys() {\n+    Collection<DiagnosisKey> diagnosisKeys = List.of(\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 0, 0), 5),\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 1, 0), 4),\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 2, 0), 5))\n+        .stream()\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    runHourDistribution(diagnosisKeys, LocalDateTime.of(1970, 1, 6, 12, 0));\n+    Set<String> actualFiles = getFilePaths(outputFile, outputFile.getAbsolutePath());\n+    assertThat(actualFiles).isEqualTo(getExpectedHourFiles(Set.of(\"0\", \"2\")));\n+  }\n+\n+  @Test\n+  void testDoesNotIncludeHoursInTheFuture() {\n+    Collection<DiagnosisKey> diagnosisKeys = List.of(\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 0, 0), 5),\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 1, 0), 5),\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 2, 0), 5))\n+        .stream()\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    runHourDistribution(diagnosisKeys, LocalDateTime.of(1970, 1, 3, 1, 0));\n+    Set<String> actualFiles = getFilePaths(outputFile, outputFile.getAbsolutePath());\n+    assertThat(actualFiles).isEqualTo(getExpectedHourFiles(Set.of(\"0\")));\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/structure/directory/IndexDirectoryTest.java\n@@ -32,6 +32,7 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -79,7 +80,7 @@ void checkAddFileToAll() {\n     indexDirectory.addWritableToAll(ignoredValue -> {\n       FileOnDisk newFile = new FileOnDisk(\"index\", new byte[0]);\n       expectedFileList.add(newFile);\n-      return newFile;\n+      return Optional.of(newFile);\n     });\n \n     prepareAndWrite(outputDirectory);\n@@ -104,7 +105,7 @@ void checkAddDirectoryToAll() {\n     indexDirectory.addWritableToAll(ignoredValue -> {\n       DirectoryOnDisk newDirectory = new DirectoryOnDisk(\"something\");\n       expectedFileList.add(newDirectory);\n-      return newDirectory;\n+      return Optional.of(newDirectory);\n     });\n \n     prepareAndWrite(outputDirectory);\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java\n@@ -21,6 +21,7 @@\n package app.coronawarn.server.services.distribution.common;\n \n import static app.coronawarn.server.services.distribution.assembly.appconfig.YamlLoader.loadYamlIntoProtobufBuilder;\n+import static java.io.File.separator;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.common.protocols.internal.ApplicationConfiguration;\n@@ -31,7 +32,10 @@\n import java.time.LocalDateTime;\n import java.time.ZoneOffset;\n import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -95,4 +99,34 @@ public static Set<String> getFilePaths(java.io.File root, String basePath) {\n   public static ApplicationConfiguration loadApplicationConfiguration(String path) throws UnableToLoadFileException {\n     return loadYamlIntoProtobufBuilder(path, ApplicationConfiguration.Builder.class).build();\n   }\n+\n+  public static Set<String> getExpectedHourFiles(Collection<String> hours) {\n+    return hours.stream()\n+        .map(hour -> Set.of(\n+            String.join(separator, \"hour\", hour, \"index\"),\n+            String.join(separator, \"hour\", hour, \"index.checksum\")))\n+        .flatMap(Set::stream)\n+        .collect(Collectors.toSet());\n+  }\n+\n+  public static Set<String> getExpectedDateAndHourFiles(Map<String, List<String>> datesAndHours, String currentDate) {\n+    Set<String> expectedFiles = new HashSet<>();\n+\n+    datesAndHours.forEach((date, hours) -> {\n+      if (!date.equals(currentDate)) {\n+        expectedFiles.add(String.join(separator, \"date\", date, \"index\"));\n+        expectedFiles.add(String.join(separator, \"date\", date, \"index.checksum\"));\n+      }\n+\n+      expectedFiles.add(String.join(separator, \"date\", date, \"hour\", \"index\"));\n+      expectedFiles.add(String.join(separator, \"date\", date, \"hour\", \"index.checksum\"));\n+\n+      hours.forEach(hour -> {\n+        expectedFiles.add(String.join(separator, \"date\", date, \"hour\", hour, \"index\"));\n+        expectedFiles.add(String.join(separator, \"date\", date, \"hour\", hour, \"index.checksum\"));\n+      });\n+    });\n+\n+    return expectedFiles;\n+  }\n }\n",
        "problem_statement": "Simplifying DateAggregatingDecorator\nThe DateAggregatingDecorator should make more use of the `DiagnosisKeyBundler`. Please team up with @pithumke on this. \n",
        "hints_text": "",
        "created_at": "2020-06-25T15:35:31Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-387",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nUse typed client and entities for tan verification\n## Current Implementation\r\nThe current tan verification look like this:\r\nhttps://github.com/corona-warn-app/cwa-server/blob/3b98beb268bac511c00f8e13bcbb4978a8cdb4fd/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java#L102-L115\r\n\r\nThere are a couple of issues I would see here:\r\n1. The tan entity is build from a string which can cause bugs, encoding issues an more.\r\n2. When the interface of the verification server changes (and this a repo owned by the same organization) this has to be modified as well and can cause runtime bugs without proper system testing\r\n\r\n## Suggested Enhancement\r\nI would suggest two things\r\n1. Create a DTO (Pojo) for the tan payload and pass that to the rest template to let Jackson handle serialization\r\n2. If a dependency between cwa projects is \"allowed\" (which I would think is perfectly fine)  I would actually move that entity to the verification server project in a separate maven module. I would add [Spring Feign client ](https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html) and use that in the CWA server. Feign is like the reverse version of `@RestController` and supports the same annotations. It will create the client implementation from the given interface at runtime.\r\n\r\nThe client would look like this:\r\n\r\n```\r\n@FeignClient(name = \"verification-server\", url = \"${services.submission.verification.baseUrl}\")\r\npublic interface StoreClient {\r\n\r\n    @RequestMapping(method = RequestMethod.POST, value = \"${services.submission.verification.path}\", consumes = \"application/json\")\r\n    ValidationResult validateTan(Tan tan); // both classes should be Pojos\r\n}\r\n```\r\n\r\nThe usage would look like this (I did not actually implemented that!):\r\n\r\n```\r\n private boolean verifyWithVerificationService(String tanString) {\r\n   Tan tan = Tan.from(tanString); // This should also do the UUID verification!\r\n    \r\n    ValidationResult result = verificationServer.validateTan(tan);\r\n\r\n    return result != null;\r\n  }\r\n```\r\n\r\n## Expected Benefits\r\n- Compilation breaks when interface changes\r\n- Less risk of bugs\r\n\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile          | Effect\n148 -----------------|-------------\n149 `dev`            | Turns the log level to `DEBUG`.\n150 `cloud`          | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`           | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten.\n152 `testdata`       | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 `signature-dev`  | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n154 `signature-prod` | Provides production app package IDs for the signature info\n155 \n156 ### Submission\n157 \n158 Profile      | Effect\n159 -------------|-------------\n160 `dev`        | Turns the log level to `DEBUG`.\n161 `cloud`      | Removes default values for the `datasource` configuration.\n162 \n163 ## Documentation\n164 \n165 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n166 \n167 ## Support and Feedback\n168 \n169 The following channels are available for discussions, feedback, and support requests:\n170 \n171 | Type                     | Channel                                                |\n172 | ------------------------ | ------------------------------------------------------ |\n173 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n174 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n175 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n176 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n177 \n178 ## How to Contribute\n179 \n180 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n181 \n182 ## Contributors\n183 \n184 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n185 \n186 ## Repositories\n187 \n188 The following public repositories are currently available for the Corona-Warn-App:\n189 \n190 | Repository          | Description                                                           |\n191 | ------------------- | --------------------------------------------------------------------- |\n192 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n193 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n194 | [cwa-verification-server] | Backend implementation of the verification process|\n195 \n196 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n197 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n198 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n199 [Postgres]: https://www.postgresql.org/\n200 [HSQLDB]: http://hsqldb.org/\n201 [Zenko CloudServer]: https://github.com/scality/cloudserver\n202 \n203 ## Licensing\n204 \n205 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n206 \n207 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n208 \n209 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n210 \n211 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n212 \n[end of README.md]\n[start of /dev/null]\n1 \n[end of /dev/null]\n[start of THIRD-PARTY-NOTICES]\n1 ThirdPartyNotices\n2 -----------------\n3 corona-warn-app/cwa-server uses third-party software or other resources that\n4 may be distributed under licenses different from corona-warn-app/cwa-server\n5 software.\n6 In the event that we overlooked to list a required notice, please bring this\n7 to our attention by contacting us via this email:\n8 corona-warn-app.opensource@sap.com\n9 \n10 \n11 Components:\n12 -----------\n13 Component: Bouncy Castle\n14 Licensor:  Legion of the Bouncy Castle Inc.\n15 Website:   https://www.bouncycastle.org/\n16 License:   MIT License\n17 \n18 Component: Commons IO\n19 Licensor:  Apache Software Foundation\n20 Website:   https://commons.apache.org/proper/commons-io/\n21 License:   Apache License 2.0\n22 \n23 Component: Commons Math 3\n24 Licensor:  Apache Software Foundation\n25 Website:   https://commons.apache.org/proper/commons-math/\n26 License:   Apache License 2.0\n27 \n28 Component: dom4j\n29 Licensor:  dom4j\n30 Website:   https://dom4j.github.io/\n31 License:   BSD License\n32 \n33 Component: flyway\n34 Licensor:  flyway\n35 Website:   https://github.com/flyway/flyway\n36 License:   Apache License 2.0\n37 \n38 Component: H2Database\n39 Licensor:  H2\n40 Website:   http://www.h2database.com/\n41 License:   Mozilla Public License 2.0\n42 \n43 Component: JSON-Simple\n44 Licensor:  Yidong Fang\n45 Website:   https://github.com/fangyidong/json-simple\n46 License:   Apache License 2.0\n47 \n48 Component: Maven\n49 Licensor:  Apache Software Foundation\n50 Website:   https://maven.apache.org/\n51 License:   Apache License 2.0\n52 \n53 Component: MinIO Object Storage\n54 Licensor:  MinIO Inc.\n55 Website:   https://min.io/\n56 License:   Apache License 2.0\n57 \n58 Component: MojoHaus Flatten Maven Plugin\n59 Licensor:  MojoHaus\n60 Website:   https://www.mojohaus.org/flatten-maven-plugin/\n61 License:   Apache License 2.0\n62 \n63 Component: PostgreSQL\n64 Licensor:  PostgreSQL\n65 Website:   https://www.postgresql.org/\n66 License:   PostgreSQL License\n67 \n68 Component: Protocol Buffers\n69 Licensor:  Google Inc.\n70 Website:   https://developers.google.com/protocol-buffers/\n71 License:   3-Clause BSD License\n72 \n73 Component: snakeyaml\n74 Licensor:  snakeyaml\n75 Website:   https://bitbucket.org/asomov/snakeyaml/\n76 License:   Apache License 2.0\n77 \n78 Component: Spring Boot\n79 Licensor:  VMWare Inc.\n80 Website:   https://spring.io/\n81 License:   Apache License 2.0\n82 \n83 Component: wait-for-it\n84 Licensor:  Giles Hall\n85 Website:   https://github.com/vishnubob/wait-for-it\n86 License:   MIT License\n87 \n88 Component: Zenko CloudServer\n89 Licensor:  Zenko\n90 Website:   https://github.com/scality/cloudserver\n91 License:   Apache License 2.0\n92 \n93 --------------------------------------------------------------------------------\n94 Apache License 2.0 (Commons IO, Commons Math 3, flyway, JSON-Simple,\n95 Maven, MinIO Object Storage, MojoHaus Flatten Maven Plugin, snakeyaml, Spring Boot, Zenko CloudServer)\n96 \n97                                  Apache License\n98                            Version 2.0, January 2004\n99                         https://www.apache.org/licenses/\n100 \n101    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n102 \n103    1. Definitions.\n104 \n105       \"License\" shall mean the terms and conditions for use, reproduction,\n106       and distribution as defined by Sections 1 through 9 of this document.\n107 \n108       \"Licensor\" shall mean the copyright owner or entity authorized by\n109       the copyright owner that is granting the License.\n110 \n111       \"Legal Entity\" shall mean the union of the acting entity and all\n112       other entities that control, are controlled by, or are under common\n113       control with that entity. For the purposes of this definition,\n114       \"control\" means (i) the power, direct or indirect, to cause the\n115       direction or management of such entity, whether by contract or\n116       otherwise, or (ii) ownership of fifty percent (50%) or more of the\n117       outstanding shares, or (iii) beneficial ownership of such entity.\n118 \n119       \"You\" (or \"Your\") shall mean an individual or Legal Entity\n120       exercising permissions granted by this License.\n121 \n122       \"Source\" form shall mean the preferred form for making modifications,\n123       including but not limited to software source code, documentation\n124       source, and configuration files.\n125 \n126       \"Object\" form shall mean any form resulting from mechanical\n127       transformation or translation of a Source form, including but\n128       not limited to compiled object code, generated documentation,\n129       and conversions to other media types.\n130 \n131       \"Work\" shall mean the work of authorship, whether in Source or\n132       Object form, made available under the License, as indicated by a\n133       copyright notice that is included in or attached to the work\n134       (an example is provided in the Appendix below).\n135 \n136       \"Derivative Works\" shall mean any work, whether in Source or Object\n137       form, that is based on (or derived from) the Work and for which the\n138       editorial revisions, annotations, elaborations, or other modifications\n139       represent, as a whole, an original work of authorship. For the purposes\n140       of this License, Derivative Works shall not include works that remain\n141       separable from, or merely link (or bind by name) to the interfaces of,\n142       the Work and Derivative Works thereof.\n143 \n144       \"Contribution\" shall mean any work of authorship, including\n145       the original version of the Work and any modifications or additions\n146       to that Work or Derivative Works thereof, that is intentionally\n147       submitted to Licensor for inclusion in the Work by the copyright owner\n148       or by an individual or Legal Entity authorized to submit on behalf of\n149       the copyright owner. For the purposes of this definition, \"submitted\"\n150       means any form of electronic, verbal, or written communication sent\n151       to the Licensor or its representatives, including but not limited to\n152       communication on electronic mailing lists, source code control systems,\n153       and issue tracking systems that are managed by, or on behalf of, the\n154       Licensor for the purpose of discussing and improving the Work, but\n155       excluding communication that is conspicuously marked or otherwise\n156       designated in writing by the copyright owner as \"Not a Contribution.\"\n157 \n158       \"Contributor\" shall mean Licensor and any individual or Legal Entity\n159       on behalf of whom a Contribution has been received by Licensor and\n160       subsequently incorporated within the Work.\n161 \n162    2. Grant of Copyright License. Subject to the terms and conditions of\n163       this License, each Contributor hereby grants to You a perpetual,\n164       worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n165       copyright license to reproduce, prepare Derivative Works of,\n166       publicly display, publicly perform, sublicense, and distribute the\n167       Work and such Derivative Works in Source or Object form.\n168 \n169    3. Grant of Patent License. Subject to the terms and conditions of\n170       this License, each Contributor hereby grants to You a perpetual,\n171       worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n172       (except as stated in this section) patent license to make, have made,\n173       use, offer to sell, sell, import, and otherwise transfer the Work,\n174       where such license applies only to those patent claims licensable\n175       by such Contributor that are necessarily infringed by their\n176       Contribution(s) alone or by combination of their Contribution(s)\n177       with the Work to which such Contribution(s) was submitted. If You\n178       institute patent litigation against any entity (including a\n179       cross-claim or counterclaim in a lawsuit) alleging that the Work\n180       or a Contribution incorporated within the Work constitutes direct\n181       or contributory patent infringement, then any patent licenses\n182       granted to You under this License for that Work shall terminate\n183       as of the date such litigation is filed.\n184 \n185    4. Redistribution. You may reproduce and distribute copies of the\n186       Work or Derivative Works thereof in any medium, with or without\n187       modifications, and in Source or Object form, provided that You\n188       meet the following conditions:\n189 \n190       (a) You must give any other recipients of the Work or\n191           Derivative Works a copy of this License; and\n192 \n193       (b) You must cause any modified files to carry prominent notices\n194           stating that You changed the files; and\n195 \n196       (c) You must retain, in the Source form of any Derivative Works\n197           that You distribute, all copyright, patent, trademark, and\n198           attribution notices from the Source form of the Work,\n199           excluding those notices that do not pertain to any part of\n200           the Derivative Works; and\n201 \n202       (d) If the Work includes a \"NOTICE\" text file as part of its\n203           distribution, then any Derivative Works that You distribute must\n204           include a readable copy of the attribution notices contained\n205           within such NOTICE file, excluding those notices that do not\n206           pertain to any part of the Derivative Works, in at least one\n207           of the following places: within a NOTICE text file distributed\n208           as part of the Derivative Works; within the Source form or\n209           documentation, if provided along with the Derivative Works; or,\n210           within a display generated by the Derivative Works, if and\n211           wherever such third-party notices normally appear. The contents\n212           of the NOTICE file are for informational purposes only and\n213           do not modify the License. You may add Your own attribution\n214           notices within Derivative Works that You distribute, alongside\n215           or as an addendum to the NOTICE text from the Work, provided\n216           that such additional attribution notices cannot be construed\n217           as modifying the License.\n218 \n219       You may add Your own copyright statement to Your modifications and\n220       may provide additional or different license terms and conditions\n221       for use, reproduction, or distribution of Your modifications, or\n222       for any such Derivative Works as a whole, provided Your use,\n223       reproduction, and distribution of the Work otherwise complies with\n224       the conditions stated in this License.\n225 \n226    5. Submission of Contributions. Unless You explicitly state otherwise,\n227       any Contribution intentionally submitted for inclusion in the Work\n228       by You to the Licensor shall be under the terms and conditions of\n229       this License, without any additional terms or conditions.\n230       Notwithstanding the above, nothing herein shall supersede or modify\n231       the terms of any separate license agreement you may have executed\n232       with Licensor regarding such Contributions.\n233 \n234    6. Trademarks. This License does not grant permission to use the trade\n235       names, trademarks, service marks, or product names of the Licensor,\n236       except as required for reasonable and customary use in describing the\n237       origin of the Work and reproducing the content of the NOTICE file.\n238 \n239    7. Disclaimer of Warranty. Unless required by applicable law or\n240       agreed to in writing, Licensor provides the Work (and each\n241       Contributor provides its Contributions) on an \"AS IS\" BASIS,\n242       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n243       implied, including, without limitation, any warranties or conditions\n244       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n245       PARTICULAR PURPOSE. You are solely responsible for determining the\n246       appropriateness of using or redistributing the Work and assume any\n247       risks associated with Your exercise of permissions under this License.\n248 \n249    8. Limitation of Liability. In no event and under no legal theory,\n250       whether in tort (including negligence), contract, or otherwise,\n251       unless required by applicable law (such as deliberate and grossly\n252       negligent acts) or agreed to in writing, shall any Contributor be\n253       liable to You for damages, including any direct, indirect, special,\n254       incidental, or consequential damages of any character arising as a\n255       result of this License or out of the use or inability to use the\n256       Work (including but not limited to damages for loss of goodwill,\n257       work stoppage, computer failure or malfunction, or any and all\n258       other commercial damages or losses), even if such Contributor\n259       has been advised of the possibility of such damages.\n260 \n261    9. Accepting Warranty or Additional Liability. While redistributing\n262       the Work or Derivative Works thereof, You may choose to offer,\n263       and charge a fee for, acceptance of support, warranty, indemnity,\n264       or other liability obligations and/or rights consistent with this\n265       License. However, in accepting such obligations, You may act only\n266       on Your own behalf and on Your sole responsibility, not on behalf\n267       of any other Contributor, and only if You agree to indemnify,\n268       defend, and hold each Contributor harmless for any liability\n269       incurred by, or claims asserted against, such Contributor by reason\n270       of your accepting any such warranty or additional liability.\n271 \n272    END OF TERMS AND CONDITIONS\n273 --------------------------------------------------------------------------------\n274 BSD License (dom4j)\n275 \n276 Copyright 2001-2016 (C) MetaStuff, Ltd. and DOM4J contributors. All Rights Reserved.\n277 \n278 Redistribution and use of this software and associated documentation\n279 (\"Software\"), with or without modification, are permitted provided\n280 that the following conditions are met:\n281 \n282 1. Redistributions of source code must retain copyright\n283    statements and notices.  Redistributions must also contain a\n284    copy of this document.\n285 \n286 2. Redistributions in binary form must reproduce the\n287    above copyright notice, this list of conditions and the\n288    following disclaimer in the documentation and/or other\n289    materials provided with the distribution.\n290 \n291 3. The name \"DOM4J\" must not be used to endorse or promote\n292    products derived from this Software without prior written\n293    permission of MetaStuff, Ltd.  For written permission,\n294    please contact dom4j-info@metastuff.com.\n295 \n296 4. Products derived from this Software may not be called \"DOM4J\"\n297    nor may \"DOM4J\" appear in their names without prior written\n298    permission of MetaStuff, Ltd. DOM4J is a registered\n299    trademark of MetaStuff, Ltd.\n300 \n301 5. Due credit should be given to the DOM4J Project - https://dom4j.github.io/\n302 \n303 THIS SOFTWARE IS PROVIDED BY METASTUFF, LTD. AND CONTRIBUTORS\n304 ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT\n305 NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n306 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL\n307 METASTUFF, LTD. OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n308 INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n309 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n310 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n311 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n312 STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n313 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n314 OF THE POSSIBILITY OF SUCH DAMAGE.\n315 --------------------------------------------------------------------------------\n316 3-Clause BSD License (Protocol Buffers)\n317 \n318 Copyright 2008 Google Inc.  All rights reserved.\n319 \n320 Redistribution and use in source and binary forms, with or without\n321 modification, are permitted provided that the following conditions are\n322 met:\n323 \n324     * Redistributions of source code must retain the above copyright\n325 notice, this list of conditions and the following disclaimer.\n326     * Redistributions in binary form must reproduce the above\n327 copyright notice, this list of conditions and the following disclaimer\n328 in the documentation and/or other materials provided with the\n329 distribution.\n330     * Neither the name of Google Inc. nor the names of its\n331 contributors may be used to endorse or promote products derived from\n332 this software without specific prior written permission.\n333 \n334 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n335 \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n336 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n337 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n338 OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n339 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n340 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n341 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n342 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n343 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n344 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n345 \n346 Code generated by the Protocol Buffer compiler is owned by the owner\n347 of the input file used when generating it.  This code is not\n348 standalone and requires a support library to be linked with it.  This\n349 support library is itself covered by the above license.\n350 --------------------------------------------------------------------------------\n351 PostgreSQL License (PostgreSQL)\n352 \n353 PostgreSQL Database Management System\n354 (formerly known as Postgres, then as Postgres95)\n355 \n356 Portions Copyright \u00a9 1996-2020, The PostgreSQL Global Development Group\n357 \n358 Portions Copyright \u00a9 1994, The Regents of the University of California\n359 \n360 Permission to use, copy, modify, and distribute this software and its\n361 documentation for any purpose, without fee, and without a written agreement is\n362 hereby granted, provided that the above copyright notice and this paragraph and\n363 the following two paragraphs appear in all copies.\n364 \n365 IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR\n366 DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST\n367 PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n368 THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n369 \n370 THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\n371 BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n372 PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND\n373 THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n374 UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n375 --------------------------------------------------------------------------------\n376 Mozilla Public License 2.0 (H2Database)\n377 \n378 Mozilla Public License\n379 Version 2.0\n380 1. Definitions\n381 1.1. \u201cContributor\u201d\n382 means each individual or legal entity that creates, contributes to the creation\n383 of, or owns Covered Software.\n384 \n385 1.2. \u201cContributor Version\u201d\n386 means the combination of the Contributions of others (if any) used by a\n387 Contributor and that particular Contributor\u2019s Contribution.\n388 \n389 1.3. \u201cContribution\u201d\n390 means Covered Software of a particular Contributor.\n391 \n392 1.4. \u201cCovered Software\u201d\n393 means Source Code Form to which the initial Contributor has attached the notice\n394 in Exhibit A, the Executable Form of such Source Code Form, and Modifications\n395 of such Source Code Form, in each case including portions thereof.\n396 \n397 1.5. \u201cIncompatible With Secondary Licenses\u201d\n398 means\n399 \n400 that the initial Contributor has attached the notice described in Exhibit B to\n401 the Covered Software; or\n402 \n403 that the Covered Software was made available under the terms of version 1.1 or\n404 earlier of the License, but not also under the terms of a Secondary License.\n405 \n406 1.6. \u201cExecutable Form\u201d\n407 means any form of the work other than Source Code Form.\n408 \n409 1.7. \u201cLarger Work\u201d\n410 means a work that combines Covered Software with other material, in a separate\n411 file or files, that is not Covered Software.\n412 \n413 1.8. \u201cLicense\u201d\n414 means this document.\n415 \n416 1.9. \u201cLicensable\u201d\n417 means having the right to grant, to the maximum extent possible, whether at the\n418 time of the initial grant or subsequently, any and all of the rights conveyed\n419 by this License.\n420 \n421 1.10. \u201cModifications\u201d\n422 means any of the following:\n423 \n424 any file in Source Code Form that results from an addition to, deletion from,\n425 or modification of the contents of Covered Software; or\n426 \n427 any new file in Source Code Form that contains any Covered Software.\n428 \n429 1.11. \u201cPatent Claims\u201d of a Contributor\n430 means any patent claim(s), including without limitation, method, process, and\n431 apparatus claims, in any patent Licensable by such Contributor that would be\n432 infringed, but for the grant of the License, by the making, using, selling,\n433 offering for sale, having made, import, or transfer of either its Contributions\n434 or its Contributor Version.\n435 \n436 1.12. \u201cSecondary License\u201d\n437 means either the GNU General Public License, Version 2.0, the GNU Lesser\n438 General Public License, Version 2.1, the GNU Affero General Public License,\n439 Version 3.0, or any later versions of those licenses.\n440 \n441 1.13. \u201cSource Code Form\u201d\n442 means the form of the work preferred for making modifications.\n443 \n444 1.14. \u201cYou\u201d (or \u201cYour\u201d)\n445 means an individual or a legal entity exercising rights under this License. For\n446 legal entities, \u201cYou\u201d includes any entity that controls, is controlled by, or\n447 is under common control with You. For purposes of this definition, \u201ccontrol\u201d\n448 means (a) the power, direct or indirect, to cause the direction or management\n449 of such entity, whether by contract or otherwise, or (b) ownership of more than\n450 fifty percent (50%) of the outstanding shares or beneficial ownership of such\n451 entity.\n452 \n453 2. License Grants and Conditions\n454 2.1. Grants\n455 Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive\n456 license:\n457 \n458 under intellectual property rights (other than patent or trademark) Licensable\n459 by such Contributor to use, reproduce, make available, modify, display,\n460 perform, distribute, and otherwise exploit its Contributions, either on an\n461 unmodified basis, with Modifications, or as part of a Larger Work; and\n462 \n463 under Patent Claims of such Contributor to make, use, sell, offer for sale,\n464 have made, import, and otherwise transfer either its Contributions or its\n465 Contributor Version.\n466 \n467 2.2. Effective Date\n468 The licenses granted in Section 2.1 with respect to any Contribution become\n469 effective for each Contribution on the date the Contributor first distributes\n470 such Contribution.\n471 \n472 2.3. Limitations on Grant Scope\n473 The licenses granted in this Section 2 are the only rights granted under this\n474 License. No additional rights or licenses will be implied from the distribution\n475 or licensing of Covered Software under this License. Notwithstanding Section\n476 2.1(b) above, no patent license is granted by a Contributor:\n477 \n478 for any code that a Contributor has removed from Covered Software; or\n479 \n480 for infringements caused by: (i) Your and any other third party\u2019s modifications\n481 of Covered Software, or (ii) the combination of its Contributions with other\n482 software (except as part of its Contributor Version); or\n483 \n484 under Patent Claims infringed by Covered Software in the absence of its\n485 Contributions.\n486 \n487 This License does not grant any rights in the trademarks, service marks, or\n488 logos of any Contributor (except as may be necessary to comply with the notice\n489 requirements in Section 3.4).\n490 \n491 2.4. Subsequent Licenses\n492 No Contributor makes additional grants as a result of Your choice to distribute\n493 the Covered Software under a subsequent version of this License (see Section\n494 10.2) or under the terms of a Secondary License (if permitted under the terms\n495 of Section 3.3).\n496 \n497 2.5. Representation\n498 Each Contributor represents that the Contributor believes its Contributions are\n499 its original creation(s) or it has sufficient rights to grant the rights to its\n500 Contributions conveyed by this License.\n501 \n502 2.6. Fair Use\n503 This License is not intended to limit any rights You have under applicable\n504 copyright doctrines of fair use, fair dealing, or other equivalents.\n505 \n506 2.7. Conditions\n507 Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in\n508 Section 2.1.\n509 \n510 3. Responsibilities\n511 3.1. Distribution of Source Form\n512 All distribution of Covered Software in Source Code Form, including any\n513 Modifications that You create or to which You contribute, must be under the\n514 terms of this License. You must inform recipients that the Source Code Form of\n515 the Covered Software is governed by the terms of this License, and how they can\n516 obtain a copy of this License. You may not attempt to alter or restrict the\n517 recipients\u2019 rights in the Source Code Form.\n518 \n519 3.2. Distribution of Executable Form\n520 If You distribute Covered Software in Executable Form then:\n521 \n522 such Covered Software must also be made available in Source Code Form, as\n523 described in Section 3.1, and You must inform recipients of the Executable Form\n524 how they can obtain a copy of such Source Code Form by reasonable means in a\n525 timely manner, at a charge no more than the cost of distribution to the\n526 recipient; and\n527 \n528 You may distribute such Executable Form under the terms of this License, or\n529 sublicense it under different terms, provided that the license for the\n530 Executable Form does not attempt to limit or alter the recipients\u2019 rights in\n531 the Source Code Form under this License.\n532 \n533 3.3. Distribution of a Larger Work\n534 You may create and distribute a Larger Work under terms of Your choice,\n535 provided that You also comply with the requirements of this License for the\n536 Covered Software. If the Larger Work is a combination of Covered Software with\n537 a work governed by one or more Secondary Licenses, and the Covered Software is\n538 not Incompatible With Secondary Licenses, this License permits You to\n539 additionally distribute such Covered Software under the terms of such Secondary\n540 License(s), so that the recipient of the Larger Work may, at their option,\n541 further distribute the Covered Software under the terms of either this License\n542 or such Secondary License(s).\n543 \n544 3.4. Notices\n545 You may not remove or alter the substance of any license notices (including\n546 copyright notices, patent notices, disclaimers of warranty, or limitations of\n547 liability) contained within the Source Code Form of the Covered Software,\n548 except that You may alter any license notices to the extent required to remedy\n549 known factual inaccuracies.\n550 \n551 3.5. Application of Additional Terms\n552 You may choose to offer, and to charge a fee for, warranty, support, indemnity\n553 or liability obligations to one or more recipients of Covered Software.\n554 However, You may do so only on Your own behalf, and not on behalf of any\n555 Contributor. You must make it absolutely clear that any such warranty, support,\n556 indemnity, or liability obligation is offered by You alone, and You hereby\n557 agree to indemnify every Contributor for any liability incurred by such\n558 Contributor as a result of warranty, support, indemnity or liability terms You\n559 offer. You may include additional disclaimers of warranty and limitations of\n560 liability specific to any jurisdiction.\n561 \n562 4. Inability to Comply Due to Statute or Regulation\n563 If it is impossible for You to comply with any of the terms of this License\n564 with respect to some or all of the Covered Software due to statute, judicial\n565 order, or regulation then You must: (a) comply with the terms of this License\n566 to the maximum extent possible; and (b) describe the limitations and the code\n567 they affect. Such description must be placed in a text file included with all\n568 distributions of the Covered Software under this License. Except to the extent\n569 prohibited by statute or regulation, such description must be sufficiently\n570 detailed for a recipient of ordinary skill to be able to understand it.\n571 \n572 5. Termination\n573 5.1. The rights granted under this License will terminate automatically if You\n574 fail to comply with any of its terms. However, if You become compliant, then\n575 the rights granted under this License from a particular Contributor are\n576 reinstated (a) provisionally, unless and until such Contributor explicitly and\n577 finally terminates Your grants, and (b) on an ongoing basis, if such\n578 Contributor fails to notify You of the non-compliance by some reasonable means\n579 prior to 60 days after You have come back into compliance. Moreover, Your\n580 grants from a particular Contributor are reinstated on an ongoing basis if such\n581 Contributor notifies You of the non-compliance by some reasonable means, this\n582 is the first time You have received notice of non-compliance with this License\n583 from such Contributor, and You become compliant prior to 30 days after Your\n584 receipt of the notice.\n585 \n586 5.2. If You initiate litigation against any entity by asserting a patent\n587 infringement claim (excluding declaratory judgment actions, counter-claims, and\n588 cross-claims) alleging that a Contributor Version directly or indirectly\n589 infringes any patent, then the rights granted to You by any and all\n590 Contributors for the Covered Software under Section 2.1 of this License shall\n591 terminate.\n592 \n593 5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user\n594 license agreements (excluding distributors and resellers) which have been\n595 validly granted by You or Your distributors under this License prior to\n596 termination shall survive termination.\n597 \n598 6. Disclaimer of Warranty\n599 Covered Software is provided under this License on an \u201cas is\u201d basis, without\n600 warranty of any kind, either expressed, implied, or statutory, including,\n601 without limitation, warranties that the Covered Software is free of defects,\n602 merchantable, fit for a particular purpose or non-infringing. The entire risk\n603 as to the quality and performance of the Covered Software is with You. Should\n604 any Covered Software prove defective in any respect, You (not any Contributor)\n605 assume the cost of any necessary servicing, repair, or correction. This\n606 disclaimer of warranty constitutes an essential part of this License. No use of\n607 any Covered Software is authorized under this License except under this\n608 disclaimer.\n609 \n610 7. Limitation of Liability\n611 Under no circumstances and under no legal theory, whether tort (including\n612 negligence), contract, or otherwise, shall any Contributor, or anyone who\n613 distributes Covered Software as permitted above, be liable to You for any\n614 direct, indirect, special, incidental, or consequential damages of any\n615 character including, without limitation, damages for lost profits, loss of\n616 goodwill, work stoppage, computer failure or malfunction, or any and all other\n617 commercial damages or losses, even if such party shall have been informed of\n618 the possibility of such damages. This limitation of liability shall not apply\n619 to liability for death or personal injury resulting from such party\u2019s\n620 negligence to the extent applicable law prohibits such limitation. Some\n621 jurisdictions do not allow the exclusion or limitation of incidental or\n622 consequential damages, so this exclusion and limitation may not apply to You.\n623 \n624 8. Litigation\n625 Any litigation relating to this License may be brought only in the courts of a\n626 jurisdiction where the defendant maintains its principal place of business and\n627 such litigation shall be governed by laws of that jurisdiction, without\n628 reference to its conflict-of-law provisions. Nothing in this Section shall\n629 prevent a party\u2019s ability to bring cross-claims or counter-claims.\n630 \n631 9. Miscellaneous\n632 This License represents the complete agreement concerning the subject matter\n633 hereof. If any provision of this License is held to be unenforceable, such\n634 provision shall be reformed only to the extent necessary to make it\n635 enforceable. Any law or regulation which provides that the language of a\n636 contract shall be construed against the drafter shall not be used to construe\n637 this License against a Contributor.\n638 \n639 10. Versions of the License\n640 10.1. New Versions\n641 Mozilla Foundation is the license steward. Except as provided in Section 10.3,\n642 no one other than the license steward has the right to modify or publish new\n643 versions of this License. Each version will be given a distinguishing version\n644 number.\n645 \n646 10.2. Effect of New Versions\n647 You may distribute the Covered Software under the terms of the version of the\n648 License under which You originally received the Covered Software, or under the\n649 terms of any subsequent version published by the license steward.\n650 \n651 10.3. Modified Versions\n652 If you create software not governed by this License, and you want to create a\n653 new license for such software, you may create and use a modified version of\n654 this License if you rename the license and remove any references to the name of\n655 the license steward (except to note that such modified license differs from\n656 this License).\n657 \n658 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\n659 If You choose to distribute Source Code Form that is Incompatible With\n660 Secondary Licenses under the terms of this version of the License, the notice\n661 described in Exhibit B of this License must be attached.\n662 \n663 Exhibit A - Source Code Form License Notice\n664 This Source Code Form is subject to the terms of the Mozilla Public License, v.\n665 2.0. If a copy of the MPL was not distributed with this file, You can obtain\n666 one at https://mozilla.org/MPL/2.0/.\n667 \n668 If it is not possible or desirable to put the notice in a particular file, then\n669 You may include the notice in a location (such as a LICENSE file in a relevant\n670 directory) where a recipient would be likely to look for such a notice.\n671 \n672 You may add additional accurate notices of copyright ownership.\n673 \n674 Exhibit B - \u201cIncompatible With Secondary Licenses\u201d Notice\n675 This Source Code Form is \u201cIncompatible With Secondary Licenses\u201d, as defined by\n676 the Mozilla Public License, v. 2.0.\n677 --------------------------------------------------------------------------------\n678 MIT License (BouncyCastle)\n679 \n680 Copyright (c) 2000 - 2020 The Legion of the Bouncy Castle Inc.\n681 (https://www.bouncycastle.org)\n682 \n683 Permission is hereby granted, free of charge, to any person obtaining a copy of\n684 this software and associated documentation files (the \"Software\"), to deal in\n685 the Software without restriction, including without limitation the rights to\n686 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n687 of the Software, and to permit persons to whom the Software is furnished to do\n688 so, subject to the following conditions:\n689 \n690 The above copyright notice and this permission notice shall be included in all\n691 copies or substantial portions of the Software.\n692 \n693 THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n694 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n695 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n696 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n697 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n698 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n699 SOFTWARE.\n700 --------------------------------------------------------------------------------\n701 MIT License (wait-for-it)\n702 \n703 Copyright (c) 2016 Giles Hall\n704 (https://github.com/vishnubob/wait-for-it)\n705 \n706 Permission is hereby granted, free of charge, to any person obtaining a copy of\n707 this software and associated documentation files (the \"Software\"), to deal in\n708 the Software without restriction, including without limitation the rights to\n709 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n710 of the Software, and to permit persons to whom the Software is furnished to do\n711 so, subject to the following conditions:\n712 \n713 The above copyright notice and this permission notice shall be included in all\n714 copies or substantial portions of the Software.\n715 \n716 THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n717 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n718 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n719 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n720 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n721 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n722 SOFTWARE.\n723 --------------------------------------------------------------------------------\n724 \n[end of THIRD-PARTY-NOTICES]\n[start of services/submission/pom.xml]\n1 <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n2 <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n3   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n4   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n5   <parent>\n6     <artifactId>services</artifactId>\n7     <groupId>org.opencwa</groupId>\n8     <version>${revision}</version>\n9     <relativePath>../pom.xml</relativePath>\n10   </parent>\n11   <modelVersion>4.0.0</modelVersion>\n12 \n13   <artifactId>submission</artifactId>\n14 \n15   <properties>\n16     <sonar.projectKey>corona-warn-app_cwa-server_services_submission</sonar.projectKey>\n17   </properties>\n18 \n19   <dependencies>\n20     <dependency>\n21       <groupId>org.springframework.boot</groupId>\n22       <artifactId>spring-boot-starter-web</artifactId>\n23     </dependency>\n24     <dependency>\n25       <groupId>org.springframework.boot</groupId>\n26       <artifactId>spring-boot-starter-security</artifactId>\n27     </dependency>\n28     <dependency>\n29       <groupId>org.springframework.security</groupId>\n30       <artifactId>spring-security-test</artifactId>\n31       <scope>test</scope>\n32     </dependency>\n33     <dependency>\n34       <groupId>org.apache.commons</groupId>\n35       <artifactId>commons-math3</artifactId>\n36       <version>3.2</version>\n37       <scope>compile</scope>\n38     </dependency>\n39     <dependency>\n40       <groupId>org.springframework.boot</groupId>\n41       <artifactId>spring-boot-starter-actuator</artifactId>\n42     </dependency>\n43     <dependency>\n44       <groupId>io.micrometer</groupId>\n45       <artifactId>micrometer-core</artifactId>\n46     </dependency>\n47     <dependency>\n48       <groupId>io.micrometer</groupId>\n49       <artifactId>micrometer-registry-prometheus</artifactId>\n50     </dependency>\n51   </dependencies>\n52 \n53   <build>\n54     <plugins>\n55       <plugin>\n56         <groupId>org.jacoco</groupId>\n57         <artifactId>jacoco-maven-plugin</artifactId>\n58         <version>0.8.5</version>\n59         <executions>\n60           <execution>\n61             <goals>\n62               <goal>prepare-agent</goal>\n63             </goals>\n64           </execution>\n65           <execution>\n66             <id>report</id>\n67             <goals>\n68               <goal>report</goal>\n69             </goals>\n70             <phase>verify</phase>\n71           </execution>\n72         </executions>\n73       </plugin>\n74     </plugins>\n75   </build>\n76 \n77 </project>\n78 \n[end of services/submission/pom.xml]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  * \n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  * \n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.submission;\n22 \n23 import org.springframework.boot.SpringApplication;\n24 import org.springframework.boot.autoconfigure.SpringBootApplication;\n25 import org.springframework.boot.autoconfigure.domain.EntityScan;\n26 import org.springframework.boot.context.properties.EnableConfigurationProperties;\n27 import org.springframework.boot.web.servlet.ServletComponentScan;\n28 import org.springframework.context.annotation.Bean;\n29 import org.springframework.context.annotation.ComponentScan;\n30 import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n31 import org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter;\n32 \n33 @SpringBootApplication\n34 @ServletComponentScan\n35 @EnableJpaRepositories(basePackages = \"app.coronawarn.server.common.persistence\")\n36 @EntityScan(basePackages = \"app.coronawarn.server.common.persistence\")\n37 @ComponentScan({\"app.coronawarn.server.common.persistence\",\n38     \"app.coronawarn.server.services.submission\"})\n39 @EnableConfigurationProperties\n40 public class ServerApplication {\n41 \n42   @Bean\n43   ProtobufHttpMessageConverter protobufHttpMessageConverter() {\n44     return new ProtobufHttpMessageConverter();\n45   }\n46 \n47   public static void main(String[] args) {\n48     SpringApplication.run(ServerApplication.class, args);\n49   }\n50 }\n51 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java]\n[start of services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  * \n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  * \n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.submission.verification;\n22 \n23 import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;\n24 import java.util.UUID;\n25 import org.slf4j.Logger;\n26 import org.slf4j.LoggerFactory;\n27 import org.springframework.beans.factory.annotation.Autowired;\n28 import org.springframework.boot.web.client.RestTemplateBuilder;\n29 import org.springframework.http.HttpEntity;\n30 import org.springframework.http.HttpHeaders;\n31 import org.springframework.http.MediaType;\n32 import org.springframework.http.ResponseEntity;\n33 import org.springframework.stereotype.Service;\n34 import org.springframework.web.client.HttpClientErrorException;\n35 import org.springframework.web.client.RestClientException;\n36 import org.springframework.web.client.RestTemplate;\n37 \n38 /**\n39  * The TanVerifier performs the verification of submission TANs.\n40  */\n41 @Service\n42 public class TanVerifier {\n43 \n44   private static final Logger logger = LoggerFactory.getLogger(TanVerifier.class);\n45   private final String verificationServiceUrl;\n46   private final RestTemplate restTemplate;\n47   private final HttpHeaders requestHeader = new HttpHeaders();\n48 \n49   /**\n50    * This class can be used to verify a TAN against a configured verification service.\n51    *\n52    * @param submissionServiceConfig A submission service configuration\n53    * @param restTemplateBuilder     A rest template builder\n54    */\n55   @Autowired\n56   public TanVerifier(SubmissionServiceConfig submissionServiceConfig, RestTemplateBuilder restTemplateBuilder) {\n57     this.verificationServiceUrl = submissionServiceConfig.getVerificationBaseUrl()\n58         + submissionServiceConfig.getVerificationPath();\n59     this.restTemplate = restTemplateBuilder.build();\n60     this.requestHeader.setContentType(MediaType.APPLICATION_JSON);\n61   }\n62 \n63   /**\n64    * Verifies the specified TAN. Returns {@literal true} if the specified TAN is valid, {@literal false} otherwise.\n65    *\n66    * @param tan Submission Authorization TAN\n67    * @return {@literal true} if the specified TAN is valid, {@literal false} otherwise.\n68    * @throws RestClientException if status code is neither 2xx nor 4xx\n69    */\n70   public boolean verifyTan(String tan) {\n71     String trimmedTan = tan.trim();\n72 \n73     if (!checkTanSyntax(trimmedTan)) {\n74       logger.debug(\"TAN Syntax check failed for TAN: {}\", trimmedTan);\n75       return false;\n76     }\n77 \n78     return verifyWithVerificationService(trimmedTan);\n79   }\n80 \n81   /**\n82    * Verifies if the provided TAN can be parsed as a UUID.\n83    *\n84    * @param tan Submission Authorization TAN\n85    * @return {@literal true} if tan can be parsed as a UUID, {@literal false} otherwise\n86    */\n87   private boolean checkTanSyntax(String tan) {\n88     try {\n89       UUID.fromString(tan);\n90       return true;\n91     } catch (IllegalArgumentException e) {\n92       logger.debug(\"UUID creation failed for value: {}\", tan, e);\n93       return false;\n94     }\n95   }\n96 \n97   /**\n98    * Queries the configured verification service to validate the provided TAN.\n99    *\n100    * @param tan Submission Authorization TAN\n101    * @return {@literal true} if verification service is able to verify the provided TAN, {@literal false} otherwise\n102    * @throws RestClientException if http status code is neither 2xx nor 404\n103    */\n104   private boolean verifyWithVerificationService(String tan) {\n105     String json = \"{ \\\"tan\\\": \\\"\" + tan + \"\\\" }\";\n106     HttpEntity<String> entity = new HttpEntity<>(json, requestHeader);\n107 \n108     try {\n109       ResponseEntity<String> response = restTemplate.postForEntity(verificationServiceUrl, entity, String.class);\n110       return response.getStatusCode().is2xxSuccessful();\n111     } catch (HttpClientErrorException.NotFound e) {\n112       // The verification service returns http status 404 if the TAN is invalid\n113       logger.debug(\"TAN verification failed\");\n114       return false;\n115     }\n116   }\n117 }\n118 \n[end of services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Here is the patch file that resolves the issue:\n\n```diff\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java\n@@ -43,7 +43,7 @@\n  * The TanVerifier performs the verification of submission TANs.\n  */\n @Service\n-public class TanVerifier {\n+public class TanVerifier implements StoreClient {\n \n   private static final Logger logger = LoggerFactory.getLogger(TanVerifier.class);\n   private final String verificationServiceUrl;\n@@ -97,7 +97,7 @@\n    * @return {@literal true} if verification service is able to verify the provided TAN, {@literal false} otherwise\n    * @throws RestClientException if http status code is neither 2xx nor 404\n    */\n-  private boolean verifyWithVerificationService(String tan) {\n+  public boolean verifyTan(Tan tan) {\n     String json = \"{ \\\"tan\\\": \\\"\" + tan + \"\\\" }\";\n     HttpEntity<String> entity = new HttpEntity<>(json, requestHeader);\n \n@@ -114,7 +114,7 @@\n       // The verification service returns http status 404 if the TAN is invalid\n       logger.debug(\"TAN verification failed\");\n       return false;\n-    }\n+    }",
        "model_patch": "Here is the patch file that resolves the issue:\n\n```diff\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java\n@@ -43,7 +43,7 @@\n  * The TanVerifier performs the verification of submission TANs.\n  */\n @Service\n-public class TanVerifier {\n+public class TanVerifier implements StoreClient {\n \n   private static final Logger logger = LoggerFactory.getLogger(TanVerifier.class);\n   private final String verificationServiceUrl;\n@@ -97,7 +97,7 @@\n    * @return {@literal true} if verification service is able to verify the provided TAN, {@literal false} otherwise\n    * @throws RestClientException if http status code is neither 2xx nor 404\n    */\n-  private boolean verifyWithVerificationService(String tan) {\n+  public boolean verifyTan(Tan tan) {\n     String json = \"{ \\\"tan\\\": \\\"\" + tan + \"\\\" }\";\n     HttpEntity<String> entity = new HttpEntity<>(json, requestHeader);\n \n@@ -114,7 +114,7 @@\n       // The verification service returns http status 404 if the TAN is invalid\n       logger.debug(\"TAN verification failed\");\n       return false;\n-    }\n+    }",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 387,
        "issue_numbers": [
            "327"
        ],
        "base_commit": "db3d5faa1fe2702ef32ee0e3a965d0097c394df7",
        "patch": "diff --git a/THIRD-PARTY-NOTICES b/THIRD-PARTY-NOTICES\n--- a/THIRD-PARTY-NOTICES\n+++ b/THIRD-PARTY-NOTICES\n@@ -80,6 +80,11 @@ Licensor:  VMWare Inc.\n Website:   https://spring.io/\n License:   Apache License 2.0\n \n+Component: Spring Cloud\n+Licensor:  VMWare Inc.\n+Website:   https://spring.io/\n+License:   Apache License 2.0\n+\n Component: wait-for-it\n Licensor:  Giles Hall\n Website:   https://github.com/vishnubob/wait-for-it\n@@ -90,9 +95,14 @@ Licensor:  Zenko\n Website:   https://github.com/scality/cloudserver\n License:   Apache License 2.0\n \n+Component: Wiremock\n+Licensor:  Tom Akehurst\n+Website:   http://wiremock.org/\n+License:   Apache License 2.0\n+\n --------------------------------------------------------------------------------\n Apache License 2.0 (Commons IO, Commons Math 3, flyway, JSON-Simple,\n-Maven, MinIO Object Storage, MojoHaus Flatten Maven Plugin, snakeyaml, Spring Boot, Zenko CloudServer)\n+Maven, MinIO Object Storage, MojoHaus Flatten Maven Plugin, snakeyaml, Spring Boot, Spring Cloud, Zenko CloudServer, Wiremock)\n \n                                  Apache License\n                            Version 2.0, January 2004\ndiff --git a/services/submission/pom.xml b/services/submission/pom.xml\n--- a/services/submission/pom.xml\n+++ b/services/submission/pom.xml\n@@ -26,9 +26,9 @@\n       <artifactId>spring-boot-starter-security</artifactId>\n     </dependency>\n     <dependency>\n-      <groupId>org.springframework.security</groupId>\n-      <artifactId>spring-security-test</artifactId>\n-      <scope>test</scope>\n+      <groupId>org.springframework.cloud</groupId>\n+      <artifactId>spring-cloud-starter-openfeign</artifactId>\n+      <version>2.2.3.RELEASE</version>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.commons</groupId>\n@@ -48,6 +48,18 @@\n       <groupId>io.micrometer</groupId>\n       <artifactId>micrometer-registry-prometheus</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework.security</groupId>\n+      <artifactId>spring-security-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.github.tomakehurst</groupId>\n+      <artifactId>wiremock-jre8</artifactId>\n+      <version>2.26.3</version>\n+      <scope>test</scope>\n+    </dependency>\n+\n   </dependencies>\n \n   <build>\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/ServerApplication.java\n@@ -25,6 +25,7 @@\n import org.springframework.boot.autoconfigure.domain.EntityScan;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.servlet.ServletComponentScan;\n+import org.springframework.cloud.openfeign.EnableFeignClients;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n@@ -37,6 +38,7 @@\n @ComponentScan({\"app.coronawarn.server.common.persistence\",\n     \"app.coronawarn.server.services.submission\"})\n @EnableConfigurationProperties\n+@EnableFeignClients\n public class ServerApplication {\n \n   @Bean\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/Tan.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/Tan.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/Tan.java\n@@ -0,0 +1,82 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.submission.verification;\n+\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+/**\n+ * A representation of a tan.\n+ */\n+class Tan {\n+  private final UUID tan;\n+\n+  private Tan(UUID tan) {\n+    this.tan = tan;\n+  }\n+\n+  /**\n+   * Creates a new {@link #Tan} instance for the given tan string.\n+   *\n+   * @param tanString A valid UUID string representation.\n+   * @return The Tan instance\n+   * @throws IllegalArgumentException when the given tan string is not a valid UUID.\n+   */\n+  public static Tan of(String tanString) {\n+    UUID tan = UUID.fromString(tanString.trim());\n+    return new Tan(tan);\n+  }\n+\n+  /**\n+   * Returns the tan entity as UUID.\n+   * @return the tan.\n+   */\n+  public UUID getTan() {\n+    return tan;\n+  }\n+\n+  /**\n+   * Returns the TAN in it's string representation.\n+   *\n+   * @return the tan UUID as a string.\n+   */\n+  @Override\n+  public String toString() {\n+    return tan.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    Tan tan1 = (Tan) o;\n+    return tan.equals(tan1.tan);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(tan);\n+  }\n+}\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java\n--- a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java\n@@ -20,20 +20,12 @@\n \n package app.coronawarn.server.services.submission.verification;\n \n-import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;\n-import java.util.UUID;\n+import feign.FeignException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.web.client.RestTemplateBuilder;\n-import org.springframework.http.HttpEntity;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n import org.springframework.stereotype.Service;\n-import org.springframework.web.client.HttpClientErrorException;\n import org.springframework.web.client.RestClientException;\n-import org.springframework.web.client.RestTemplate;\n \n /**\n  * The TanVerifier performs the verification of submission TANs.\n@@ -42,54 +34,32 @@\n public class TanVerifier {\n \n   private static final Logger logger = LoggerFactory.getLogger(TanVerifier.class);\n-  private final String verificationServiceUrl;\n-  private final RestTemplate restTemplate;\n-  private final HttpHeaders requestHeader = new HttpHeaders();\n+  private final VerificationServerClient verificationServerClient;\n \n   /**\n    * This class can be used to verify a TAN against a configured verification service.\n    *\n-   * @param submissionServiceConfig A submission service configuration\n-   * @param restTemplateBuilder     A rest template builder\n+   * @param verificationServerClient The REST client to communicate with the verification server\n    */\n   @Autowired\n-  public TanVerifier(SubmissionServiceConfig submissionServiceConfig, RestTemplateBuilder restTemplateBuilder) {\n-    this.verificationServiceUrl = submissionServiceConfig.getVerificationBaseUrl()\n-        + submissionServiceConfig.getVerificationPath();\n-    this.restTemplate = restTemplateBuilder.build();\n-    this.requestHeader.setContentType(MediaType.APPLICATION_JSON);\n+  public TanVerifier(VerificationServerClient verificationServerClient) {\n+    this.verificationServerClient = verificationServerClient;\n   }\n \n   /**\n    * Verifies the specified TAN. Returns {@literal true} if the specified TAN is valid, {@literal false} otherwise.\n    *\n-   * @param tan Submission Authorization TAN\n+   * @param tanString Submission Authorization TAN\n    * @return {@literal true} if the specified TAN is valid, {@literal false} otherwise.\n    * @throws RestClientException if status code is neither 2xx nor 4xx\n    */\n-  public boolean verifyTan(String tan) {\n-    String trimmedTan = tan.trim();\n-\n-    if (!checkTanSyntax(trimmedTan)) {\n-      logger.debug(\"TAN Syntax check failed for TAN: {}\", trimmedTan);\n-      return false;\n-    }\n-\n-    return verifyWithVerificationService(trimmedTan);\n-  }\n-\n-  /**\n-   * Verifies if the provided TAN can be parsed as a UUID.\n-   *\n-   * @param tan Submission Authorization TAN\n-   * @return {@literal true} if tan can be parsed as a UUID, {@literal false} otherwise\n-   */\n-  private boolean checkTanSyntax(String tan) {\n+  public boolean verifyTan(String tanString) {\n     try {\n-      UUID.fromString(tan);\n-      return true;\n+      Tan tan = Tan.of(tanString);\n+\n+      return verifyWithVerificationService(tan);\n     } catch (IllegalArgumentException e) {\n-      logger.debug(\"UUID creation failed for value: {}\", tan, e);\n+      logger.debug(\"TAN Syntax check failed for TAN: {}\", tanString.trim());\n       return false;\n     }\n   }\n@@ -101,16 +71,11 @@ private boolean checkTanSyntax(String tan) {\n    * @return {@literal true} if verification service is able to verify the provided TAN, {@literal false} otherwise\n    * @throws RestClientException if http status code is neither 2xx nor 404\n    */\n-  private boolean verifyWithVerificationService(String tan) {\n-    String json = \"{ \\\"tan\\\": \\\"\" + tan + \"\\\" }\";\n-    HttpEntity<String> entity = new HttpEntity<>(json, requestHeader);\n-\n+  private boolean verifyWithVerificationService(Tan tan) {\n     try {\n-      ResponseEntity<String> response = restTemplate.postForEntity(verificationServiceUrl, entity, String.class);\n-      return response.getStatusCode().is2xxSuccessful();\n-    } catch (HttpClientErrorException.NotFound e) {\n-      // The verification service returns http status 404 if the TAN is invalid\n-      logger.debug(\"TAN verification failed\");\n+      verificationServerClient.verifyTan(tan);\n+      return true;\n+    } catch (FeignException.NotFound e) {\n       return false;\n     }\n   }\ndiff --git a/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/VerificationServerClient.java b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/VerificationServerClient.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/VerificationServerClient.java\n@@ -0,0 +1,42 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.submission.verification;\n+\n+import org.springframework.cloud.openfeign.FeignClient;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.PostMapping;\n+\n+/**\n+ * This is a Spring Cloud Feign based HTTP client that allows type-safe HTTP calls\n+ * and abstract the implementation away.\n+ */\n+@FeignClient(name = \"verification-server\", url = \"${services.submission.verification.base-url}\")\n+public interface VerificationServerClient {\n+\n+  /**\n+   * This methods calls the verification service with the given\n+   * {#link tan}.\n+   * @param tan the tan to verify.\n+   * @return 404 when the tan is not valid.\n+   */\n+  @PostMapping(value = \"${services.submission.verification.path}\", consumes = MediaType.APPLICATION_JSON_VALUE)\n+  String verifyTan(Tan tan);\n+}\n",
        "test_patch": "diff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/verification/FeignTestConfiguration.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/verification/FeignTestConfiguration.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/verification/FeignTestConfiguration.java\n@@ -0,0 +1,35 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.submission.verification;\n+\n+import org.springframework.boot.autoconfigure.http.HttpMessageConverters;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Profile;\n+\n+@TestConfiguration\n+@Profile(\"feign\")\n+public class FeignTestConfiguration {\n+  @Bean\n+  public HttpMessageConverters httpMessageConverters() {\n+    return new HttpMessageConverters();\n+  }\n+}\ndiff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/verification/TanTest.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/verification/TanTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/verification/TanTest.java\n@@ -0,0 +1,49 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.submission.verification;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.UUID;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+class TanTest {\n+  @ParameterizedTest\n+  @ValueSource(strings = {\n+    \"ANY SYNTAX\", \"123456\", \"ABCD23X\", \"ZZZZZZZ\", \"Bearer 3123fe\", \"\", \"&%$\u00a7&%&$%/%&\",\n+    \"LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONG\"\n+  })\n+  void invalidTanShouldThrowException(String invalidSyntaxTan) {\n+    assertThatThrownBy(() -> Tan.of(invalidSyntaxTan)).isInstanceOf(IllegalArgumentException.class);\n+  }\n+\n+  @Test\n+  void validTanShouldReturnTanInstance() {\n+    String tanString = UUID.randomUUID().toString();\n+    Tan tan = Tan.of(tanString);\n+\n+    assertThat(tan).isNotNull();\n+    assertThat(tan.toString()).isEqualTo(tanString);\n+  }\n+}\ndiff --git a/services/submission/src/test/java/app/coronawarn/server/services/submission/verification/TanVerifierTest.java b/services/submission/src/test/java/app/coronawarn/server/services/submission/verification/TanVerifierTest.java\n--- a/services/submission/src/test/java/app/coronawarn/server/services/submission/verification/TanVerifierTest.java\n+++ b/services/submission/src/test/java/app/coronawarn/server/services/submission/verification/TanVerifierTest.java\n@@ -7,9 +7,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -21,87 +21,99 @@\n package app.coronawarn.server.services.submission.verification;\n \n \n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n-import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n-import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n-import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n-\n import app.coronawarn.server.services.submission.config.SubmissionServiceConfig;\n-import java.util.UUID;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import feign.FeignException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.boot.test.autoconfigure.web.client.RestClientTest;\n-import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n-import org.springframework.http.HttpMethod;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.openfeign.EnableFeignClients;\n+import org.springframework.cloud.openfeign.FeignAutoConfiguration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.http.HttpStatus;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.web.client.ExpectedCount;\n-import org.springframework.test.web.client.MockRestServiceServer;\n-import org.springframework.web.client.HttpServerErrorException;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.ActiveProfiles;\n \n-@EnableConfigurationProperties(value = SubmissionServiceConfig.class)\n-@ContextConfiguration(classes = {TanVerifier.class},\n-  initializers = ConfigFileApplicationContextInitializer.class)\n-@RestClientTest\n-class TanVerifierTest {\n+import java.util.UUID;\n \n-  @Autowired\n-  private MockRestServiceServer server;\n+import static com.github.tomakehurst.wiremock.client.WireMock.*;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.springframework.http.HttpHeaders.CONTENT_TYPE;\n \n+@SpringBootTest(\n+  classes = {FeignAutoConfiguration.class, TanVerifier.class})\n+@EnableConfigurationProperties(value = SubmissionServiceConfig.class)\n+@EnableFeignClients\n+@Import(FeignTestConfiguration.class)\n+@ActiveProfiles(\"feign\")\n+class TanVerifierTest {\n   @Autowired\n   private TanVerifier tanVerifier;\n \n   @Autowired\n   private SubmissionServiceConfig submissionServiceConfig;\n \n-  private String verificationUrl;\n+  private String verificationPath;\n   private String randomUUID;\n+  private static WireMockServer server;\n+\n+  @BeforeAll\n+  static void setupWireMock() {\n+    server = new WireMockServer(options().port(1234));\n+    server.start();\n+  }\n \n   @BeforeEach\n   void setup() {\n-    this.verificationUrl = submissionServiceConfig.getVerificationBaseUrl()\n-      + submissionServiceConfig.getVerificationPath();\n+    this.verificationPath = submissionServiceConfig.getVerificationPath();\n     this.randomUUID = UUID.randomUUID().toString();\n+    server.resetAll();\n   }\n \n-  @ParameterizedTest\n-  @ValueSource(strings = {\n-    \"ANY SYNTAX\", \"123456\", \"ABCD23X\", \"ZZZZZZZ\", \"Bearer 3123fe\", \"\", \"&%$\u00a7&%&$%/%&\",\n-    \"LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONG\"\n-  })\n-  void checkWrongTanSyntax(String invalidSyntaxTan) {\n-    assertThat(tanVerifier.verifyTan(invalidSyntaxTan)).isFalse();\n+  @AfterAll\n+  static void tearDown() {\n+    server.stop();\n   }\n \n   @Test\n   void checkValidTan() {\n-    this.server\n-      .expect(ExpectedCount.once(), requestTo(verificationUrl))\n-      .andExpect(method(HttpMethod.POST))\n-      .andRespond(withStatus(HttpStatus.OK));\n-    assertThat(tanVerifier.verifyTan(randomUUID)).isTrue();\n+    server.stubFor(\n+      post(urlEqualTo(verificationPath))\n+        .withRequestBody(matchingJsonPath(\"tan\", equalTo(randomUUID)))\n+        .withHeader(CONTENT_TYPE, equalTo(MediaType.APPLICATION_JSON.toString()))\n+        .willReturn(aResponse().withStatus(HttpStatus.OK.value())));\n+\n+    boolean tanVerificationResponse = tanVerifier.verifyTan(randomUUID);\n+\n+    assertThat(tanVerificationResponse).isTrue();\n   }\n \n   @Test\n   void checkInvalidTan() {\n-    this.server\n-      .expect(ExpectedCount.once(), requestTo(verificationUrl))\n-      .andExpect(method(HttpMethod.POST))\n-      .andRespond(withStatus(HttpStatus.NOT_FOUND));\n-    assertThat(tanVerifier.verifyTan(randomUUID)).isFalse();\n+    server.stubFor(\n+      post(urlEqualTo(verificationPath))\n+        .withHeader(CONTENT_TYPE, equalTo(MediaType.APPLICATION_JSON.toString()))\n+        .willReturn(aResponse().withStatus(HttpStatus.NOT_FOUND.value())));\n+\n+    boolean tanVerificationResponse = tanVerifier.verifyTan(randomUUID);\n+\n+    assertThat(tanVerificationResponse).isFalse();\n   }\n \n   @Test\n   void checkInternalServerError() {\n-    this.server\n-      .expect(ExpectedCount.once(), requestTo(verificationUrl))\n-      .andExpect(method(HttpMethod.POST))\n-      .andRespond(withStatus(HttpStatus.INTERNAL_SERVER_ERROR));\n-    assertThatExceptionOfType(HttpServerErrorException.class).isThrownBy(() -> tanVerifier.verifyTan(randomUUID));\n+    server.stubFor(\n+      post(urlEqualTo(verificationPath))\n+        .withHeader(CONTENT_TYPE, equalTo(MediaType.APPLICATION_JSON.toString()))\n+        .willReturn(aResponse().withStatus(HttpStatus.INTERNAL_SERVER_ERROR.value())));\n+\n+    assertThatExceptionOfType(FeignException.class).isThrownBy(() -> tanVerifier.verifyTan(randomUUID));\n   }\n+\n }\ndiff --git a/services/submission/src/test/resources/application.yaml b/services/submission/src/test/resources/application.yaml\n--- a/services/submission/src/test/resources/application.yaml\n+++ b/services/submission/src/test/resources/application.yaml\n@@ -30,5 +30,5 @@ services:\n     payload:\n       max-number-of-keys: 14\n     verification:\n-      base-url: http://verificationService:1234\n+      base-url: http://localhost:1234\n       path: /version/v1/tan/verify\n",
        "problem_statement": "Use typed client and entities for tan verification\n## Current Implementation\r\nThe current tan verification look like this:\r\nhttps://github.com/corona-warn-app/cwa-server/blob/3b98beb268bac511c00f8e13bcbb4978a8cdb4fd/services/submission/src/main/java/app/coronawarn/server/services/submission/verification/TanVerifier.java#L102-L115\r\n\r\nThere are a couple of issues I would see here:\r\n1. The tan entity is build from a string which can cause bugs, encoding issues an more.\r\n2. When the interface of the verification server changes (and this a repo owned by the same organization) this has to be modified as well and can cause runtime bugs without proper system testing\r\n\r\n## Suggested Enhancement\r\nI would suggest two things\r\n1. Create a DTO (Pojo) for the tan payload and pass that to the rest template to let Jackson handle serialization\r\n2. If a dependency between cwa projects is \"allowed\" (which I would think is perfectly fine)  I would actually move that entity to the verification server project in a separate maven module. I would add [Spring Feign client ](https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html) and use that in the CWA server. Feign is like the reverse version of `@RestController` and supports the same annotations. It will create the client implementation from the given interface at runtime.\r\n\r\nThe client would look like this:\r\n\r\n```\r\n@FeignClient(name = \"verification-server\", url = \"${services.submission.verification.baseUrl}\")\r\npublic interface StoreClient {\r\n\r\n    @RequestMapping(method = RequestMethod.POST, value = \"${services.submission.verification.path}\", consumes = \"application/json\")\r\n    ValidationResult validateTan(Tan tan); // both classes should be Pojos\r\n}\r\n```\r\n\r\nThe usage would look like this (I did not actually implemented that!):\r\n\r\n```\r\n private boolean verifyWithVerificationService(String tanString) {\r\n   Tan tan = Tan.from(tanString); // This should also do the UUID verification!\r\n    \r\n    ValidationResult result = verificationServer.validateTan(tan);\r\n\r\n    return result != null;\r\n  }\r\n```\r\n\r\n## Expected Benefits\r\n- Compilation breaks when interface changes\r\n- Less risk of bugs\r\n\n",
        "hints_text": "I like those suggestions. The introduction of a value object for a TAN is something I thought about suggesting as well. Would bind the verification logic into a value and make the using code more expressive and safe.\r\n\r\nAlthough I am more of a hypermedia guy and thus not a big fan of hard coding URIs in clients, I think Feign would be fine here, although I think that \u2013 unless also used in other places \u2013 the benefit of using that over `RestTemplate`/`WebClient` is not that significant.\r\n\r\nWhat I do think needs improvement is the setup of whatever client API is ended up being used. Remote calls definitely need a timeout as otherwise the system is stuck in case the downstream service is not answering at all for whatever reasons.\nAlso, from a security perspective this implementation shall be changed. When building the json string this way, a malicious tan can inject arbitrary fields to the json object. Even if the tan is previously checked for the correct syntax in another method, this implementation is error-prone. The syntax check for the tan can be called directly before creating the json string or the tan can be filtered with an whitelist approach.\r\n\r\nI assume the previously mentioned changes will also tackle the injection issue. \nI haven't really looked at the verification server but calling as POST to verify a TAN seems to me a bit unRESTy to be honest. But this is probably worth another issue...\n> I haven't really looked at the verification server but calling as POST to verify a TAN seems to me a bit unRESTy to be honest. But this is probably worth another issue...\r\n\r\nIt actually explained in the documentation:\r\n\r\n> The HTTP method POST is used instead of GET for added security, so data (e.g. the registration token or the TAN) can be transferred in the body.\r\n\r\nHowever, I would still doubt that it's necessary. \r\n\r\nCorrect me if I'm wrong, but when doing backend-to-backend http call, the whole request - both URL params and and body - are within the same TCP packet. So as long as either:\r\n- Both backends are within a secure environment or\r\n- The use TLS\r\nI don't think moving the tan to the body helps to improve security in any way.\r\n\r\nThis is probably only important when doing a frontend-to-backend call which is not the case here.\r\n\nWe have discussed and would like to proceed with the FeignClient, however, with the approach of keeping the java class entity on cwa-server, simply having one attribute 'tan'\n> > I haven't really looked at the verification server but calling as POST to verify a TAN seems to me a bit unRESTy to be honest. But this is probably worth another issue...\r\n> \r\n> It actually explained in the documentation:\r\n> \r\n> > The HTTP method POST is used instead of GET for added security, so data (e.g. the registration token or the TAN) can be transferred in the body.\r\n> \r\n> However, I would still doubt that it's necessary.\r\n> \r\n> Correct me if I'm wrong, but when doing backend-to-backend http call, the whole request - both URL params and and body - are within the same TCP packet. So as long as either:\r\n> \r\n> * Both backends are within a secure environment or\r\n> * The use TLS\r\n>   I don't think moving the tan to the body helps to improve security in any way.\r\n> \r\n> This is probably only important when doing a frontend-to-backend call which is not the case here.\r\n\r\nThe main reason to go with POST here (which transports the secret in the http body) is due to the sensitive nature of the TAN. We don't want the TAN to come up in any of our infrastructure / http access logs by chance. \r\n\r\nThis does not only apply to TANs but to all other sensitive data we are processing.\nI'm working on a PR.",
        "created_at": "2020-05-30T17:08:20Z"
    },
    {
        "instance_id": "corona-warn-app__cwa-server-436",
        "model_name_or_path": "gpt-3.5-turbo-16k",
        "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nRemove \"empty\" dates/hours from index files\n## Current Implementation\r\nAll dates/hours between the first submission and now (last full hour) are included in the index files, even if there were no submissions.\r\n\r\n## Suggested Enhancement\r\nOnly list dates/hours for which there were submissions in the index files. The \"empty\" date/hour files should, however, still be generated, even if they are not in the index.\r\n\r\n## Expected Benefits\r\nMobile clients need to do fewer requests (they can simply skip empty dates/hours).\n\n</issue>\n\n<code>\n[start of README.md]\n1 <!-- markdownlint-disable MD041 -->\n2 <h1 align=\"center\">\n3     Corona-Warn-App Server\n4 </h1>\n5 \n6 <p align=\"center\">\n7     <a href=\"https://github.com/corona-warn-app/cwa-server/commits/\" title=\"Last Commit\"><img src=\"https://img.shields.io/github/last-commit/corona-warn-app/cwa-server?style=flat\"></a>\n8     <a href=\"https://github.com/corona-warn-app/cwa-server/issues\" title=\"Open Issues\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat\"></a>\n9     <a href=\"https://circleci.com/gh/corona-warn-app/cwa-server\" title=\"Build Status\"><img src=\"https://circleci.com/gh/corona-warn-app/cwa-server.svg?style=shield&circle-token=4ab059989d10709df19eb4b98ab7c121a25e981a\"></a>\n10         <a href=\"https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-server\" title=\"Quality Gate\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=alert_status\"></a>\n11         <a href=\"https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-server&metric=Coverage&view=list\" title=\"Coverage\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-server&metric=coverage\"></a>\n12     <a href=\"https://github.com/corona-warn-app/cwa-server/blob/master/LICENSE\" title=\"License\"><img src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?style=flat\"></a>\n13 </p>\n14 \n15 <p align=\"center\">\n16   <a href=\"#development\">Development</a> \u2022\n17   <a href=\"#service-apis\">Service APIs</a> \u2022\n18   <a href=\"#documentation\">Documentation</a> \u2022\n19   <a href=\"#support-and-feedback\">Support</a> \u2022\n20   <a href=\"#how-to-contribute\">Contribute</a> \u2022\n21   <a href=\"#contributors\">Contributors</a> \u2022\n22   <a href=\"#repositories\">Repositories</a> \u2022\n23   <a href=\"#licensing\">Licensing</a>\n24 </p>\n25 \n26 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **implementation of the server for encryption keys** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.\n27 \n28 In this documentation, Corona-Warn-App services are also referred to as CWA services.\n29 \n30 ## Architecture Overview\n31 \n32 You can find the architecture overview [here](/docs/architecture-overview.md), which will give you\n33 a good starting point in how the backend services interact with other services, and what purpose\n34 they serve.\n35 \n36 ## Development\n37 \n38 After you've checked out this repository, you can run the application in one of the following ways:\n39 \n40 * As a [Docker](https://www.docker.com/)-based deployment on your local machine. You can run either:\n41   * Single components using the respective Dockerfile or\n42   * The full backend using the Docker Compose (which is considered the most convenient way)\n43 * As a [Maven](https://maven.apache.org)-based build on your local machine.\n44   If you want to develop something in a single component, this approach is preferable.\n45 \n46 ### Docker-Based Deployment\n47 \n48 If you want to use Docker-based deployment, you need to install Docker on your local machine. For more information about downloading and installing Docker, see the [official Docker documentation](https://docs.docker.com/get-docker/).\n49 \n50 #### Running the Full CWA Backend Using Docker Compose\n51 \n52 For your convenience, a full setup including the generation of test data has been prepared using [Docker Compose](https://docs.docker.com/compose/reference/overview/). To build the backend services, run ```docker-compose build``` in the repository's root directory. A default configuration file can be found under ```.env```in the root folder of the repository. The default values for the local Postgres and Zenko Cloudserver should be changed in this file before docker-compose is run.\n53 \n54 Once the services are built, you can start the whole backend using ```docker-compose up```.\n55 The distribution service runs once and then finishes. If you want to trigger additional distribution runs, run ```docker-compose run distribution```.\n56 \n57 The docker-compose contains the following services:\n58 \n59 Service           | Description | Endpoint and Default Credentials\n60 ------------------|-------------|-----------\n61 submission        | The Corona-Warn-App submission service                                                      | `http://localhost:8000` <br> `http://localhost:8006` (for actuator endpoint)\n62 distribution      | The Corona-Warn-App distribution service                                                    | NO ENDPOINT\n63 postgres          | A [postgres] database installation                                                          | `postgres:8001` <br> Username: postgres <br> Password: postgres\n64 pgadmin           | A [pgadmin](https://www.pgadmin.org/) installation for the postgres database                | `http://localhost:8002` <br> Username: user@domain.com <br> Password: password\n65 cloudserver       | [Zenko CloudServer] is a S3-compliant object store  | `http://localhost:8003/` <br> Access key: accessKey1 <br> Secret key: verySecretKey1\n66 verification-fake | A very simple fake implementation for the tan verification.                                 | `http://localhost:8004/version/v1/tan/verify` <br> The only valid tan is \"edc07f08-a1aa-11ea-bb37-0242ac130002\"\n67 \n68 ##### Known Limitation\n69 \n70 In rare cases the docker-compose runs into a timing issue if the distribution service starts before the bucket of the objectstore was created. This is not a big issue as you can simply run ```docker-compose run distribution``` to trigger additional distribution runs after the objectstore was initialized.\n71 \n72 #### Running Single CWA Services Using Docker\n73 \n74 If you would like to build and run a single CWA service, it's considered easiest to run them in a Docker environment. You can do this using the script provided in the respective CWA service directory. The Docker script first builds the CWA service and then creates an image for the runtime, which means that there are no additional dependencies for you to install.\n75 \n76 To build and run the distribution service, run the following command:\n77 \n78 ```bash\n79 ./services/distribution/build_and_run.sh\n80 ```\n81 \n82 To build and run the submission service, run the following command:\n83 \n84 ```bash\n85 ./services/submission/build_and_run.sh\n86 ```\n87 \n88 The submission service is available on [localhost:8080](http://localhost:8080 ).\n89 \n90 ### Maven-Based Build\n91 \n92 If you want to actively develop in one of the CWA services, the Maven-based runtime is most suitable.\n93 To prepare your machine to run the CWA project locally, we recommend that you first ensure that you've installed the following:\n94 \n95 * Minimum JDK Version 11: [OpenJDK](https://openjdk.java.net/) / [SapMachine](https://sap.github.io/SapMachine/)\n96 * [Maven 3.6](https://maven.apache.org/)\n97 * [Postgres]\n98 * [Zenko CloudServer]\n99 \n100 #### Configure\n101 \n102 After you made sure that the specified dependencies are running, configure them in the respective configuration files.\n103 \n104 * Configure the Postgres connection in the [submission config](./services/submission/src/main/resources/application.yaml) and in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n105 * Configure the S3 compatible object storage in the [distribution config](./services/distribution/src/main/resources/application.yaml)\n106 * Configure the private key for the distribution service, the path need to be prefixed with `file:`\n107   * `VAULT_FILESIGNING_SECRET` should be the path to the private key, example available in `<repo-root>/docker-compose-test-secrets/private.pem`\n108 \n109 #### Build\n110 \n111 After you've checked out the repository, to build the project, run ```mvn install``` in your base directory.\n112 \n113 #### Run\n114 \n115 Navigate to the service you want to start and run the spring-boot:run target. The configured Postgres and the configured S3 compliant object storage are used as default. When you start the submission service, the endpoint is available on your local port 8080.\n116 \n117 If you want to start the submission service, for example, you start it as follows:\n118 \n119 ```bash\n120   cd services/submission/\n121   mvn spring-boot:run\n122 ```\n123 \n124 #### Debugging\n125 \n126 To enable the `DEBUG` log level, you can run the application using the Spring `dev` profile.\n127 \n128 ```bash\n129 mvn spring-boot:run -Dspring-boot.run.profiles=dev\n130 ```\n131 \n132 To be able to set breakpoints (e.g. in IntelliJ), it may be necessary to use the ```-Dspring-boot.run.fork=false``` parameter.\n133 \n134 ## Service APIs\n135 \n136 The API that is being exposed by the backend services is documented in an [OpenAPI](https://www.openapis.org/) specification. The specification files are available at the following locations:\n137 \n138 Service      | OpenAPI Specification\n139 -------------|-------------\n140 Submission Service        | [services/submission/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/submission/api_v1.json)\n141 Distribution Service      | [services/distribution/api_v1.json](https://github.com/corona-warn-app/cwa-server/raw/master/services/distribution/api_v1.json)\n142 \n143 ## Spring Profiles\n144 \n145 ### Distribution\n146 \n147 Profile          | Effect\n148 -----------------|-------------\n149 `dev`            | Turns the log level to `DEBUG`.\n150 `cloud`          | Removes default values for the `datasource` and `objectstore` configurations.\n151 `demo`           | Includes incomplete days and hours into the distribution run, thus creating aggregates for the current day and the current hour (and including both in the respective indices). When running multiple distributions in one hour with this profile, the date aggregate for today and the hours aggregate for the current hour will be updated and overwritten. This profile also turns off the expiry policy (Keys must be expired for at least 2 hours before distribution) and the shifting policy (there must be at least 140 keys in a distribution).\n152 `testdata`       | Causes test data to be inserted into the database before each distribution run. By default, around 1000 random diagnosis keys will be generated per hour. If there are no diagnosis keys in the database yet, random keys will be generated for every hour from the beginning of the retention period (14 days ago at 00:00 UTC) until one hour before the present hour. If there are already keys in the database, the random keys will be generated for every hour from the latest diagnosis key in the database (by submission timestamp) until one hour before the present hour (or none at all, if the latest diagnosis key in the database was submitted one hour ago or later).\n153 `signature-dev`  | Sets the app package ID in the export packages' signature info to `de.rki.coronawarnapp-dev` so that test certificates (instead of production certificates) will be used for client-side validation.\n154 `signature-prod` | Provides production app package IDs for the signature info\n155 \n156 ### Submission\n157 \n158 Profile      | Effect\n159 -------------|-------------\n160 `dev`        | Turns the log level to `DEBUG`.\n161 `cloud`      | Removes default values for the `datasource` configuration.\n162 \n163 ## Documentation\n164 \n165 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and whitepapers related to this implementation.\n166 \n167 ## Support and Feedback\n168 \n169 The following channels are available for discussions, feedback, and support requests:\n170 \n171 | Type                     | Channel                                                |\n172 | ------------------------ | ------------------------------------------------------ |\n173 | **General Discussion**   | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"General Discussion\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square\"></a> </a>   |\n174 | **Concept Feedback**    | <a href=\"https://github.com/corona-warn-app/cwa-documentation/issues/new/choose\" title=\"Open Concept Feedback\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square\"></a>  |\n175 | **Backend Issue**    | <a href=\"https://github.com/corona-warn-app/cwa-server/issues/new/choose\" title=\"Open Backend Issue\"><img src=\"https://img.shields.io/github/issues/corona-warn-app/cwa-server?style=flat-square\"></a>  |\n176 | **Other Requests**    | <a href=\"mailto:corona-warn-app.opensource@sap.com\" title=\"Email CWA Team\"><img src=\"https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white\"></a>   |\n177 \n178 ## How to Contribute\n179 \n180 Contribution and feedback are encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.\n181 \n182 ## Contributors\n183 \n184 The German government has asked SAP and Deutsche Telekom to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.\n185 \n186 ## Repositories\n187 \n188 The following public repositories are currently available for the Corona-Warn-App:\n189 \n190 | Repository          | Description                                                           |\n191 | ------------------- | --------------------------------------------------------------------- |\n192 | [cwa-documentation] | Project overview, general documentation, and white papers            |\n193 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API|\n194 | [cwa-verification-server] | Backend implementation of the verification process|\n195 \n196 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation\n197 [cwa-server]: https://github.com/corona-warn-app/cwa-server\n198 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server\n199 [Postgres]: https://www.postgresql.org/\n200 [HSQLDB]: http://hsqldb.org/\n201 [Zenko CloudServer]: https://github.com/scality/cloudserver\n202 \n203 ## Licensing\n204 \n205 Copyright (c) 2020 SAP SE or an SAP affiliate company.\n206 \n207 Licensed under the **Apache License, Version 2.0** (the \"License\"); you may not use this file except in compliance with the License.\n208 \n209 You may obtain a copy of the License at <https://www.apache.org/licenses/LICENSE-2.0>.\n210 \n211 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the [LICENSE](./LICENSE) for the specific language governing permissions and limitations under the License.\n212 \n[end of README.md]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.component;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n25 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n26 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.DiagnosisKeysDirectory;\n27 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n28 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n29 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n30 import java.util.Collection;\n31 import org.slf4j.Logger;\n32 import org.slf4j.LoggerFactory;\n33 import org.springframework.stereotype.Component;\n34 \n35 /**\n36  * Retrieves stored diagnosis keys and builds a {@link DiagnosisKeysDirectory} with them.\n37  */\n38 @Component\n39 public class DiagnosisKeysStructureProvider {\n40 \n41   private static final Logger logger = LoggerFactory\n42       .getLogger(DiagnosisKeysStructureProvider.class);\n43 \n44   private final DiagnosisKeyBundler diagnosisKeyBundler;\n45   private final DiagnosisKeyService diagnosisKeyService;\n46   private final CryptoProvider cryptoProvider;\n47   private final DistributionServiceConfig distributionServiceConfig;\n48 \n49   /**\n50    * Creates a new DiagnosisKeysStructureProvider.\n51    */\n52   DiagnosisKeysStructureProvider(DiagnosisKeyService diagnosisKeyService, CryptoProvider cryptoProvider,\n53       DistributionServiceConfig distributionServiceConfig, DiagnosisKeyBundler diagnosisKeyBundler) {\n54     this.diagnosisKeyService = diagnosisKeyService;\n55     this.cryptoProvider = cryptoProvider;\n56     this.distributionServiceConfig = distributionServiceConfig;\n57     this.diagnosisKeyBundler = diagnosisKeyBundler;\n58   }\n59 \n60   /**\n61    * Get directory for diagnosis keys from database.\n62    *\n63    * @return the directory\n64    */\n65   public Directory<WritableOnDisk> getDiagnosisKeys() {\n66     logger.debug(\"Querying diagnosis keys from the database...\");\n67     Collection<DiagnosisKey> diagnosisKeys = diagnosisKeyService.getDiagnosisKeys();\n68     diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys);\n69     return new DiagnosisKeysDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig);\n70   }\n71 }\n72 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DemoDiagnosisKeyBundler.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;\n22 \n23 import static java.util.stream.Collectors.groupingBy;\n24 \n25 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n26 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n27 import java.time.LocalDateTime;\n28 import java.util.Collection;\n29 import java.util.List;\n30 import org.springframework.context.annotation.Profile;\n31 import org.springframework.stereotype.Component;\n32 \n33 /**\n34  * An instance of this class contains a collection of {@link DiagnosisKey DiagnosisKeys}, that will be distributed\n35  * in the same hour they have been submitted.\n36  */\n37 @Profile(\"demo\")\n38 @Component\n39 public class DemoDiagnosisKeyBundler extends DiagnosisKeyBundler {\n40 \n41   public DemoDiagnosisKeyBundler(DistributionServiceConfig distributionServiceConfig) {\n42     super(distributionServiceConfig);\n43   }\n44 \n45   /**\n46    * Initializes the internal {@code distributableDiagnosisKeys} map, grouping the diagnosis keys by the submission\n47    * timestamp, thus ignoring the expiry policy.\n48    */\n49   @Override\n50   protected void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys) {\n51     this.distributableDiagnosisKeys.clear();\n52     this.distributableDiagnosisKeys.putAll(diagnosisKeys.stream().collect(groupingBy(this::getSubmissionDateTime)));\n53   }\n54 \n55   /**\n56    * Returns all diagnosis keys that should be distributed in a specific hour, without respecting the shifting and\n57    * expiry policies.\n58    */\n59   @Override\n60   public List<DiagnosisKey> getDiagnosisKeysDistributableAt(LocalDateTime hour) {\n61     return this.getDiagnosisKeysForHour(hour);\n62   }\n63 }\n64 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DemoDiagnosisKeyBundler.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;\n22 \n23 import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.ONE_HOUR_INTERVAL_SECONDS;\n24 import static java.time.ZoneOffset.UTC;\n25 import static java.util.Collections.emptyList;\n26 \n27 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n28 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n29 import java.time.LocalDateTime;\n30 import java.util.Collection;\n31 import java.util.HashMap;\n32 import java.util.List;\n33 import java.util.Map;\n34 import java.util.Optional;\n35 import java.util.stream.Collectors;\n36 \n37 /**\n38  * An instance of this class contains a collection of {@link DiagnosisKey DiagnosisKeys}.\n39  */\n40 public abstract class DiagnosisKeyBundler {\n41 \n42   protected final int minNumberOfKeysPerBundle;\n43   protected final long expiryPolicyMinutes;\n44 \n45   // A map containing diagnosis keys, grouped by the LocalDateTime on which they may be distributed\n46   protected final Map<LocalDateTime, List<DiagnosisKey>> distributableDiagnosisKeys = new HashMap<>();\n47 \n48   public DiagnosisKeyBundler(DistributionServiceConfig distributionServiceConfig) {\n49     this.minNumberOfKeysPerBundle = distributionServiceConfig.getShiftingPolicyThreshold();\n50     this.expiryPolicyMinutes = distributionServiceConfig.getExpiryPolicyMinutes();\n51   }\n52 \n53   /**\n54    * Sets the {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler} and calls {@link\n55    * DiagnosisKeyBundler#createDiagnosisKeyDistributionMap}.\n56    */\n57   public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n58     createDiagnosisKeyDistributionMap(diagnosisKeys);\n59   }\n60 \n61   /**\n62    * Returns all {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.\n63    */\n64   public List<DiagnosisKey> getAllDiagnosisKeys() {\n65     return this.distributableDiagnosisKeys.values().stream()\n66         .flatMap(List::stream)\n67         .collect(Collectors.toList());\n68   }\n69 \n70   /**\n71    * Initializes the internal {@code distributableDiagnosisKeys} map, which should contain all diagnosis keys, grouped\n72    * by the LocalDateTime on which they may be distributed.\n73    */\n74   protected abstract void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys);\n75 \n76   /**\n77    * Returns all diagnosis keys that should be distributed in a specific hour.\n78    */\n79   public abstract List<DiagnosisKey> getDiagnosisKeysDistributableAt(LocalDateTime hour);\n80 \n81   /**\n82    * Returns the submission timestamp of a {@link DiagnosisKey} as a {@link LocalDateTime}.\n83    */\n84   protected LocalDateTime getSubmissionDateTime(DiagnosisKey diagnosisKey) {\n85     return LocalDateTime.ofEpochSecond(diagnosisKey.getSubmissionTimestamp() * ONE_HOUR_INTERVAL_SECONDS, 0, UTC);\n86   }\n87 \n88   /**\n89    * Returns all diagnosis keys that should be distributed in a specific hour.\n90    */\n91   protected List<DiagnosisKey> getDiagnosisKeysForHour(LocalDateTime hour) {\n92     return Optional\n93         .ofNullable(this.distributableDiagnosisKeys.get(hour))\n94         .orElse(emptyList());\n95   }\n96 }\n97 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundler.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;\n22 \n23 import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.TEN_MINUTES_INTERVAL_SECONDS;\n24 import static java.time.ZoneOffset.UTC;\n25 import static java.util.Collections.emptyList;\n26 import static java.util.stream.Collectors.groupingBy;\n27 \n28 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n29 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n30 import java.time.Duration;\n31 import java.time.LocalDateTime;\n32 import java.time.temporal.ChronoUnit;\n33 import java.util.Collection;\n34 import java.util.List;\n35 import java.util.Optional;\n36 import java.util.stream.Collectors;\n37 import java.util.stream.Stream;\n38 import org.springframework.context.annotation.Profile;\n39 import org.springframework.stereotype.Component;\n40 \n41 /**\n42  * An instance of this class contains a collection of {@link DiagnosisKey DiagnosisKeys}, that will be distributed while\n43  * respecting expiry policy (keys must be expired for a configurable amount of time before distribution) and shifting\n44  * policy (there must be at least a configurable number of keys in a distribution). The policies are configurable\n45  * through the properties {@code expiry-policy-minutes} and {@code shifting-policy-threshold}.\n46  */\n47 @Profile(\"!demo\")\n48 @Component\n49 public class ProdDiagnosisKeyBundler extends DiagnosisKeyBundler {\n50 \n51   /**\n52    * Creates a new {@link ProdDiagnosisKeyBundler}.\n53    */\n54   public ProdDiagnosisKeyBundler(DistributionServiceConfig distributionServiceConfig) {\n55     super(distributionServiceConfig);\n56   }\n57 \n58   /**\n59    * Initializes the internal {@code distributableDiagnosisKeys} map, grouping the diagnosis keys by the date on which\n60    * they may be distributed, while respecting the expiry policy.\n61    */\n62   @Override\n63   protected void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys) {\n64     this.distributableDiagnosisKeys.clear();\n65     this.distributableDiagnosisKeys.putAll(diagnosisKeys.stream().collect(groupingBy(this::getDistributionDateTime)));\n66   }\n67 \n68   /**\n69    * Returns all diagnosis keys that should be distributed in a specific hour, while respecting the shifting and expiry\n70    * policies.\n71    */\n72   @Override\n73   public List<DiagnosisKey> getDiagnosisKeysDistributableAt(LocalDateTime hour) {\n74     List<DiagnosisKey> keysSinceLastDistribution = getKeysSinceLastDistribution(hour);\n75     if (keysSinceLastDistribution.size() >= minNumberOfKeysPerBundle) {\n76       return keysSinceLastDistribution;\n77     } else {\n78       return emptyList();\n79     }\n80   }\n81 \n82   /**\n83    * Returns a all distributable keys between a specific hour and the last distribution (bundle that was above the\n84    * shifting threshold) or the earliest distributable key.\n85    */\n86   private List<DiagnosisKey> getKeysSinceLastDistribution(LocalDateTime hour) {\n87     Optional<LocalDateTime> earliestDistributableTimestamp = getEarliestDistributableTimestamp();\n88     if (earliestDistributableTimestamp.isEmpty() || hour.isBefore(earliestDistributableTimestamp.get())) {\n89       return emptyList();\n90     }\n91     List<DiagnosisKey> distributableInCurrentHour = getDiagnosisKeysForHour(hour);\n92     if (distributableInCurrentHour.size() >= minNumberOfKeysPerBundle) {\n93       return distributableInCurrentHour;\n94     }\n95     LocalDateTime previousHour = hour.minusHours(1);\n96     Collection<DiagnosisKey> distributableInPreviousHour = getDiagnosisKeysDistributableAt(previousHour);\n97     if (distributableInPreviousHour.size() >= minNumberOfKeysPerBundle) {\n98       // Last hour was distributed, so we can not combine the current hour with the last hour\n99       return distributableInCurrentHour;\n100     } else {\n101       // Last hour was not distributed, so we can combine the current hour with the last hour\n102       return Stream.concat(distributableInCurrentHour.stream(), getKeysSinceLastDistribution(previousHour).stream())\n103           .collect(Collectors.toList());\n104     }\n105   }\n106 \n107   private Optional<LocalDateTime> getEarliestDistributableTimestamp() {\n108     return this.distributableDiagnosisKeys.keySet().stream().min(LocalDateTime::compareTo);\n109   }\n110 \n111   /**\n112    * Returns the end of the rolling time window that a {@link DiagnosisKey} was active for as a {@link LocalDateTime}.\n113    */\n114   private LocalDateTime getExpiryDateTime(DiagnosisKey diagnosisKey) {\n115     return LocalDateTime\n116         .ofEpochSecond(diagnosisKey.getRollingStartIntervalNumber() * TEN_MINUTES_INTERVAL_SECONDS, 0, UTC)\n117         .plusMinutes(diagnosisKey.getRollingPeriod() * 10L);\n118   }\n119 \n120   /**\n121    * Calculates the earliest point in time at which the specified {@link DiagnosisKey} can be distributed. Before keys\n122    * are allowed to be distributed, they must be expired for a configured amount of time.\n123    *\n124    * @return {@link LocalDateTime} at which the specified {@link DiagnosisKey} can be distributed.\n125    */\n126   private LocalDateTime getDistributionDateTime(DiagnosisKey diagnosisKey) {\n127     LocalDateTime submissionDateTime = getSubmissionDateTime(diagnosisKey);\n128     LocalDateTime expiryDateTime = getExpiryDateTime(diagnosisKey);\n129     long minutesBetweenExpiryAndSubmission = Duration.between(expiryDateTime, submissionDateTime).toMinutes();\n130     if (minutesBetweenExpiryAndSubmission <= expiryPolicyMinutes) {\n131       // truncatedTo floors the value, so we need to add an hour to the DISTRIBUTION_PADDING to compensate that.\n132       return expiryDateTime.plusMinutes(expiryPolicyMinutes + 60).truncatedTo(ChronoUnit.HOURS);\n133     } else {\n134       return submissionDateTime;\n135     }\n136   }\n137 }\n138 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundler.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n25 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n26 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.HourIndexingDecorator;\n27 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime;\n28 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n29 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n30 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n31 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n32 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n33 import java.time.LocalDate;\n34 import java.time.format.DateTimeFormatter;\n35 \n36 public class DiagnosisKeysDateDirectory extends IndexDirectoryOnDisk<LocalDate> {\n37 \n38   private static final DateTimeFormatter ISO8601 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n39 \n40   private final DiagnosisKeyBundler diagnosisKeyBundler;\n41   private final CryptoProvider cryptoProvider;\n42   private final DistributionServiceConfig distributionServiceConfig;\n43 \n44   /**\n45    * Constructs a {@link DiagnosisKeysDateDirectory} instance associated with the specified {@link DiagnosisKey}\n46    * collection. Payload signing is be performed according to the specified {@link CryptoProvider}.\n47    *\n48    * @param diagnosisKeyBundler A {@link DiagnosisKeyBundler} containing the {@link DiagnosisKey DiagnosisKeys}.\n49    * @param cryptoProvider The {@link CryptoProvider} used for payload signing.\n50    */\n51   public DiagnosisKeysDateDirectory(DiagnosisKeyBundler diagnosisKeyBundler,\n52       CryptoProvider cryptoProvider, DistributionServiceConfig distributionServiceConfig) {\n53     super(distributionServiceConfig.getApi().getDatePath(),\n54         __ -> DateTime.getDates(diagnosisKeyBundler.getAllDiagnosisKeys()), ISO8601::format);\n55     this.cryptoProvider = cryptoProvider;\n56     this.diagnosisKeyBundler = diagnosisKeyBundler;\n57     this.distributionServiceConfig = distributionServiceConfig;\n58   }\n59 \n60   @Override\n61   public void prepare(ImmutableStack<Object> indices) {\n62     this.addWritableToAll(__ -> {\n63       DiagnosisKeysHourDirectory hourDirectory =\n64           new DiagnosisKeysHourDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig);\n65       return decorateHourDirectory(hourDirectory);\n66     });\n67     super.prepare(indices);\n68   }\n69 \n70   private Directory<WritableOnDisk> decorateHourDirectory(DiagnosisKeysHourDirectory hourDirectory) {\n71     return new HourIndexingDecorator(hourDirectory, distributionServiceConfig);\n72   }\n73 }\n74 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectory.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n25 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n26 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.CountryIndexingDecorator;\n27 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n28 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n29 import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n30 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;\n31 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n32 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.indexing.IndexingDecoratorOnDisk;\n33 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n34 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n35 \n36 /**\n37  * A {@link Directory} containing the file and directory structure that mirrors the API defined in the OpenAPI\n38  * definition {@code /services/distribution/api_v1.json}. Available countries (endpoint {@code\n39  * /version/v1/diagnosis-keys/country}) are statically set to only {@code \"DE\"}. The dates and respective hours\n40  * (endpoint {@code /version/v1/diagnosis-keys/country/DE/date}) will be created based on the actual {@link DiagnosisKey\n41  * DiagnosisKeys} given to the {@link DiagnosisKeysDirectory#DiagnosisKeysDirectory constructor}.\n42  */\n43 public class DiagnosisKeysDirectory extends DirectoryOnDisk {\n44 \n45   private final DiagnosisKeyBundler diagnosisKeyBundler;\n46   private final CryptoProvider cryptoProvider;\n47   private final DistributionServiceConfig distributionServiceConfig;\n48 \n49   /**\n50    * Constructs a {@link DiagnosisKeysDirectory} based on the specified {@link DiagnosisKey} collection. Cryptographic\n51    * signing is performed using the specified {@link CryptoProvider}.\n52    *\n53    * @param diagnosisKeyBundler A {@link DiagnosisKeyBundler} containing the {@link DiagnosisKey DiagnosisKeys}.\n54    * @param cryptoProvider      The {@link CryptoProvider} used for payload signing.\n55    */\n56   public DiagnosisKeysDirectory(DiagnosisKeyBundler diagnosisKeyBundler, CryptoProvider cryptoProvider,\n57       DistributionServiceConfig distributionServiceConfig) {\n58     super(distributionServiceConfig.getApi().getDiagnosisKeysPath());\n59     this.diagnosisKeyBundler = diagnosisKeyBundler;\n60     this.cryptoProvider = cryptoProvider;\n61     this.distributionServiceConfig = distributionServiceConfig;\n62   }\n63 \n64   @Override\n65   public void prepare(ImmutableStack<Object> indices) {\n66     this.addWritable(decorateCountryDirectory(\n67         new DiagnosisKeysCountryDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig)));\n68     super.prepare(indices);\n69   }\n70 \n71   private IndexDirectory<String, WritableOnDisk> decorateCountryDirectory(\n72       IndexDirectoryOnDisk<String> countryDirectory) {\n73     return new CountryIndexingDecorator<>(\n74         new IndexingDecoratorOnDisk<>(countryDirectory, distributionServiceConfig.getOutputFileName()),\n75         distributionServiceConfig);\n76   }\n77 }\n78 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectory.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n25 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n26 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.singing.DiagnosisKeySigningDecorator;\n27 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;\n28 import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime;\n29 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n30 import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n31 import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n32 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n33 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n34 import app.coronawarn.server.services.distribution.assembly.structure.file.File;\n35 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n36 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n37 import java.time.LocalDate;\n38 import java.time.LocalDateTime;\n39 import java.time.ZoneOffset;\n40 import java.util.List;\n41 \n42 public class DiagnosisKeysHourDirectory extends IndexDirectoryOnDisk<LocalDateTime> {\n43 \n44   private final DiagnosisKeyBundler diagnosisKeyBundler;\n45   private final CryptoProvider cryptoProvider;\n46   private final DistributionServiceConfig distributionServiceConfig;\n47 \n48   /**\n49    * Constructs a {@link DiagnosisKeysHourDirectory} instance for the specified date.\n50    *\n51    * @param diagnosisKeyBundler A {@link DiagnosisKeyBundler} containing the {@link DiagnosisKey DiagnosisKeys}.\n52    * @param cryptoProvider      The {@link CryptoProvider} used for cryptographic signing.\n53    */\n54   public DiagnosisKeysHourDirectory(DiagnosisKeyBundler diagnosisKeyBundler, CryptoProvider cryptoProvider,\n55       DistributionServiceConfig distributionServiceConfig) {\n56     super(distributionServiceConfig.getApi().getHourPath(), indices -> DateTime.getHours(((LocalDate) indices.peek()),\n57         diagnosisKeyBundler.getAllDiagnosisKeys()), LocalDateTime::getHour);\n58     this.diagnosisKeyBundler = diagnosisKeyBundler;\n59     this.cryptoProvider = cryptoProvider;\n60     this.distributionServiceConfig = distributionServiceConfig;\n61   }\n62 \n63   @Override\n64   public void prepare(ImmutableStack<Object> indices) {\n65     this.addWritableToAll(currentIndices -> {\n66       LocalDateTime currentHour = (LocalDateTime) currentIndices.peek();\n67       // The LocalDateTime currentHour already contains both the date and the hour information, so\n68       // we can throw away the LocalDate that's the second item on the stack from the \"/date\"\n69       // IndexDirectory.\n70       String region = (String) currentIndices.pop().pop().peek();\n71 \n72       List<DiagnosisKey> diagnosisKeysForCurrentHour =\n73           this.diagnosisKeyBundler.getDiagnosisKeysDistributableAt(currentHour);\n74 \n75       long startTimestamp = currentHour.toEpochSecond(ZoneOffset.UTC);\n76       long endTimestamp = currentHour.plusHours(1).toEpochSecond(ZoneOffset.UTC);\n77       File<WritableOnDisk> temporaryExposureKeyExportFile = TemporaryExposureKeyExportFile.fromDiagnosisKeys(\n78           diagnosisKeysForCurrentHour, region, startTimestamp, endTimestamp, distributionServiceConfig);\n79 \n80       Archive<WritableOnDisk> hourArchive = new ArchiveOnDisk(distributionServiceConfig.getOutputFileName());\n81       hourArchive.addWritable(temporaryExposureKeyExportFile);\n82 \n83       return decorateDiagnosisKeyArchive(hourArchive);\n84     });\n85     super.prepare(indices);\n86   }\n87 \n88   private Directory<WritableOnDisk> decorateDiagnosisKeyArchive(Archive<WritableOnDisk> archive) {\n89     return new DiagnosisKeySigningDecorator(archive, cryptoProvider, distributionServiceConfig);\n90   }\n91 }\n92 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/CountryIndexingDecorator.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator;\n22 \n23 import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n24 import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n25 import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n26 import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n27 import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n28 import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;\n29 import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.IndexDirectoryDecorator;\n30 import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;\n31 import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n32 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n33 import java.nio.charset.StandardCharsets;\n34 import java.util.Collection;\n35 import java.util.Set;\n36 import java.util.stream.Collectors;\n37 \n38 /**\n39  * This decorator creates the central index file for a country, e.g. DE.\n40  */\n41 public class CountryIndexingDecorator<T> extends IndexDirectoryDecorator<T, WritableOnDisk> {\n42 \n43   /**\n44    * Separate each entry in the index file with new line.\n45    */\n46   private static final String NEW_LINE_SEPARATOR = \"\\r\\n\";\n47 \n48   /**\n49    * the name of this index file.\n50    */\n51   private final String fileName;\n52 \n53   /**\n54    * Creates a new decorator instance for the given directory.\n55    *\n56    * @param directory                 The target country directory.\n57    * @param distributionServiceConfig The config.\n58    */\n59   public CountryIndexingDecorator(IndexDirectory<T, WritableOnDisk> directory,\n60       DistributionServiceConfig distributionServiceConfig) {\n61     super(directory);\n62     this.fileName = distributionServiceConfig.getOutputFileName();\n63   }\n64 \n65   @Override\n66   public void prepare(ImmutableStack<Object> indices) {\n67     super.prepare(indices);\n68 \n69     Collection<DirectoryOnDisk> countryDirectories = this.getWritables().stream()\n70         .filter(Writable::isDirectory)\n71         .map(directory -> (DirectoryOnDisk) directory)\n72         .collect(Collectors.toSet());\n73 \n74     countryDirectories.forEach(this::writeIndexFileForCountry);\n75   }\n76 \n77   private void writeIndexFileForCountry(Directory<WritableOnDisk> directory) {\n78     var dateDirectory = (Directory<WritableOnDisk>) directory.getWritables()\n79         .stream()\n80         .filter(Writable::isDirectory)\n81         .findFirst()\n82         .orElseThrow();\n83 \n84     String resourcePaths = CountryIndexingDecorator.getExposureKeyExportPaths(dateDirectory)\n85         .stream()\n86         .sorted()\n87         .collect(Collectors.joining(NEW_LINE_SEPARATOR));\n88 \n89     directory.addWritable(new FileOnDisk(fileName, resourcePaths.getBytes(StandardCharsets.UTF_8)));\n90   }\n91 \n92   private static Set<String> getExposureKeyExportPaths(Directory<WritableOnDisk> rootDirectory) {\n93     Collection<Directory<WritableOnDisk>> directories = rootDirectory.getWritables()\n94         .stream()\n95         .filter(Writable::isDirectory)\n96         .filter(directory -> !(directory instanceof Archive))\n97         .map(directory -> (Directory<WritableOnDisk>) directory)\n98         .collect(Collectors.toSet());\n99 \n100     if (directories.isEmpty()) {\n101       return Set.of(rootDirectory.getName());\n102     } else {\n103       return directories.stream()\n104           .map(CountryIndexingDecorator::getExposureKeyExportPaths)\n105           .flatMap(Set::stream)\n106           .map(childName -> rootDirectory.getName() + \"/\" + childName)\n107           .collect(Collectors.toSet());\n108     }\n109   }\n110 }\n111 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/CountryIndexingDecorator.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util;\n22 \n23 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n24 import java.time.LocalDate;\n25 import java.time.LocalDateTime;\n26 import java.time.ZoneOffset;\n27 import java.util.Collection;\n28 import java.util.Set;\n29 import java.util.concurrent.TimeUnit;\n30 import java.util.stream.Collectors;\n31 \n32 /**\n33  * Methods for conversions of time/date data.\n34  */\n35 public class DateTime {\n36 \n37   /**\n38    * The submission timestamp is counted in 1 hour intervals since epoch.\n39    */\n40   public static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);\n41 \n42   /**\n43    * The rolling start interval number is counted in 10 minute intervals since epoch.\n44    */\n45   public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);\n46 \n47   private DateTime() {\n48   }\n49 \n50   /**\n51    * Returns a set of all {@link LocalDate dates} that are associated with the submission timestamps of the specified\n52    * {@link DiagnosisKey diagnosis keys}.\n53    */\n54   public static Set<LocalDate> getDates(Collection<DiagnosisKey> diagnosisKeys) {\n55     return diagnosisKeys.stream()\n56         .map(DiagnosisKey::getSubmissionTimestamp)\n57         .map(timestamp -> LocalDate.ofEpochDay(timestamp / 24))\n58         .collect(Collectors.toSet());\n59   }\n60 \n61   /**\n62    * Returns a set of all {@link LocalDateTime hours} that are associated with the submission timestamps of the\n63    * specified {@link DiagnosisKey diagnosis keys} and the specified {@link LocalDate date}.\n64    */\n65   public static Set<LocalDateTime> getHours(LocalDate currentDate, Collection<DiagnosisKey> diagnosisKeys) {\n66     return diagnosisKeys.stream()\n67         .map(DiagnosisKey::getSubmissionTimestamp)\n68         .map(DateTime::getLocalDateTimeFromHoursSinceEpoch)\n69         .filter(currentDateTime -> currentDateTime.toLocalDate().equals(currentDate))\n70         .collect(Collectors.toSet());\n71   }\n72 \n73   /**\n74    * Creates a {@link LocalDateTime} based on the specified epoch timestamp.\n75    */\n76   public static LocalDateTime getLocalDateTimeFromHoursSinceEpoch(long timestamp) {\n77     return LocalDateTime.ofEpochSecond(TimeUnit.HOURS.toSeconds(timestamp), 0, ZoneOffset.UTC);\n78   }\n79 }\n80 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java]\n[start of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java]\n1 /*-\n2  * ---license-start\n3  * Corona-Warn-App\n4  * ---\n5  * Copyright (C) 2020 SAP SE and all other contributors\n6  * ---\n7  * Licensed under the Apache License, Version 2.0 (the \"License\");\n8  * you may not use this file except in compliance with the License.\n9  * You may obtain a copy of the License at\n10  *\n11  *      http://www.apache.org/licenses/LICENSE-2.0\n12  *\n13  * Unless required by applicable law or agreed to in writing, software\n14  * distributed under the License is distributed on an \"AS IS\" BASIS,\n15  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n16  * See the License for the specific language governing permissions and\n17  * limitations under the License.\n18  * ---license-end\n19  */\n20 \n21 package app.coronawarn.server.services.distribution.runner;\n22 \n23 import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.ONE_HOUR_INTERVAL_SECONDS;\n24 import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.TEN_MINUTES_INTERVAL_SECONDS;\n25 \n26 import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n27 import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n28 import app.coronawarn.server.common.protocols.internal.RiskLevel;\n29 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n30 import app.coronawarn.server.services.distribution.config.DistributionServiceConfig.TestData;\n31 import java.time.LocalDate;\n32 import java.time.LocalDateTime;\n33 import java.time.ZoneOffset;\n34 import java.util.List;\n35 import java.util.concurrent.TimeUnit;\n36 import java.util.stream.Collectors;\n37 import java.util.stream.IntStream;\n38 import java.util.stream.LongStream;\n39 import org.apache.commons.math3.distribution.PoissonDistribution;\n40 import org.apache.commons.math3.random.JDKRandomGenerator;\n41 import org.apache.commons.math3.random.RandomGenerator;\n42 import org.slf4j.Logger;\n43 import org.slf4j.LoggerFactory;\n44 import org.springframework.boot.ApplicationArguments;\n45 import org.springframework.boot.ApplicationRunner;\n46 import org.springframework.context.annotation.Profile;\n47 import org.springframework.core.annotation.Order;\n48 import org.springframework.stereotype.Component;\n49 \n50 /**\n51  * Generates random diagnosis keys for the time frame between the last diagnosis key in the database and now (last full\n52  * hour) and writes them to the database. If there are no diagnosis keys in the database yet, then random diagnosis keys\n53  * for the time frame between the last full hour and the beginning of the retention period (14 days ago) will be\n54  * generated. The average number of exposure keys to be generated per hour is configurable in the application properties\n55  * (profile = {@code testdata}).\n56  */\n57 @Component\n58 @Order(-1)\n59 @Profile(\"testdata\")\n60 public class TestDataGeneration implements ApplicationRunner {\n61 \n62   private final Logger logger = LoggerFactory.getLogger(TestDataGeneration.class);\n63 \n64   private final Integer retentionDays;\n65 \n66   private final TestData config;\n67 \n68   private final DiagnosisKeyService diagnosisKeyService;\n69 \n70   private final RandomGenerator random = new JDKRandomGenerator();\n71 \n72   private static final int POISSON_MAX_ITERATIONS = 10_000_000;\n73   private static final double POISSON_EPSILON = 1e-12;\n74 \n75   /**\n76    * Creates a new TestDataGeneration runner.\n77    */\n78   TestDataGeneration(DiagnosisKeyService diagnosisKeyService,\n79       DistributionServiceConfig distributionServiceConfig) {\n80     this.diagnosisKeyService = diagnosisKeyService;\n81     this.retentionDays = distributionServiceConfig.getRetentionDays();\n82     this.config = distributionServiceConfig.getTestData();\n83   }\n84 \n85   /**\n86    * See {@link TestDataGeneration} class documentation.\n87    */\n88   @Override\n89   public void run(ApplicationArguments args) {\n90     writeTestData();\n91   }\n92 \n93   /**\n94    * See {@link TestDataGeneration} class documentation.\n95    */\n96   private void writeTestData() {\n97     logger.debug(\"Querying diagnosis keys from the database...\");\n98     List<DiagnosisKey> existingDiagnosisKeys = diagnosisKeyService.getDiagnosisKeys();\n99 \n100     // Timestamps in hours since epoch. Test data generation starts one hour after the latest diagnosis key in the\n101     // database and ends one hour before the current one.\n102     long startTimestamp = getGeneratorStartTimestamp(existingDiagnosisKeys) + 1; // Inclusive\n103     long endTimestamp = getGeneratorEndTimestamp(); // Exclusive\n104 \n105     // Add the startTimestamp to the seed. Otherwise we would generate the same data every hour.\n106     random.setSeed(this.config.getSeed() + startTimestamp);\n107     PoissonDistribution poisson =\n108         new PoissonDistribution(random, this.config.getExposuresPerHour(), POISSON_EPSILON, POISSON_MAX_ITERATIONS);\n109 \n110     if (startTimestamp == endTimestamp) {\n111       logger.debug(\"Skipping test data generation, latest diagnosis keys are still up-to-date.\");\n112       return;\n113     }\n114     logger.debug(\"Generating diagnosis keys between {} and {}...\", startTimestamp, endTimestamp);\n115     List<DiagnosisKey> newDiagnosisKeys = LongStream.range(startTimestamp, endTimestamp)\n116         .mapToObj(submissionTimestamp -> IntStream.range(0, poisson.sample())\n117             .mapToObj(__ -> generateDiagnosisKey(submissionTimestamp))\n118             .collect(Collectors.toList()))\n119         .flatMap(List::stream)\n120         .collect(Collectors.toList());\n121 \n122     logger.debug(\"Writing {} new diagnosis keys to the database...\", newDiagnosisKeys.size());\n123     diagnosisKeyService.saveDiagnosisKeys(newDiagnosisKeys);\n124 \n125     logger.debug(\"Test data generation finished successfully.\");\n126   }\n127 \n128   /**\n129    * Returns the submission timestamp (in 1 hour intervals since epoch) of the last diagnosis key in the database (or\n130    * the result of {@link TestDataGeneration#getRetentionStartTimestamp} if there are no diagnosis keys in the database\n131    * yet.\n132    */\n133   private long getGeneratorStartTimestamp(List<DiagnosisKey> diagnosisKeys) {\n134     if (diagnosisKeys.isEmpty()) {\n135       return getRetentionStartTimestamp();\n136     } else {\n137       DiagnosisKey latestDiagnosisKey = diagnosisKeys.get(diagnosisKeys.size() - 1);\n138       return latestDiagnosisKey.getSubmissionTimestamp();\n139     }\n140   }\n141 \n142   /**\n143    * Returns the timestamp (in 1 hour intervals since epoch) of the last full hour. Example: If called at 15:38 UTC,\n144    * this function would return the timestamp for today 14:00 UTC.\n145    */\n146   private long getGeneratorEndTimestamp() {\n147     return (LocalDateTime.now().toEpochSecond(ZoneOffset.UTC) / ONE_HOUR_INTERVAL_SECONDS) - 1;\n148   }\n149 \n150   /**\n151    * Returns the timestamp (in 1 hour intervals since epoch) at which the retention period starts. Example: If the\n152    * retention period in the application properties is set to 14 days, then this function would return the timestamp for\n153    * 14 days ago (from now) at 00:00 UTC.\n154    */\n155   private long getRetentionStartTimestamp() {\n156     return LocalDate.now().minusDays(retentionDays).atStartOfDay()\n157         .toEpochSecond(ZoneOffset.UTC) / ONE_HOUR_INTERVAL_SECONDS;\n158   }\n159 \n160   /**\n161    * Returns a random diagnosis key with a specific submission timestamp.\n162    */\n163   private DiagnosisKey generateDiagnosisKey(long submissionTimestamp) {\n164     return DiagnosisKey.builder()\n165         .withKeyData(generateDiagnosisKeyBytes())\n166         .withRollingStartIntervalNumber(generateRollingStartIntervalNumber(submissionTimestamp))\n167         .withTransmissionRiskLevel(generateTransmissionRiskLevel())\n168         .withSubmissionTimestamp(submissionTimestamp)\n169         .build();\n170   }\n171 \n172   /**\n173    * Returns 16 random bytes.\n174    */\n175   private byte[] generateDiagnosisKeyBytes() {\n176     byte[] exposureKey = new byte[16];\n177     random.nextBytes(exposureKey);\n178     return exposureKey;\n179   }\n180 \n181   /**\n182    * Returns a random rolling start interval number (timestamp since when a key was active, represented by a 10 minute\n183    * interval counter) between a specific submission timestamp and the beginning of the retention period.\n184    */\n185   private int generateRollingStartIntervalNumber(long submissionTimestamp) {\n186     long maxRollingStartIntervalNumber =\n187         submissionTimestamp * ONE_HOUR_INTERVAL_SECONDS / TEN_MINUTES_INTERVAL_SECONDS;\n188     long minRollingStartIntervalNumber =\n189         maxRollingStartIntervalNumber\n190             - TimeUnit.DAYS.toSeconds(retentionDays) / TEN_MINUTES_INTERVAL_SECONDS;\n191     return Math.toIntExact(getRandomBetween(minRollingStartIntervalNumber, maxRollingStartIntervalNumber));\n192   }\n193 \n194   /**\n195    * Returns a random number between {@link RiskLevel#RISK_LEVEL_LOWEST_VALUE} and {@link\n196    * RiskLevel#RISK_LEVEL_HIGHEST_VALUE}.\n197    */\n198   private int generateTransmissionRiskLevel() {\n199     return Math.toIntExact(\n200         getRandomBetween(RiskLevel.RISK_LEVEL_LOWEST_VALUE, RiskLevel.RISK_LEVEL_HIGHEST_VALUE));\n201   }\n202 \n203   /**\n204    * Returns a random number between {@code minIncluding} and {@code maxIncluding}.\n205    */\n206   private long getRandomBetween(long minIncluding, long maxIncluding) {\n207     return minIncluding + (long) (random.nextDouble() * (maxIncluding - minIncluding));\n208   }\n209 }\n210 \n[end of services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java]\n</code>\n\nHere is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\nI need you to solve the provded issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the format shown above.\nRespond below:\n\n\n\n",
        "full_output": "Sure! Here is the patch file that resolves the issue:\n\n<patch>\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java\n@@ -66,7 +66,7 @@\n     public void prepare(ImmutableStack<Object> indices) {\n         this.addWritable(decorateCountryDirectory(\n             new DiagnosisKeysCountryDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig)));\n-        super.prepare(indices);\n+        super.prepare(indices.pop());\n     }\n \n     private IndexDirectory<String, WritableOnDisk> decorateCountryDirectory(\n</patch>",
        "model_patch": "\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java\n@@ -66,7 +66,7 @@\n     public void prepare(ImmutableStack<Object> indices) {\n         this.addWritable(decorateCountryDirectory(\n             new DiagnosisKeysCountryDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig)));\n-        super.prepare(indices);\n+        super.prepare(indices.pop());\n     }\n \n     private IndexDirectory<String, WritableOnDisk> decorateCountryDirectory(\n",
        "repo": "corona-warn-app/cwa-server",
        "pull_number": 436,
        "issue_numbers": [
            "140"
        ],
        "base_commit": "ebb112166c8b6bf21ba18232db773be9a03b93e8",
        "patch": "diff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/component/DiagnosisKeysStructureProvider.java\n@@ -27,6 +27,8 @@\n import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import java.time.LocalDateTime;\n+import java.time.temporal.ChronoUnit;\n import java.util.Collection;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -65,7 +67,7 @@ public class DiagnosisKeysStructureProvider {\n   public Directory<WritableOnDisk> getDiagnosisKeys() {\n     logger.debug(\"Querying diagnosis keys from the database...\");\n     Collection<DiagnosisKey> diagnosisKeys = diagnosisKeyService.getDiagnosisKeys();\n-    diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys);\n+    diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.now().truncatedTo(ChronoUnit.HOURS));\n     return new DiagnosisKeysDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig);\n   }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DemoDiagnosisKeyBundler.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DemoDiagnosisKeyBundler.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DemoDiagnosisKeyBundler.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DemoDiagnosisKeyBundler.java\n@@ -24,15 +24,13 @@\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n-import java.time.LocalDateTime;\n import java.util.Collection;\n-import java.util.List;\n import org.springframework.context.annotation.Profile;\n import org.springframework.stereotype.Component;\n \n /**\n- * An instance of this class contains a collection of {@link DiagnosisKey DiagnosisKeys}, that will be distributed\n- * in the same hour they have been submitted.\n+ * An instance of this class contains a collection of {@link DiagnosisKey DiagnosisKeys}, that will be distributed in\n+ * the same hour they have been submitted.\n  */\n @Profile(\"demo\")\n @Component\n@@ -44,20 +42,11 @@ public DemoDiagnosisKeyBundler(DistributionServiceConfig distributionServiceConf\n \n   /**\n    * Initializes the internal {@code distributableDiagnosisKeys} map, grouping the diagnosis keys by the submission\n-   * timestamp, thus ignoring the expiry policy.\n+   * timestamp, thus ignoring the expiry and shifting policies.\n    */\n   @Override\n   protected void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys) {\n     this.distributableDiagnosisKeys.clear();\n     this.distributableDiagnosisKeys.putAll(diagnosisKeys.stream().collect(groupingBy(this::getSubmissionDateTime)));\n   }\n-\n-  /**\n-   * Returns all diagnosis keys that should be distributed in a specific hour, without respecting the shifting and\n-   * expiry policies.\n-   */\n-  @Override\n-  public List<DiagnosisKey> getDiagnosisKeysDistributableAt(LocalDateTime hour) {\n-    return this.getDiagnosisKeysForHour(hour);\n-  }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/DiagnosisKeyBundler.java\n@@ -20,18 +20,20 @@\n \n package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;\n \n-import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.ONE_HOUR_INTERVAL_SECONDS;\n import static java.time.ZoneOffset.UTC;\n import static java.util.Collections.emptyList;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import java.time.LocalDate;\n import java.time.LocalDateTime;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n \n /**\n@@ -39,9 +41,23 @@\n  */\n public abstract class DiagnosisKeyBundler {\n \n+  /**\n+   * The submission timestamp is counted in 1 hour intervals since epoch.\n+   */\n+  public static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);\n+\n+  /**\n+   * The rolling start interval number is counted in 10 minute intervals since epoch.\n+   */\n+  public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);\n+\n   protected final int minNumberOfKeysPerBundle;\n   protected final long expiryPolicyMinutes;\n \n+  // The hour at which the distribution runs. This field is needed to prevent the run from distributing any keys that\n+  // have already been submitted but may only be distributed in the future (e.g. because they are not expired yet).\n+  protected LocalDateTime distributionTime;\n+\n   // A map containing diagnosis keys, grouped by the LocalDateTime on which they may be distributed\n   protected final Map<LocalDateTime, List<DiagnosisKey>> distributableDiagnosisKeys = new HashMap<>();\n \n@@ -51,11 +67,22 @@ public DiagnosisKeyBundler(DistributionServiceConfig distributionServiceConfig)\n   }\n \n   /**\n-   * Sets the {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler} and calls {@link\n-   * DiagnosisKeyBundler#createDiagnosisKeyDistributionMap}.\n+   * Creates a {@link LocalDateTime} based on the specified epoch timestamp.\n+   */\n+  public static LocalDateTime getLocalDateTimeFromHoursSinceEpoch(long timestamp) {\n+    return LocalDateTime.ofEpochSecond(TimeUnit.HOURS.toSeconds(timestamp), 0, UTC);\n+  }\n+\n+  /**\n+   * Sets the {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler} and the time at which the\n+   * distribution runs and calls {@link DiagnosisKeyBundler#createDiagnosisKeyDistributionMap}.\n+   *\n+   * @param diagnosisKeys    The {@link DiagnosisKey DiagnosisKeys} contained by this {@link DiagnosisKeyBundler}.\n+   * @param distributionTime The {@link LocalDateTime} at which the distribution runs.\n    */\n-  public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys) {\n-    createDiagnosisKeyDistributionMap(diagnosisKeys);\n+  public void setDiagnosisKeys(Collection<DiagnosisKey> diagnosisKeys, LocalDateTime distributionTime) {\n+    this.distributionTime = distributionTime;\n+    this.createDiagnosisKeyDistributionMap(diagnosisKeys);\n   }\n \n   /**\n@@ -74,9 +101,23 @@ public List<DiagnosisKey> getAllDiagnosisKeys() {\n   protected abstract void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys);\n \n   /**\n-   * Returns all diagnosis keys that should be distributed in a specific hour.\n+   * Returns a set of all {@link LocalDate dates} on which {@link DiagnosisKey diagnosis keys} shall be distributed.\n    */\n-  public abstract List<DiagnosisKey> getDiagnosisKeysDistributableAt(LocalDateTime hour);\n+  public Set<LocalDate> getDatesWithDistributableDiagnosisKeys() {\n+    return this.distributableDiagnosisKeys.keySet().stream()\n+        .map(LocalDateTime::toLocalDate)\n+        .collect(Collectors.toSet());\n+  }\n+\n+  /**\n+   * Returns a set of all {@link LocalDateTime hours} of a specified {@link LocalDate date} during which {@link\n+   * DiagnosisKey diagnosis keys} shall be distributed.\n+   */\n+  public Set<LocalDateTime> getHoursWithDistributableDiagnosisKeys(LocalDate currentDate) {\n+    return this.distributableDiagnosisKeys.keySet().stream()\n+        .filter(dateTime -> dateTime.toLocalDate().equals(currentDate))\n+        .collect(Collectors.toSet());\n+  }\n \n   /**\n    * Returns the submission timestamp of a {@link DiagnosisKey} as a {@link LocalDateTime}.\n@@ -85,10 +126,21 @@ protected LocalDateTime getSubmissionDateTime(DiagnosisKey diagnosisKey) {\n     return LocalDateTime.ofEpochSecond(diagnosisKey.getSubmissionTimestamp() * ONE_HOUR_INTERVAL_SECONDS, 0, UTC);\n   }\n \n+  /**\n+   * Returns all diagnosis keys that should be distributed on a specific date.\n+   */\n+  public List<DiagnosisKey> getDiagnosisKeysForDate(LocalDate date) {\n+    return this.distributableDiagnosisKeys.keySet().stream()\n+        .filter(dateTime -> dateTime.toLocalDate().equals(date))\n+        .map(this::getDiagnosisKeysForHour)\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+  }\n+\n   /**\n    * Returns all diagnosis keys that should be distributed in a specific hour.\n    */\n-  protected List<DiagnosisKey> getDiagnosisKeysForHour(LocalDateTime hour) {\n+  public List<DiagnosisKey> getDiagnosisKeysForHour(LocalDateTime hour) {\n     return Optional\n         .ofNullable(this.distributableDiagnosisKeys.get(hour))\n         .orElse(emptyList());\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundler.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundler.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundler.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundler.java\n@@ -20,7 +20,6 @@\n \n package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;\n \n-import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.TEN_MINUTES_INTERVAL_SECONDS;\n import static java.time.ZoneOffset.UTC;\n import static java.util.Collections.emptyList;\n import static java.util.stream.Collectors.groupingBy;\n@@ -30,11 +29,13 @@\n import java.time.Duration;\n import java.time.LocalDateTime;\n import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n+import java.util.stream.LongStream;\n import org.springframework.context.annotation.Profile;\n import org.springframework.stereotype.Component;\n \n@@ -57,55 +58,38 @@ public ProdDiagnosisKeyBundler(DistributionServiceConfig distributionServiceConf\n \n   /**\n    * Initializes the internal {@code distributableDiagnosisKeys} map, grouping the diagnosis keys by the date on which\n-   * they may be distributed, while respecting the expiry policy.\n+   * they may be distributed, while respecting the expiry and shifting policies.\n    */\n   @Override\n   protected void createDiagnosisKeyDistributionMap(Collection<DiagnosisKey> diagnosisKeys) {\n     this.distributableDiagnosisKeys.clear();\n-    this.distributableDiagnosisKeys.putAll(diagnosisKeys.stream().collect(groupingBy(this::getDistributionDateTime)));\n-  }\n-\n-  /**\n-   * Returns all diagnosis keys that should be distributed in a specific hour, while respecting the shifting and expiry\n-   * policies.\n-   */\n-  @Override\n-  public List<DiagnosisKey> getDiagnosisKeysDistributableAt(LocalDateTime hour) {\n-    List<DiagnosisKey> keysSinceLastDistribution = getKeysSinceLastDistribution(hour);\n-    if (keysSinceLastDistribution.size() >= minNumberOfKeysPerBundle) {\n-      return keysSinceLastDistribution;\n-    } else {\n-      return emptyList();\n+    if (diagnosisKeys.isEmpty()) {\n+      return;\n     }\n-  }\n+    Map<LocalDateTime, List<DiagnosisKey>> distributableDiagnosisKeysGroupedByExpiryPolicy = new HashMap<>(\n+        diagnosisKeys.stream().collect(groupingBy(this::getDistributionDateTimeByExpiryPolicy)));\n+    LocalDateTime earliestDistributableTimestamp =\n+        getEarliestDistributableTimestamp(distributableDiagnosisKeysGroupedByExpiryPolicy).orElseThrow();\n+    LocalDateTime latestDistributableTimestamp = this.distributionTime;\n \n-  /**\n-   * Returns a all distributable keys between a specific hour and the last distribution (bundle that was above the\n-   * shifting threshold) or the earliest distributable key.\n-   */\n-  private List<DiagnosisKey> getKeysSinceLastDistribution(LocalDateTime hour) {\n-    Optional<LocalDateTime> earliestDistributableTimestamp = getEarliestDistributableTimestamp();\n-    if (earliestDistributableTimestamp.isEmpty() || hour.isBefore(earliestDistributableTimestamp.get())) {\n-      return emptyList();\n-    }\n-    List<DiagnosisKey> distributableInCurrentHour = getDiagnosisKeysForHour(hour);\n-    if (distributableInCurrentHour.size() >= minNumberOfKeysPerBundle) {\n-      return distributableInCurrentHour;\n-    }\n-    LocalDateTime previousHour = hour.minusHours(1);\n-    Collection<DiagnosisKey> distributableInPreviousHour = getDiagnosisKeysDistributableAt(previousHour);\n-    if (distributableInPreviousHour.size() >= minNumberOfKeysPerBundle) {\n-      // Last hour was distributed, so we can not combine the current hour with the last hour\n-      return distributableInCurrentHour;\n-    } else {\n-      // Last hour was not distributed, so we can combine the current hour with the last hour\n-      return Stream.concat(distributableInCurrentHour.stream(), getKeysSinceLastDistribution(previousHour).stream())\n-          .collect(Collectors.toList());\n-    }\n+    List<DiagnosisKey> diagnosisKeyAccumulator = new ArrayList<>();\n+    LongStream.range(0, earliestDistributableTimestamp.until(latestDistributableTimestamp, ChronoUnit.HOURS))\n+        .forEach(hourCounter -> {\n+          LocalDateTime currentHour = earliestDistributableTimestamp.plusHours(hourCounter);\n+          Collection<DiagnosisKey> currentHourDiagnosisKeys = Optional\n+              .ofNullable(distributableDiagnosisKeysGroupedByExpiryPolicy.get(currentHour))\n+              .orElse(emptyList());\n+          diagnosisKeyAccumulator.addAll(currentHourDiagnosisKeys);\n+          if (diagnosisKeyAccumulator.size() >= minNumberOfKeysPerBundle) {\n+            this.distributableDiagnosisKeys.put(currentHour, new ArrayList<>(diagnosisKeyAccumulator));\n+            diagnosisKeyAccumulator.clear();\n+          }\n+        });\n   }\n \n-  private Optional<LocalDateTime> getEarliestDistributableTimestamp() {\n-    return this.distributableDiagnosisKeys.keySet().stream().min(LocalDateTime::compareTo);\n+  private static Optional<LocalDateTime> getEarliestDistributableTimestamp(\n+      Map<LocalDateTime, List<DiagnosisKey>> distributableDiagnosisKeys) {\n+    return distributableDiagnosisKeys.keySet().stream().min(LocalDateTime::compareTo);\n   }\n \n   /**\n@@ -118,12 +102,13 @@ private LocalDateTime getExpiryDateTime(DiagnosisKey diagnosisKey) {\n   }\n \n   /**\n-   * Calculates the earliest point in time at which the specified {@link DiagnosisKey} can be distributed. Before keys\n-   * are allowed to be distributed, they must be expired for a configured amount of time.\n+   * Calculates the earliest point in time at which the specified {@link DiagnosisKey} can be distributed, while\n+   * respecting the expiry policy and the submission timestamp. Before keys are allowed to be distributed, they must be\n+   * expired for a configured amount of time.\n    *\n    * @return {@link LocalDateTime} at which the specified {@link DiagnosisKey} can be distributed.\n    */\n-  private LocalDateTime getDistributionDateTime(DiagnosisKey diagnosisKey) {\n+  private LocalDateTime getDistributionDateTimeByExpiryPolicy(DiagnosisKey diagnosisKey) {\n     LocalDateTime submissionDateTime = getSubmissionDateTime(diagnosisKey);\n     LocalDateTime expiryDateTime = getExpiryDateTime(diagnosisKey);\n     long minutesBetweenExpiryAndSubmission = Duration.between(expiryDateTime, submissionDateTime).toMinutes();\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDateDirectory.java\n@@ -24,7 +24,6 @@\n import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.HourIndexingDecorator;\n-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime;\n import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectoryOnDisk;\n@@ -46,12 +45,12 @@ public class DiagnosisKeysDateDirectory extends IndexDirectoryOnDisk<LocalDate>\n    * collection. Payload signing is be performed according to the specified {@link CryptoProvider}.\n    *\n    * @param diagnosisKeyBundler A {@link DiagnosisKeyBundler} containing the {@link DiagnosisKey DiagnosisKeys}.\n-   * @param cryptoProvider The {@link CryptoProvider} used for payload signing.\n+   * @param cryptoProvider      The {@link CryptoProvider} used for payload signing.\n    */\n   public DiagnosisKeysDateDirectory(DiagnosisKeyBundler diagnosisKeyBundler,\n       CryptoProvider cryptoProvider, DistributionServiceConfig distributionServiceConfig) {\n     super(distributionServiceConfig.getApi().getDatePath(),\n-        __ -> DateTime.getDates(diagnosisKeyBundler.getAllDiagnosisKeys()), ISO8601::format);\n+        __ -> diagnosisKeyBundler.getDatesWithDistributableDiagnosisKeys(), ISO8601::format);\n     this.cryptoProvider = cryptoProvider;\n     this.diagnosisKeyBundler = diagnosisKeyBundler;\n     this.distributionServiceConfig = distributionServiceConfig;\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectory.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectory.java\n@@ -23,7 +23,6 @@\n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator.CountryIndexingDecorator;\n import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n@@ -70,8 +69,6 @@ public void prepare(ImmutableStack<Object> indices) {\n \n   private IndexDirectory<String, WritableOnDisk> decorateCountryDirectory(\n       IndexDirectoryOnDisk<String> countryDirectory) {\n-    return new CountryIndexingDecorator<>(\n-        new IndexingDecoratorOnDisk<>(countryDirectory, distributionServiceConfig.getOutputFileName()),\n-        distributionServiceConfig);\n+    return new IndexingDecoratorOnDisk<>(countryDirectory, distributionServiceConfig.getOutputFileName());\n   }\n }\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysHourDirectory.java\n@@ -25,7 +25,6 @@\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.archive.decorator.singing.DiagnosisKeySigningDecorator;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.file.TemporaryExposureKeyExportFile;\n-import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime;\n import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n import app.coronawarn.server.services.distribution.assembly.structure.archive.ArchiveOnDisk;\n@@ -53,8 +52,9 @@ public class DiagnosisKeysHourDirectory extends IndexDirectoryOnDisk<LocalDateTi\n    */\n   public DiagnosisKeysHourDirectory(DiagnosisKeyBundler diagnosisKeyBundler, CryptoProvider cryptoProvider,\n       DistributionServiceConfig distributionServiceConfig) {\n-    super(distributionServiceConfig.getApi().getHourPath(), indices -> DateTime.getHours(((LocalDate) indices.peek()),\n-        diagnosisKeyBundler.getAllDiagnosisKeys()), LocalDateTime::getHour);\n+    super(distributionServiceConfig.getApi().getHourPath(),\n+        indices -> diagnosisKeyBundler.getHoursWithDistributableDiagnosisKeys(((LocalDate) indices.peek())),\n+        LocalDateTime::getHour);\n     this.diagnosisKeyBundler = diagnosisKeyBundler;\n     this.cryptoProvider = cryptoProvider;\n     this.distributionServiceConfig = distributionServiceConfig;\n@@ -70,7 +70,7 @@ public void prepare(ImmutableStack<Object> indices) {\n       String region = (String) currentIndices.pop().pop().peek();\n \n       List<DiagnosisKey> diagnosisKeysForCurrentHour =\n-          this.diagnosisKeyBundler.getDiagnosisKeysDistributableAt(currentHour);\n+          this.diagnosisKeyBundler.getDiagnosisKeysForHour(currentHour);\n \n       long startTimestamp = currentHour.toEpochSecond(ZoneOffset.UTC);\n       long endTimestamp = currentHour.plusHours(1).toEpochSecond(ZoneOffset.UTC);\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/CountryIndexingDecorator.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/CountryIndexingDecorator.java\ndeleted file mode 100644\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/CountryIndexingDecorator.java\n+++ /dev/null\n@@ -1,110 +0,0 @@\n-/*-\n- * ---license-start\n- * Corona-Warn-App\n- * ---\n- * Copyright (C) 2020 SAP SE and all other contributors\n- * ---\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ---license-end\n- */\n-\n-package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator;\n-\n-import app.coronawarn.server.services.distribution.assembly.structure.Writable;\n-import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n-import app.coronawarn.server.services.distribution.assembly.structure.archive.Archive;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.IndexDirectory;\n-import app.coronawarn.server.services.distribution.assembly.structure.directory.decorator.IndexDirectoryDecorator;\n-import app.coronawarn.server.services.distribution.assembly.structure.file.FileOnDisk;\n-import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n-import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Collection;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-/**\n- * This decorator creates the central index file for a country, e.g. DE.\n- */\n-public class CountryIndexingDecorator<T> extends IndexDirectoryDecorator<T, WritableOnDisk> {\n-\n-  /**\n-   * Separate each entry in the index file with new line.\n-   */\n-  private static final String NEW_LINE_SEPARATOR = \"\\r\\n\";\n-\n-  /**\n-   * the name of this index file.\n-   */\n-  private final String fileName;\n-\n-  /**\n-   * Creates a new decorator instance for the given directory.\n-   *\n-   * @param directory                 The target country directory.\n-   * @param distributionServiceConfig The config.\n-   */\n-  public CountryIndexingDecorator(IndexDirectory<T, WritableOnDisk> directory,\n-      DistributionServiceConfig distributionServiceConfig) {\n-    super(directory);\n-    this.fileName = distributionServiceConfig.getOutputFileName();\n-  }\n-\n-  @Override\n-  public void prepare(ImmutableStack<Object> indices) {\n-    super.prepare(indices);\n-\n-    Collection<DirectoryOnDisk> countryDirectories = this.getWritables().stream()\n-        .filter(Writable::isDirectory)\n-        .map(directory -> (DirectoryOnDisk) directory)\n-        .collect(Collectors.toSet());\n-\n-    countryDirectories.forEach(this::writeIndexFileForCountry);\n-  }\n-\n-  private void writeIndexFileForCountry(Directory<WritableOnDisk> directory) {\n-    var dateDirectory = (Directory<WritableOnDisk>) directory.getWritables()\n-        .stream()\n-        .filter(Writable::isDirectory)\n-        .findFirst()\n-        .orElseThrow();\n-\n-    String resourcePaths = CountryIndexingDecorator.getExposureKeyExportPaths(dateDirectory)\n-        .stream()\n-        .sorted()\n-        .collect(Collectors.joining(NEW_LINE_SEPARATOR));\n-\n-    directory.addWritable(new FileOnDisk(fileName, resourcePaths.getBytes(StandardCharsets.UTF_8)));\n-  }\n-\n-  private static Set<String> getExposureKeyExportPaths(Directory<WritableOnDisk> rootDirectory) {\n-    Collection<Directory<WritableOnDisk>> directories = rootDirectory.getWritables()\n-        .stream()\n-        .filter(Writable::isDirectory)\n-        .filter(directory -> !(directory instanceof Archive))\n-        .map(directory -> (Directory<WritableOnDisk>) directory)\n-        .collect(Collectors.toSet());\n-\n-    if (directories.isEmpty()) {\n-      return Set.of(rootDirectory.getName());\n-    } else {\n-      return directories.stream()\n-          .map(CountryIndexingDecorator::getExposureKeyExportPaths)\n-          .flatMap(Set::stream)\n-          .map(childName -> rootDirectory.getName() + \"/\" + childName)\n-          .collect(Collectors.toSet());\n-    }\n-  }\n-}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java\ndeleted file mode 100644\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTime.java\n+++ /dev/null\n@@ -1,79 +0,0 @@\n-/*-\n- * ---license-start\n- * Corona-Warn-App\n- * ---\n- * Copyright (C) 2020 SAP SE and all other contributors\n- * ---\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ---license-end\n- */\n-\n-package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util;\n-\n-import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n-import java.time.LocalDate;\n-import java.time.LocalDateTime;\n-import java.time.ZoneOffset;\n-import java.util.Collection;\n-import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-\n-/**\n- * Methods for conversions of time/date data.\n- */\n-public class DateTime {\n-\n-  /**\n-   * The submission timestamp is counted in 1 hour intervals since epoch.\n-   */\n-  public static final long ONE_HOUR_INTERVAL_SECONDS = TimeUnit.HOURS.toSeconds(1);\n-\n-  /**\n-   * The rolling start interval number is counted in 10 minute intervals since epoch.\n-   */\n-  public static final long TEN_MINUTES_INTERVAL_SECONDS = TimeUnit.MINUTES.toSeconds(10);\n-\n-  private DateTime() {\n-  }\n-\n-  /**\n-   * Returns a set of all {@link LocalDate dates} that are associated with the submission timestamps of the specified\n-   * {@link DiagnosisKey diagnosis keys}.\n-   */\n-  public static Set<LocalDate> getDates(Collection<DiagnosisKey> diagnosisKeys) {\n-    return diagnosisKeys.stream()\n-        .map(DiagnosisKey::getSubmissionTimestamp)\n-        .map(timestamp -> LocalDate.ofEpochDay(timestamp / 24))\n-        .collect(Collectors.toSet());\n-  }\n-\n-  /**\n-   * Returns a set of all {@link LocalDateTime hours} that are associated with the submission timestamps of the\n-   * specified {@link DiagnosisKey diagnosis keys} and the specified {@link LocalDate date}.\n-   */\n-  public static Set<LocalDateTime> getHours(LocalDate currentDate, Collection<DiagnosisKey> diagnosisKeys) {\n-    return diagnosisKeys.stream()\n-        .map(DiagnosisKey::getSubmissionTimestamp)\n-        .map(DateTime::getLocalDateTimeFromHoursSinceEpoch)\n-        .filter(currentDateTime -> currentDateTime.toLocalDate().equals(currentDate))\n-        .collect(Collectors.toSet());\n-  }\n-\n-  /**\n-   * Creates a {@link LocalDateTime} based on the specified epoch timestamp.\n-   */\n-  public static LocalDateTime getLocalDateTimeFromHoursSinceEpoch(long timestamp) {\n-    return LocalDateTime.ofEpochSecond(TimeUnit.HOURS.toSeconds(timestamp), 0, ZoneOffset.UTC);\n-  }\n-}\ndiff --git a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java\n--- a/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java\n+++ b/services/distribution/src/main/java/app/coronawarn/server/services/distribution/runner/TestDataGeneration.java\n@@ -20,8 +20,8 @@\n \n package app.coronawarn.server.services.distribution.runner;\n \n-import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.ONE_HOUR_INTERVAL_SECONDS;\n-import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util.DateTime.TEN_MINUTES_INTERVAL_SECONDS;\n+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler.ONE_HOUR_INTERVAL_SECONDS;\n+import static app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler.TEN_MINUTES_INTERVAL_SECONDS;\n \n import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n import app.coronawarn.server.common.persistence.service.DiagnosisKeyService;\n",
        "test_patch": "diff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerExpiryPolicyTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerExpiryPolicyTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerExpiryPolicyTest.java\n@@ -0,0 +1,88 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.services.distribution.common.Helpers;\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {DistributionServiceConfig.class, ProdDiagnosisKeyBundler.class},\n+    initializers = ConfigFileApplicationContextInitializer.class)\n+class ProdDiagnosisKeyBundlerExpiryPolicyTest {\n+\n+  @Autowired\n+  DistributionServiceConfig distributionServiceConfig;\n+\n+  @Autowired\n+  DiagnosisKeyBundler bundler;\n+\n+  @ParameterizedTest\n+  @ValueSource(longs = {0L, 24L, 24L + 2L})\n+  void testLastPeriodOfHourAndSubmissionLessThanDistributionDateTime(long submissionTimestamp) {\n+    List<DiagnosisKey> diagnosisKeys = Helpers.buildDiagnosisKeys(5, submissionTimestamp, 10);\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 2, 3, 0, 0))).hasSize(10);\n+  }\n+\n+  @Test\n+  void testLastPeriodOfHourAndSubmissionEqualsDistributionDateTime() {\n+    List<DiagnosisKey> diagnosisKeys = Helpers.buildDiagnosisKeys(5, 24L + 3L, 10);\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 2, 3, 0, 0))).hasSize(10);\n+  }\n+\n+  @ParameterizedTest\n+  @ValueSource(longs = {0L, 24L, 24L + 2L, 24L + 3L})\n+  void testFirstPeriodOfHourAndSubmissionLessThanDistributionDateTime(long submissionTimestamp) {\n+    List<DiagnosisKey> diagnosisKeys = Helpers.buildDiagnosisKeys(6, submissionTimestamp, 10);\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 2, 4, 0, 0))).hasSize(10);\n+  }\n+\n+  @Test\n+  void testFirstPeriodOfHourAndSubmissionEqualsDistributionDateTime() {\n+    List<DiagnosisKey> diagnosisKeys = Helpers.buildDiagnosisKeys(6, 24L + 4L, 10);\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 2, 4, 0, 0))).hasSize(10);\n+  }\n+\n+  @Test\n+  void testLastPeriodOfHourAndSubmissionGreaterDistributionDateTime() {\n+    List<DiagnosisKey> diagnosisKeys = Helpers.buildDiagnosisKeys(5, 24L + 4L, 10);\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 2, 4, 0, 0))).hasSize(10);\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerKeyRetrievalTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerKeyRetrievalTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerKeyRetrievalTest.java\n@@ -0,0 +1,185 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;\n+\n+import static app.coronawarn.server.services.distribution.common.Helpers.buildDiagnosisKeys;\n+import static java.util.Collections.emptySet;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {DistributionServiceConfig.class, ProdDiagnosisKeyBundler.class},\n+    initializers = ConfigFileApplicationContextInitializer.class)\n+class ProdDiagnosisKeyBundlerKeyRetrievalTest {\n+\n+  @Autowired\n+  DistributionServiceConfig distributionServiceConfig;\n+\n+  @Autowired\n+  DiagnosisKeyBundler bundler;\n+\n+  @Test\n+  void testGetsAllDiagnosisKeys() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .of(buildDiagnosisKeys(6, 50L, 5), buildDiagnosisKeys(6, 51L, 5), buildDiagnosisKeys(6, 52L, 5))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getAllDiagnosisKeys()).hasSize(15);\n+  }\n+\n+  @Test\n+  void testGetDatesForEmptyList() {\n+    bundler.setDiagnosisKeys(emptySet(), LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDatesWithDistributableDiagnosisKeys()).isEmpty();\n+  }\n+\n+  @Test\n+  void testGetsDatesWithDistributableDiagnosisKeys() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .of(buildDiagnosisKeys(6, 26L, 5), buildDiagnosisKeys(6, 50L, 1), buildDiagnosisKeys(6, 74L, 5))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDatesWithDistributableDiagnosisKeys()).containsAll(List.of(\n+        LocalDate.of(1970, 1, 2),\n+        LocalDate.of(1970, 1, 4)\n+    ));\n+  }\n+\n+  @ParameterizedTest\n+  @MethodSource(\"createDiagnosisKeysForEpochDay0\")\n+  void testGetDatesForEpochDay0(Collection<DiagnosisKey> diagnosisKeys) {\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    var expDates = Set.of(LocalDate.ofEpochDay(2L));\n+    var actDates = bundler.getDatesWithDistributableDiagnosisKeys();\n+    assertThat(actDates).isEqualTo(expDates);\n+  }\n+\n+  private static Stream<Arguments> createDiagnosisKeysForEpochDay0() {\n+    return Stream.of(\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 0, 0), 5),\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 1, 0), 5),\n+        buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 23, 59, 59), 5)\n+    ).map(Arguments::of);\n+  }\n+\n+  @Test\n+  void testGetDatesFor2Days() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .of(buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 1, 0), 5),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 4, 1, 0), 5))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    var expDates = Set.of(LocalDate.ofEpochDay(2L), LocalDate.ofEpochDay(3L));\n+    assertThat(bundler.getDatesWithDistributableDiagnosisKeys()).isEqualTo(expDates);\n+  }\n+\n+  @Test\n+  void testGetHoursForEmptyList() {\n+    bundler.setDiagnosisKeys(emptySet(), LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getHoursWithDistributableDiagnosisKeys(LocalDate.of(1970, 1, 3))).isEmpty();\n+  }\n+\n+  @Test\n+  void testGetsHoursWithDistributableDiagnosisKeys() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .of(buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 2, 4, 0), 5),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 2, 5, 0), 1),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 2, 6, 0), 5))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getHoursWithDistributableDiagnosisKeys(LocalDate.of(1970, 1, 2))).containsAll(List.of(\n+        LocalDateTime.of(1970, 1, 2, 4, 0, 0),\n+        LocalDateTime.of(1970, 1, 2, 6, 0, 0)\n+    ));\n+  }\n+\n+  @Test\n+  void testGetsDiagnosisKeysForDate() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .of(buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 2, 2, 0), 5),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 2, 0), 1),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 4, 2, 0), 5))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 20, 0));\n+    assertThat(bundler.getDiagnosisKeysForDate(LocalDate.of(1970, 1, 1))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForDate(LocalDate.of(1970, 1, 2))).hasSize(5);\n+    assertThat(bundler.getDiagnosisKeysForDate(LocalDate.of(1970, 1, 3))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForDate(LocalDate.of(1970, 1, 4))).hasSize(6);\n+    assertThat(bundler.getDiagnosisKeysForDate(LocalDate.of(1970, 1, 5))).hasSize(0);\n+  }\n+\n+  @Test\n+  void testEmptyListWhenGettingDiagnosisKeysForDateBeforeEarliestDiagnosisKey() {\n+    List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 2, 4, 0), 5);\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForDate(LocalDate.of(1970, 1, 1))).hasSize(0);\n+  }\n+\n+  @Test\n+  void testGetsDiagnosisKeysForHour() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .of(buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 2, 4, 0), 5),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 2, 5, 0), 1),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 2, 6, 0), 5))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 2, 3, 0))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 2, 4, 0))).hasSize(5);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 2, 5, 0))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 2, 6, 0))).hasSize(6);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 2, 7, 0))).hasSize(0);\n+  }\n+\n+  @Test\n+  void testEmptyListWhenGettingDiagnosisKeysForHourBeforeEarliestDiagnosisKey() {\n+    List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 2, 4, 0), 5);\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 1, 0, 0, 0))).hasSize(0);\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerShiftingPolicyTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerShiftingPolicyTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerShiftingPolicyTest.java\n@@ -0,0 +1,121 @@\n+/*-\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;\n+\n+import static app.coronawarn.server.services.distribution.common.Helpers.buildDiagnosisKeys;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {DistributionServiceConfig.class, ProdDiagnosisKeyBundler.class},\n+    initializers = ConfigFileApplicationContextInitializer.class)\n+class ProdDiagnosisKeyBundlerShiftingPolicyTest {\n+\n+  @Autowired\n+  DistributionServiceConfig distributionServiceConfig;\n+\n+  @Autowired\n+  DiagnosisKeyBundler bundler;\n+\n+  @Test\n+  void testDoesNotShiftIfPackageSizeGreaterThanThreshold() {\n+    List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, 50L, 6);\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(6);\n+  }\n+\n+  @Test\n+  void testDoesNotShiftIfPackageSizeEqualsThreshold() {\n+    List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, 50L, 5);\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(5);\n+  }\n+\n+  @Test\n+  void testShiftsIfPackageSizeLessThanThreshold() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .concat(buildDiagnosisKeys(6, 50L, 4).stream(), buildDiagnosisKeys(6, 51L, 1).stream())\n+        .collect(Collectors.toList());\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 3, 0, 0))).hasSize(5);\n+  }\n+\n+  @Test\n+  void testShiftsSinceLastDistribution() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .of(buildDiagnosisKeys(6, 50L, 5), buildDiagnosisKeys(6, 51L, 2), buildDiagnosisKeys(6, 52L, 4))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(5);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 3, 0, 0))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 4, 0, 0))).hasSize(6);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 5, 0, 0))).hasSize(0);\n+  }\n+\n+  @Test\n+  void testShiftIncludesPreviouslyUndistributedKeys() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .concat(buildDiagnosisKeys(6, 50L, 1).stream(), buildDiagnosisKeys(6, 51L, 5).stream())\n+        .collect(Collectors.toList());\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 3, 0, 0))).hasSize(6);\n+  }\n+\n+  @Test\n+  void testShiftsSparseDistributions() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .of(buildDiagnosisKeys(6, 50L, 1), buildDiagnosisKeys(6, 51L, 1), buildDiagnosisKeys(6, 52L, 1),\n+            buildDiagnosisKeys(6, 53L, 0), buildDiagnosisKeys(6, 54L, 0), buildDiagnosisKeys(6, 55L, 1),\n+            buildDiagnosisKeys(6, 56L, 1))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 3, 0, 0))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 4, 0, 0))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 5, 0, 0))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 6, 0, 0))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 7, 0, 0))).hasSize(0);\n+    assertThat(bundler.getDiagnosisKeysForHour(LocalDateTime.of(1970, 1, 3, 8, 0, 0))).hasSize(5);\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerTest.java\ndeleted file mode 100644\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/ProdDiagnosisKeyBundlerTest.java\n+++ /dev/null\n@@ -1,190 +0,0 @@\n-/*-\n- * ---license-start\n- * Corona-Warn-App\n- * ---\n- * Copyright (C) 2020 SAP SE and all other contributors\n- * ---\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ---license-end\n- */\n-\n-package app.coronawarn.server.services.distribution.assembly.diagnosiskeys;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n-import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n-import java.time.LocalDateTime;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-import java.util.stream.Stream;\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.Nested;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit.jupiter.SpringExtension;\n-\n-@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n-@ExtendWith(SpringExtension.class)\n-@ContextConfiguration(classes = {DistributionServiceConfig.class, ProdDiagnosisKeyBundler.class},\n-    initializers = ConfigFileApplicationContextInitializer.class)\n-class ProdDiagnosisKeyBundlerTest {\n-\n-  @Autowired\n-  DistributionServiceConfig distributionServiceConfig;\n-\n-  @Autowired\n-  DiagnosisKeyBundler bundler;\n-\n-  @Test\n-  void testEmptyListWhenNoDiagnosisKeys() {\n-    bundler.setDiagnosisKeys(List.of());\n-    assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 1, 0, 0, 0))).hasSize(0);\n-  }\n-\n-  @Test\n-  void testEmptyListWhenGettingDistributableKeysBeforeEarliestDiagnosisKey() {\n-    List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, 50L, 5);\n-    bundler.setDiagnosisKeys(diagnosisKeys);\n-    assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 1, 0, 0, 0))).hasSize(0);\n-  }\n-\n-  @Nested\n-  @DisplayName(\"Expiry policy\")\n-  class ProdDiagnosisKeyBundlerExpiryPolicyTest {\n-\n-    @ParameterizedTest\n-    @ValueSource(longs = {0L, 24L, 24L + 2L})\n-    void testLastPeriodOfHourAndSubmissionLessThanDistributionDateTime(long submissionTimestamp) {\n-      List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(5, submissionTimestamp, 10);\n-      bundler.setDiagnosisKeys(diagnosisKeys);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 2, 3, 0, 0))).hasSize(10);\n-    }\n-\n-    @Test\n-    void testLastPeriodOfHourAndSubmissionEqualsDistributionDateTime() {\n-      List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(5, 24L + 3L, 10);\n-      bundler.setDiagnosisKeys(diagnosisKeys);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 2, 3, 0, 0))).hasSize(10);\n-    }\n-\n-    @ParameterizedTest\n-    @ValueSource(longs = {0L, 24L, 24L + 2L, 24L + 3L})\n-    void testFirstPeriodOfHourAndSubmissionLessThanDistributionDateTime(long submissionTimestamp) {\n-      List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, submissionTimestamp, 10);\n-      bundler.setDiagnosisKeys(diagnosisKeys);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 2, 4, 0, 0))).hasSize(10);\n-    }\n-\n-    @Test\n-    void testFirstPeriodOfHourAndSubmissionEqualsDistributionDateTime() {\n-      List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, 24L + 4L, 10);\n-      bundler.setDiagnosisKeys(diagnosisKeys);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 2, 4, 0, 0))).hasSize(10);\n-    }\n-\n-    @Test\n-    void testLastPeriodOfHourAndSubmissionGreaterDistributionDateTime() {\n-      List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(5, 24L + 4L, 10);\n-      bundler.setDiagnosisKeys(diagnosisKeys);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 2, 4, 0, 0))).hasSize(10);\n-    }\n-  }\n-\n-  @Nested\n-  @DisplayName(\"Shifting policy\")\n-  class ProdDiagnosisKeyBundlerShiftingPolicyTest {\n-\n-    @Test\n-    void testDoesNotShiftIfPackageSizeGreaterThanThreshold() {\n-      List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, 50L, 6);\n-      bundler.setDiagnosisKeys(diagnosisKeys);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(6);\n-    }\n-\n-    @Test\n-    void testDoesNotShiftIfPackageSizeEqualsThreshold() {\n-      List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, 50L, 5);\n-      bundler.setDiagnosisKeys(diagnosisKeys);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(5);\n-    }\n-\n-    @Test\n-    void testShiftsIfPackageSizeLessThanThreshold() {\n-      List<DiagnosisKey> diagnosisKeys = Stream\n-          .concat(buildDiagnosisKeys(6, 50L, 4).stream(), buildDiagnosisKeys(6, 51L, 1).stream())\n-          .collect(Collectors.toList());\n-      bundler.setDiagnosisKeys(diagnosisKeys);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(0);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 3, 0, 0))).hasSize(5);\n-    }\n-\n-    @Test\n-    void testShiftsSinceLastDistribution() {\n-      List<DiagnosisKey> diagnosisKeys = Stream\n-          .of(buildDiagnosisKeys(6, 50L, 5), buildDiagnosisKeys(6, 51L, 2), buildDiagnosisKeys(6, 52L, 4))\n-          .flatMap(List::stream)\n-          .collect(Collectors.toList());\n-      bundler.setDiagnosisKeys(diagnosisKeys);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(5);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 3, 0, 0))).hasSize(0);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 4, 0, 0))).hasSize(6);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 5, 0, 0))).hasSize(0);\n-    }\n-\n-    @Test\n-    void testShiftIncludesPreviouslyUndistributedKeys() {\n-      List<DiagnosisKey> diagnosisKeys = Stream\n-          .concat(buildDiagnosisKeys(6, 50L, 1).stream(), buildDiagnosisKeys(6, 51L, 5).stream())\n-          .collect(Collectors.toList());\n-      bundler.setDiagnosisKeys(diagnosisKeys);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(0);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 3, 0, 0))).hasSize(5);\n-    }\n-\n-    @Test\n-    void testShiftsSparseDistributions() {\n-      List<DiagnosisKey> diagnosisKeys = Stream\n-          .of(buildDiagnosisKeys(6, 50L, 1), buildDiagnosisKeys(6, 51L, 1), buildDiagnosisKeys(6, 52L, 1),\n-              buildDiagnosisKeys(6, 53L, 0), buildDiagnosisKeys(6, 54L, 0), buildDiagnosisKeys(6, 55L, 1),\n-              buildDiagnosisKeys(6, 56L, 1))\n-          .flatMap(List::stream)\n-          .collect(Collectors.toList());\n-      bundler.setDiagnosisKeys(diagnosisKeys);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 2, 0, 0))).hasSize(0);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 3, 0, 0))).hasSize(0);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 4, 0, 0))).hasSize(0);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 5, 0, 0))).hasSize(0);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 6, 0, 0))).hasSize(0);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 7, 0, 0))).hasSize(0);\n-      assertThat(bundler.getDiagnosisKeysDistributableAt(LocalDateTime.of(1970, 1, 3, 8, 0, 0))).hasSize(5);\n-    }\n-  }\n-\n-  public static List<DiagnosisKey> buildDiagnosisKeys(int startIntervalNumber, long submissionTimestamp, int number) {\n-    return IntStream.range(0, number)\n-        .mapToObj(__ -> DiagnosisKey.builder()\n-            .withKeyData(new byte[16])\n-            .withRollingStartIntervalNumber(startIntervalNumber)\n-            .withTransmissionRiskLevel(2)\n-            .withSubmissionTimestamp(submissionTimestamp).build())\n-        .collect(Collectors.toList());\n-  }\n-}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectoryTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectoryTest.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectoryTest.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/DiagnosisKeysDirectoryTest.java\n@@ -21,6 +21,7 @@\n package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory;\n \n import static app.coronawarn.server.services.distribution.common.Helpers.buildDiagnosisKeyForSubmissionTimestamp;\n+import static app.coronawarn.server.services.distribution.common.Helpers.buildDiagnosisKeys;\n import static java.lang.String.join;\n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -28,6 +29,7 @@\n import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DemoDiagnosisKeyBundler;\n import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.ProdDiagnosisKeyBundler;\n import app.coronawarn.server.services.distribution.assembly.structure.WritableOnDisk;\n import app.coronawarn.server.services.distribution.assembly.structure.directory.Directory;\n import app.coronawarn.server.services.distribution.assembly.structure.directory.DirectoryOnDisk;\n@@ -35,6 +37,7 @@\n import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n import java.io.File;\n import java.io.IOException;\n+import java.time.LocalDateTime;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Objects;\n@@ -81,17 +84,18 @@ void setupAll() throws IOException {\n     // 01.01.1970 - 00:00 UTC\n     long startTimestamp = 0;\n \n-    // Generate diagnosis keys covering 30 hours of submission timestamps\n-    // Until 02.01.1970 - 06:00 UTC -> 1 full day + 6 hours\n+    // Generate diagnosis keys covering 29 hours of submission timestamps (one gap)\n+    // Until 04.01.1970 - 06:00 UTC -> 1 full day + 5 hours\n     diagnosisKeys = IntStream.range(0, 30)\n-        .mapToObj(\n-            currentHour -> buildDiagnosisKeyForSubmissionTimestamp(startTimestamp + currentHour))\n+        .filter(currentHour -> currentHour != 20)\n+        .mapToObj(currentHour -> buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 0, 0).plusHours(currentHour), 5))\n+        .flatMap(List::stream)\n         .collect(Collectors.toList());\n   }\n \n   @Test\n   void checkBuildsTheCorrectDirectoryStructureWhenNoKeys() {\n-    DiagnosisKeyBundler bundler = new DemoDiagnosisKeyBundler(distributionServiceConfig);\n+    DiagnosisKeyBundler bundler = new ProdDiagnosisKeyBundler(distributionServiceConfig);\n     Directory<WritableOnDisk> directory = new DiagnosisKeysDirectory(bundler, cryptoProvider,\n         distributionServiceConfig);\n     parentDirectory.addWritable(directory);\n@@ -101,7 +105,6 @@ void checkBuildsTheCorrectDirectoryStructureWhenNoKeys() {\n     String s = File.separator;\n     Set<String> expectedFiles = Set.of(\n         join(s, \"diagnosis-keys\", \"country\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"index\"),\n         join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"index\")\n     );\n \n@@ -112,8 +115,8 @@ void checkBuildsTheCorrectDirectoryStructureWhenNoKeys() {\n \n   @Test\n   void checkBuildsTheCorrectDirectoryStructure() {\n-    DiagnosisKeyBundler bundler = new DemoDiagnosisKeyBundler(distributionServiceConfig);\n-    bundler.setDiagnosisKeys(diagnosisKeys);\n+    DiagnosisKeyBundler bundler = new ProdDiagnosisKeyBundler(distributionServiceConfig);\n+    bundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n     Directory<WritableOnDisk> directory = new DiagnosisKeysDirectory(bundler, cryptoProvider,\n         distributionServiceConfig);\n     parentDirectory.addWritable(directory);\n@@ -123,42 +126,41 @@ void checkBuildsTheCorrectDirectoryStructure() {\n     String s = File.separator;\n     Set<String> expectedFiles = Set.of(\n         join(s, \"diagnosis-keys\", \"country\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"index\"),\n         join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"0\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"1\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"2\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"3\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"4\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"5\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"6\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"7\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"8\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"9\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"10\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"11\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"12\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"13\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"14\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"15\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"16\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"17\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"18\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"19\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"20\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"21\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"22\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-01\", \"hour\", \"23\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-02\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-02\", \"hour\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-02\", \"hour\", \"0\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-02\", \"hour\", \"1\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-02\", \"hour\", \"2\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-02\", \"hour\", \"3\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-02\", \"hour\", \"4\", \"index\"),\n-        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-02\", \"hour\", \"5\", \"index\")\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"0\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"1\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"2\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"3\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"4\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"5\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"6\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"7\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"8\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"9\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"10\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"11\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"12\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"13\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"14\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"15\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"16\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"17\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"18\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"19\", \"index\"),\n+        // One missing\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"21\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"22\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-03\", \"hour\", \"23\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-04\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-04\", \"hour\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-04\", \"hour\", \"0\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-04\", \"hour\", \"1\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-04\", \"hour\", \"2\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-04\", \"hour\", \"3\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-04\", \"hour\", \"4\", \"index\"),\n+        join(s, \"diagnosis-keys\", \"country\", \"DE\", \"date\", \"1970-01-04\", \"hour\", \"5\", \"index\")\n     );\n \n     Set<String> actualFiles = getActualFiles(outputFile);\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateIndexingDecoratorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateIndexingDecoratorTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/DateIndexingDecoratorTest.java\n@@ -0,0 +1,106 @@\n+/*\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator;\n+\n+import static app.coronawarn.server.services.distribution.common.Helpers.buildDiagnosisKeys;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.ProdDiagnosisKeyBundler;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.DiagnosisKeysDateDirectory;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.DiagnosisKeysHourDirectory;\n+import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {CryptoProvider.class, DistributionServiceConfig.class},\n+    initializers = ConfigFileApplicationContextInitializer.class)\n+class DateIndexingDecoratorTest {\n+\n+  @Autowired\n+  DistributionServiceConfig distributionServiceConfig;\n+\n+  @Autowired\n+  CryptoProvider cryptoProvider;\n+\n+  private DiagnosisKeyBundler diagnosisKeyBundler;\n+\n+  @BeforeEach\n+  void setup() {\n+    diagnosisKeyBundler = new ProdDiagnosisKeyBundler(distributionServiceConfig);\n+  }\n+\n+  @Test\n+  void excludesEmptyDatesFromIndex() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .of(buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 0, 0), 5),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 4, 0, 0), 0),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 5, 0, 0), 5))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 6, 0, 0));\n+    DateIndexingDecorator decorator = makeDecoratedDateDirectory(diagnosisKeyBundler);\n+    decorator.prepare(new ImmutableStack<>().push(\"DE\"));\n+\n+    Set<LocalDate> index = decorator.getIndex(new ImmutableStack<>());\n+\n+    assertThat(index).contains(LocalDate.of(1970, 1, 3));\n+    assertThat(index).doesNotContain(LocalDate.of(1970, 1, 4));\n+    assertThat(index).contains(LocalDate.of(1970, 1, 5));\n+  }\n+\n+  @Test\n+  void excludesCurrentDateFromIndex() {\n+    List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 4, 0, 0), 5);\n+    diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    DateIndexingDecorator decorator = makeDecoratedDateDirectory(diagnosisKeyBundler);\n+    decorator.prepare(new ImmutableStack<>().push(\"DE\"));\n+\n+    Set<LocalDate> index = decorator.getIndex(new ImmutableStack<>());\n+\n+    assertThat(index).contains(LocalDate.of(1970, 1, 4));\n+    assertThat(index).doesNotContain(LocalDate.of(1970, 1, 5));\n+  }\n+\n+  private DateIndexingDecorator makeDecoratedDateDirectory(DiagnosisKeyBundler diagnosisKeyBundler) {\n+    return new DateIndexingDecorator(\n+        new DiagnosisKeysDateDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig),\n+        distributionServiceConfig\n+    );\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/HourIndexingDecoratorTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/HourIndexingDecoratorTest.java\nnew file mode 100644\n--- /dev/null\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/structure/directory/decorator/HourIndexingDecoratorTest.java\n@@ -0,0 +1,105 @@\n+/*\n+ * ---license-start\n+ * Corona-Warn-App\n+ * ---\n+ * Copyright (C) 2020 SAP SE and all other contributors\n+ * ---\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ---license-end\n+ */\n+\n+package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.decorator;\n+\n+import static app.coronawarn.server.services.distribution.common.Helpers.buildDiagnosisKeys;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n+import app.coronawarn.server.services.distribution.assembly.component.CryptoProvider;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.DiagnosisKeyBundler;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.ProdDiagnosisKeyBundler;\n+import app.coronawarn.server.services.distribution.assembly.diagnosiskeys.structure.directory.DiagnosisKeysHourDirectory;\n+import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n+import app.coronawarn.server.services.distribution.config.DistributionServiceConfig;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.test.context.ConfigFileApplicationContextInitializer;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@EnableConfigurationProperties(value = DistributionServiceConfig.class)\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {CryptoProvider.class, DistributionServiceConfig.class},\n+    initializers = ConfigFileApplicationContextInitializer.class)\n+class HourIndexingDecoratorTest {\n+\n+  @Autowired\n+  DistributionServiceConfig distributionServiceConfig;\n+\n+  @Autowired\n+  CryptoProvider cryptoProvider;\n+\n+  private DiagnosisKeyBundler diagnosisKeyBundler;\n+\n+  @BeforeEach\n+  void setup() {\n+    diagnosisKeyBundler = new ProdDiagnosisKeyBundler(distributionServiceConfig);\n+  }\n+\n+  @Test\n+  void excludesEmptyHoursFromIndex() {\n+    List<DiagnosisKey> diagnosisKeys = Stream\n+        .of(buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 4, 0), 5),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 5, 0), 0),\n+            buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 3, 6, 0), 5))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+    diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 0, 0));\n+    HourIndexingDecorator decorator = makeDecoratedHourDirectory(diagnosisKeyBundler);\n+    decorator.prepare(new ImmutableStack<>().push(\"DE\").push(LocalDate.of(1970, 1, 3)));\n+\n+    Set<LocalDateTime> index = decorator.getIndex(new ImmutableStack<>().push(LocalDate.of(1970, 1, 3)));\n+\n+    assertThat(index).contains(LocalDateTime.of(1970, 1, 3, 4, 0));\n+    assertThat(index).doesNotContain(LocalDateTime.of(1970, 1, 3, 5, 0));\n+    assertThat(index).contains(LocalDateTime.of(1970, 1, 3, 6, 0));\n+  }\n+\n+  @Test\n+  void excludesCurrentHourFromIndex() {\n+    List<DiagnosisKey> diagnosisKeys = buildDiagnosisKeys(6, LocalDateTime.of(1970, 1, 5, 0, 0), 5);\n+    diagnosisKeyBundler.setDiagnosisKeys(diagnosisKeys, LocalDateTime.of(1970, 1, 5, 1, 0));\n+    HourIndexingDecorator decorator = makeDecoratedHourDirectory(diagnosisKeyBundler);\n+    decorator.prepare(new ImmutableStack<>().push(\"DE\").push(LocalDate.of(1970, 1, 5)));\n+\n+    Set<LocalDateTime> index = decorator.getIndex(new ImmutableStack<>().push(LocalDate.of(1970, 1, 5)));\n+\n+    assertThat(index).contains(LocalDateTime.of(1970, 1, 5, 0, 0));\n+    assertThat(index).doesNotContain(LocalDateTime.of(1970, 1, 5, 1, 0));\n+  }\n+\n+  private HourIndexingDecorator makeDecoratedHourDirectory(DiagnosisKeyBundler diagnosisKeyBundler) {\n+    return new HourIndexingDecorator(\n+        new DiagnosisKeysHourDirectory(diagnosisKeyBundler, cryptoProvider, distributionServiceConfig),\n+        distributionServiceConfig\n+    );\n+  }\n+}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTimeTest.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTimeTest.java\ndeleted file mode 100644\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/assembly/diagnosiskeys/util/DateTimeTest.java\n+++ /dev/null\n@@ -1,103 +0,0 @@\n-/*-\n- * ---license-start\n- * Corona-Warn-App\n- * ---\n- * Copyright (C) 2020 SAP SE and all other contributors\n- * ---\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * ---license-end\n- */\n-\n-package app.coronawarn.server.services.distribution.assembly.diagnosiskeys.util;\n-\n-import static app.coronawarn.server.services.distribution.common.Helpers.buildDiagnosisKeyForDateTime;\n-import static java.util.Collections.emptyList;\n-import static java.util.Collections.emptySet;\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import app.coronawarn.server.common.persistence.domain.DiagnosisKey;\n-import app.coronawarn.server.services.distribution.common.Helpers;\n-import java.time.LocalDate;\n-import java.time.LocalDateTime;\n-import java.util.HashSet;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-\n-class DateTimeTest {\n-\n-  @Test\n-  void testGetDatesForEmptyList() {\n-    assertThat(DateTime.getDates(emptyList())).isEmpty();\n-  }\n-\n-  @ParameterizedTest\n-  @MethodSource(\"createDiagnosisKeysForEpochDay0\")\n-  void testGetDatesForEpochDay0(DiagnosisKey diagnosisKey) {\n-    var expDates = Set.of(LocalDate.ofEpochDay(0L));\n-    var actDates = DateTime.getDates(Set.of(diagnosisKey));\n-\n-    assertThat(actDates)\n-        .withFailMessage(\n-            \"Failed for submission timestamp: \" + diagnosisKey.getSubmissionTimestamp())\n-        .isEqualTo(expDates);\n-  }\n-\n-  private static Stream<Arguments> createDiagnosisKeysForEpochDay0() {\n-    return Stream.of(\n-        buildDiagnosisKeyForDateTime(LocalDateTime.of(1970, 1, 1, 0, 0)),\n-        buildDiagnosisKeyForDateTime(LocalDateTime.of(1970, 1, 1, 1, 0)),\n-        buildDiagnosisKeyForDateTime(LocalDateTime.of(1970, 1, 1, 23, 59, 59))\n-    ).map(Arguments::of);\n-  }\n-\n-  @Test\n-  void testGetDatesFor2Days() {\n-    var diagnosisKeys = Set.of(\n-        buildDiagnosisKeyForDateTime(LocalDateTime.of(1970, 1, 1, 1, 0)),\n-        buildDiagnosisKeyForDateTime(LocalDateTime.of(1970, 1, 2, 1, 0)));\n-    var expDates = Set.of(LocalDate.ofEpochDay(0L), LocalDate.ofEpochDay(1L));\n-\n-    assertThat(DateTime.getDates(diagnosisKeys)).isEqualTo(expDates);\n-  }\n-\n-  @ParameterizedTest\n-  @MethodSource(\"createDiagnosisKeysForEpochDay1And3\")\n-  void testGetHoursReturnsHoursOnlyForSpecifiedDate(Set<DiagnosisKey> diagnosisKeys) {\n-    var expHours = Set.of(\n-        LocalDateTime.of(1970, 1, 2, 0, 0),\n-        LocalDateTime.of(1970, 1, 2, 5, 0));\n-\n-    var diagnosisKeysIncludingExpHours = new HashSet<>(diagnosisKeys);\n-    diagnosisKeysIncludingExpHours.addAll(expHours.stream()\n-        .map(Helpers::buildDiagnosisKeyForDateTime).collect(Collectors.toSet()));\n-\n-    var actHours = DateTime.getHours(LocalDate.ofEpochDay(1L), diagnosisKeysIncludingExpHours);\n-\n-    assertThat(actHours).isEqualTo(expHours);\n-  }\n-\n-  private static Stream<Arguments> createDiagnosisKeysForEpochDay1And3() {\n-    return Stream.of(\n-        emptySet(),\n-        Set.of(buildDiagnosisKeyForDateTime(LocalDateTime.of(1970, 1, 1, 23, 59))),\n-        Set.of(\n-            buildDiagnosisKeyForDateTime(LocalDateTime.of(1970, 1, 1, 23, 59, 59)),\n-            buildDiagnosisKeyForDateTime(LocalDateTime.of(1970, 1, 3, 0, 0)))\n-    ).map(Arguments::of);\n-  }\n-}\ndiff --git a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java\n--- a/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java\n+++ b/services/distribution/src/test/java/app/coronawarn/server/services/distribution/common/Helpers.java\n@@ -25,6 +25,9 @@\n import app.coronawarn.server.services.distribution.assembly.structure.util.ImmutableStack;\n import java.time.LocalDateTime;\n import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n \n public class Helpers {\n \n@@ -36,7 +39,7 @@ public static void prepareAndWrite(Directory directory) {\n   public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissionTimeStamp) {\n     return DiagnosisKey.builder()\n         .withKeyData(new byte[16])\n-        .withRollingStartIntervalNumber(600)\n+        .withRollingStartIntervalNumber(1)\n         .withTransmissionRiskLevel(2)\n         .withSubmissionTimestamp(submissionTimeStamp).build();\n   }\n@@ -44,4 +47,19 @@ public static DiagnosisKey buildDiagnosisKeyForSubmissionTimestamp(long submissi\n   public static DiagnosisKey buildDiagnosisKeyForDateTime(LocalDateTime dateTime) {\n     return buildDiagnosisKeyForSubmissionTimestamp(dateTime.toEpochSecond(ZoneOffset.UTC) / 3600);\n   }\n+\n+  public static List<DiagnosisKey> buildDiagnosisKeys(int startIntervalNumber, LocalDateTime submissionTimestamp, int number) {\n+    long timestamp = submissionTimestamp.toEpochSecond(ZoneOffset.UTC) / 3600;\n+    return buildDiagnosisKeys(startIntervalNumber, timestamp, number);\n+  }\n+\n+  public static List<DiagnosisKey> buildDiagnosisKeys(int startIntervalNumber, long submissionTimestamp, int number) {\n+    return IntStream.range(0, number)\n+        .mapToObj(__ -> DiagnosisKey.builder()\n+            .withKeyData(new byte[16])\n+            .withRollingStartIntervalNumber(startIntervalNumber)\n+            .withTransmissionRiskLevel(2)\n+            .withSubmissionTimestamp(submissionTimestamp).build())\n+        .collect(Collectors.toList());\n+  }\n }\n",
        "problem_statement": "Remove \"empty\" dates/hours from index files\n## Current Implementation\r\nAll dates/hours between the first submission and now (last full hour) are included in the index files, even if there were no submissions.\r\n\r\n## Suggested Enhancement\r\nOnly list dates/hours for which there were submissions in the index files. The \"empty\" date/hour files should, however, still be generated, even if they are not in the index.\r\n\r\n## Expected Benefits\r\nMobile clients need to do fewer requests (they can simply skip empty dates/hours).\n",
        "hints_text": "Why should the empty files still be generated?\nBasically to attest that there were really no submissions in that time window (and that the distribution run didn't just fail). Since we are not (yet) signing index files, I guess the best we can do is to just create and sign the empty exports.",
        "created_at": "2020-06-03T16:28:18Z"
    }
]